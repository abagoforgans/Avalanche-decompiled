contract main {




// =====================  Runtime code  =====================


#
#  - sub_29df86c1(?)
#  - safeBatchTransferFrom(address arg1, address arg2, uint256[] arg3, uint256[] arg4, bytes arg5)
#
mapping of uint256 balanceOf;
mapping of uint8 stor1;
array of struct stor2;
address owner;
uint256 stor4;
uint8 stor5;
uint8 stor5; offset 8
address managerAddress; offset 16
uint256 stor5; offset 8
address pairAddress;
address sub_85adc8b0Address;
address swapAddress;
uint256 stor9;
uint256 stor10;
uint256 stor11;
uint256 stor12;
uint256 sub_f468fba8;
array of struct stor14;
mapping of struct stor15;
array of uint256 sub_627dd5ca;
array of uint256 stor84800337471693920904250232874319843718400766719524250287777680170677855896574;
array of uint256 stor84800337471693920904250232874319843718400766719524250287777680170677855896575;
array of uint256 stor84800337471693920904250232874319843718400766719524250287777680170677855896576;
array of uint256 stor84800337471693920904250232874319843718400766719524250287777680170677855896577;
array of uint256 stor84800337471693920904250232874319843718400766719524250287777680170677855896578;
array of uint256 stor84800337471693920904250232874319843718400766719524250287777680170677855896579;
array of uint256 stor84800337471693920904250232874319843718400766719524250287777680170677855896580;
array of uint256 stor84800337471693920904250232874319843718400766719524250287777680170677855896581;
array of uint256 stor84800337471693920904250232874319843718400766719524250287777680170677855896582;

function balanceOf(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: balance query for the zero address'
    return balanceOf[arg2][address(arg1)]
}

function sub_06551ca5(?) {
    return bool(uint8(stor5.field_0))
}

function manager() {
    return managerAddress
}

function isPresaleActive() {
    return bool(uint8(stor5.field_0))
}

function sub_627dd5ca(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 < sub_627dd5ca[arg1]
    return sub_627dd5ca[arg1][arg2]
}

function swapAddress() {
    return swapAddress
}

function sub_85adc8b0(?) {
    return sub_85adc8b0Address
}

function owner() {
    return owner
}

function sub_a82f0131(?) {
    return bool(uint8(stor5.field_8))
}

function pairAddress() {
    return pairAddress
}

function isApprovedForAll(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return bool(stor1[address(arg1)][address(arg2)])
}

function sub_f468fba8(?) {
    return sub_f468fba8
}

function _fallback() payable {
    revert
}

function sub_83ec06b0(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor11 = arg1
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function sub_7fd1dc67(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_f468fba8 = arg1
}

function setManager(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    managerAddress = arg1
}

function setPresaleActive(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    uint8(stor5.field_0) = uint8(arg1)
}

function sub_3a687869(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(248, 0, stor5.field_8) = Mask(248, 0, bool(arg1))
}

function swapTokensForAVAX(uint256 arg1) {
    require calldata.size - 4 >= 32
    require ext_code.size(swapAddress)
    call swapAddress.0xef28fd9c with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function withdraw() {
    if stor4 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor4 = 2
    if managerAddress != msg.sender:
        revert with 0, 'only manager can call withdraw'
    call managerAddress with:
       value eth.balance(this.address) wei
         gas gas_remaining wei
    if not ext_call.success:
        revert with 0, 'Failed to send AVAX'
    stor4 = 1
}

function setApprovalForAll(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if msg.sender == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: setting approval status for self'
    stor1[address(msg.sender)][address(arg1)] = uint8(arg2)
    emit ApprovalForAll(arg2, msg.sender, arg1);
}

function sub_15889446(?) {
    require calldata.size - 4 >= 96
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require arg3 == address(arg3)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if address(arg1):
        pairAddress = address(arg1)
    if address(arg2):
        sub_85adc8b0Address = address(arg2)
    if address(arg3):
        swapAddress = address(arg3)
}

function supportsInterface(bytes4 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == Mask(32, 224, arg1)
    if 0xd9b67a2600000000000000000000000000000000000000000000000000000000 == Mask(32, 224, arg1):
        return True
    if 0xe89341c00000000000000000000000000000000000000000000000000000000 == Mask(32, 224, arg1):
        return True
    return (Mask(32, 224, arg1) == 0x1ffc9a700000000000000000000000000000000000000000000000000000000)
}

function sub_3ca21b7c(?) {
    require calldata.size - 4 >= 32
    if arg1 >= stor14.length:
        revert with 0, 50
    if not stor14[arg1].field_768:
        revert with 0, 18
    if not 10^9 / stor14[arg1].field_768 % 10:
        return (10^9 / stor14[arg1].field_768 / 10)
    if 10 > !(10^9 / stor14[arg1].field_768):
        revert with 0, 17
    if (10^9 / stor14[arg1].field_768) + 10 < 10^9 / stor14[arg1].field_768 % 10:
        revert with 0, 17
    return ((10^9 / stor14[arg1].field_768) + -(10^9 / stor14[arg1].field_768 % 10) + 10 / 10)
}

function sub_4d593bc5(?) {
    require calldata.size - 4 >= 32
    if stor4 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor4 = 2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(sub_85adc8b0Address)
    call sub_85adc8b0Address.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    stor4 = 1
}

function sub_ee98a528(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(arg1)]:
        if idx >= sub_627dd5ca[address(arg1)]:
            revert with 0, 50
        if stor15[stor16[address(arg1)][idx]].field_256 != arg2:
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 16
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = address(arg1)
        mem[32] = 16
        idx = idx + 1
        s = s + 1
        continue 
    return s
}

function sub_185aa308(?) {
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[18 len 14]:
        revert with 0, 18
    return (10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14])
}

function sub_221b1ce8(?) {
    require calldata.size - 4 >= 160
    if arg3 <= arg5:
        if arg4 and arg1 > -1 / arg4:
            revert with 0, 17
        return (arg4 * arg1)
    if arg3 < arg5:
        revert with 0, 17
    if arg3 < arg4:
        revert with 0, 17
    if arg3 - arg4 >= arg5:
        if arg2 and arg4 > -1 / arg2:
            revert with 0, 17
        return (arg2 * arg4)
    if arg3 < arg4:
        revert with 0, 17
    if arg5 < arg3 - arg4:
        revert with 0, 17
    if arg5 - arg3 + arg4 and arg1 > -1 / arg5 - arg3 + arg4:
        revert with 0, 17
    if arg2 and arg3 - arg5 > -1 / arg2:
        revert with 0, 17
    if (arg5 * arg1) - (arg3 * arg1) + (arg4 * arg1) > !((arg3 * arg2) - (arg5 * arg2)):
        revert with 0, 17
    return ((arg5 * arg1) - (arg3 * arg1) + (arg4 * arg1) + (arg3 * arg2) - (arg5 * arg2))
}

function sub_8955a0e6(?) {
    require calldata.size - 4 >= 32
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[18 len 14]:
        revert with 0, 18
    if arg1 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / arg1:
        revert with 0, 17
    if arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
        revert with 0, 17
    return (arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100)
}

function sub_32295c84(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    idx = 0
    s = 0
    while idx < stor14.length:
        if not address(arg1):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: balance query for the zero address'
        mem[0] = address(arg1)
        mem[32] = sha3(idx, 0)
        if balanceOf[idx][address(arg1)] <= 0:
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            continue 
        if idx >= stor14.length:
            revert with 0, 50
        if stor14[idx].field_1792 and stor14[idx].field_256 > -1 / stor14[idx].field_1792:
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if not address(arg1):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: balance query for the zero address'
        mem[0] = address(arg1)
        mem[32] = sha3(idx, 0)
        if balanceOf[idx][address(arg1)] and stor14[idx].field_1792 * stor14[idx].field_256 / stor9 > -1 / balanceOf[idx][address(arg1)]:
            revert with 0, 17
        if s > !(balanceOf[idx][address(arg1)] * stor14[idx].field_1792 * stor14[idx].field_256 / stor9):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s + (balanceOf[idx][address(arg1)] * stor14[idx].field_1792 * stor14[idx].field_256 / stor9)
        continue 
    return s
}

function sub_533f0e74(?) {
    require calldata.size - 4 >= 352
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    if arg2.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg2.length)) + 97 < 96 or ceil32(ceil32(arg2.length)) + 97 > test266151307():
        revert with 0, 65
    require arg2 + arg2.length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 >= stor14.length:
        revert with 0, 50
    if bool(stor14[arg1].field_0):
        if bool(stor14[arg1].field_0) == uint255(stor14[arg1].field_0) * 0.5 < 32:
            revert with 0, 34
        if arg2.length:
            stor14[arg1][].field_0 = Array(len=arg2.length, data=arg2[all])
        else:
            stor14[arg1].field_0 = 0
            idx = 0
            while (uint255(stor14[arg1].field_0) * 0.5) + 31 / 32 > idx:
                stor14[(10 * arg1) + idx].field_0 = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor14[arg1].field_0) == stor14[arg1].field_1 % 128 < 32:
            revert with 0, 34
        if arg2.length:
            stor14[arg1][].field_0 = Array(len=arg2.length, data=arg2[all])
        else:
            stor14[arg1].field_0 = 0
            idx = 0
            while stor14[arg1].field_1 % 128 + 31 / 32 > idx:
                stor14[(10 * arg1) + idx].field_0 = 0
                idx = idx + 1
                continue 
    stor14[arg1].field_256 = arg3
    stor14[arg1].field_512 = arg4
    stor14[arg1].field_768 = arg5
    stor14[arg1].field_1024 = arg6
    stor14[arg1].field_1280 = arg7
    stor14[arg1].field_1536 = arg8
    stor14[arg1].field_1792 = arg9
    stor14[arg1].field_2048 = arg10
    stor14[arg1].field_2304 = arg11
}

function sub_48980647(?) {
    require calldata.size - 4 >= 320
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg1.length)) + 97 < 96 or ceil32(ceil32(arg1.length)) + 97 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor14.length++
    if bool(stor14[stor14.length].field_0):
        if bool(stor14[stor14.length].field_0) == uint255(stor14[stor14.length].field_0) * 0.5 < 32:
            revert with 0, 34
        if arg1.length:
            stor14[stor14.length][].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor14[stor14.length].field_0 = 0
            idx = 0
            while (uint255(stor14[stor14.length].field_0) * 0.5) + 31 / 32 > idx:
                stor14[(10 * stor14.length) + idx].field_0 = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor14[stor14.length].field_0) == stor14[stor14.length].field_1 % 128 < 32:
            revert with 0, 34
        if arg1.length:
            stor14[stor14.length][].field_0 = Array(len=arg1.length, data=arg1[all])
        else:
            stor14[stor14.length].field_0 = 0
            idx = 0
            while stor14[stor14.length].field_1 % 128 + 31 / 32 > idx:
                stor14[(10 * stor14.length) + idx].field_0 = 0
                idx = idx + 1
                continue 
    storBB7B[stor14.length] = arg2
    storBB7B[stor14.length] = arg3
    storBB7B[stor14.length] = arg4
    storBB7B[stor14.length] = arg5
    storBB7B[stor14.length] = arg6
    storBB7B[stor14.length] = arg7
    storBB7B[stor14.length] = arg8
    storBB7B[stor14.length] = arg9
    storBB7B[stor14.length] = arg10
}

function balanceOfBatch(address[] arg1, uint256[] arg2) {
    require calldata.size - 4 >= 64
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(32 * arg1.length) + 97 < 96 or ceil32(32 * arg1.length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = arg1.length
    require calldata.size >= arg1 + (32 * arg1.length) + 36
    s = arg1 + 36
    t = 128
    idx = 0
    while idx < arg1.length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        idx = idx + 1
        continue 
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    if arg2.length > test266151307():
        revert with 0, 65
    if ceil32(32 * arg2.length) + 98 < 97 or ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 98 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * arg1.length) + 97] = arg2.length
    require calldata.size >= arg2 + (32 * arg2.length) + 36
    idx = 0
    s = arg2 + 36
    t = ceil32(32 * arg1.length) + 129
    while idx < arg2.length:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    if arg1.length != arg2.length:
        revert with 0, 'ERC1155: accounts and ids length mismatch'
    if arg1.length > test266151307():
        revert with 0, 65
    mem[ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 98] = arg1.length
    if arg1.length:
        mem[ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 130 len 32 * arg1.length] = call.data[calldata.size len 32 * arg1.length]
    idx = 0
    while idx < arg1.length:
        if idx >= arg1.length:
            revert with 0, 50
        if idx >= arg2.length:
            revert with 0, 50
        if not mem[(32 * idx) + 140 len 20]:
            revert with 0, 'ERC1155: balance query for the zero address'
        mem[0] = mem[(32 * idx) + 140 len 20]
        mem[32] = sha3(mem[(32 * idx) + ceil32(32 * arg1.length) + 129], 0)
        if idx >= arg1.length:
            revert with 0, 50
        mem[(32 * idx) + ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 130] = balanceOf[mem[(32 * idx) + ceil32(32 * arg1.length) + 129]][address(mem[(32 * idx) + 128])]
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    return Array(len=arg1.length, data=mem[ceil32(32 * arg1.length) + ceil32(32 * arg2.length) + 130 len 32 * arg1.length])
}

function sub_9600ac5b(?) {
    require calldata.size - 4 >= 32
    if bool(stor15[arg1].field_1536):
        if bool(stor15[arg1].field_1536) == uint255(stor15[arg1].field_1536) * 0.5 < 32:
            revert with 0, 34
        if bool(stor15[arg1].field_1536):
            if bool(stor15[arg1].field_1536) == uint255(stor15[arg1].field_1536) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor15[arg1].field_1536):
                if 31 >= uint255(stor15[arg1].field_1536) * 0.5:
                    mem[128] = 256 * Mask(248, 0, stor15[arg1].field_1544)
                else:
                    mem[128] = stor15[arg1][6].field_0
                    idx = 128
                    s = 0
                    while (uint255(stor15[arg1].field_1536) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor15[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        else:
            if bool(stor15[arg1].field_1536) == stor15[arg1].field_1537 % 128 < 32:
                revert with 0, 34
            if stor15[arg1].field_1537 % 128:
                if 31 >= stor15[arg1].field_1537 % 128:
                    mem[128] = 256 * Mask(248, 0, stor15[arg1].field_1544)
                else:
                    mem[128] = stor15[arg1][6].field_0
                    idx = 128
                    s = 0
                    while stor15[arg1].field_1537 % 128 + 96 > idx:
                        mem[idx + 32] = stor15[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        return address(stor15[arg1].field_0), 
               stor15[arg1].field_256,
               stor15[arg1].field_512,
               stor15[arg1].field_768,
               stor15[arg1].field_1024,
               stor15[arg1].field_1280,
               Array(len=2 * Mask(256, -1, stor15[arg1].field_1536), data=mem[128 len ceil32(uint255(stor15[arg1].field_1536) * 0.5)])
    if bool(stor15[arg1].field_1536) == stor15[arg1].field_1537 % 128 < 32:
        revert with 0, 34
    if bool(stor15[arg1].field_1536):
        if bool(stor15[arg1].field_1536) == uint255(stor15[arg1].field_1536) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor15[arg1].field_1536):
            if 31 >= uint255(stor15[arg1].field_1536) * 0.5:
                mem[128] = 256 * Mask(248, 0, stor15[arg1].field_1544)
            else:
                mem[128] = stor15[arg1][6].field_0
                idx = 128
                s = 0
                while (uint255(stor15[arg1].field_1536) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor15[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    else:
        if bool(stor15[arg1].field_1536) == stor15[arg1].field_1537 % 128 < 32:
            revert with 0, 34
        if stor15[arg1].field_1537 % 128:
            if 31 >= stor15[arg1].field_1537 % 128:
                mem[128] = 256 * Mask(248, 0, stor15[arg1].field_1544)
            else:
                mem[128] = stor15[arg1][6].field_0
                idx = 128
                s = 0
                while stor15[arg1].field_1537 % 128 + 96 > idx:
                    mem[idx + 32] = stor15[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    return address(stor15[arg1].field_0), 
           stor15[arg1].field_256,
           stor15[arg1].field_512,
           stor15[arg1].field_768,
           stor15[arg1].field_1024,
           stor15[arg1].field_1280,
           Array(len=stor15[arg1].field_1536 % 128, data=mem[128 len ceil32(stor15[arg1].field_1537 % 128)])
}

function sub_80c0f19b(?) {
    require calldata.size - 4 >= 32
    if bool(stor15[arg1].field_1536):
        if bool(stor15[arg1].field_1536) == uint255(stor15[arg1].field_1536) * 0.5 < 32:
            revert with 0, 34
        if bool(stor15[arg1].field_1536):
            if bool(stor15[arg1].field_1536) == uint255(stor15[arg1].field_1536) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor15[arg1].field_1536):
                if 31 >= uint255(stor15[arg1].field_1536) * 0.5:
                    mem[576] = 256 * Mask(248, 0, stor15[arg1].field_1544)
                else:
                    mem[576] = stor15[arg1][6].field_0
                    idx = 576
                    s = 0
                    while (uint255(stor15[arg1].field_1536) * 0.5) + 544 > idx:
                        mem[idx + 32] = stor15[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        else:
            if bool(stor15[arg1].field_1536) == stor15[arg1].field_1537 % 128 < 32:
                revert with 0, 34
            if stor15[arg1].field_1537 % 128:
                if 31 >= stor15[arg1].field_1537 % 128:
                    mem[576] = 256 * Mask(248, 0, stor15[arg1].field_1544)
                else:
                    mem[576] = stor15[arg1][6].field_0
                    idx = 576
                    s = 0
                    while stor15[arg1].field_1537 % 128 + 544 > idx:
                        mem[idx + 32] = stor15[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        return 32, address(stor15[arg1].field_0), 
               stor15[arg1].field_256,
               stor15[arg1].field_512,
               stor15[arg1].field_768,
               stor15[arg1].field_1024,
               stor15[arg1].field_1280,
               224,
               2 * Mask(256, -1, stor15[arg1].field_1536),
               mem[576 len ceil32(uint255(stor15[arg1].field_1536) * 0.5)]
    if bool(stor15[arg1].field_1536) == stor15[arg1].field_1537 % 128 < 32:
        revert with 0, 34
    if bool(stor15[arg1].field_1536):
        if bool(stor15[arg1].field_1536) == uint255(stor15[arg1].field_1536) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor15[arg1].field_1536):
            if 31 >= uint255(stor15[arg1].field_1536) * 0.5:
                mem[576] = 256 * Mask(248, 0, stor15[arg1].field_1544)
            else:
                mem[576] = stor15[arg1][6].field_0
                idx = 576
                s = 0
                while (uint255(stor15[arg1].field_1536) * 0.5) + 544 > idx:
                    mem[idx + 32] = stor15[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    else:
        if bool(stor15[arg1].field_1536) == stor15[arg1].field_1537 % 128 < 32:
            revert with 0, 34
        if stor15[arg1].field_1537 % 128:
            if 31 >= stor15[arg1].field_1537 % 128:
                mem[576] = 256 * Mask(248, 0, stor15[arg1].field_1544)
            else:
                mem[576] = stor15[arg1][6].field_0
                idx = 576
                s = 0
                while stor15[arg1].field_1537 % 128 + 544 > idx:
                    mem[idx + 32] = stor15[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    return 32, address(stor15[arg1].field_0), 
           stor15[arg1].field_256,
           stor15[arg1].field_512,
           stor15[arg1].field_768,
           stor15[arg1].field_1024,
           stor15[arg1].field_1280,
           224,
           stor15[arg1].field_1536 % 128,
           mem[576 len ceil32(stor15[arg1].field_1537 % 128)]
}

function collection(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 < stor14.length
    if bool(stor14[arg1].field_0):
        if bool(stor14[arg1].field_0) == uint255(stor14[arg1].field_0) * 0.5 < 32:
            revert with 0, 34
        if bool(stor14[arg1].field_0):
            if bool(stor14[arg1].field_0) == uint255(stor14[arg1].field_0) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor14[arg1].field_0):
                if 31 >= uint255(stor14[arg1].field_0) * 0.5:
                    mem[128] = 256 * Mask(248, 0, stor14[arg1].field_8)
                else:
                    mem[128] = stor14[arg1].field_0
                    idx = 128
                    s = 0
                    while (uint255(stor14[arg1].field_0) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor14[(10 * arg1) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        else:
            if bool(stor14[arg1].field_0) == stor14[arg1].field_1 % 128 < 32:
                revert with 0, 34
            if stor14[arg1].field_1 % 128:
                if 31 >= stor14[arg1].field_1 % 128:
                    mem[128] = 256 * Mask(248, 0, stor14[arg1].field_8)
                else:
                    mem[128] = stor14[arg1].field_0
                    idx = 128
                    s = 0
                    while stor14[arg1].field_1 % 128 + 96 > idx:
                        mem[idx + 32] = stor14[(10 * arg1) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        return Array(len=2 * Mask(256, -1, stor14[arg1].field_0), data=mem[128 len ceil32(uint255(stor14[arg1].field_0) * 0.5)]), 
               stor14[arg1].field_256,
               stor14[arg1].field_512,
               stor14[arg1].field_768,
               stor14[arg1].field_1024,
               stor14[arg1].field_1280,
               stor14[arg1].field_1536,
               stor14[arg1].field_1792,
               stor14[arg1].field_2048,
               stor14[arg1].field_2304
    if bool(stor14[arg1].field_0) == stor14[arg1].field_1 % 128 < 32:
        revert with 0, 34
    if bool(stor14[arg1].field_0):
        if bool(stor14[arg1].field_0) == uint255(stor14[arg1].field_0) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor14[arg1].field_0):
            if 31 >= uint255(stor14[arg1].field_0) * 0.5:
                mem[128] = 256 * Mask(248, 0, stor14[arg1].field_8)
            else:
                mem[128] = stor14[arg1].field_0
                idx = 128
                s = 0
                while (uint255(stor14[arg1].field_0) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor14[(10 * arg1) + s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    else:
        if bool(stor14[arg1].field_0) == stor14[arg1].field_1 % 128 < 32:
            revert with 0, 34
        if stor14[arg1].field_1 % 128:
            if 31 >= stor14[arg1].field_1 % 128:
                mem[128] = 256 * Mask(248, 0, stor14[arg1].field_8)
            else:
                mem[128] = stor14[arg1].field_0
                idx = 128
                s = 0
                while stor14[arg1].field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor14[(10 * arg1) + s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    return Array(len=stor14[arg1].field_0 % 128, data=mem[128 len ceil32(stor14[arg1].field_1 % 128)]), 
           stor14[arg1].field_256,
           stor14[arg1].field_512,
           stor14[arg1].field_768,
           stor14[arg1].field_1024,
           stor14[arg1].field_1280,
           stor14[arg1].field_1536,
           stor14[arg1].field_1792,
           stor14[arg1].field_2048,
           stor14[arg1].field_2304
}

function uri(uint256 arg1) {
    require calldata.size - 4 >= 32
    if bool(stor2.length):
        if bool(stor2.length) == uint255(stor2.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor2.length):
            if bool(stor2.length) == uint255(stor2.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor2.length):
                if 31 < uint255(stor2.length) * 0.5:
                    mem[128] = uint256(stor2.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor2.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor2[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor2.length), data=mem[128 len ceil32(uint255(stor2.length) * 0.5)])
                mem[128] = 256 * Mask(248, 0, stor2.length.field_8)
        else:
            if bool(stor2.length) == stor2.length.field_1 % 128 < 32:
                revert with 0, 34
            if stor2.length.field_1 % 128:
                if 31 < stor2.length.field_1 % 128:
                    mem[128] = uint256(stor2.field_0)
                    idx = 128
                    s = 0
                    while stor2.length.field_1 % 128 + 96 > idx:
                        mem[idx + 32] = stor2[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor2.length), data=mem[128 len ceil32(uint255(stor2.length) * 0.5)])
                mem[128] = 256 * Mask(248, 0, stor2.length.field_8)
        mem[ceil32(uint255(stor2.length) * 0.5) + 192 len ceil32(uint255(stor2.length) * 0.5)] = mem[128 len ceil32(uint255(stor2.length) * 0.5)]
        if ceil32(uint255(stor2.length) * 0.5) > uint255(stor2.length) * 0.5:
            mem[ceil32(uint255(stor2.length) * 0.5) + (uint255(stor2.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor2.length), data=mem[128 len ceil32(uint255(stor2.length) * 0.5)], mem[(2 * ceil32(uint255(stor2.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor2.length) * 0.5)]), 
    if bool(stor2.length) == stor2.length.field_1 % 128 < 32:
        revert with 0, 34
    if bool(stor2.length):
        if bool(stor2.length) == uint255(stor2.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor2.length):
            if 31 < uint255(stor2.length) * 0.5:
                mem[128] = uint256(stor2.field_0)
                idx = 128
                s = 0
                while (uint255(stor2.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor2[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor2.length % 128, data=mem[128 len ceil32(stor2.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor2.length.field_8)
    else:
        if bool(stor2.length) == stor2.length.field_1 % 128 < 32:
            revert with 0, 34
        if stor2.length.field_1 % 128:
            if 31 < stor2.length.field_1 % 128:
                mem[128] = uint256(stor2.field_0)
                idx = 128
                s = 0
                while stor2.length.field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor2[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor2.length % 128, data=mem[128 len ceil32(stor2.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor2.length.field_8)
    mem[ceil32(stor2.length.field_1 % 128) + 192 len ceil32(stor2.length.field_1 % 128)] = mem[128 len ceil32(stor2.length.field_1 % 128)]
    if ceil32(stor2.length.field_1 % 128) > stor2.length.field_1 % 128:
        mem[ceil32(stor2.length.field_1 % 128) + stor2.length.field_1 % 128 + 192] = 0
    return Array(len=stor2.length % 128, data=mem[128 len ceil32(stor2.length.field_1 % 128)], mem[(2 * ceil32(stor2.length.field_1 % 128)) + 192 len 2 * ceil32(stor2.length.field_1 % 128)]), 
}

function mint(uint256 arg1, uint256 arg2, string arg3) {
    require calldata.size - 4 >= 96
    require arg3 <= test266151307()
    require arg3 + 35 < calldata.size
    require arg3.length <= test266151307()
    require arg3 + arg3.length + 36 <= calldata.size
    if arg1 >= stor14.length:
        revert with 0, 50
    if stor14[arg1].field_2048 > stor14[arg1].field_512:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'all of this collection are purchased'
    if arg1 >= stor14.length:
        revert with 0, 50
    if stor14[arg1].field_2048 > !arg2:
        revert with 0, 17
    if stor14[arg1].field_2048 + arg2 > stor14[arg1].field_512:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'there is not enought nodes to sell'
    if arg1 >= stor14.length:
        revert with 0, 50
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if stor15[stor16[address(msg.sender)][idx]].field_256 != arg1:
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 16
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 16
        idx = idx + 1
        s = s + 1
        continue 
    if s >= stor14[arg1].field_2304:
        revert with 0, 'minted nodes exceed amount limit'
    if arg1 >= stor14.length:
        revert with 0, 50
    mem[32] = 16
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if stor15[stor16[address(msg.sender)][idx]].field_256 != arg1:
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 16
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 16
        idx = idx + 1
        s = s + 1
        continue 
    if s > !arg2:
        revert with 0, 17
    if s + arg2 >= stor14[arg1].field_2304:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'you will exceed nodes amount limit'
    if arg1 >= stor14.length:
        revert with 0, 50
    if stor14[arg1].field_256 and arg2 > -1 / stor14[arg1].field_256:
        revert with 0, 17
    mem[100] = msg.sender
    require ext_code.size(sub_85adc8b0Address)
    staticcall sub_85adc8b0Address.0x70a08231 with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not uint8(stor5.field_0):
        if ext_call.return_data[0] < stor14[arg1].field_256 * arg2:
            revert with 0, 'receiver's balance is less than node price'
        if arg1 >= stor14.length:
            revert with 0, 50
        if stor14[arg1].field_256 and arg2 > -1 / stor14[arg1].field_256:
            revert with 0, 17
        mem[ceil32(return_data.size) + 100] = msg.sender
        mem[ceil32(return_data.size) + 132] = this.address
        if not uint8(stor5.field_0):
            mem[ceil32(return_data.size) + 164] = stor14[arg1].field_256 * arg2
            require ext_code.size(sub_85adc8b0Address)
            call sub_85adc8b0Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor14[arg1].field_256 * arg2
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            idx = 0
            while idx < arg2:
                if 1 > !stor10:
                    revert with 0, 17
                if stor10 == -1:
                    revert with 0, 17
                stor10++
                mem[32] = 15
                stor15[stor10 + 1].field_0 = msg.sender or Mask(96, 160, stor15[stor10 + 1].field_0)
                stor15[stor10 + 1].field_256 = arg1
                stor15[stor10 + 1].field_512 = block.timestamp
                stor15[stor10 + 1].field_768 = block.timestamp
                if bool(stor15[stor10 + 1].field_1536):
                    if bool(stor15[stor10 + 1].field_1536) == uint255(stor15[stor10 + 1].field_1536) * 0.5 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor15[stor10 + 1].field_1536 = 0
                        s = sha3(sha3(stor10 + 1, 15) + 6)
                        while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor15[stor10 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor10 + 1, 15) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                else:
                    if bool(stor15[stor10 + 1].field_1536) == stor15[stor10 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor15[stor10 + 1].field_1536 = 0
                        s = sha3(sha3(stor10 + 1, 15) + 6)
                        while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor15[stor10 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor10 + 1, 15) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                if arg3.length:
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = arg3.length
                    mem[mem[64] + 64 len arg3.length] = arg3[all]
                    mem[arg3.length + mem[64] + 64] = 0
                    emit 0x626bb7ff: Array(len=arg3.length, data=arg3[all]), stor10 + 1
                mem[32] = 16
                sub_627dd5ca[msg.sender]++
                mem[0] = sha3(msg.sender, 16)
                sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor10 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 >= stor14.length:
                revert with 0, 50
            mem[0] = 14
            if stor14[arg1].field_2048 > !arg2:
                revert with 0, 17
            stor14[arg1].field_2048 += arg2
            _1828 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1828] = 0
            if not msg.sender:
                revert with 0, 'ERC1155: mint to the zero address'
            _1836 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_1836]:
                revert with 0, 50
            mem[_1836 + 32] = arg1
            mem[_1836 + 64] = 1
            mem[_1836 + 96] = arg2
            if balanceOf[arg1][address(msg.sender)] > !arg2:
                revert with 0, 17
            balanceOf[arg1][address(msg.sender)] += arg2
            emit 0xfec3d581: arg1, arg2, msg.sender, 0, msg.sender
            if not ext_code.size(msg.sender):
            mem[_1836 + 132] = msg.sender
            mem[_1836 + 164] = 0
            mem[_1836 + 196] = arg1
            mem[_1836 + 228] = arg2
            mem[_1836 + 260] = 160
            mem[_1836 + 292] = 0
            mem[_1836 + 324 len 0] = None
            require ext_code.size(msg.sender)
            call msg.sender.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                 gas gas_remaining wei
                args msg.sender, 0, arg1, arg2, 160, 0
            mem[_1836 + 128] = ext_call.return_data[0]
            if ext_call.success:
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
            if return_data.size <= 3:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[0 len 4] = ext_call.return_data[0 len 4]
            if uint32(msg.sender) >> 224 != Error(string arg1):
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if return_data.size < 68:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[_1836 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
            if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if mem[_1836 + ext_call.return_data[0] + 128] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if ext_call.return_data[0] + mem[_1836 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if floor32(ext_call.return_data[0] + mem[_1836 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _1836 + floor32(ext_call.return_data[0] + mem[_1836 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
                revert with 0, 65
            mem[64] = _1836 + floor32(ext_call.return_data[0] + mem[_1836 + ext_call.return_data[0] + 128] + 31) + 129
            if not _1836 + ext_call.return_data[0] + 128:
                _2816 = _1836 + floor32(ext_call.return_data[0] + mem[_1836 + ext_call.return_data[0] + 128] + 31) + 129
                mem[_1836 + floor32(ext_call.return_data[0] + mem[_1836 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 52
                mem[_2816 + 68] = 'ERC1155: transfer to non ERC1155'
                mem[_2816 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
                revert with memory
                  from mem[64]
                   len _2816 + -mem[64] + 132
            _2808 = _1836 + floor32(ext_call.return_data[0] + mem[_1836 + ext_call.return_data[0] + 128] + 31) + 129
            mem[_1836 + floor32(ext_call.return_data[0] + mem[_1836 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            _2824 = mem[_1836 + ext_call.return_data[0] + 128]
            mem[mem[64] + 36] = mem[_1836 + ext_call.return_data[0] + 128]
            mem[_2808 + 68 len ceil32(_2824)] = mem[_1836 + ext_call.return_data[0] + 160 len ceil32(_2824)]
            if ceil32(_2824) > _2824:
                mem[_2808 + _2824 + 68] = 0
            revert with memory
              from mem[64]
               len ceil32(_2824) + _2808 + -mem[64] + 68
        mem[ceil32(return_data.size) + 164] = stor14[arg1].field_256 * arg2 / 2
        require ext_code.size(sub_85adc8b0Address)
        call sub_85adc8b0Address.0x23b872dd with:
             gas gas_remaining wei
            args msg.sender, address(this.address), stor14[arg1].field_256 * arg2 / 2
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        idx = 0
        while idx < arg2:
            if 1 > !stor10:
                revert with 0, 17
            if stor10 == -1:
                revert with 0, 17
            stor10++
            mem[32] = 15
            stor15[stor10 + 1].field_0 = msg.sender or Mask(96, 160, stor15[stor10 + 1].field_0)
            stor15[stor10 + 1].field_256 = arg1
            stor15[stor10 + 1].field_512 = block.timestamp
            stor15[stor10 + 1].field_768 = block.timestamp
            if bool(stor15[stor10 + 1].field_1536):
                if bool(stor15[stor10 + 1].field_1536) == uint255(stor15[stor10 + 1].field_1536) * 0.5 < 32:
                    revert with 0, 34
                if not arg3.length:
                    stor15[stor10 + 1].field_1536 = 0
                    s = sha3(sha3(stor10 + 1, 15) + 6)
                    while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor15[stor10 + 1].field_1536 = (2 * arg3.length) + 1
                    t = sha3(sha3(stor10 + 1, 15) + 6)
                    s = arg3 + 36
                    while arg3 + arg3.length + 36 > s:
                        stor[t] = cd[s]
                        t = t + 1
                        s = s + 32
                        continue 
                    s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                    while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
            else:
                if bool(stor15[stor10 + 1].field_1536) == stor15[stor10 + 1].field_1537 % 128 < 32:
                    revert with 0, 34
                if not arg3.length:
                    stor15[stor10 + 1].field_1536 = 0
                    s = sha3(sha3(stor10 + 1, 15) + 6)
                    while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor15[stor10 + 1].field_1536 = (2 * arg3.length) + 1
                    t = sha3(sha3(stor10 + 1, 15) + 6)
                    s = arg3 + 36
                    while arg3 + arg3.length + 36 > s:
                        stor[t] = cd[s]
                        t = t + 1
                        s = s + 32
                        continue 
                    s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                    while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
            if arg3.length:
                mem[mem[64]] = 32
                mem[mem[64] + 32] = arg3.length
                mem[mem[64] + 64 len arg3.length] = arg3[all]
                mem[arg3.length + mem[64] + 64] = 0
                emit 0x626bb7ff: Array(len=arg3.length, data=arg3[all]), stor10 + 1
            mem[32] = 16
            sub_627dd5ca[msg.sender]++
            mem[0] = sha3(msg.sender, 16)
            sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor10 + 1
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if arg1 >= stor14.length:
            revert with 0, 50
        mem[0] = 14
        if stor14[arg1].field_2048 > !arg2:
            revert with 0, 17
        stor14[arg1].field_2048 += arg2
        _1829 = mem[64]
        mem[64] = mem[64] + 32
        mem[_1829] = 0
        if not msg.sender:
            revert with 0, 'ERC1155: mint to the zero address'
        _1839 = mem[64]
        mem[mem[64]] = 1
        mem[64] = mem[64] + 64
        if 0 >= mem[_1839]:
            revert with 0, 50
        mem[_1839 + 32] = arg1
        mem[_1839 + 64] = 1
        mem[_1839 + 96] = arg2
        if balanceOf[arg1][address(msg.sender)] > !arg2:
            revert with 0, 17
        balanceOf[arg1][address(msg.sender)] += arg2
        emit 0xfec3d581: arg1, arg2, msg.sender, 0, msg.sender
        if not ext_code.size(msg.sender):
        mem[_1839 + 132] = msg.sender
        mem[_1839 + 164] = 0
        mem[_1839 + 196] = arg1
        mem[_1839 + 228] = arg2
        mem[_1839 + 260] = 160
        mem[_1839 + 292] = 0
        mem[_1839 + 324 len 0] = None
        require ext_code.size(msg.sender)
        call msg.sender.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
             gas gas_remaining wei
            args msg.sender, 0, arg1, arg2, 160, 0
        mem[_1839 + 128] = ext_call.return_data[0]
        if ext_call.success:
            require return_data.size >= 32
            require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
            if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
        if return_data.size <= 3:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[0 len 4] = ext_call.return_data[0 len 4]
        if uint32(msg.sender) >> 224 != Error(string arg1):
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if return_data.size < 68:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[_1839 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
        if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if mem[_1839 + ext_call.return_data[0] + 128] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if ext_call.return_data[0] + mem[_1839 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if floor32(ext_call.return_data[0] + mem[_1839 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _1839 + floor32(ext_call.return_data[0] + mem[_1839 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
            revert with 0, 65
        mem[64] = _1839 + floor32(ext_call.return_data[0] + mem[_1839 + ext_call.return_data[0] + 128] + 31) + 129
        if not _1839 + ext_call.return_data[0] + 128:
            _2818 = _1839 + floor32(ext_call.return_data[0] + mem[_1839 + ext_call.return_data[0] + 128] + 31) + 129
            mem[_1839 + floor32(ext_call.return_data[0] + mem[_1839 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 52
            mem[_2818 + 68] = 'ERC1155: transfer to non ERC1155'
            mem[_2818 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
            revert with memory
              from mem[64]
               len _2818 + -mem[64] + 132
        _2810 = _1839 + floor32(ext_call.return_data[0] + mem[_1839 + ext_call.return_data[0] + 128] + 31) + 129
        mem[_1839 + floor32(ext_call.return_data[0] + mem[_1839 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        _2827 = mem[_1839 + ext_call.return_data[0] + 128]
        mem[mem[64] + 36] = mem[_1839 + ext_call.return_data[0] + 128]
        mem[_2810 + 68 len ceil32(_2827)] = mem[_1839 + ext_call.return_data[0] + 160 len ceil32(_2827)]
        if ceil32(_2827) > _2827:
            mem[_2810 + _2827 + 68] = 0
        revert with memory
          from mem[64]
           len ceil32(_2827) + _2810 + -mem[64] + 68
    if ext_call.return_data[0] < stor14[arg1].field_256 * arg2 / 2:
        revert with 0, 'receiver's balance is less than node price'
    if arg1 >= stor14.length:
        revert with 0, 50
    if stor14[arg1].field_256 and arg2 > -1 / stor14[arg1].field_256:
        revert with 0, 17
    mem[ceil32(return_data.size) + 100] = msg.sender
    mem[ceil32(return_data.size) + 132] = this.address
    if not uint8(stor5.field_0):
        mem[ceil32(return_data.size) + 164] = stor14[arg1].field_256 * arg2
        require ext_code.size(sub_85adc8b0Address)
        call sub_85adc8b0Address.0x23b872dd with:
             gas gas_remaining wei
            args msg.sender, address(this.address), stor14[arg1].field_256 * arg2
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[64] = (2 * ceil32(return_data.size)) + 96
        require return_data.size >= 32
        require ext_call.return_data[0] == bool(ext_call.return_data[0])
        idx = 0
        while idx < arg2:
            if 1 > !stor10:
                revert with 0, 17
            if stor10 == -1:
                revert with 0, 17
            stor10++
            mem[32] = 15
            stor15[stor10 + 1].field_0 = msg.sender or Mask(96, 160, stor15[stor10 + 1].field_0)
            stor15[stor10 + 1].field_256 = arg1
            stor15[stor10 + 1].field_512 = block.timestamp
            stor15[stor10 + 1].field_768 = block.timestamp
            if bool(stor15[stor10 + 1].field_1536):
                if bool(stor15[stor10 + 1].field_1536) == uint255(stor15[stor10 + 1].field_1536) * 0.5 < 32:
                    revert with 0, 34
                if not arg3.length:
                    stor15[stor10 + 1].field_1536 = 0
                    s = sha3(sha3(stor10 + 1, 15) + 6)
                    while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor15[stor10 + 1].field_1536 = (2 * arg3.length) + 1
                    t = sha3(sha3(stor10 + 1, 15) + 6)
                    s = arg3 + 36
                    while arg3 + arg3.length + 36 > s:
                        stor[t] = cd[s]
                        t = t + 1
                        s = s + 32
                        continue 
                    s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                    while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
            else:
                if bool(stor15[stor10 + 1].field_1536) == stor15[stor10 + 1].field_1537 % 128 < 32:
                    revert with 0, 34
                if not arg3.length:
                    stor15[stor10 + 1].field_1536 = 0
                    s = sha3(sha3(stor10 + 1, 15) + 6)
                    while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor15[stor10 + 1].field_1536 = (2 * arg3.length) + 1
                    t = sha3(sha3(stor10 + 1, 15) + 6)
                    s = arg3 + 36
                    while arg3 + arg3.length + 36 > s:
                        stor[t] = cd[s]
                        t = t + 1
                        s = s + 32
                        continue 
                    s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                    while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
            if arg3.length:
                mem[mem[64]] = 32
                mem[mem[64] + 32] = arg3.length
                mem[mem[64] + 64 len arg3.length] = arg3[all]
                mem[arg3.length + mem[64] + 64] = 0
                emit 0x626bb7ff: Array(len=arg3.length, data=arg3[all]), stor10 + 1
            mem[32] = 16
            sub_627dd5ca[msg.sender]++
            mem[0] = sha3(msg.sender, 16)
            sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor10 + 1
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if arg1 >= stor14.length:
            revert with 0, 50
        mem[0] = 14
        if stor14[arg1].field_2048 > !arg2:
            revert with 0, 17
        stor14[arg1].field_2048 += arg2
        _1830 = mem[64]
        mem[64] = mem[64] + 32
        mem[_1830] = 0
        if not msg.sender:
            revert with 0, 'ERC1155: mint to the zero address'
        _1842 = mem[64]
        mem[mem[64]] = 1
        mem[64] = mem[64] + 64
        if 0 >= mem[_1842]:
            revert with 0, 50
        mem[_1842 + 32] = arg1
        mem[_1842 + 64] = 1
        mem[_1842 + 96] = arg2
        if balanceOf[arg1][address(msg.sender)] > !arg2:
            revert with 0, 17
        balanceOf[arg1][address(msg.sender)] += arg2
        emit 0xfec3d581: arg1, arg2, msg.sender, 0, msg.sender
        if not ext_code.size(msg.sender):
        mem[_1842 + 132] = msg.sender
        mem[_1842 + 164] = 0
        mem[_1842 + 196] = arg1
        mem[_1842 + 228] = arg2
        mem[_1842 + 260] = 160
        mem[_1842 + 292] = 0
        mem[_1842 + 324 len 0] = None
        require ext_code.size(msg.sender)
        call msg.sender.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
             gas gas_remaining wei
            args msg.sender, 0, arg1, arg2, 160, 0
        mem[_1842 + 128] = ext_call.return_data[0]
        if ext_call.success:
            require return_data.size >= 32
            require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
            if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
        if return_data.size <= 3:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[0 len 4] = ext_call.return_data[0 len 4]
        if uint32(msg.sender) >> 224 != Error(string arg1):
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if return_data.size < 68:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[_1842 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
        if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if mem[_1842 + ext_call.return_data[0] + 128] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if ext_call.return_data[0] + mem[_1842 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if floor32(ext_call.return_data[0] + mem[_1842 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _1842 + floor32(ext_call.return_data[0] + mem[_1842 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
            revert with 0, 65
        mem[64] = _1842 + floor32(ext_call.return_data[0] + mem[_1842 + ext_call.return_data[0] + 128] + 31) + 129
        if not _1842 + ext_call.return_data[0] + 128:
            _2820 = _1842 + floor32(ext_call.return_data[0] + mem[_1842 + ext_call.return_data[0] + 128] + 31) + 129
            mem[_1842 + floor32(ext_call.return_data[0] + mem[_1842 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 52
            mem[_2820 + 68] = 'ERC1155: transfer to non ERC1155'
            mem[_2820 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
            revert with memory
              from mem[64]
               len _2820 + -mem[64] + 132
        _2812 = _1842 + floor32(ext_call.return_data[0] + mem[_1842 + ext_call.return_data[0] + 128] + 31) + 129
        mem[_1842 + floor32(ext_call.return_data[0] + mem[_1842 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        _2830 = mem[_1842 + ext_call.return_data[0] + 128]
        mem[mem[64] + 36] = mem[_1842 + ext_call.return_data[0] + 128]
        mem[_2812 + 68 len ceil32(_2830)] = mem[_1842 + ext_call.return_data[0] + 160 len ceil32(_2830)]
        if ceil32(_2830) > _2830:
            mem[_2812 + _2830 + 68] = 0
        revert with memory
          from mem[64]
           len ceil32(_2830) + _2812 + -mem[64] + 68
    mem[ceil32(return_data.size) + 164] = stor14[arg1].field_256 * arg2 / 2
    require ext_code.size(sub_85adc8b0Address)
    call sub_85adc8b0Address.0x23b872dd with:
         gas gas_remaining wei
        args msg.sender, address(this.address), stor14[arg1].field_256 * arg2 / 2
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    idx = 0
    while idx < arg2:
        if 1 > !stor10:
            revert with 0, 17
        if stor10 == -1:
            revert with 0, 17
        stor10++
        mem[32] = 15
        stor15[stor10 + 1].field_0 = msg.sender or Mask(96, 160, stor15[stor10 + 1].field_0)
        stor15[stor10 + 1].field_256 = arg1
        stor15[stor10 + 1].field_512 = block.timestamp
        stor15[stor10 + 1].field_768 = block.timestamp
        if bool(stor15[stor10 + 1].field_1536):
            if bool(stor15[stor10 + 1].field_1536) == uint255(stor15[stor10 + 1].field_1536) * 0.5 < 32:
                revert with 0, 34
            if not arg3.length:
                stor15[stor10 + 1].field_1536 = 0
                s = sha3(sha3(stor10 + 1, 15) + 6)
                while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                    stor[s] = 0
                    s = s + 1
                    continue 
            else:
                stor15[stor10 + 1].field_1536 = (2 * arg3.length) + 1
                t = sha3(sha3(stor10 + 1, 15) + 6)
                s = arg3 + 36
                while arg3 + arg3.length + 36 > s:
                    stor[t] = cd[s]
                    t = t + 1
                    s = s + 32
                    continue 
                s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                    stor[s] = 0
                    s = s + 1
                    continue 
        else:
            if bool(stor15[stor10 + 1].field_1536) == stor15[stor10 + 1].field_1537 % 128 < 32:
                revert with 0, 34
            if not arg3.length:
                stor15[stor10 + 1].field_1536 = 0
                s = sha3(sha3(stor10 + 1, 15) + 6)
                while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
                    stor[s] = 0
                    s = s + 1
                    continue 
            else:
                stor15[stor10 + 1].field_1536 = (2 * arg3.length) + 1
                t = sha3(sha3(stor10 + 1, 15) + 6)
                s = arg3 + 36
                while arg3 + arg3.length + 36 > s:
                    stor[t] = cd[s]
                    t = t + 1
                    s = s + 32
                    continue 
                s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
                    stor[s] = 0
                    s = s + 1
                    continue 
        if arg3.length:
            mem[mem[64]] = 32
            mem[mem[64] + 32] = arg3.length
            mem[mem[64] + 64 len arg3.length] = arg3[all]
            mem[arg3.length + mem[64] + 64] = 0
            emit 0x626bb7ff: Array(len=arg3.length, data=arg3[all]), stor10 + 1
        mem[32] = 16
        sub_627dd5ca[msg.sender]++
        mem[0] = sha3(msg.sender, 16)
        sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor10 + 1
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    if arg1 >= stor14.length:
        revert with 0, 50
    mem[0] = 14
    if stor14[arg1].field_2048 > !arg2:
        revert with 0, 17
    stor14[arg1].field_2048 += arg2
    _1831 = mem[64]
    mem[64] = mem[64] + 32
    mem[_1831] = 0
    if not msg.sender:
        revert with 0, 'ERC1155: mint to the zero address'
    _1845 = mem[64]
    mem[mem[64]] = 1
    mem[64] = mem[64] + 64
    if 0 >= mem[_1845]:
        revert with 0, 50
    mem[_1845 + 32] = arg1
    mem[_1845 + 64] = 1
    mem[_1845 + 96] = arg2
    if balanceOf[arg1][address(msg.sender)] > !arg2:
        revert with 0, 17
    balanceOf[arg1][address(msg.sender)] += arg2
    emit 0xfec3d581: arg1, arg2, msg.sender, 0, msg.sender
    if not ext_code.size(msg.sender):
    mem[_1845 + 132] = msg.sender
    mem[_1845 + 164] = 0
    mem[_1845 + 196] = arg1
    mem[_1845 + 228] = arg2
    mem[_1845 + 260] = 160
    mem[_1845 + 292] = 0
    mem[_1845 + 324 len 0] = None
    require ext_code.size(msg.sender)
    call msg.sender.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
         gas gas_remaining wei
        args msg.sender, 0, arg1, arg2, 160, 0
    mem[_1845 + 128] = ext_call.return_data[0]
    if ext_call.success:
        require return_data.size >= 32
        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
        if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
            revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
    if return_data.size <= 3:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    mem[0 len 4] = ext_call.return_data[0 len 4]
    if uint32(msg.sender) >> 224 != Error(string arg1):
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if return_data.size < 68:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    mem[_1845 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
    if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if mem[_1845 + ext_call.return_data[0] + 128] > test266151307():
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if ext_call.return_data[0] + mem[_1845 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if floor32(ext_call.return_data[0] + mem[_1845 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _1845 + floor32(ext_call.return_data[0] + mem[_1845 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
        revert with 0, 65
    mem[64] = _1845 + floor32(ext_call.return_data[0] + mem[_1845 + ext_call.return_data[0] + 128] + 31) + 129
    if not _1845 + ext_call.return_data[0] + 128:
        _2822 = _1845 + floor32(ext_call.return_data[0] + mem[_1845 + ext_call.return_data[0] + 128] + 31) + 129
        mem[_1845 + floor32(ext_call.return_data[0] + mem[_1845 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 52
        mem[_2822 + 68] = 'ERC1155: transfer to non ERC1155'
        mem[_2822 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
        revert with memory
          from mem[64]
           len _2822 + -mem[64] + 132
    _2814 = _1845 + floor32(ext_call.return_data[0] + mem[_1845 + ext_call.return_data[0] + 128] + 31) + 129
    mem[_1845 + floor32(ext_call.return_data[0] + mem[_1845 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = 32
    _2833 = mem[_1845 + ext_call.return_data[0] + 128]
    mem[mem[64] + 36] = mem[_1845 + ext_call.return_data[0] + 128]
    mem[_2814 + 68 len ceil32(_2833)] = mem[_1845 + ext_call.return_data[0] + 160 len ceil32(_2833)]
    if ceil32(_2833) > _2833:
        mem[_2814 + _2833 + 68] = 0
    revert with memory
      from mem[64]
       len ceil32(_2833) + _2814 + -mem[64] + 68
}

function sub_3dbd5b25(?) payable {
    mem[64] = 96
    require not msg.value
    require calldata.size - 4 >= 128
    require cd[4] == address(cd[4])
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    require ('cd', 100).length <= test266151307()
    require cd[100] + ('cd', 100).length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    idx = 0
    while idx < cd[68]:
        if cd[36] >= stor14.length:
            revert with 0, 50
        if stor14[cd[36]].field_2048 > stor14[cd[36]].field_512:
            revert with 0, 'all of this collection are purchased'
        if cd[36] >= stor14.length:
            revert with 0, 50
        s = 0
        t = 0
        while s < sub_627dd5ca[address(cd[4])]:
            if s >= sub_627dd5ca[address(cd[4])]:
                revert with 0, 50
            if stor15[stor16[address(cd[4])][s]].field_256 != cd[36]:
                if s == -1:
                    revert with 0, 17
                mem[0] = address(cd[4])
                mem[32] = 16
                s = s + 1
                t = t
                continue 
            if t == -1:
                revert with 0, 17
            if s == -1:
                revert with 0, 17
            mem[0] = address(cd[4])
            mem[32] = 16
            s = s + 1
            t = t + 1
            continue 
        if t >= stor14[cd[36]].field_2304:
            revert with 0, 'minted nodes exceed amount limit'
        if 1 > !stor10:
            revert with 0, 17
        if stor10 == -1:
            revert with 0, 17
        stor10++
        mem[32] = 15
        address(stor15[stor10 + 1].field_0) = address(cd[4])
        stor15[stor10 + 1].field_256 = cd[36]
        stor15[stor10 + 1].field_512 = block.timestamp
        stor15[stor10 + 1].field_768 = block.timestamp
        if bool(stor15[stor10 + 1].field_1536):
            if bool(stor15[stor10 + 1].field_1536) == uint255(stor15[stor10 + 1].field_1536) * 0.5 < 32:
                revert with 0, 34
            if not ('cd', 100).length:
                stor15[stor10 + 1].field_1536 = 0
                s = sha3(sha3(stor10 + 1, 15) + 6)
                while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                    stor[s] = 0
                    s = s + 1
                    continue 
                if cd[36] >= stor14.length:
                    revert with 0, 50
                mem[0] = 14
                if stor14[cd[36]].field_2048 == -1:
                    revert with 0, 17
                stor14[cd[36]].field_2048++
                if not ('cd', 100).length:
                    _3920 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_3920] = 0
                    if not address(cd[4]):
                        revert with 0, 'ERC1155: mint to the zero address'
                    _3960 = mem[64]
                    mem[mem[64]] = 1
                    mem[64] = mem[64] + 64
                    if 0 >= mem[_3960]:
                        revert with 0, 50
                    mem[_3960 + 32] = cd[36]
                    mem[_3960 + 64] = 1
                    mem[64] = _3960 + 128
                    mem[_3960 + 96] = 1
                    mem[32] = sha3(cd[36], 0)
                    if balanceOf[cd[36]][address(cd[4])] > -2:
                        revert with 0, 17
                    balanceOf[cd[36]][address(cd[4])]++
                    mem[_3960 + 128] = cd[36]
                    mem[_3960 + 160] = 1
                    emit 0xfec3d581: cd[36], 1, msg.sender, 0, address(cd[4])
                    if not ext_code.size(address(cd[4])):
                        mem[32] = 16
                        sub_627dd5ca[address(cd[4])]++
                        mem[0] = sha3(address(cd[4]), 16)
                        sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    mem[_3960 + 128] = 0xf23a6e6100000000000000000000000000000000000000000000000000000000
                    mem[_3960 + 132] = msg.sender
                    mem[_3960 + 164] = 0
                    mem[_3960 + 196] = cd[36]
                    mem[_3960 + 228] = 1
                    mem[_3960 + 260] = 160
                    mem[_3960 + 292] = 0
                    s = 0
                    while s < 0:
                        mem[s + _3960 + 324] = mem[_3920 + s + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(address(cd[4]))
                    call address(cd[4]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                         gas gas_remaining wei
                        args msg.sender, 0, cd[36], 1, 160, 0
                    mem[_3960 + 128] = ext_call.return_data[0]
                    if ext_call.success:
                        mem[64] = _3960 + ceil32(return_data.size) + 128
                        require return_data.size >= 32
                        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                        if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                            revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                        mem[32] = 16
                        sub_627dd5ca[address(cd[4])]++
                        mem[0] = sha3(address(cd[4]), 16)
                        sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if return_data.size <= 3:
                        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                    mem[0 len 4] = ext_call.return_data[0 len 4]
                    if uint32(cd[4]) >> 224 != Error(string arg1):
                        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                    if return_data.size < 68:
                        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                    mem[_3960 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
                    if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
                        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                    if mem[_3960 + ext_call.return_data[0] + 128] > test266151307():
                        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                    if ext_call.return_data[0] + mem[_3960 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
                        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                    if floor32(ext_call.return_data[0] + mem[_3960 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _3960 + floor32(ext_call.return_data[0] + mem[_3960 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
                        revert with 0, 65
                    mem[64] = _3960 + floor32(ext_call.return_data[0] + mem[_3960 + ext_call.return_data[0] + 128] + 31) + 129
                    if not _3960 + ext_call.return_data[0] + 128:
                        _5834 = _3960 + floor32(ext_call.return_data[0] + mem[_3960 + ext_call.return_data[0] + 128] + 31) + 129
                        mem[_3960 + floor32(ext_call.return_data[0] + mem[_3960 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 52
                        mem[_5834 + 68] = 'ERC1155: transfer to non ERC1155'
                        mem[_5834 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
                        revert with memory
                          from mem[64]
                           len _5834 + -mem[64] + 132
                    _5806 = _3960 + floor32(ext_call.return_data[0] + mem[_3960 + ext_call.return_data[0] + 128] + 31) + 129
                    mem[_3960 + floor32(ext_call.return_data[0] + mem[_3960 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    _5867 = mem[_3960 + ext_call.return_data[0] + 128]
                    mem[mem[64] + 36] = mem[_3960 + ext_call.return_data[0] + 128]
                    idx = 0
                    while idx < _5867:
                        mem[idx + _5806 + 68] = mem[_3960 + ext_call.return_data[0] + idx + 160]
                        idx = idx + 32
                        continue 
                    if ceil32(_5867) > _5867:
                        mem[_5806 + _5867 + 68] = 0
                    revert with memory
                      from mem[64]
                       len ceil32(_5867) + _5806 + -mem[64] + 68
                mem[0] = 14
                mem[mem[64] + 32] = ('cd', 100).length
                mem[mem[64] + 64 len ('cd', 100).length] = call.data[cd[100] + 36 len ('cd', 100).length]
                mem[('cd', 100).length + mem[64] + 64] = 0
                emit 0x626bb7ff: Array(len=('cd', 100).length, data=call.data[cd[100] + 36 len ('cd', 100).length]), stor10 + 1
                _3963 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3963] = 0
                if not address(cd[4]):
                    revert with 0, 'ERC1155: mint to the zero address'
                _4006 = mem[64]
                mem[mem[64]] = 1
                mem[64] = mem[64] + 64
                if 0 >= mem[_4006]:
                    revert with 0, 50
                mem[_4006 + 32] = cd[36]
                mem[_4006 + 64] = 1
                mem[64] = _4006 + 128
                mem[_4006 + 96] = 1
                mem[32] = sha3(cd[36], 0)
                if balanceOf[cd[36]][address(cd[4])] > -2:
                    revert with 0, 17
                balanceOf[cd[36]][address(cd[4])]++
                mem[_4006 + 128] = cd[36]
                mem[_4006 + 160] = 1
                emit 0xfec3d581: cd[36], 1, msg.sender, 0, address(cd[4])
                if not ext_code.size(address(cd[4])):
                    mem[32] = 16
                    sub_627dd5ca[address(cd[4])]++
                    mem[0] = sha3(address(cd[4]), 16)
                    sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                mem[_4006 + 128] = 0xf23a6e6100000000000000000000000000000000000000000000000000000000
                mem[_4006 + 132] = msg.sender
                mem[_4006 + 164] = 0
                mem[_4006 + 196] = cd[36]
                mem[_4006 + 228] = 1
                mem[_4006 + 260] = 160
                mem[_4006 + 292] = 0
                s = 0
                while s < 0:
                    mem[s + _4006 + 324] = mem[_3963 + s + 32]
                    s = s + 32
                    continue 
                require ext_code.size(address(cd[4]))
                call address(cd[4]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, 0, cd[36], 1, 160, 0
                mem[_4006 + 128] = ext_call.return_data[0]
                if ext_call.success:
                    mem[64] = _4006 + ceil32(return_data.size) + 128
                    require return_data.size >= 32
                    require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                    if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                        revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                    mem[32] = 16
                    sub_627dd5ca[address(cd[4])]++
                    mem[0] = sha3(address(cd[4]), 16)
                    sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if return_data.size <= 3:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[0 len 4] = ext_call.return_data[0 len 4]
                if uint32(cd[4]) >> 224 != Error(string arg1):
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if return_data.size < 68:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[_4006 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
                if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if mem[_4006 + ext_call.return_data[0] + 128] > test266151307():
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if ext_call.return_data[0] + mem[_4006 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if floor32(ext_call.return_data[0] + mem[_4006 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _4006 + floor32(ext_call.return_data[0] + mem[_4006 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = _4006 + floor32(ext_call.return_data[0] + mem[_4006 + ext_call.return_data[0] + 128] + 31) + 129
                if not _4006 + ext_call.return_data[0] + 128:
                    _5836 = _4006 + floor32(ext_call.return_data[0] + mem[_4006 + ext_call.return_data[0] + 128] + 31) + 129
                    mem[_4006 + floor32(ext_call.return_data[0] + mem[_4006 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 52
                    mem[_5836 + 68] = 'ERC1155: transfer to non ERC1155'
                    mem[_5836 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
                    revert with memory
                      from mem[64]
                       len _5836 + -mem[64] + 132
                _5808 = _4006 + floor32(ext_call.return_data[0] + mem[_4006 + ext_call.return_data[0] + 128] + 31) + 129
                mem[_4006 + floor32(ext_call.return_data[0] + mem[_4006 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                _5870 = mem[_4006 + ext_call.return_data[0] + 128]
                mem[mem[64] + 36] = mem[_4006 + ext_call.return_data[0] + 128]
                idx = 0
                while idx < _5870:
                    mem[idx + _5808 + 68] = mem[_4006 + ext_call.return_data[0] + idx + 160]
                    idx = idx + 32
                    continue 
                if ceil32(_5870) > _5870:
                    mem[_5808 + _5870 + 68] = 0
                revert with memory
                  from mem[64]
                   len ceil32(_5870) + _5808 + -mem[64] + 68
            stor15[stor10 + 1].field_1536 = (2 * ('cd', 100).length) + 1
            t = sha3(sha3(stor10 + 1, 15) + 6)
            s = cd[100] + 36
            while cd[100] + ('cd', 100).length + 36 > s:
                stor[t] = cd[s]
                t = t + 1
                s = s + 32
                continue 
            s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, ('cd', 100).length + 31) >> 5)
            while sha3(sha3(stor10 + 1, 15) + 6) + ((uint255(stor15[stor10 + 1].field_1536) * 0.5) + 31 / 32) > s:
                stor[s] = 0
                s = s + 1
                continue 
            if cd[36] >= stor14.length:
                revert with 0, 50
            mem[0] = 14
            if stor14[cd[36]].field_2048 == -1:
                revert with 0, 17
            stor14[cd[36]].field_2048++
            if not ('cd', 100).length:
                _5256 = mem[64]
                mem[64] = mem[64] + 32
                mem[_5256] = 0
                if not address(cd[4]):
                    revert with 0, 'ERC1155: mint to the zero address'
                _5314 = mem[64]
                mem[mem[64]] = 1
                mem[64] = mem[64] + 64
                if 0 >= mem[_5314]:
                    revert with 0, 50
                mem[_5314 + 32] = cd[36]
                mem[_5314 + 64] = 1
                mem[64] = _5314 + 128
                mem[_5314 + 96] = 1
                mem[32] = sha3(cd[36], 0)
                if balanceOf[cd[36]][address(cd[4])] > -2:
                    revert with 0, 17
                balanceOf[cd[36]][address(cd[4])]++
                mem[_5314 + 128] = cd[36]
                mem[_5314 + 160] = 1
                emit 0xfec3d581: cd[36], 1, msg.sender, 0, address(cd[4])
                if not ext_code.size(address(cd[4])):
                    mem[32] = 16
                    sub_627dd5ca[address(cd[4])]++
                    mem[0] = sha3(address(cd[4]), 16)
                    sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                mem[_5314 + 128] = 0xf23a6e6100000000000000000000000000000000000000000000000000000000
                mem[_5314 + 132] = msg.sender
                mem[_5314 + 164] = 0
                mem[_5314 + 196] = cd[36]
                mem[_5314 + 228] = 1
                mem[_5314 + 260] = 160
                mem[_5314 + 292] = 0
                s = 0
                while s < 0:
                    mem[s + _5314 + 324] = mem[_5256 + s + 32]
                    s = s + 32
                    continue 
                require ext_code.size(address(cd[4]))
                call address(cd[4]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, 0, cd[36], 1, 160, 0
                mem[_5314 + 128] = ext_call.return_data[0]
                if ext_call.success:
                    mem[64] = _5314 + ceil32(return_data.size) + 128
                    require return_data.size >= 32
                    require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                    if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                        revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                    mem[32] = 16
                    sub_627dd5ca[address(cd[4])]++
                    mem[0] = sha3(address(cd[4]), 16)
                    sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if return_data.size <= 3:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[0 len 4] = ext_call.return_data[0 len 4]
                if uint32(cd[4]) >> 224 != Error(string arg1):
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if return_data.size < 68:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[_5314 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
                if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if mem[_5314 + ext_call.return_data[0] + 128] > test266151307():
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if ext_call.return_data[0] + mem[_5314 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if floor32(ext_call.return_data[0] + mem[_5314 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _5314 + floor32(ext_call.return_data[0] + mem[_5314 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = _5314 + floor32(ext_call.return_data[0] + mem[_5314 + ext_call.return_data[0] + 128] + 31) + 129
                if not _5314 + ext_call.return_data[0] + 128:
                    _6510 = _5314 + floor32(ext_call.return_data[0] + mem[_5314 + ext_call.return_data[0] + 128] + 31) + 129
                    mem[_5314 + floor32(ext_call.return_data[0] + mem[_5314 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 52
                    mem[_6510 + 68] = 'ERC1155: transfer to non ERC1155'
                    mem[_6510 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
                    revert with memory
                      from mem[64]
                       len _6510 + -mem[64] + 132
                _6502 = _5314 + floor32(ext_call.return_data[0] + mem[_5314 + ext_call.return_data[0] + 128] + 31) + 129
                mem[_5314 + floor32(ext_call.return_data[0] + mem[_5314 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                _6518 = mem[_5314 + ext_call.return_data[0] + 128]
                mem[mem[64] + 36] = mem[_5314 + ext_call.return_data[0] + 128]
                idx = 0
                while idx < _6518:
                    mem[idx + _6502 + 68] = mem[_5314 + ext_call.return_data[0] + idx + 160]
                    idx = idx + 32
                    continue 
                if ceil32(_6518) > _6518:
                    mem[_6502 + _6518 + 68] = 0
                revert with memory
                  from mem[64]
                   len ceil32(_6518) + _6502 + -mem[64] + 68
            mem[0] = 14
            mem[mem[64] + 32] = ('cd', 100).length
            mem[mem[64] + 64 len ('cd', 100).length] = call.data[cd[100] + 36 len ('cd', 100).length]
            mem[('cd', 100).length + mem[64] + 64] = 0
            emit 0x626bb7ff: Array(len=('cd', 100).length, data=call.data[cd[100] + 36 len ('cd', 100).length]), stor10 + 1
            _5317 = mem[64]
            mem[64] = mem[64] + 32
            mem[_5317] = 0
            if not address(cd[4]):
                revert with 0, 'ERC1155: mint to the zero address'
            _5384 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_5384]:
                revert with 0, 50
            mem[_5384 + 32] = cd[36]
            mem[_5384 + 64] = 1
            mem[64] = _5384 + 128
            mem[_5384 + 96] = 1
            mem[32] = sha3(cd[36], 0)
            if balanceOf[cd[36]][address(cd[4])] > -2:
                revert with 0, 17
            balanceOf[cd[36]][address(cd[4])]++
            mem[_5384 + 128] = cd[36]
            mem[_5384 + 160] = 1
            emit 0xfec3d581: cd[36], 1, msg.sender, 0, address(cd[4])
            if not ext_code.size(address(cd[4])):
                mem[32] = 16
                sub_627dd5ca[address(cd[4])]++
                mem[0] = sha3(address(cd[4]), 16)
                sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            mem[_5384 + 128] = 0xf23a6e6100000000000000000000000000000000000000000000000000000000
            mem[_5384 + 132] = msg.sender
            mem[_5384 + 164] = 0
            mem[_5384 + 196] = cd[36]
            mem[_5384 + 228] = 1
            mem[_5384 + 260] = 160
            mem[_5384 + 292] = 0
            s = 0
            while s < 0:
                mem[s + _5384 + 324] = mem[_5317 + s + 32]
                s = s + 32
                continue 
            require ext_code.size(address(cd[4]))
            call address(cd[4]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                 gas gas_remaining wei
                args msg.sender, 0, cd[36], 1, 160, 0
            mem[_5384 + 128] = ext_call.return_data[0]
            if ext_call.success:
                mem[64] = _5384 + ceil32(return_data.size) + 128
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[32] = 16
                sub_627dd5ca[address(cd[4])]++
                mem[0] = sha3(address(cd[4]), 16)
                sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if return_data.size <= 3:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[0 len 4] = ext_call.return_data[0 len 4]
            if uint32(cd[4]) >> 224 != Error(string arg1):
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if return_data.size < 68:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[_5384 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
            if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if mem[_5384 + ext_call.return_data[0] + 128] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if ext_call.return_data[0] + mem[_5384 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if floor32(ext_call.return_data[0] + mem[_5384 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _5384 + floor32(ext_call.return_data[0] + mem[_5384 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
                revert with 0, 65
            mem[64] = _5384 + floor32(ext_call.return_data[0] + mem[_5384 + ext_call.return_data[0] + 128] + 31) + 129
            if not _5384 + ext_call.return_data[0] + 128:
                _6512 = _5384 + floor32(ext_call.return_data[0] + mem[_5384 + ext_call.return_data[0] + 128] + 31) + 129
                mem[_5384 + floor32(ext_call.return_data[0] + mem[_5384 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 52
                mem[_6512 + 68] = 'ERC1155: transfer to non ERC1155'
                mem[_6512 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
                revert with memory
                  from mem[64]
                   len _6512 + -mem[64] + 132
            _6504 = _5384 + floor32(ext_call.return_data[0] + mem[_5384 + ext_call.return_data[0] + 128] + 31) + 129
            mem[_5384 + floor32(ext_call.return_data[0] + mem[_5384 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            _6521 = mem[_5384 + ext_call.return_data[0] + 128]
            mem[mem[64] + 36] = mem[_5384 + ext_call.return_data[0] + 128]
            idx = 0
            while idx < _6521:
                mem[idx + _6504 + 68] = mem[_5384 + ext_call.return_data[0] + idx + 160]
                idx = idx + 32
                continue 
            if ceil32(_6521) > _6521:
                mem[_6504 + _6521 + 68] = 0
            revert with memory
              from mem[64]
               len ceil32(_6521) + _6504 + -mem[64] + 68
        if bool(stor15[stor10 + 1].field_1536) == stor15[stor10 + 1].field_1537 % 128 < 32:
            revert with 0, 34
        if not ('cd', 100).length:
            stor15[stor10 + 1].field_1536 = 0
            s = sha3(sha3(stor10 + 1, 15) + 6)
            while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
                stor[s] = 0
                s = s + 1
                continue 
            if cd[36] >= stor14.length:
                revert with 0, 50
            mem[0] = 14
            if stor14[cd[36]].field_2048 == -1:
                revert with 0, 17
            stor14[cd[36]].field_2048++
            if not ('cd', 100).length:
                _3932 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3932] = 0
                if not address(cd[4]):
                    revert with 0, 'ERC1155: mint to the zero address'
                _3976 = mem[64]
                mem[mem[64]] = 1
                mem[64] = mem[64] + 64
                if 0 >= mem[_3976]:
                    revert with 0, 50
                mem[_3976 + 32] = cd[36]
                mem[_3976 + 64] = 1
                mem[64] = _3976 + 128
                mem[_3976 + 96] = 1
                mem[32] = sha3(cd[36], 0)
                if balanceOf[cd[36]][address(cd[4])] > -2:
                    revert with 0, 17
                balanceOf[cd[36]][address(cd[4])]++
                mem[_3976 + 128] = cd[36]
                mem[_3976 + 160] = 1
                emit 0xfec3d581: cd[36], 1, msg.sender, 0, address(cd[4])
                if not ext_code.size(address(cd[4])):
                    mem[32] = 16
                    sub_627dd5ca[address(cd[4])]++
                    mem[0] = sha3(address(cd[4]), 16)
                    sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                mem[_3976 + 128] = 0xf23a6e6100000000000000000000000000000000000000000000000000000000
                mem[_3976 + 132] = msg.sender
                mem[_3976 + 164] = 0
                mem[_3976 + 196] = cd[36]
                mem[_3976 + 228] = 1
                mem[_3976 + 260] = 160
                mem[_3976 + 292] = 0
                s = 0
                while s < 0:
                    mem[s + _3976 + 324] = mem[_3932 + s + 32]
                    s = s + 32
                    continue 
                require ext_code.size(address(cd[4]))
                call address(cd[4]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, 0, cd[36], 1, 160, 0
                mem[_3976 + 128] = ext_call.return_data[0]
                if ext_call.success:
                    mem[64] = _3976 + ceil32(return_data.size) + 128
                    require return_data.size >= 32
                    require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                    if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                        revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                    mem[32] = 16
                    sub_627dd5ca[address(cd[4])]++
                    mem[0] = sha3(address(cd[4]), 16)
                    sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if return_data.size <= 3:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[0 len 4] = ext_call.return_data[0 len 4]
                if uint32(cd[4]) >> 224 != Error(string arg1):
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if return_data.size < 68:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[_3976 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
                if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if mem[_3976 + ext_call.return_data[0] + 128] > test266151307():
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if ext_call.return_data[0] + mem[_3976 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                if floor32(ext_call.return_data[0] + mem[_3976 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _3976 + floor32(ext_call.return_data[0] + mem[_3976 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
                    revert with 0, 65
                mem[64] = _3976 + floor32(ext_call.return_data[0] + mem[_3976 + ext_call.return_data[0] + 128] + 31) + 129
                if not _3976 + ext_call.return_data[0] + 128:
                    _5850 = _3976 + floor32(ext_call.return_data[0] + mem[_3976 + ext_call.return_data[0] + 128] + 31) + 129
                    mem[_3976 + floor32(ext_call.return_data[0] + mem[_3976 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 52
                    mem[_5850 + 68] = 'ERC1155: transfer to non ERC1155'
                    mem[_5850 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
                    revert with memory
                      from mem[64]
                       len _5850 + -mem[64] + 132
                _5818 = _3976 + floor32(ext_call.return_data[0] + mem[_3976 + ext_call.return_data[0] + 128] + 31) + 129
                mem[_3976 + floor32(ext_call.return_data[0] + mem[_3976 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                _5886 = mem[_3976 + ext_call.return_data[0] + 128]
                mem[mem[64] + 36] = mem[_3976 + ext_call.return_data[0] + 128]
                idx = 0
                while idx < _5886:
                    mem[idx + _5818 + 68] = mem[_3976 + ext_call.return_data[0] + idx + 160]
                    idx = idx + 32
                    continue 
                if ceil32(_5886) > _5886:
                    mem[_5818 + _5886 + 68] = 0
                revert with memory
                  from mem[64]
                   len ceil32(_5886) + _5818 + -mem[64] + 68
            mem[0] = 14
            mem[mem[64] + 32] = ('cd', 100).length
            mem[mem[64] + 64 len ('cd', 100).length] = call.data[cd[100] + 36 len ('cd', 100).length]
            mem[('cd', 100).length + mem[64] + 64] = 0
            emit 0x626bb7ff: Array(len=('cd', 100).length, data=call.data[cd[100] + 36 len ('cd', 100).length]), stor10 + 1
            _3979 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3979] = 0
            if not address(cd[4]):
                revert with 0, 'ERC1155: mint to the zero address'
            _4025 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_4025]:
                revert with 0, 50
            mem[_4025 + 32] = cd[36]
            mem[_4025 + 64] = 1
            mem[64] = _4025 + 128
            mem[_4025 + 96] = 1
            mem[32] = sha3(cd[36], 0)
            if balanceOf[cd[36]][address(cd[4])] > -2:
                revert with 0, 17
            balanceOf[cd[36]][address(cd[4])]++
            mem[_4025 + 128] = cd[36]
            mem[_4025 + 160] = 1
            emit 0xfec3d581: cd[36], 1, msg.sender, 0, address(cd[4])
            if not ext_code.size(address(cd[4])):
                mem[32] = 16
                sub_627dd5ca[address(cd[4])]++
                mem[0] = sha3(address(cd[4]), 16)
                sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            mem[_4025 + 128] = 0xf23a6e6100000000000000000000000000000000000000000000000000000000
            mem[_4025 + 132] = msg.sender
            mem[_4025 + 164] = 0
            mem[_4025 + 196] = cd[36]
            mem[_4025 + 228] = 1
            mem[_4025 + 260] = 160
            mem[_4025 + 292] = 0
            s = 0
            while s < 0:
                mem[s + _4025 + 324] = mem[_3979 + s + 32]
                s = s + 32
                continue 
            require ext_code.size(address(cd[4]))
            call address(cd[4]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                 gas gas_remaining wei
                args msg.sender, 0, cd[36], 1, 160, 0
            mem[_4025 + 128] = ext_call.return_data[0]
            if ext_call.success:
                mem[64] = _4025 + ceil32(return_data.size) + 128
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[32] = 16
                sub_627dd5ca[address(cd[4])]++
                mem[0] = sha3(address(cd[4]), 16)
                sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if return_data.size <= 3:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[0 len 4] = ext_call.return_data[0 len 4]
            if uint32(cd[4]) >> 224 != Error(string arg1):
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if return_data.size < 68:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[_4025 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
            if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if mem[_4025 + ext_call.return_data[0] + 128] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if ext_call.return_data[0] + mem[_4025 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if floor32(ext_call.return_data[0] + mem[_4025 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _4025 + floor32(ext_call.return_data[0] + mem[_4025 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
                revert with 0, 65
            mem[64] = _4025 + floor32(ext_call.return_data[0] + mem[_4025 + ext_call.return_data[0] + 128] + 31) + 129
            if not _4025 + ext_call.return_data[0] + 128:
                _5852 = _4025 + floor32(ext_call.return_data[0] + mem[_4025 + ext_call.return_data[0] + 128] + 31) + 129
                mem[_4025 + floor32(ext_call.return_data[0] + mem[_4025 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 52
                mem[_5852 + 68] = 'ERC1155: transfer to non ERC1155'
                mem[_5852 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
                revert with memory
                  from mem[64]
                   len _5852 + -mem[64] + 132
            _5820 = _4025 + floor32(ext_call.return_data[0] + mem[_4025 + ext_call.return_data[0] + 128] + 31) + 129
            mem[_4025 + floor32(ext_call.return_data[0] + mem[_4025 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            _5889 = mem[_4025 + ext_call.return_data[0] + 128]
            mem[mem[64] + 36] = mem[_4025 + ext_call.return_data[0] + 128]
            idx = 0
            while idx < _5889:
                mem[idx + _5820 + 68] = mem[_4025 + ext_call.return_data[0] + idx + 160]
                idx = idx + 32
                continue 
            if ceil32(_5889) > _5889:
                mem[_5820 + _5889 + 68] = 0
            revert with memory
              from mem[64]
               len ceil32(_5889) + _5820 + -mem[64] + 68
        stor15[stor10 + 1].field_1536 = (2 * ('cd', 100).length) + 1
        t = sha3(sha3(stor10 + 1, 15) + 6)
        s = cd[100] + 36
        while cd[100] + ('cd', 100).length + 36 > s:
            stor[t] = cd[s]
            t = t + 1
            s = s + 32
            continue 
        s = sha3(sha3(stor10 + 1, 15) + 6) + (Mask(251, 0, ('cd', 100).length + 31) >> 5)
        while sha3(sha3(stor10 + 1, 15) + 6) + (stor15[stor10 + 1].field_1537 % 128 + 31 / 32) > s:
            stor[s] = 0
            s = s + 1
            continue 
        if cd[36] >= stor14.length:
            revert with 0, 50
        mem[0] = 14
        if stor14[cd[36]].field_2048 == -1:
            revert with 0, 17
        stor14[cd[36]].field_2048++
        if not ('cd', 100).length:
            _5266 = mem[64]
            mem[64] = mem[64] + 32
            mem[_5266] = 0
            if not address(cd[4]):
                revert with 0, 'ERC1155: mint to the zero address'
            _5318 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_5318]:
                revert with 0, 50
            mem[_5318 + 32] = cd[36]
            mem[_5318 + 64] = 1
            mem[64] = _5318 + 128
            mem[_5318 + 96] = 1
            mem[32] = sha3(cd[36], 0)
            if balanceOf[cd[36]][address(cd[4])] > -2:
                revert with 0, 17
            balanceOf[cd[36]][address(cd[4])]++
            mem[_5318 + 128] = cd[36]
            mem[_5318 + 160] = 1
            emit 0xfec3d581: cd[36], 1, msg.sender, 0, address(cd[4])
            if not ext_code.size(address(cd[4])):
                mem[32] = 16
                sub_627dd5ca[address(cd[4])]++
                mem[0] = sha3(address(cd[4]), 16)
                sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            mem[_5318 + 128] = 0xf23a6e6100000000000000000000000000000000000000000000000000000000
            mem[_5318 + 132] = msg.sender
            mem[_5318 + 164] = 0
            mem[_5318 + 196] = cd[36]
            mem[_5318 + 228] = 1
            mem[_5318 + 260] = 160
            mem[_5318 + 292] = 0
            s = 0
            while s < 0:
                mem[s + _5318 + 324] = mem[_5266 + s + 32]
                s = s + 32
                continue 
            require ext_code.size(address(cd[4]))
            call address(cd[4]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                 gas gas_remaining wei
                args msg.sender, 0, cd[36], 1, 160, 0
            mem[_5318 + 128] = ext_call.return_data[0]
            if ext_call.success:
                mem[64] = _5318 + ceil32(return_data.size) + 128
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[32] = 16
                sub_627dd5ca[address(cd[4])]++
                mem[0] = sha3(address(cd[4]), 16)
                sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if return_data.size <= 3:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[0 len 4] = ext_call.return_data[0 len 4]
            if uint32(cd[4]) >> 224 != Error(string arg1):
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if return_data.size < 68:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[_5318 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
            if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if mem[_5318 + ext_call.return_data[0] + 128] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if ext_call.return_data[0] + mem[_5318 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if floor32(ext_call.return_data[0] + mem[_5318 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _5318 + floor32(ext_call.return_data[0] + mem[_5318 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
                revert with 0, 65
            mem[64] = _5318 + floor32(ext_call.return_data[0] + mem[_5318 + ext_call.return_data[0] + 128] + 31) + 129
            if not _5318 + ext_call.return_data[0] + 128:
                _6514 = _5318 + floor32(ext_call.return_data[0] + mem[_5318 + ext_call.return_data[0] + 128] + 31) + 129
                mem[_5318 + floor32(ext_call.return_data[0] + mem[_5318 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 52
                mem[_6514 + 68] = 'ERC1155: transfer to non ERC1155'
                mem[_6514 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
                revert with memory
                  from mem[64]
                   len _6514 + -mem[64] + 132
            _6506 = _5318 + floor32(ext_call.return_data[0] + mem[_5318 + ext_call.return_data[0] + 128] + 31) + 129
            mem[_5318 + floor32(ext_call.return_data[0] + mem[_5318 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            _6524 = mem[_5318 + ext_call.return_data[0] + 128]
            mem[mem[64] + 36] = mem[_5318 + ext_call.return_data[0] + 128]
            idx = 0
            while idx < _6524:
                mem[idx + _6506 + 68] = mem[_5318 + ext_call.return_data[0] + idx + 160]
                idx = idx + 32
                continue 
            if ceil32(_6524) > _6524:
                mem[_6506 + _6524 + 68] = 0
            revert with memory
              from mem[64]
               len ceil32(_6524) + _6506 + -mem[64] + 68
        mem[0] = 14
        mem[mem[64] + 32] = ('cd', 100).length
        mem[mem[64] + 64 len ('cd', 100).length] = call.data[cd[100] + 36 len ('cd', 100).length]
        mem[('cd', 100).length + mem[64] + 64] = 0
        emit 0x626bb7ff: Array(len=('cd', 100).length, data=call.data[cd[100] + 36 len ('cd', 100).length]), stor10 + 1
        _5321 = mem[64]
        mem[64] = mem[64] + 32
        mem[_5321] = 0
        if not address(cd[4]):
            revert with 0, 'ERC1155: mint to the zero address'
        _5419 = mem[64]
        mem[mem[64]] = 1
        mem[64] = mem[64] + 64
        if 0 >= mem[_5419]:
            revert with 0, 50
        mem[_5419 + 32] = cd[36]
        mem[_5419 + 64] = 1
        mem[64] = _5419 + 128
        mem[_5419 + 96] = 1
        mem[32] = sha3(cd[36], 0)
        if balanceOf[cd[36]][address(cd[4])] > -2:
            revert with 0, 17
        balanceOf[cd[36]][address(cd[4])]++
        mem[_5419 + 128] = cd[36]
        mem[_5419 + 160] = 1
        emit 0xfec3d581: cd[36], 1, msg.sender, 0, address(cd[4])
        if not ext_code.size(address(cd[4])):
            mem[32] = 16
            sub_627dd5ca[address(cd[4])]++
            mem[0] = sha3(address(cd[4]), 16)
            sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        mem[_5419 + 128] = 0xf23a6e6100000000000000000000000000000000000000000000000000000000
        mem[_5419 + 132] = msg.sender
        mem[_5419 + 164] = 0
        mem[_5419 + 196] = cd[36]
        mem[_5419 + 228] = 1
        mem[_5419 + 260] = 160
        mem[_5419 + 292] = 0
        s = 0
        while s < 0:
            mem[s + _5419 + 324] = mem[_5321 + s + 32]
            s = s + 32
            continue 
        require ext_code.size(address(cd[4]))
        call address(cd[4]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
             gas gas_remaining wei
            args msg.sender, 0, cd[36], 1, 160, 0
        mem[_5419 + 128] = ext_call.return_data[0]
        if ext_call.success:
            mem[64] = _5419 + ceil32(return_data.size) + 128
            require return_data.size >= 32
            require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
            if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
            mem[32] = 16
            sub_627dd5ca[address(cd[4])]++
            mem[0] = sha3(address(cd[4]), 16)
            sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor10 + 1
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if return_data.size <= 3:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[0 len 4] = ext_call.return_data[0 len 4]
        if uint32(cd[4]) >> 224 != Error(string arg1):
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if return_data.size < 68:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[_5419 + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
        if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if mem[_5419 + ext_call.return_data[0] + 128] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if ext_call.return_data[0] + mem[_5419 + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if floor32(ext_call.return_data[0] + mem[_5419 + ext_call.return_data[0] + 128] + 31) + 129 < 128 or _5419 + floor32(ext_call.return_data[0] + mem[_5419 + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
            revert with 0, 65
        mem[64] = _5419 + floor32(ext_call.return_data[0] + mem[_5419 + ext_call.return_data[0] + 128] + 31) + 129
        if not _5419 + ext_call.return_data[0] + 128:
            _6516 = _5419 + floor32(ext_call.return_data[0] + mem[_5419 + ext_call.return_data[0] + 128] + 31) + 129
            mem[_5419 + floor32(ext_call.return_data[0] + mem[_5419 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 52
            mem[_6516 + 68] = 'ERC1155: transfer to non ERC1155'
            mem[_6516 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
            revert with memory
              from mem[64]
               len _6516 + -mem[64] + 132
        _6508 = _5419 + floor32(ext_call.return_data[0] + mem[_5419 + ext_call.return_data[0] + 128] + 31) + 129
        mem[_5419 + floor32(ext_call.return_data[0] + mem[_5419 + ext_call.return_data[0] + 128] + 31) + 129] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        _6527 = mem[_5419 + ext_call.return_data[0] + 128]
        mem[mem[64] + 36] = mem[_5419 + ext_call.return_data[0] + 128]
        idx = 0
        while idx < _6527:
            mem[idx + _6508 + 68] = mem[_5419 + ext_call.return_data[0] + idx + 160]
            idx = idx + 32
            continue 
        if ceil32(_6527) > _6527:
            mem[_6508 + _6527 + 68] = 0
        revert with memory
          from mem[64]
           len ceil32(_6527) + _6508 + -mem[64] + 68
}

function sub_46be42fa(?) {
    require calldata.size - 4 >= 32
    if not address(stor15[arg1].field_0):
        revert with 0, 'No node exist'
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if block.timestamp < stor15[arg1].field_512:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if block.timestamp < stor15[arg1].field_768:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if not stor14[stor15[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        if block.timestamp - stor15[arg1].field_512 / stor11 <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    return (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                           0 / stor9
                idx = 0
                while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    return (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                           0 / stor9
                idx = 0
                while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            return (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                   (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
        if block.timestamp - stor15[arg1].field_512 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    return (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                           0 / stor9
                idx = 0
                while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    return (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                           0 / stor9
                idx = 0
                while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                revert with 0, 17
            if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            return (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                   (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
        if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if 10^9 / stor14[stor15[arg1].field_256].field_768 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024)):
            revert with 0, 17
        if stor15[arg1].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                return ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280, 
                       0 / stor9
            idx = 0
            while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                return ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280, 
                       0 / stor9
            idx = 0
            while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        return ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280, 
               (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
        revert with 0, 17
    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        revert with 0, 17
    if block.timestamp - stor15[arg1].field_512 / stor11 <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
        if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if stor15[arg1].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                return (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                       0 / stor9
            idx = 0
            while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                return (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                       0 / stor9
            idx = 0
            while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        return (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
               (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
    if block.timestamp - stor15[arg1].field_512 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
        revert with 0, 17
    if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
        revert with 0, 17
    if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
        if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
            revert with 0, 17
        if stor15[arg1].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                return (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                       0 / stor9
            idx = 0
            while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                return (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
                       0 / stor9
            idx = 0
            while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        return (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280, 
               (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
    if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
        revert with 0, 17
    if (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
        revert with 0, 17
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
        revert with 0, 17
    if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
        revert with 0, 17
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024)):
        revert with 0, 17
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if not stor14[stor15[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            idx = 0
            while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            return (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280, 
                   0 / stor9
        idx = 0
        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
            idx = 0
            while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            return (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280, 
                   0 / stor9
        idx = 0
        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
        revert with 0, 17
    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
        revert with 0, 17
    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
        revert with 0, 17
    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
        revert with 0, 17
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
        revert with 0, 17
    if not stor9:
        revert with 0, 18
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
        revert with 0, 17
    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
        revert with 0, 17
    if not stor9:
        revert with 0, 18
    return (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280, 
           (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
}

function sub_8de45c1a(?) {
    require calldata.size - 4 >= 32
    if not address(stor15[arg1].field_0):
        revert with 0, 'No node exist'
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if block.timestamp < stor15[arg1].field_512:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if block.timestamp < stor15[arg1].field_768:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if not stor14[stor15[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        if block.timestamp - stor15[arg1].field_512 / stor11 <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
                idx = 0
                while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
                idx = 0
                while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                revert with 0, 17
            return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
        if block.timestamp - stor15[arg1].field_512 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
                idx = 0
                while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
                idx = 0
                while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                revert with 0, 17
            if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                revert with 0, 17
            return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
        if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if 10^9 / stor14[stor15[arg1].field_256].field_768 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024)):
            revert with 0, 17
        if stor15[arg1].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280)
            idx = 0
            while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280)
            idx = 0
            while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
            revert with 0, 17
        return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280)
    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
        revert with 0, 17
    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        revert with 0, 17
    if block.timestamp - stor15[arg1].field_512 / stor11 <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
        if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if stor15[arg1].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
            idx = 0
            while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
            idx = 0
            while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
            revert with 0, 17
        return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
    if block.timestamp - stor15[arg1].field_512 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
        revert with 0, 17
    if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
        revert with 0, 17
    if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
        if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
            revert with 0, 17
        if stor15[arg1].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
            idx = 0
            while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
            idx = 0
            while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
            revert with 0, 17
        return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280)
    if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
        revert with 0, 17
    if (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
        revert with 0, 17
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
        revert with 0, 17
    if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
        revert with 0, 17
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024)):
        revert with 0, 17
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if not stor14[stor15[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            idx = 0
            while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if 0 / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                revert with 0, 17
            return ((0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280)
        idx = 0
        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
            idx = 0
            while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if 0 / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                revert with 0, 17
            return ((0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280)
        idx = 0
        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
        revert with 0, 17
    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
        revert with 0, 17
    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
        revert with 0, 17
    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
        revert with 0, 17
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
        revert with 0, 17
    if not stor9:
        revert with 0, 18
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
        revert with 0, 17
    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
        revert with 0, 17
    if not stor9:
        revert with 0, 18
    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
        revert with 0, 17
    return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280)
}

function sub_cc4da26d(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_627dd5ca[address(arg1)]:
        revert with 0, 'No have a node'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(arg1)]:
        if idx >= sub_627dd5ca[address(arg1)]:
            revert with 0, 50
        if not address(stor15[stor16[address(arg1)][idx]].field_0):
            revert with 0, 'No node exist'
        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if block.timestamp < stor15[stor16[address(arg1)][idx]].field_512:
            revert with 0, 17
        if not stor11:
            revert with 0, 18
        if block.timestamp < stor15[stor16[address(arg1)][idx]].field_768:
            revert with 0, 17
        if not stor11:
            revert with 0, 18
        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                    revert with 0, 17
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                    revert with 0, 17
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                idx = idx + 1
                s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                    revert with 0, 17
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                idx = idx + 1
                s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                revert with 0, 17
            if 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                revert with 0, 17
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
            revert with 0, 17
        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
            revert with 0, 17
        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
            revert with 0, 17
        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                idx = idx + 1
                s = s + (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                idx = idx + 1
                s = s + (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                t = t + 1
                continue 
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = address(arg1)
        mem[32] = 16
        idx = idx + 1
        s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
        continue 
    return s
}

function sub_e7694bc6(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_627dd5ca[address(arg1)]:
        revert with 0, 'No have a node'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(arg1)]:
        if idx >= sub_627dd5ca[address(arg1)]:
            revert with 0, 50
        if not address(stor15[stor16[address(arg1)][idx]].field_0):
            revert with 0, 'No node exist'
        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if block.timestamp < stor15[stor16[address(arg1)][idx]].field_512:
            revert with 0, 17
        if not stor11:
            revert with 0, 18
        if block.timestamp < stor15[stor16[address(arg1)][idx]].field_768:
            revert with 0, 17
        if not stor11:
            revert with 0, 18
        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                    revert with 0, 17
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                    revert with 0, 17
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                idx = idx + 1
                s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                    revert with 0, 17
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                idx = idx + 1
                s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                revert with 0, 17
            if 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                revert with 0, 17
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
            revert with 0, 17
        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
            revert with 0, 17
        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
            revert with 0, 17
        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                idx = idx + 1
                s = s + (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 16
                    t = t + 1
                    continue 
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                idx = idx + 1
                s = s + (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 16
                t = t + 1
                continue 
        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = address(arg1)
        mem[32] = 16
        idx = idx + 1
        s = s + ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
        continue 
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[18 len 14]:
        revert with 0, 18
    if s and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / s:
        revert with 0, 17
    if s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
        revert with 0, 17
    return (s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100)
}

function sub_cd844602(?) {
    require calldata.size - 4 >= 32
    if not address(stor15[arg1].field_0):
        revert with 0, 'No node exist'
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if block.timestamp < stor15[arg1].field_512:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if block.timestamp < stor15[arg1].field_768:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if not stor14[stor15[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        if block.timestamp - stor15[arg1].field_512 / stor11 <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        if block.timestamp - stor15[arg1].field_512 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                revert with 0, 17
            if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if 10^9 / stor14[stor15[arg1].field_256].field_768 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024)):
            revert with 0, 17
        if stor15[arg1].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
            revert with 0, 17
        require ext_code.size(pairAddress)
        staticcall pairAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
        revert with 0, 17
    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        revert with 0, 17
    if block.timestamp - stor15[arg1].field_512 / stor11 <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
        if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if stor15[arg1].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
            revert with 0, 17
        require ext_code.size(pairAddress)
        staticcall pairAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
    if block.timestamp - stor15[arg1].field_512 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
        revert with 0, 17
    if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
        revert with 0, 17
    if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
        if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
            revert with 0, 17
        if stor15[arg1].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
            revert with 0, 17
        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
            revert with 0, 17
        require ext_code.size(pairAddress)
        staticcall pairAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
    if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
        revert with 0, 17
    if (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
        revert with 0, 17
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
        revert with 0, 17
    if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
        revert with 0, 17
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024)):
        revert with 0, 17
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if not stor14[stor15[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            idx = 0
            while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if 0 / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                revert with 0, 17
            if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        idx = 0
        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
            idx = 0
            while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                revert with 0, 17
            if False and stor14[stor15[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if 0 / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                revert with 0, 17
            if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return ((0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        idx = 0
        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
        revert with 0, 17
    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
        revert with 0, 17
    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
        revert with 0, 17
    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
        revert with 0, 17
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
        revert with 0, 17
    if not stor9:
        revert with 0, 18
    if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
        revert with 0, 17
    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
        revert with 0, 17
    if not stor9:
        revert with 0, 18
    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
        revert with 0, 17
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[18 len 14]:
        revert with 0, 18
    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
        revert with 0, 17
    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
        revert with 0, 17
    return (((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
}

function claim() payable {
    if stor4 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor4 = 2
    if not sub_627dd5ca[msg.sender]:
        revert with 0, 'No have a node'
    if not sub_627dd5ca[address(msg.sender)]:
        revert with 0, 'No have a node'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if not address(stor15[stor16[address(msg.sender)][idx]].field_0):
            revert with 0, 'No node exist'
        if stor15[stor16[address(msg.sender)][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if block.timestamp < stor15[stor16[address(msg.sender)][idx]].field_512:
            revert with 0, 17
        if not stor11:
            revert with 0, 18
        if block.timestamp < stor15[stor16[address(msg.sender)][idx]].field_768:
            revert with 0, 17
        if not stor11:
            revert with 0, 18
        if stor15[stor16[address(msg.sender)][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                    revert with 0, 17
                if stor15[stor16[address(msg.sender)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < stor12:
                    revert with 0, 17
                if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                idx = idx + 1
                s = s + ((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                continue 
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor15[stor16[address(msg.sender)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < stor12:
                    revert with 0, 17
                if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                idx = idx + 1
                s = s + ((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                continue 
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                revert with 0, 17
            if 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11):
                revert with 0, 17
            if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor15[stor16[address(msg.sender)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                revert with 0, 17
            if stor15[stor16[address(msg.sender)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
            continue 
        if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
            revert with 0, 17
        if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024:
                revert with 0, 17
            if stor15[stor16[address(msg.sender)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
            continue 
        if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
            revert with 0, 17
        if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11):
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11):
            revert with 0, 17
        if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor15[stor16[address(msg.sender)][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
                if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor9) + (((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                idx = idx + 1
                s = s + (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
                if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor9) + (((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                idx = idx + 1
                s = s + (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                t = t + 1
                continue 
        if block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(msg.sender)][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 16
        idx = idx + 1
        s = s + ((block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(msg.sender)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(msg.sender)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(msg.sender)][idx]].field_1280
        continue 
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[18 len 14]:
        revert with 0, 18
    if s and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / s:
        revert with 0, 17
    if s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
        revert with 0, 17
    if s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100 > msg.value:
        revert with 0, 'No fee is set'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[msg.sender]:
        if idx >= sub_627dd5ca[msg.sender]:
            revert with 0, 50
        if not address(stor15[stor16[msg.sender][idx]].field_0):
            revert with 0, 'No node exist'
        if stor15[stor16[msg.sender][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if block.timestamp < stor15[stor16[msg.sender][idx]].field_512:
            revert with 0, 17
        if not stor11:
            revert with 0, 18
        if block.timestamp < stor15[stor16[msg.sender][idx]].field_768:
            revert with 0, 17
        if not stor11:
            revert with 0, 18
        if stor15[stor16[msg.sender][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                    revert with 0, 17
                if stor15[stor16[msg.sender][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                        if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                        if 0 / stor9 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                        if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                        if 0 / stor9 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < stor12:
                    revert with 0, 17
                if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                if stor15[stor16[msg.sender][idx]].field_1024 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9):
                    revert with 0, 17
                stor15[stor16[msg.sender][idx]].field_1024 += (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9
                if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                idx = idx + 1
                s = s + ((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                continue 
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor15[stor16[msg.sender][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                        if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                        if 0 / stor9 > !((stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 16
                            t = t + 1
                            continue 
                        if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                        if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                        if 0 / stor9 > !((stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        idx = idx + 1
                        s = s + (0 / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < stor12:
                    revert with 0, 17
                if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                if stor15[stor16[msg.sender][idx]].field_1024 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9):
                    revert with 0, 17
                stor15[stor16[msg.sender][idx]].field_1024 += (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9
                if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                idx = idx + 1
                s = s + ((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                continue 
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                revert with 0, 17
            if 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11):
                revert with 0, 17
            if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor15[stor16[msg.sender][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                    if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                    if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
            if stor15[stor16[msg.sender][idx]].field_1024 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9):
                revert with 0, 17
            stor15[stor16[msg.sender][idx]].field_1024 += (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9
            if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                revert with 0, 17
            if stor15[stor16[msg.sender][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                    if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                    if 0 / stor9 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                    if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                    if 0 / stor9 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
            if stor15[stor16[msg.sender][idx]].field_1024 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9):
                revert with 0, 17
            stor15[stor16[msg.sender][idx]].field_1024 += (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9
            if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
            continue 
        if block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
            revert with 0, 17
        if (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024:
                revert with 0, 17
            if stor15[stor16[msg.sender][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                    if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                    if 0 / stor9 > !((stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 16
                        t = t + 1
                        continue 
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                    if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                    if 0 / stor9 > !((stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    idx = idx + 1
                    s = s + (0 / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < stor12:
                revert with 0, 17
            if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor9:
                revert with 0, 18
            stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
            if stor15[stor16[msg.sender][idx]].field_1024 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9):
                revert with 0, 17
            stor15[stor16[msg.sender][idx]].field_1024 += (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9
            if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 16
            idx = idx + 1
            s = s + ((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 / stor9) + stor15[stor16[msg.sender][idx]].field_1280
            continue 
        if block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
            revert with 0, 17
        if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11):
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11):
            revert with 0, 17
        if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor15[stor16[msg.sender][idx]].field_256 >= stor14.length:
            revert with 0, 50
        if not stor14[stor15[stor16[msg.sender][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
                if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                    revert with 0, 17
                stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor9) + (((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                idx = idx + 1
                s = s + (0 / stor9) + (((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 16
                    t = t + 1
                    continue 
                if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                if ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
                    revert with 0, 17
                if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor9:
                    revert with 0, 18
                stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
                if stor15[stor16[msg.sender][idx]].field_1024 > !(0 / stor9):
                    revert with 0, 17
                stor15[stor16[msg.sender][idx]].field_1024 += 0 / stor9
                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor9) + (((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                idx = idx + 1
                s = s + (0 / stor9) + (((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 16
                t = t + 1
                continue 
        if block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 < stor12:
            revert with 0, 17
        if stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor14[stor15[stor16[msg.sender][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        if ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !stor15[stor16[msg.sender][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) and stor14[stor15[stor16[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor9:
            revert with 0, 18
        stor15[stor16[msg.sender][idx]].field_768 = block.timestamp
        if stor15[stor16[msg.sender][idx]].field_1024 > !((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9):
            revert with 0, 17
        stor15[stor16[msg.sender][idx]].field_1024 += (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9
        if (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 16
        idx = idx + 1
        s = s + ((block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1536 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_768 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[msg.sender][idx]].field_512 / stor11 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_1024 * stor14[stor15[stor16[msg.sender][idx]].field_256].field_256) / stor9) + stor15[stor16[msg.sender][idx]].field_1280
        continue 
    require ext_code.size(sub_85adc8b0Address)
    call sub_85adc8b0Address.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, s
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    stor4 = 1
}

function claimById(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if stor4 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor4 = 2
    if address(stor15[arg1].field_0) != msg.sender:
        revert with 0, 'only puchaser can claim'
    if not address(stor15[arg1].field_0):
        revert with 0, 'No node exist'
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if block.timestamp < stor15[arg1].field_512:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if block.timestamp < stor15[arg1].field_768:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if not stor14[stor15[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        if block.timestamp - stor15[arg1].field_512 / stor11 <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                        revert with 0, 'No set enough fee'
                else:
                    idx = 0
                    while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                        revert with 0, 'No set enough fee'
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                        revert with 0, 'No set enough fee'
                else:
                    idx = 0
                    while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                        revert with 0, 'No set enough fee'
        else:
            if block.timestamp - stor15[arg1].field_512 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
                    revert with 0, 17
                if stor15[arg1].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                else:
                    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
            else:
                if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if 10^9 / stor14[stor15[arg1].field_256].field_768 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024)):
                    revert with 0, 17
                if stor15[arg1].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                else:
                    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
    else:
        if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_512 / stor11 <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                        revert with 0, 'No set enough fee'
                else:
                    idx = 0
                    while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                        revert with 0, 'No set enough fee'
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                        revert with 0, 'No set enough fee'
                else:
                    idx = 0
                    while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                        revert with 0, 'No set enough fee'
        else:
            if block.timestamp - stor15[arg1].field_512 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
                    revert with 0, 17
                if stor15[arg1].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                else:
                    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
            else:
                if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
                    revert with 0, 17
                if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024)):
                    revert with 0, 17
                if stor15[arg1].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                else:
                    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if (0 / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(pairAddress)
                        staticcall pairAddress.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor15[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100 > msg.value:
                            revert with 0, 'No set enough fee'
    if not address(stor15[arg1].field_0):
        revert with 0, 'No node exist'
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if block.timestamp < stor15[arg1].field_512:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if block.timestamp < stor15[arg1].field_768:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if stor15[arg1].field_256 >= stor14.length:
        revert with 0, 50
    if not stor14[stor15[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
        if block.timestamp - stor15[arg1].field_512 / stor11 <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[arg1].field_768 = block.timestamp
                    if stor15[arg1].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[arg1].field_1024 += 0 / stor9
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                else:
                    idx = 0
                    while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[arg1].field_768 = block.timestamp
                    if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                        revert with 0, 17
                    stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[arg1].field_768 = block.timestamp
                    if stor15[arg1].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[arg1].field_1024 += 0 / stor9
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                else:
                    idx = 0
                    while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[arg1].field_768 = block.timestamp
                    if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                        revert with 0, 17
                    stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
        else:
            if block.timestamp - stor15[arg1].field_512 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
                    revert with 0, 17
                if stor15[arg1].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += 0 / stor9
                        if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                else:
                    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += 0 / stor9
                        if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
            else:
                if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if 10^9 / stor14[stor15[arg1].field_256].field_768 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024)):
                    revert with 0, 17
                if stor15[arg1].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += 0 / stor9
                        if 0 / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280
                else:
                    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += 0 / stor9
                        if 0 / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - (10^9 / stor14[stor15[arg1].field_256].field_768 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280
    else:
        if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[arg1].field_512 / stor11 <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_768 > -1 / block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if stor15[arg1].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[arg1].field_768 = block.timestamp
                    if stor15[arg1].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[arg1].field_1024 += 0 / stor9
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                else:
                    idx = 0
                    while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[arg1].field_768 = block.timestamp
                    if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                        revert with 0, 17
                    stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
            else:
                if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[arg1].field_768 = block.timestamp
                    if stor15[arg1].field_1024 > !(0 / stor9):
                        revert with 0, 17
                    stor15[arg1].field_1024 += 0 / stor9
                    if 0 / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                else:
                    idx = 0
                    while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 and stor14[stor15[arg1].field_256].field_256 > -1 / block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    stor15[arg1].field_768 = block.timestamp
                    if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                        revert with 0, 17
                    stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                    if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
        else:
            if block.timestamp - stor15[arg1].field_512 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                revert with 0, 17
            if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11) >= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                if stor14[stor15[arg1].field_256].field_1024 and block.timestamp - stor15[arg1].field_768 / stor11 > -1 / stor14[stor15[arg1].field_256].field_1024:
                    revert with 0, 17
                if stor15[arg1].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += 0 / stor9
                        if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                else:
                    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += 0 / stor9
                        if 0 / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 and stor14[stor15[arg1].field_256].field_256 > -1 / stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (stor14[stor15[arg1].field_256].field_1024 * block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_256 / stor9) + stor15[arg1].field_1280
            else:
                if block.timestamp - stor15[arg1].field_512 / stor11 < block.timestamp - stor15[arg1].field_768 / stor11:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[arg1].field_512 / stor11) - (block.timestamp - stor15[arg1].field_768 / stor11):
                    revert with 0, 17
                if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11) and stor14[stor15[arg1].field_256].field_768 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg1].field_512 / stor11) + (block.timestamp - stor15[arg1].field_768 / stor11):
                    revert with 0, 17
                if stor14[stor15[arg1].field_256].field_1024 and (block.timestamp - stor15[arg1].field_512 / stor11) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[arg1].field_256].field_1024:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) > !((block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024)):
                    revert with 0, 17
                if stor15[arg1].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg1].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg1].field_768 / stor11 < 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += 0 / stor9
                        if 0 / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg1].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280
                else:
                    if 10 > !(10^9 / stor14[stor15[arg1].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg1].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg1].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg1].field_768 / stor11 < (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg1].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !(0 / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += 0 / stor9
                        if 0 / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg1].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg1].field_256].field_1536 and (block.timestamp - stor15[arg1].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg1].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg1].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536)):
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024) and stor14[stor15[arg1].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9 > !stor15[arg1].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536) and stor14[stor15[arg1].field_256].field_256 > -1 / (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536) - (stor12 * stor14[stor15[arg1].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        stor15[arg1].field_768 = block.timestamp
                        if stor15[arg1].field_1024 > !((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9):
                            revert with 0, 17
                        stor15[arg1].field_1024 += (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9
                        if (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280):
                            revert with 0, 17
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) - (stor12 * stor14[stor15[arg1].field_256].field_1536 * stor14[stor15[arg1].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) - (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_768 / stor11 * stor14[stor15[arg1].field_256].field_768 * stor14[stor15[arg1].field_256].field_256) + (block.timestamp - stor15[arg1].field_512 / stor11 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) - ((10^9 / stor14[stor15[arg1].field_256].field_768) + -(10^9 / stor14[stor15[arg1].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg1].field_256].field_1024 * stor14[stor15[arg1].field_256].field_256) / stor9) + stor15[arg1].field_1280
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    stor4 = 1
}

function sub_4854424e(?) payable {
    require calldata.size - 4 >= 64
    if stor4 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor4 = 2
    if not sub_627dd5ca[msg.sender]:
        revert with 0, 'No have a node'
    if address(stor15[arg2].field_0) != msg.sender:
        revert with 0, 'only puchaser can claim'
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[18 len 14]:
        revert with 0, 18
    if arg1 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / arg1:
        revert with 0, 17
    if arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
        revert with 0, 17
    if arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100 > msg.value:
        revert with 0, 'No fee is set'
    if not address(stor15[arg2].field_0):
        revert with 0, 'No node exist'
    if stor15[arg2].field_256 >= stor14.length:
        revert with 0, 50
    if block.timestamp < stor15[arg2].field_512:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if block.timestamp < stor15[arg2].field_768:
        revert with 0, 17
    if not stor11:
        revert with 0, 18
    if stor15[arg2].field_256 >= stor14.length:
        revert with 0, 50
    if not stor14[stor15[arg2].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
        if block.timestamp - stor15[arg2].field_512 / stor11 <= 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
            if block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_768 > -1 / block.timestamp - stor15[arg2].field_768 / stor11:
                revert with 0, 17
            if stor15[arg2].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg2].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                if block.timestamp - stor15[arg2].field_768 / stor11 < 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 and stor14[stor15[arg2].field_256].field_256 > -1 / block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg2].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                        revert with 0, 17
                    if (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor9 > -1 / arg1:
                        revert with 0, 17
                    if not (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                        revert with 0, 17
                    stor15[arg2].field_768 = block.timestamp
                    if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                        revert with 0, 17
                    stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                        revert with 0, 17
                    stor15[arg2].field_1280 = (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                else:
                    idx = 0
                    while idx <= 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 and stor14[stor15[arg2].field_256].field_256 > -1 / block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor9 > -1 / arg1:
                        revert with 0, 17
                    if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 18
                    if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                        revert with 0, 17
                    stor15[arg2].field_768 = block.timestamp
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                        revert with 0, 17
                    stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                        revert with 0, 17
                    stor15[arg2].field_1280 = (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
            else:
                if 10 > !(10^9 / stor14[stor15[arg2].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg2].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg2].field_768 / stor11 < (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 and stor14[stor15[arg2].field_256].field_256 > -1 / block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg2].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                        revert with 0, 17
                    if (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor9 > -1 / arg1:
                        revert with 0, 17
                    if not (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                        revert with 0, 17
                    stor15[arg2].field_768 = block.timestamp
                    if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                        revert with 0, 17
                    stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                        revert with 0, 17
                    stor15[arg2].field_1280 = (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                else:
                    idx = 0
                    while idx <= (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 and stor14[stor15[arg2].field_256].field_256 > -1 / block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor9 > -1 / arg1:
                        revert with 0, 17
                    if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 18
                    if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                        revert with 0, 17
                    stor15[arg2].field_768 = block.timestamp
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                        revert with 0, 17
                    stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                        revert with 0, 17
                    stor15[arg2].field_1280 = (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
        else:
            if block.timestamp - stor15[arg2].field_512 / stor11 < 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor15[arg2].field_512 / stor11 < block.timestamp - stor15[arg2].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[arg2].field_512 / stor11) - (block.timestamp - stor15[arg2].field_768 / stor11) >= 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                if stor14[stor15[arg2].field_256].field_1024 and block.timestamp - stor15[arg2].field_768 / stor11 > -1 / stor14[stor15[arg2].field_256].field_1024:
                    revert with 0, 17
                if stor15[arg2].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg2].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg2].field_768 / stor11 < 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_256 > -1 / stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_256 > -1 / stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                else:
                    if 10 > !(10^9 / stor14[stor15[arg2].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg2].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 < (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_256 > -1 / stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_256 > -1 / stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
            else:
                if block.timestamp - stor15[arg2].field_512 / stor11 < block.timestamp - stor15[arg2].field_768 / stor11:
                    revert with 0, 17
                if 10^9 / stor14[stor15[arg2].field_256].field_768 / 10 < (block.timestamp - stor15[arg2].field_512 / stor11) - (block.timestamp - stor15[arg2].field_768 / stor11):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10) - (block.timestamp - stor15[arg2].field_512 / stor11) + (block.timestamp - stor15[arg2].field_768 / stor11) and stor14[stor15[arg2].field_256].field_768 > -1 / (10^9 / stor14[stor15[arg2].field_256].field_768 / 10) - (block.timestamp - stor15[arg2].field_512 / stor11) + (block.timestamp - stor15[arg2].field_768 / stor11):
                    revert with 0, 17
                if stor14[stor15[arg2].field_256].field_1024 and (block.timestamp - stor15[arg2].field_512 / stor11) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10) > -1 / stor14[stor15[arg2].field_256].field_1024:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) > !((block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024)):
                    revert with 0, 17
                if stor15[arg2].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg2].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg2].field_768 / stor11 < 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024) and stor14[stor15[arg2].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !(((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if 0 / stor9 and arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 - (((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024) and stor14[stor15[arg2].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 - (((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9
                else:
                    if 10 > !(10^9 / stor14[stor15[arg2].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg2].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 < (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024) and stor14[stor15[arg2].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !(((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if 0 / stor9 and arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 - (((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024) and stor14[stor15[arg2].field_256].field_256 > -1 / (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 - (((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - (10^9 / stor14[stor15[arg2].field_256].field_768 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9
    else:
        if 10 > !(10^9 / stor14[stor15[arg2].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor14[stor15[arg2].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor15[arg2].field_512 / stor11 <= (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_768 > -1 / block.timestamp - stor15[arg2].field_768 / stor11:
                revert with 0, 17
            if stor15[arg2].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[arg2].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                if block.timestamp - stor15[arg2].field_768 / stor11 < 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 and stor14[stor15[arg2].field_256].field_256 > -1 / block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg2].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                        revert with 0, 17
                    if (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor9 > -1 / arg1:
                        revert with 0, 17
                    if not (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                        revert with 0, 17
                    stor15[arg2].field_768 = block.timestamp
                    if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                        revert with 0, 17
                    stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                        revert with 0, 17
                    stor15[arg2].field_1280 = (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                else:
                    idx = 0
                    while idx <= 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 and stor14[stor15[arg2].field_256].field_256 > -1 / block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor9 > -1 / arg1:
                        revert with 0, 17
                    if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 18
                    if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                        revert with 0, 17
                    stor15[arg2].field_768 = block.timestamp
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                        revert with 0, 17
                    stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                        revert with 0, 17
                    stor15[arg2].field_1280 = (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
            else:
                if 10 > !(10^9 / stor14[stor15[arg2].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg2].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[arg2].field_768 / stor11 < (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 and stor14[stor15[arg2].field_256].field_256 > -1 / block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                        revert with 0, 17
                    if False and stor14[stor15[arg2].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 / stor9 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                        revert with 0, 17
                    if (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor9 > -1 / arg1:
                        revert with 0, 17
                    if not (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 18
                    if (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                        revert with 0, 17
                    stor15[arg2].field_768 = block.timestamp
                    if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                        revert with 0, 17
                    stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                        revert with 0, 17
                    stor15[arg2].field_1280 = (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                else:
                    idx = 0
                    while idx <= (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                        revert with 0, 17
                    if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                        revert with 0, 17
                    if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 and stor14[stor15[arg2].field_256].field_256 > -1 / block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                        revert with 0, 17
                    if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor9 > -1 / arg1:
                        revert with 0, 17
                    if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 18
                    if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                        revert with 0, 17
                    stor15[arg2].field_768 = block.timestamp
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                        revert with 0, 17
                    stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                        revert with 0, 17
                    if not stor9:
                        revert with 0, 18
                    if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                        revert with 0, 17
                    stor15[arg2].field_1280 = (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
        else:
            if block.timestamp - stor15[arg2].field_512 / stor11 < (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                revert with 0, 17
            if block.timestamp - stor15[arg2].field_512 / stor11 < block.timestamp - stor15[arg2].field_768 / stor11:
                revert with 0, 17
            if (block.timestamp - stor15[arg2].field_512 / stor11) - (block.timestamp - stor15[arg2].field_768 / stor11) >= (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                if stor14[stor15[arg2].field_256].field_1024 and block.timestamp - stor15[arg2].field_768 / stor11 > -1 / stor14[stor15[arg2].field_256].field_1024:
                    revert with 0, 17
                if stor15[arg2].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg2].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg2].field_768 / stor11 < 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_256 > -1 / stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_256 > -1 / stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                else:
                    if 10 > !(10^9 / stor14[stor15[arg2].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg2].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 < (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_256 > -1 / stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 and stor14[stor15[arg2].field_256].field_256 > -1 / stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 / stor9
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 > -1 / (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 < (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280 - ((stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (stor14[stor15[arg2].field_256].field_1024 * block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_256 / stor9) + stor15[arg2].field_1280) / stor9
            else:
                if block.timestamp - stor15[arg2].field_512 / stor11 < block.timestamp - stor15[arg2].field_768 / stor11:
                    revert with 0, 17
                if (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[arg2].field_512 / stor11) - (block.timestamp - stor15[arg2].field_768 / stor11):
                    revert with 0, 17
                if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg2].field_512 / stor11) + (block.timestamp - stor15[arg2].field_768 / stor11) and stor14[stor15[arg2].field_256].field_768 > -1 / ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[arg2].field_512 / stor11) + (block.timestamp - stor15[arg2].field_768 / stor11):
                    revert with 0, 17
                if stor14[stor15[arg2].field_256].field_1024 and (block.timestamp - stor15[arg2].field_512 / stor11) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[arg2].field_256].field_1024:
                    revert with 0, 17
                if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) > !((block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024)):
                    revert with 0, 17
                if stor15[arg2].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[arg2].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                    if block.timestamp - stor15[arg2].field_768 / stor11 < 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024) and stor14[stor15[arg2].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9
                        if (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 - ((((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9
                    else:
                        idx = 0
                        while idx <= 10^9 / stor14[stor15[arg2].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024) and stor14[stor15[arg2].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9
                        if (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 - ((((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9
                else:
                    if 10 > !(10^9 / stor14[stor15[arg2].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[arg2].field_256].field_768) + 10 < 10^9 / stor14[stor15[arg2].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[arg2].field_768 / stor11 < (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor15[arg2].field_768 / stor11:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024) and stor14[stor15[arg2].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 / stor9 > !((((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !((0 / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if 0 / stor9 and arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / 0 / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !(0 / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += 0 / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9
                        if (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 - ((((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / (0 / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9
                    else:
                        idx = 0
                        while idx <= (10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor15[arg2].field_768 / stor11 < stor12:
                            revert with 0, 17
                        if stor14[stor15[arg2].field_256].field_1536 and (block.timestamp - stor15[arg2].field_768 / stor11) - stor12 > -1 / stor14[stor15[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor14[stor15[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024) and stor14[stor15[arg2].field_256].field_256 > -1 / ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 > !stor15[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536) and stor14[stor15[arg2].field_256].field_256 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536) - (stor12 * stor14[stor15[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor9 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9):
                            revert with 0, 17
                        stor15[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if stor15[arg2].field_1024 > !((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9):
                            revert with 0, 17
                        stor15[arg2].field_1024 += (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 / stor9
                        if (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 and arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 > -1 / (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280:
                            revert with 0, 17
                        if not stor9:
                            revert with 0, 18
                        if (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 < (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9:
                            revert with 0, 17
                        stor15[arg2].field_1280 = (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280 - ((((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) + (stor15[arg2].field_1280 * arg1 * stor9 / ((block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) - (stor12 * stor14[stor15[arg2].field_256].field_1536 * stor14[stor15[arg2].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) - (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_768 / stor11 * stor14[stor15[arg2].field_256].field_768 * stor14[stor15[arg2].field_256].field_256) + (block.timestamp - stor15[arg2].field_512 / stor11 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) - ((10^9 / stor14[stor15[arg2].field_256].field_768) + -(10^9 / stor14[stor15[arg2].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[arg2].field_256].field_1024 * stor14[stor15[arg2].field_256].field_256) / stor9) + stor15[arg2].field_1280) / stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    stor4 = 1
}

function safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) {
    require calldata.size - 4 >= 160
    require arg1 == arg1
    require arg2 == arg2
    require arg5 <= test266151307()
    require arg5 + 35 < calldata.size
    if arg5.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg5.length)) + 97 < 96 or ceil32(ceil32(arg5.length)) + 97 > test266151307():
        revert with 0, 65
    mem[96] = arg5.length
    require arg5 + arg5.length + 36 <= calldata.size
    mem[128 len arg5.length] = arg5[all]
    if bool(uint8(stor5.field_8)) != 1:
        revert with 0, 'Node: Transfer is disabled'
    if msg.sender == arg1:
        if not arg2:
            revert with 0, 'ERC1155: transfer to the zero address'
        mem[ceil32(ceil32(arg5.length)) + 97] = 1
        mem[ceil32(ceil32(arg5.length)) + 129] = arg3
        mem[ceil32(ceil32(arg5.length)) + 161] = 1
        mem[64] = ceil32(ceil32(arg5.length)) + 225
        mem[ceil32(ceil32(arg5.length)) + 193] = arg4
        if balanceOf[arg3][address(arg1)] < arg4:
            revert with 0, 'ERC1155: insufficient balance for transfer'
        balanceOf[arg3][address(arg1)] -= arg4
        if balanceOf[arg3][arg2] > !arg4:
            revert with 0, 17
        balanceOf[arg3][arg2] += arg4
        mem[ceil32(ceil32(arg5.length)) + 225] = arg3
        mem[ceil32(ceil32(arg5.length)) + 257] = arg4
        emit 0xfec3d581: arg3, arg4, msg.sender, arg1, arg2
        if not ext_code.size(arg2):
            mem[0] = arg1
            mem[32] = 16
            idx = 0
            s = 0
            while idx < sub_627dd5ca[address(arg1)]:
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if stor15[stor16[address(arg1)][idx]].field_256 != arg3:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 16
                    idx = idx + 1
                    s = s
                    continue 
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if not address(stor15[stor16[address(arg1)][idx]].field_0):
                    revert with 0, 'No node exist'
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if block.timestamp < stor15[stor16[address(arg1)][idx]].field_512:
                    revert with 0, 17
                if not stor11:
                    revert with 0, 18
                if block.timestamp < stor15[stor16[address(arg1)][idx]].field_768:
                    revert with 0, 17
                if not stor11:
                    revert with 0, 18
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6302 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6302] == bool(mem[_6302])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6602 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6602] == bool(mem[_6602])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6303 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6303] == bool(mem[_6303])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6604 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6604] == bool(mem[_6604])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6304 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6304] == bool(mem[_6304])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6606 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6606] == bool(mem[_6606])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6305 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6305] == bool(mem[_6305])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6608 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6608] == bool(mem[_6608])
                        else:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6306 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6306] == bool(mem[_6306])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6610 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6610] == bool(mem[_6610])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6307 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6307] == bool(mem[_6307])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6612 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6612] == bool(mem[_6612])
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6308 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6308] == bool(mem[_6308])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6614 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6614] == bool(mem[_6614])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6309 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6309] == bool(mem[_6309])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6616 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6616] == bool(mem[_6616])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6310 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6310] == bool(mem[_6310])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6618 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6618] == bool(mem[_6618])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6311 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6311] == bool(mem[_6311])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6620 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6620] == bool(mem[_6620])
                        else:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6312 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6312] == bool(mem[_6312])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6622 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6622] == bool(mem[_6622])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6313 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6313] == bool(mem[_6313])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _6624 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_6624] == bool(mem[_6624])
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                address(stor15[stor16[address(arg1)][idx]].field_0) = arg2
                if idx >= sub_627dd5ca[arg1]:
                    revert with 0, 50
                sub_627dd5ca[address(arg2)]++
                sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                sub_627dd5ca[address(arg1)][idx] = 0
                if s == -1:
                    revert with 0, 17
                if s + 1 >= arg4:
                if idx == -1:
                    revert with 0, 17
                mem[0] = arg1
                mem[32] = 16
                idx = idx + 1
                s = s + 1
                continue 
        mem[ceil32(ceil32(arg5.length)) + 229] = msg.sender
        mem[ceil32(ceil32(arg5.length)) + 261] = arg1
        mem[ceil32(ceil32(arg5.length)) + 293] = arg3
        mem[ceil32(ceil32(arg5.length)) + 325] = arg4
        mem[ceil32(ceil32(arg5.length)) + 357] = 160
        mem[ceil32(ceil32(arg5.length)) + 389] = arg5.length
        mem[ceil32(ceil32(arg5.length)) + 421 len ceil32(arg5.length)] = arg5[all], Mask(8 * ceil32(arg5.length) - arg5.length, -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256, 1) >> -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256
        if ceil32(arg5.length) <= arg5.length:
            require ext_code.size(arg2)
            call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                 gas gas_remaining wei
                args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
            mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
            if ext_call.success:
                mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[0] = arg1
                mem[32] = 16
                idx = 0
                s = 0
                while idx < sub_627dd5ca[address(arg1)]:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if stor15[stor16[address(arg1)][idx]].field_256 != arg3:
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = arg1
                        mem[32] = 16
                        idx = idx + 1
                        s = s
                        continue 
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor15[stor16[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                        revert with 0, 50
                    if block.timestamp < stor15[stor16[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor11:
                        revert with 0, 18
                    if block.timestamp < stor15[stor16[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor11:
                        revert with 0, 18
                    if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                        revert with 0, 50
                    if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9638 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9638] == bool(mem[_9638])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10214 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10214] == bool(mem[_10214])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9639 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9639] == bool(mem[_9639])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10216 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10216] == bool(mem[_10216])
                        else:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                    revert with 0, 50
                                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                        if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9640 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9640] == bool(mem[_9640])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10218 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10218] == bool(mem[_10218])
                                else:
                                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                        if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9641 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9641] == bool(mem[_9641])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10220 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10220] == bool(mem[_10220])
                            else:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                    revert with 0, 50
                                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                        if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9642 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9642] == bool(mem[_9642])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10222 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10222] == bool(mem[_10222])
                                else:
                                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                        if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9643 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9643] == bool(mem[_9643])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10224 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10224] == bool(mem[_10224])
                    else:
                        if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9644 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9644] == bool(mem[_9644])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10226 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10226] == bool(mem[_10226])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9645 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9645] == bool(mem[_9645])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10228 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10228] == bool(mem[_10228])
                        else:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                    revert with 0, 50
                                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                        if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9646 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9646] == bool(mem[_9646])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10230 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10230] == bool(mem[_10230])
                                else:
                                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                        if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9647 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9647] == bool(mem[_9647])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10232 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10232] == bool(mem[_10232])
                            else:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                    revert with 0, 50
                                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                        if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9648 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9648] == bool(mem[_9648])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10234 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10234] == bool(mem[_10234])
                                else:
                                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                        if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9649 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_9649] == bool(mem[_9649])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 16
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                            revert with 0, 17
                                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor9:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 15
                                        if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                            revert with 0, 17
                                        stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10236 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10236] == bool(mem[_10236])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor15[stor16[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if s == -1:
                        revert with 0, 17
                    if s + 1 >= arg4:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 16
                    idx = idx + 1
                    s = s + 1
                    continue 
            if return_data.size <= 3:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[0 len 4] = ext_call.return_data[0 len 4]
            if uint32(arg2) >> 224 != Error(string arg1):
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if return_data.size < 68:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            mem[ceil32(ceil32(arg5.length)) + 225 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
            if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] > test266151307():
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 32 > return_data.size - 4:
                revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
            if floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226 < 225 or ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226 > test266151307():
                revert with 0, 65
            mem[64] = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
            if not ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225:
                _2776 = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
                mem[ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 52
                mem[_2776 + 68] = 'ERC1155: transfer to non ERC1155'
                mem[_2776 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
                revert with memory
                  from mem[64]
                   len _2776 + -mem[64] + 132
            _2766 = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
            mem[ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            _2785 = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225]
            mem[mem[64] + 36] = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225]
            mem[_2766 + 68 len ceil32(_2785)] = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 257 len ceil32(_2785)]
            if ceil32(_2785) > _2785:
                mem[_2766 + _2785 + 68] = 0
            revert with memory
              from mem[64]
               len ceil32(_2785) + _2766 + -mem[64] + 68
        mem[ceil32(ceil32(arg5.length)) + arg5.length + 421] = 0
        require ext_code.size(arg2)
        call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
             gas gas_remaining wei
            args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
        mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
        if ext_call.success:
            mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
            require return_data.size >= 32
            require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
            if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
            mem[0] = arg1
            mem[32] = 16
            idx = 0
            s = 0
            while idx < sub_627dd5ca[address(arg1)]:
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if stor15[stor16[address(arg1)][idx]].field_256 != arg3:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 16
                    idx = idx + 1
                    s = s
                    continue 
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if not address(stor15[stor16[address(arg1)][idx]].field_0):
                    revert with 0, 'No node exist'
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if block.timestamp < stor15[stor16[address(arg1)][idx]].field_512:
                    revert with 0, 17
                if not stor11:
                    revert with 0, 18
                if block.timestamp < stor15[stor16[address(arg1)][idx]].field_768:
                    revert with 0, 17
                if not stor11:
                    revert with 0, 18
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9650 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9650] == bool(mem[_9650])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10238 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10238] == bool(mem[_10238])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9651 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9651] == bool(mem[_9651])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10240 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10240] == bool(mem[_10240])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9652 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9652] == bool(mem[_9652])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10242 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10242] == bool(mem[_10242])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9653 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9653] == bool(mem[_9653])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10244 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10244] == bool(mem[_10244])
                        else:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9654 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9654] == bool(mem[_9654])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10246 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10246] == bool(mem[_10246])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9655 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9655] == bool(mem[_9655])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10248 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10248] == bool(mem[_10248])
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9656 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9656] == bool(mem[_9656])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10250 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10250] == bool(mem[_10250])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9657 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9657] == bool(mem[_9657])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10252 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10252] == bool(mem[_10252])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9658 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9658] == bool(mem[_9658])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10254 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10254] == bool(mem[_10254])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9659 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9659] == bool(mem[_9659])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10256 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10256] == bool(mem[_10256])
                        else:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9660 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9660] == bool(mem[_9660])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10258 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10258] == bool(mem[_10258])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9661 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9661] == bool(mem[_9661])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10260 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10260] == bool(mem[_10260])
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                address(stor15[stor16[address(arg1)][idx]].field_0) = arg2
                if idx >= sub_627dd5ca[arg1]:
                    revert with 0, 50
                sub_627dd5ca[address(arg2)]++
                sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                sub_627dd5ca[address(arg1)][idx] = 0
                if s == -1:
                    revert with 0, 17
                if s + 1 >= arg4:
                if idx == -1:
                    revert with 0, 17
                mem[0] = arg1
                mem[32] = 16
                idx = idx + 1
                s = s + 1
                continue 
        if return_data.size <= 3:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[0 len 4] = ext_call.return_data[0 len 4]
        if uint32(arg2) >> 224 != Error(string arg1):
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if return_data.size < 68:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[ceil32(ceil32(arg5.length)) + 225 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
        if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 32 > return_data.size - 4:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226 < 225 or ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226 > test266151307():
            revert with 0, 65
        mem[64] = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
        if not ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225:
            _2788 = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
            mem[ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 52
            mem[_2788 + 68] = 'ERC1155: transfer to non ERC1155'
            mem[_2788 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
            revert with memory
              from mem[64]
               len _2788 + -mem[64] + 132
        _2778 = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
        mem[ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        _2799 = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225]
        mem[mem[64] + 36] = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225]
        mem[_2778 + 68 len ceil32(_2799)] = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 257 len ceil32(_2799)]
        if ceil32(_2799) > _2799:
            mem[_2778 + _2799 + 68] = 0
        revert with memory
          from mem[64]
           len ceil32(_2799) + _2778 + -mem[64] + 68
    if not stor1[address(arg1)][address(msg.sender)]:
        revert with 0, 'ERC1155: caller is not owner nor approved'
    if not arg2:
        revert with 0, 'ERC1155: transfer to the zero address'
    mem[ceil32(ceil32(arg5.length)) + 97] = 1
    mem[ceil32(ceil32(arg5.length)) + 129] = arg3
    mem[ceil32(ceil32(arg5.length)) + 161] = 1
    mem[64] = ceil32(ceil32(arg5.length)) + 225
    mem[ceil32(ceil32(arg5.length)) + 193] = arg4
    if balanceOf[arg3][address(arg1)] < arg4:
        revert with 0, 'ERC1155: insufficient balance for transfer'
    balanceOf[arg3][address(arg1)] -= arg4
    if balanceOf[arg3][arg2] > !arg4:
        revert with 0, 17
    balanceOf[arg3][arg2] += arg4
    mem[ceil32(ceil32(arg5.length)) + 225] = arg3
    mem[ceil32(ceil32(arg5.length)) + 257] = arg4
    emit 0xfec3d581: arg3, arg4, msg.sender, arg1, arg2
    if not ext_code.size(arg2):
        mem[0] = arg1
        mem[32] = 16
        idx = 0
        s = 0
        while idx < sub_627dd5ca[address(arg1)]:
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            if stor15[stor16[address(arg1)][idx]].field_256 != arg3:
                if idx == -1:
                    revert with 0, 17
                mem[0] = arg1
                mem[32] = 16
                idx = idx + 1
                s = s
                continue 
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            if not address(stor15[stor16[address(arg1)][idx]].field_0):
                revert with 0, 'No node exist'
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if block.timestamp < stor15[stor16[address(arg1)][idx]].field_512:
                revert with 0, 17
            if not stor11:
                revert with 0, 18
            if block.timestamp < stor15[stor16[address(arg1)][idx]].field_768:
                revert with 0, 17
            if not stor11:
                revert with 0, 18
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                        revert with 0, 50
                    if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            t = 0
                            while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                            if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6314 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_6314] == bool(mem[_6314])
                        else:
                            t = 0
                            while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6626 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_6626] == bool(mem[_6626])
                    else:
                        if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            t = 0
                            while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                            if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6315 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_6315] == bool(mem[_6315])
                        else:
                            t = 0
                            while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6628 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_6628] == bool(mem[_6628])
                else:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6316 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6316] == bool(mem[_6316])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6630 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6630] == bool(mem[_6630])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6317 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6317] == bool(mem[_6317])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6632 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6632] == bool(mem[_6632])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                            revert with 0, 17
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6318 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6318] == bool(mem[_6318])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6634 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6634] == bool(mem[_6634])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6319 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6319] == bool(mem[_6319])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6636 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6636] == bool(mem[_6636])
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                        revert with 0, 50
                    if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            t = 0
                            while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                            if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6320 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_6320] == bool(mem[_6320])
                        else:
                            t = 0
                            while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6638 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_6638] == bool(mem[_6638])
                    else:
                        if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            t = 0
                            while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                            if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6321 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_6321] == bool(mem[_6321])
                        else:
                            t = 0
                            while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6640 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_6640] == bool(mem[_6640])
                else:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6322 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6322] == bool(mem[_6322])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6642 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6642] == bool(mem[_6642])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6323 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6323] == bool(mem[_6323])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6644 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6644] == bool(mem[_6644])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                            revert with 0, 17
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6324 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6324] == bool(mem[_6324])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6646 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6646] == bool(mem[_6646])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6325 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6325] == bool(mem[_6325])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6648 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_6648] == bool(mem[_6648])
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            address(stor15[stor16[address(arg1)][idx]].field_0) = arg2
            if idx >= sub_627dd5ca[arg1]:
                revert with 0, 50
            sub_627dd5ca[address(arg2)]++
            sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            sub_627dd5ca[address(arg1)][idx] = 0
            if s == -1:
                revert with 0, 17
            if s + 1 >= arg4:
            if idx == -1:
                revert with 0, 17
            mem[0] = arg1
            mem[32] = 16
            idx = idx + 1
            s = s + 1
            continue 
    mem[ceil32(ceil32(arg5.length)) + 229] = msg.sender
    mem[ceil32(ceil32(arg5.length)) + 261] = arg1
    mem[ceil32(ceil32(arg5.length)) + 293] = arg3
    mem[ceil32(ceil32(arg5.length)) + 325] = arg4
    mem[ceil32(ceil32(arg5.length)) + 357] = 160
    mem[ceil32(ceil32(arg5.length)) + 389] = arg5.length
    mem[ceil32(ceil32(arg5.length)) + 421 len ceil32(arg5.length)] = arg5[all], Mask(8 * ceil32(arg5.length) - arg5.length, -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256, 1) >> -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256
    if ceil32(arg5.length) <= arg5.length:
        require ext_code.size(arg2)
        call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
             gas gas_remaining wei
            args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
        mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
        if ext_call.success:
            mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
            require return_data.size >= 32
            require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
            if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
            mem[0] = arg1
            mem[32] = 16
            idx = 0
            s = 0
            while idx < sub_627dd5ca[address(arg1)]:
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if stor15[stor16[address(arg1)][idx]].field_256 != arg3:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 16
                    idx = idx + 1
                    s = s
                    continue 
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if not address(stor15[stor16[address(arg1)][idx]].field_0):
                    revert with 0, 'No node exist'
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if block.timestamp < stor15[stor16[address(arg1)][idx]].field_512:
                    revert with 0, 17
                if not stor11:
                    revert with 0, 18
                if block.timestamp < stor15[stor16[address(arg1)][idx]].field_768:
                    revert with 0, 17
                if not stor11:
                    revert with 0, 18
                if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                    revert with 0, 50
                if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9662 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9662] == bool(mem[_9662])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10262 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10262] == bool(mem[_10262])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9663 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9663] == bool(mem[_9663])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10264 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10264] == bool(mem[_10264])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9664 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9664] == bool(mem[_9664])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10266 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10266] == bool(mem[_10266])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9665 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9665] == bool(mem[_9665])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10268 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10268] == bool(mem[_10268])
                        else:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9666 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9666] == bool(mem[_9666])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10270 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10270] == bool(mem[_10270])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9667 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9667] == bool(mem[_9667])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10272 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10272] == bool(mem[_10272])
                else:
                    if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9668 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9668] == bool(mem[_9668])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10274 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10274] == bool(mem[_10274])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9669 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9669] == bool(mem[_9669])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10276 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10276] == bool(mem[_10276])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9670 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9670] == bool(mem[_9670])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10278 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10278] == bool(mem[_10278])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9671 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9671] == bool(mem[_9671])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10280 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10280] == bool(mem[_10280])
                        else:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                                revert with 0, 17
                            if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                                revert with 0, 17
                            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                                revert with 0, 50
                            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9672 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9672] == bool(mem[_9672])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10282 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10282] == bool(mem[_10282])
                            else:
                                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                    if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _9673 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_9673] == bool(mem[_9673])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 16
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                        revert with 0, 17
                                    if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor9:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 15
                                    if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                        revert with 0, 17
                                    stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10284 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10284] == bool(mem[_10284])
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                address(stor15[stor16[address(arg1)][idx]].field_0) = arg2
                if idx >= sub_627dd5ca[arg1]:
                    revert with 0, 50
                sub_627dd5ca[address(arg2)]++
                sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                sub_627dd5ca[address(arg1)][idx] = 0
                if s == -1:
                    revert with 0, 17
                if s + 1 >= arg4:
                if idx == -1:
                    revert with 0, 17
                mem[0] = arg1
                mem[32] = 16
                idx = idx + 1
                s = s + 1
                continue 
        if return_data.size <= 3:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[0 len 4] = ext_call.return_data[0 len 4]
        if uint32(arg2) >> 224 != Error(string arg1):
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if return_data.size < 68:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[ceil32(ceil32(arg5.length)) + 225 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
        if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] > test266151307():
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 32 > return_data.size - 4:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        if floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226 < 225 or ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226 > test266151307():
            revert with 0, 65
        mem[64] = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
        if not ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225:
            _2780 = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
            mem[ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 52
            mem[_2780 + 68] = 'ERC1155: transfer to non ERC1155'
            mem[_2780 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
            revert with memory
              from mem[64]
               len _2780 + -mem[64] + 132
        _2771 = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
        mem[ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        _2791 = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225]
        mem[mem[64] + 36] = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225]
        mem[_2771 + 68 len ceil32(_2791)] = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 257 len ceil32(_2791)]
        if ceil32(_2791) > _2791:
            mem[_2771 + _2791 + 68] = 0
        revert with memory
          from mem[64]
           len ceil32(_2791) + _2771 + -mem[64] + 68
    mem[ceil32(ceil32(arg5.length)) + arg5.length + 421] = 0
    require ext_code.size(arg2)
    call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
         gas gas_remaining wei
        args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
    mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
    if ext_call.success:
        mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
        require return_data.size >= 32
        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
        if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
            revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
        mem[0] = arg1
        mem[32] = 16
        idx = 0
        s = 0
        while idx < sub_627dd5ca[address(arg1)]:
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            if stor15[stor16[address(arg1)][idx]].field_256 != arg3:
                if idx == -1:
                    revert with 0, 17
                mem[0] = arg1
                mem[32] = 16
                idx = idx + 1
                s = s
                continue 
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            if not address(stor15[stor16[address(arg1)][idx]].field_0):
                revert with 0, 'No node exist'
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if block.timestamp < stor15[stor16[address(arg1)][idx]].field_512:
                revert with 0, 17
            if not stor11:
                revert with 0, 18
            if block.timestamp < stor15[stor16[address(arg1)][idx]].field_768:
                revert with 0, 17
            if not stor11:
                revert with 0, 18
            if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                revert with 0, 50
            if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                        revert with 0, 50
                    if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            t = 0
                            while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                            if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9674 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_9674] == bool(mem[_9674])
                        else:
                            t = 0
                            while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _10286 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_10286] == bool(mem[_10286])
                    else:
                        if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            t = 0
                            while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                            if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9675 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_9675] == bool(mem[_9675])
                        else:
                            t = 0
                            while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _10288 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_10288] == bool(mem[_10288])
                else:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9676 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9676] == bool(mem[_9676])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10290 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10290] == bool(mem[_10290])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9677 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9677] == bool(mem[_9677])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10292 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10292] == bool(mem[_10292])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                            revert with 0, 17
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9678 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9678] == bool(mem[_9678])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10294 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10294] == bool(mem[_10294])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9679 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9679] == bool(mem[_9679])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !(((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10296 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10296] == bool(mem[_10296])
            else:
                if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                        revert with 0, 50
                    if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                            t = 0
                            while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                            if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9680 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_9680] == bool(mem[_9680])
                        else:
                            t = 0
                            while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _10298 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_10298] == bool(mem[_10298])
                    else:
                        if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            t = 0
                            while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                            if 0 / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), (0 / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _9681 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_9681] == bool(mem[_9681])
                        else:
                            t = 0
                            while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if 0 > !t:
                                    revert with 0, 17
                                if t == -1:
                                    revert with 0, 17
                                mem[0] = arg1
                                mem[32] = 16
                                t = t + 1
                                continue 
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                revert with 0, 17
                            if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                revert with 0, 17
                            if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                revert with 0, 17
                            if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                revert with 0, 17
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                revert with 0, 17
                            if not stor9:
                                revert with 0, 18
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                            if idx >= sub_627dd5ca[address(arg1)]:
                                revert with 0, 50
                            mem[0] = sub_627dd5ca[address(arg1)][idx]
                            mem[32] = 15
                            if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                revert with 0, 17
                            stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                            if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                revert with 0, 17
                            mem[mem[64] + 4] = arg1
                            mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            require ext_code.size(sub_85adc8b0Address)
                            call sub_85adc8b0Address.0xa9059cbb with:
                                 gas gas_remaining wei
                                args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _10300 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require mem[_10300] == bool(mem[_10300])
                else:
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        revert with 0, 17
                    if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                        revert with 0, 17
                    if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) >= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9682 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9682] == bool(mem[_9682])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10302 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10302] == bool(mem[_10302])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9683 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9683] == bool(mem[_9683])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10304 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10304] == bool(mem[_10304])
                    else:
                        if block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 < block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                            revert with 0, 17
                        if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11):
                            revert with 0, 17
                        if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024:
                            revert with 0, 17
                        if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024)):
                            revert with 0, 17
                        if stor15[stor16[address(arg1)][idx]].field_256 >= stor14.length:
                            revert with 0, 50
                        if not stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 18
                        if not 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9684 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9684] == bool(mem[_9684])
                            else:
                                t = 0
                                while t <= 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10306 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10306] == bool(mem[_10306])
                        else:
                            if 10 > !(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768):
                                revert with 0, 17
                            if (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10:
                                revert with 0, 17
                            if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                t = 0
                                while t <= block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > 0:
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !(0 / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += 0 / stor9
                                if 0 / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), (0 / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _9685 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_9685] == bool(mem[_9685])
                            else:
                                t = 0
                                while t <= (10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    if 0 > !t:
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    mem[0] = arg1
                                    mem[32] = 16
                                    t = t + 1
                                    continue 
                                if block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 < stor12:
                                    revert with 0, 17
                                if stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11) - stor12 > -1 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536:
                                    revert with 0, 17
                                if False and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1280 > 0:
                                    revert with 0, 17
                                if 0 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536)):
                                    revert with 0, 17
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !stor15[stor16[address(arg1)][idx]].field_1280:
                                    revert with 0, 17
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) and stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536):
                                    revert with 0, 17
                                if not stor9:
                                    revert with 0, 18
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                stor15[stor16[address(arg1)][idx]].field_768 = block.timestamp
                                if idx >= sub_627dd5ca[address(arg1)]:
                                    revert with 0, 50
                                mem[0] = sub_627dd5ca[address(arg1)][idx]
                                mem[32] = 15
                                if stor15[stor16[address(arg1)][idx]].field_1024 > !((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9):
                                    revert with 0, 17
                                stor15[stor16[address(arg1)][idx]].field_1024 += (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9
                                if (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9 > !((((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280):
                                    revert with 0, 17
                                mem[mem[64] + 4] = arg1
                                mem[mem[64] + 36] = ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                require ext_code.size(sub_85adc8b0Address)
                                call sub_85adc8b0Address.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args address(arg1), ((block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (stor12 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1536 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + (((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_768 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor15[stor16[address(arg1)][idx]].field_512 / stor11 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor14[stor15[stor16[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_1024 * stor14[stor15[stor16[address(arg1)][idx]].field_256].field_256) / stor9) + stor15[stor16[address(arg1)][idx]].field_1280
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _10308 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require mem[_10308] == bool(mem[_10308])
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            address(stor15[stor16[address(arg1)][idx]].field_0) = arg2
            if idx >= sub_627dd5ca[arg1]:
                revert with 0, 50
            sub_627dd5ca[address(arg2)]++
            sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
            if idx >= sub_627dd5ca[address(arg1)]:
                revert with 0, 50
            sub_627dd5ca[address(arg1)][idx] = 0
            if s == -1:
                revert with 0, 17
            if s + 1 >= arg4:
            if idx == -1:
                revert with 0, 17
            mem[0] = arg1
            mem[32] = 16
            idx = idx + 1
            s = s + 1
            continue 
    if return_data.size <= 3:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    mem[0 len 4] = ext_call.return_data[0 len 4]
    if uint32(arg2) >> 224 != Error(string arg1):
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if return_data.size < 68:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    mem[ceil32(ceil32(arg5.length)) + 225 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
    if return_data.size < ext_call.return_data[0] + 36 or ext_call.return_data[0] > test266151307():
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] > test266151307():
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 32 > return_data.size - 4:
        revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
    if floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226 < 225 or ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
    if not ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225:
        _2794 = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
        mem[ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 52
        mem[_2794 + 68] = 'ERC1155: transfer to non ERC1155'
        mem[_2794 + 100] = 0x526563656976657220696d706c656d656e746572000000000000000000000000
        revert with memory
          from mem[64]
           len _2794 + -mem[64] + 132
    _2782 = ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226
    mem[ceil32(ceil32(arg5.length)) + floor32(ext_call.return_data[0] + mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225] + 31) + 226] = 0x8c379a000000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = 32
    _2805 = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225]
    mem[mem[64] + 36] = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 225]
    mem[_2782 + 68 len ceil32(_2805)] = mem[ceil32(ceil32(arg5.length)) + ext_call.return_data[0] + 257 len ceil32(_2805)]
    if ceil32(_2805) > _2805:
        mem[_2782 + _2805 + 68] = 0
    revert with memory
      from mem[64]
       len ceil32(_2805) + _2782 + -mem[64] + 68
}



}
