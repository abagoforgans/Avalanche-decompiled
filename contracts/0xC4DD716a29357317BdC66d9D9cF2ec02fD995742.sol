contract main {




// =====================  Runtime code  =====================


#
#  - getStats()
#
const name = '', 0

const symbol = 'RISESTAKE', 0


address owner;
array of struct sub_6c520f8b;
mapping of uint8 stor2;
array of address sub_cc4285e9;
mapping of uint8 stor4;
uint256 sub_5a8c5d60;
uint256 sub_5d98fc27;
address sub_270bf52eAddress;
address stor8;
address sub_7c68e584Address;
address stor10;
address sub_92b8b617Address;
address pairAddress;
address stor13;
address sub_e976faeeAddress;
address stor15;
address sub_8893d55aAddress;
address stor17;
address sub_04bf1d6bAddress;
address stor19;
address sub_c4c6c237Address;
uint8 stor21;
uint8 decimals; offset 160
uint8 stor21; offset 168
address stor21;
mapping of uint8 stor99;

function sub_04bf1d6b(?) {
    return sub_04bf1d6bAddress
}

function sub_270bf52e(?) {
    return sub_270bf52eAddress
}

function decimals() {
    return decimals
}

function sub_5a8c5d60(?) {
    return sub_5a8c5d60
}

function sub_5d98fc27(?) {
    return sub_5d98fc27
}

function sub_6c520f8b(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 < uint256(sub_6c520f8b[arg1].field_0)
    return address(sub_6c520f8b[arg1][arg2].field_0)
}

function sub_7c68e584(?) {
    return sub_7c68e584Address
}

function sub_8893d55a(?) {
    return sub_8893d55aAddress
}

function owner() {
    return owner
}

function sub_92535c78(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return bool(stor4[arg1])
}

function sub_92b8b617(?) {
    return sub_92b8b617Address
}

function sub_a8863048(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    return bool(stor2[arg1][arg2])
}

function pairAddress() {
    return pairAddress
}

function sub_b898b1e8(?) {
    return sub_cc4285e9.length
}

function sub_c4c6c237(?) {
    return sub_c4c6c237Address
}

function sub_cc4285e9(?) {
    require calldata.size - 4 >= 32
    require arg1 < sub_cc4285e9.length
    return sub_cc4285e9[arg1]
}

function isRegistered(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return bool(stor2[address(arg1)][address(arg2)])
}

function sub_e976faee(?) {
    return sub_e976faeeAddress
}

function totalSupply() {
    require ext_code.size(stor8)
    staticcall stor8.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_f128b0c1(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    call address(arg1) with:
       value eth.balance(this.address) wei
         gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'to should not be the zero address'
    if not arg2:
        revert with 0, 'value should not be zero'
    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'This is a virtual token and cannot be transferred'
}

function sub_2b1087db(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, '_usdOracleAddress should not be the zero address'
    emit 0xadb18193: sub_e976faeeAddress, address(arg1)
    sub_e976faeeAddress = address(arg1)
    stor15 = address(arg1)
}

function sub_3477320c(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    '_everBridgeVaultAddress should not be the zero address'
    emit 0xae987d6c: sub_92b8b617Address, address(arg1)
    sub_92b8b617Address = address(arg1)
}

function sub_cb616f2f(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, '_everStakeAddress should not be the zero address'
    emit 0x2ff53b5f: sub_7c68e584Address, address(arg1)
    sub_7c68e584Address = address(arg1)
    stor10 = address(arg1)
}

function sub_7872e268(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'contractAddress should not be the zero address'
    if not address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'contractAddress should not be the zero address'
    if this.address == address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'contractAddress not be this contract'
    require ext_code.size(stor10)
    staticcall stor10.0x7bb5ce37 with:
            gas gas_remaining wei
           args address(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if not stor2[ext_call.return_data[12 len 20]][address(arg1)]:
        if ext_call.return_data[12 len 20] != msg.sender:
            revert with 0, 'ownerAddress is not the depositor of this stake'
        stor2[address(ext_call.return_data[0])][address(arg1)] = 1
        uint256(sub_6c520f8b[address(ext_call.return_data[0])].field_0)++
        address(sub_6c520f8b[address(ext_call.return_data[0])][uint256(sub_6c520f8b[address(ext_call.return_data[0])].field_0)].field_0) = address(arg1)
}

function sub_171c1fda(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Token Address can not be a zero address'
    if not address(arg2):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'To Address can not be a zero address'
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'Balance is zero'
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(arg1))
    call address(arg1).0xa9059cbb with:
         gas gas_remaining wei
        args address(arg2), ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function sub_15d5679e(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not stor2[msg.sender][address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'contractAddress is not registered staking contract'
    if stor2[address(msg.sender)][address(arg1)]:
        stor2[address(msg.sender)][address(arg1)] = 0
        idx = 0
        while idx < uint256(sub_6c520f8b[address(msg.sender)].field_0):
            mem[0] = sha3(address(msg.sender), 1)
            if address(sub_6c520f8b[address(msg.sender)][idx].field_0) != address(arg1):
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if uint256(sub_6c520f8b[address(msg.sender)].field_0) < 1:
                revert with 0, 17
            if uint256(sub_6c520f8b[address(msg.sender)].field_0) - 1 >= uint256(sub_6c520f8b[address(msg.sender)].field_0):
                revert with 0, 50
            if idx >= uint256(sub_6c520f8b[address(msg.sender)].field_0):
                revert with 0, 50
            address(sub_6c520f8b[address(msg.sender)][idx].field_0) = address(sub_6c520f8b[address(msg.sender)][uint256(sub_6c520f8b[address(msg.sender)].field_0)].field_0)
            if not uint256(sub_6c520f8b[address(msg.sender)].field_0):
                revert with 0, 49
            address(sub_6c520f8b[address(msg.sender)][uint256(sub_6c520f8b[address(msg.sender)].field_0)].field_0) = 0
            uint256(sub_6c520f8b[address(msg.sender)].field_0)--
}

function sub_dba58991(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'contractAddress should not be the zero address'
    if not address(arg2):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'contractAddress should not be the zero address'
    if this.address == address(arg2):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'contractAddress not be this contract'
    require ext_code.size(stor10)
    staticcall stor10.0x7bb5ce37 with:
            gas gas_remaining wei
           args address(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if not stor2[ext_call.return_data[12 len 20]][address(arg2)]:
        if ext_call.return_data[12 len 20] != address(arg1):
            revert with 0, 'ownerAddress is not the depositor of this stake'
        stor2[address(ext_call.return_data[0])][address(arg2)] = 1
        uint256(sub_6c520f8b[address(ext_call.return_data[0])].field_0)++
        address(sub_6c520f8b[address(ext_call.return_data[0])][uint256(sub_6c520f8b[address(ext_call.return_data[0])].field_0)].field_0) = address(arg2)
    if not stor4[address(arg2)]:
        sub_cc4285e9.length++
        sub_cc4285e9[sub_cc4285e9.length] = address(arg2)
        stor4[address(arg2)] = 1
}

function sub_85ac393f(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    mem[64] = (32 * uint256(sub_6c520f8b[address(arg1)].field_0)) + 128
    mem[96] = uint256(sub_6c520f8b[address(arg1)].field_0)
    if not uint256(sub_6c520f8b[address(arg1)].field_0):
        mem[(32 * uint256(sub_6c520f8b[address(arg1)].field_0)) + 128] = 32
        mem[(32 * uint256(sub_6c520f8b[address(arg1)].field_0)) + 160] = uint256(sub_6c520f8b[address(arg1)].field_0)
        idx = 0
        s = (32 * uint256(sub_6c520f8b[address(arg1)].field_0)) + 192
        t = 128
        while idx < uint256(sub_6c520f8b[address(arg1)].field_0):
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from (32 * uint256(sub_6c520f8b[address(arg1)].field_0)) + 128
           len (96 * uint256(sub_6c520f8b[address(arg1)].field_0)) + 64
    mem[128] = address(sub_6c520f8b[address(arg1)].field_0)
    idx = 128
    s = 0
    while (32 * uint256(sub_6c520f8b[address(arg1)].field_0)) + 96 > idx:
        mem[idx + 32] = address(sub_6c520f8b[address(arg1)][s].field_256)
        idx = idx + 32
        s = s + 1
        continue 
    mem[(32 * uint256(sub_6c520f8b[address(arg1)].field_0)) + 128] = 32
    mem[(32 * uint256(sub_6c520f8b[address(arg1)].field_0)) + 160] = uint256(sub_6c520f8b[address(arg1)].field_0)
    idx = 0
    s = mem[64] + 64
    t = 128
    while idx < uint256(sub_6c520f8b[address(arg1)].field_0):
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    return memory
      from mem[64]
       len (64 * uint256(sub_6c520f8b[address(arg1)].field_0)) + -mem[64] + 192
}

function sub_a957daf7(?) {
    require ext_code.size(stor19)
    staticcall stor19.0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(stor21.field_0))
        staticcall address(stor21.field_0).0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        return 0 / ext_call.return_data[0], uint8(ext_call.return_data[0])
    if ext_call.return_data[0] and sub_5d98fc27 > -1 / ext_call.return_data[0]:
        revert with 0, 17
    if not ext_call.return_data[0]:
        revert with 0, 18
    if ext_call.return_data[0] * sub_5d98fc27 / ext_call.return_data[0] != sub_5d98fc27:
        revert with 0, 'SafeMath: multiplication overflow'
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    return ext_call.return_data[0] * sub_5d98fc27 / ext_call.return_data[0], uint8(ext_call.return_data[0])
}

function sub_ea7c0297(?) payable {
    mem[64] = 96
    require not msg.value
    require calldata.size - 4 >= 32
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    require ('cd', 4).length <= test266151307()
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    idx = 0
    while idx < ('cd', 4).length:
        require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
        if not msg.sender:
            revert with 0, 'contractAddress should not be the zero address'
        if not address(cd[((32 * idx) + cd[4] + 36)]):
            revert with 0, 'contractAddress should not be the zero address'
        if this.address == address(cd[((32 * idx) + cd[4] + 36)]):
            revert with 0, 'contractAddress not be this contract'
        mem[mem[64] + 4] = address(cd[((32 * idx) + cd[4] + 36)])
        require ext_code.size(stor10)
        staticcall stor10.0x7bb5ce37 with:
                gas gas_remaining wei
               args address(cd[((32 * idx) + cd[4] + 36)])
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _27 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _28 = mem[_27]
        require mem[_27] == mem[_27 + 12 len 20]
        mem[0] = mem[_27 + 12 len 20]
        _29 = sha3(mem[0], 2)
        mem[0] = address(cd[((32 * idx) + cd[4] + 36)])
        mem[32] = _29
        if not stor[_29][address(cd[((32 * idx) + cd[4] + 36)])]:
            if address(_28) != msg.sender:
                revert with 0, 'ownerAddress is not the depositor of this stake'
            stor2[address(_28)][address(cd[((32 * idx) + cd[4] + 36)])] = 1
            mem[32] = 1
            uint256(sub_6c520f8b[address(_28)].field_0)++
            mem[0] = sha3(address(_28), 1)
            address(sub_6c520f8b[address(_28)][uint256(sub_6c520f8b[address(_28)].field_0)].field_0) = address(cd[((32 * idx) + cd[4] + 36)])
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
}

function sub_feb1dc6d(?) {
    require calldata.size - 4 >= 32
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    require ('cd', 4).length <= test266151307()
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    idx = 0
    while idx < ('cd', 4).length:
        require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
        if not stor2[msg.sender][address(cd[((32 * idx) + cd[4] + 36)])]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'contractAddress is not registered staking contract'
        mem[0] = address(cd[((32 * idx) + cd[4] + 36)])
        mem[32] = sha3(address(msg.sender), 2)
        if stor2[address(msg.sender)][address(cd[((32 * idx) + cd[4] + 36)])]:
            stor2[address(msg.sender)][address(cd[((32 * idx) + cd[4] + 36)])] = 0
            mem[0] = msg.sender
            mem[32] = 1
            s = 0
            while s < uint256(sub_6c520f8b[address(msg.sender)].field_0):
                mem[0] = sha3(address(msg.sender), 1)
                if address(sub_6c520f8b[address(msg.sender)][s].field_0) != address(cd[((32 * idx) + cd[4] + 36)]):
                    if s == -1:
                        revert with 0, 17
                    s = s + 1
                    continue 
                if uint256(sub_6c520f8b[address(msg.sender)].field_0) < 1:
                    revert with 0, 17
                if uint256(sub_6c520f8b[address(msg.sender)].field_0) - 1 >= uint256(sub_6c520f8b[address(msg.sender)].field_0):
                    revert with 0, 50
                if s >= uint256(sub_6c520f8b[address(msg.sender)].field_0):
                    revert with 0, 50
                address(sub_6c520f8b[address(msg.sender)][s].field_0) = address(sub_6c520f8b[address(msg.sender)][uint256(sub_6c520f8b[address(msg.sender)].field_0)].field_0)
                if not uint256(sub_6c520f8b[address(msg.sender)].field_0):
                    revert with 0, 49
                mem[0] = sha3(address(msg.sender), 1)
                address(sub_6c520f8b[address(msg.sender)][uint256(sub_6c520f8b[address(msg.sender)].field_0)].field_0) = 0
                uint256(sub_6c520f8b[address(msg.sender)].field_0)--
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
}

function sub_7e7cf198(?) payable {
    mem[64] = 96
    require not msg.value
    require calldata.size - 4 >= 64
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    require ('cd', 4).length <= test266151307()
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    require ('cd', 36).length <= test266151307()
    require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if ('cd', 36).length == ('cd', 4).length:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'ownerAddresses and contractAddresses should be same length'
    idx = 0
    while idx < ('cd', 36).length:
        require cd[((32 * idx) + cd[36] + 36)] == address(cd[((32 * idx) + cd[36] + 36)])
        if idx >= ('cd', 4).length:
            revert with 0, 50
        require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
        if not address(cd[((32 * idx) + cd[4] + 36)]):
            revert with 0, 'contractAddress should not be the zero address'
        if not address(cd[((32 * idx) + cd[36] + 36)]):
            revert with 0, 'contractAddress should not be the zero address'
        if this.address == address(cd[((32 * idx) + cd[36] + 36)]):
            revert with 0, 'contractAddress not be this contract'
        mem[mem[64] + 4] = address(cd[((32 * idx) + cd[36] + 36)])
        require ext_code.size(stor10)
        staticcall stor10.0x7bb5ce37 with:
                gas gas_remaining wei
               args address(cd[((32 * idx) + cd[36] + 36)])
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _35 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _36 = mem[_35]
        require mem[_35] == mem[_35 + 12 len 20]
        mem[0] = mem[_35 + 12 len 20]
        if not stor2[mem[0]][address(cd[((32 * idx) + cd[36] + 36)])]:
            if address(_36) != address(cd[((32 * idx) + cd[4] + 36)]):
                revert with 0, 'ownerAddress is not the depositor of this stake'
            stor2[address(_36)][address(cd[((32 * idx) + cd[36] + 36)])] = 1
            uint256(sub_6c520f8b[address(_36)].field_0)++
            address(sub_6c520f8b[address(_36)][uint256(sub_6c520f8b[address(_36)].field_0)].field_0) = address(cd[((32 * idx) + cd[36] + 36)])
        mem[0] = address(cd[((32 * idx) + cd[36] + 36)])
        mem[32] = 4
        if not stor4[address(cd[((32 * idx) + cd[36] + 36)])]:
            sub_cc4285e9.length++
            sub_cc4285e9[sub_cc4285e9.length] = address(cd[((32 * idx) + cd[36] + 36)])
            mem[0] = address(cd[((32 * idx) + cd[36] + 36)])
            mem[32] = 4
            stor4[address(cd[((32 * idx) + cd[36] + 36)])] = 1
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
}

function sub_a33529f2(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor2[address(arg1)][address(arg2)]:
        stor2[address(arg1)][address(arg2)] = 0
        idx = 0
        while idx < uint256(sub_6c520f8b[address(arg1)].field_0):
            mem[0] = sha3(address(arg1), 1)
            if address(sub_6c520f8b[address(arg1)][idx].field_0) != address(arg2):
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if uint256(sub_6c520f8b[address(arg1)].field_0) < 1:
                revert with 0, 17
            if uint256(sub_6c520f8b[address(arg1)].field_0) - 1 >= uint256(sub_6c520f8b[address(arg1)].field_0):
                revert with 0, 50
            if idx >= uint256(sub_6c520f8b[address(arg1)].field_0):
                revert with 0, 50
            address(sub_6c520f8b[address(arg1)][idx].field_0) = address(sub_6c520f8b[address(arg1)][uint256(sub_6c520f8b[address(arg1)].field_0)].field_0)
            if not uint256(sub_6c520f8b[address(arg1)].field_0):
                revert with 0, 49
            address(sub_6c520f8b[address(arg1)][uint256(sub_6c520f8b[address(arg1)].field_0)].field_0) = 0
            uint256(sub_6c520f8b[address(arg1)].field_0)--
            if stor4[address(arg2)]:
                stor4[address(arg2)] = 0
                idx = 0
                while idx < sub_cc4285e9.length:
                    mem[0] = 3
                    if sub_cc4285e9[idx] != address(arg2):
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if sub_cc4285e9.length < 1:
                        revert with 0, 17
                    if sub_cc4285e9.length - 1 >= sub_cc4285e9.length:
                        revert with 0, 50
                    if idx >= sub_cc4285e9.length:
                        revert with 0, 50
                    sub_cc4285e9[idx] = sub_cc4285e9[sub_cc4285e9.length]
                    if not sub_cc4285e9.length:
                        revert with 0, 49
                    sub_cc4285e9[sub_cc4285e9.length] = 0
                    sub_cc4285e9.length--
    if stor4[address(arg2)]:
        stor4[address(arg2)] = 0
        idx = 0
        while idx < sub_cc4285e9.length:
            mem[0] = 3
            if sub_cc4285e9[idx] != address(arg2):
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if sub_cc4285e9.length < 1:
                revert with 0, 17
            if sub_cc4285e9.length - 1 >= sub_cc4285e9.length:
                revert with 0, 50
            if idx >= sub_cc4285e9.length:
                revert with 0, 50
            sub_cc4285e9[idx] = sub_cc4285e9[sub_cc4285e9.length]
            if not sub_cc4285e9.length:
                revert with 0, 49
            sub_cc4285e9[sub_cc4285e9.length] = 0
            sub_cc4285e9.length--
}

function balanceOf(address arg1) payable {
    mem[64] = 96
    require not msg.value
    require calldata.size - 4 >= 32
    require arg1 == arg1
    mem[0] = arg1
    mem[32] = 1
    idx = 0
    s = 0
    while idx < uint256(sub_6c520f8b[address(arg1)].field_0):
        mem[0] = sha3(address(arg1), 1)
        require ext_code.size(address(sub_6c520f8b[address(arg1)][idx].field_0))
        staticcall address(sub_6c520f8b[address(arg1)][idx].field_0).getCurrentBalance() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _16 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if s > !mem[_16]:
            revert with 0, 17
        if s + mem[_16] < s:
            revert with 0, 'SafeMath: addition overflow'
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s + mem[_16]
        continue 
    return (s * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0) * uint256(sub_6c520f8b[address(arg1)].field_0))
}

function sub_cd0336c0(?) {
    require ext_code.size(stor15)
    staticcall stor15.latestRoundData() with:
            gas gas_remaining wei
    mem[96 len 160] = ext_call.return_data[0 len 160]
    if ext_call.success:
        require return_data.size >= 160
        require ext_call.return_data[0] == ext_call.return_data[22 len 10]
        require ext_call.return_data[128] == ext_call.return_data[150 len 10]
        require ext_code.size(stor15)
        staticcall stor15.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        return ext_call.return_data[32], uint8(ext_call.return_data[0])
    if return_data.size <= 3:
        revert with ext_call.return_data[0 len return_data.size]
    mem[0 len 4] = ext_call.return_data[0 len 4]
    if uint32(mem[4 len 28]) >> 224 != Error(string arg1):
        revert with ext_call.return_data[0 len return_data.size]
    if return_data.size < 68:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
    if ext_call.return_data[0] > test266151307() or ext_call.return_data[0] + 36 > return_data.size:
        revert with ext_call.return_data[0 len return_data.size]
    if mem[ext_call.return_data[0] + 96] > test266151307():
        revert with ext_call.return_data[0 len return_data.size]
    if ext_call.return_data[0] + mem[ext_call.return_data[0] + 96] + 32 > return_data.size - 4:
        revert with ext_call.return_data[0 len return_data.size]
    if floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 96] + 31) + 97 < 96 or floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 96] + 31) + 97 > test266151307():
        revert with 0, 65
    mem[64] = floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 96] + 31) + 97
    if not ext_call.return_data[0] + 96:
        revert with ext_call.return_data[0 len return_data.size]
    mem[floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 96] + 31) + 97] = 0x70a0823100000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = sub_8893d55aAddress
    require ext_code.size(stor19)
    staticcall stor19.0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _19 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _22 = mem[_19]
    mem[mem[64] + 4] = sub_8893d55aAddress
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _25 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _26 = mem[_25]
    if not mem[_25]:
        _27 = mem[64]
        mem[64] = mem[64] + 64
        mem[_27] = 26
        mem[_27 + 32] = 'SafeMath: division by zero'
        if not _22:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(stor21.field_0))
        staticcall address(stor21.field_0).0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _37 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_37] == mem[_37 + 31 len 1]
        return 0 / _22, mem[_37 + 31 len 1]
    if mem[_25] and sub_5d98fc27 > -1 / mem[_25]:
        revert with 0, 17
    if not mem[_25]:
        revert with 0, 18
    if mem[_25] * sub_5d98fc27 / mem[_25] != sub_5d98fc27:
        revert with 0, 'SafeMath: multiplication overflow'
    _32 = mem[64]
    mem[64] = mem[64] + 64
    mem[_32] = 26
    mem[_32 + 32] = 'SafeMath: division by zero'
    if not _22:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x313ce567 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _45 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    require mem[_45] == mem[_45 + 31 len 1]
    return _26 * sub_5d98fc27 / _22, mem[_45 + 31 len 1]
}

function setEverRiseAddress(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, '_everRiseAddress should not be the zero address'
    emit 0x1de85728: sub_270bf52eAddress, arg1
    sub_270bf52eAddress = arg1
    stor8 = arg1
    require ext_code.size(stor8)
    staticcall stor8.uniswapV2Pair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    pairAddress = ext_call.return_data[12 len 20]
    stor13 = ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    sub_04bf1d6bAddress = ext_call.return_data[12 len 20]
    if sub_270bf52eAddress == ext_call.return_data[12 len 20]:
        require ext_code.size(stor13)
        staticcall stor13.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        sub_04bf1d6bAddress = ext_call.return_data[12 len 20]
    stor19 = sub_04bf1d6bAddress
    require ext_code.size(stor17)
    staticcall stor17.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    sub_c4c6c237Address = ext_call.return_data[12 len 20]
    if sub_04bf1d6bAddress == ext_call.return_data[12 len 20]:
        require ext_code.size(stor17)
        staticcall stor17.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        sub_c4c6c237Address = ext_call.return_data[12 len 20]
    address(stor21.field_0) = sub_c4c6c237Address
    require ext_code.size(stor8)
    staticcall stor8.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    decimals = ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        sub_5a8c5d60 = 1
    else:
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            sub_5a8c5d60 = 10^ext_call.return_data[31 len 1]
        else:
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 0, 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 0, 17
            sub_5a8c5d60 = s * t
    require ext_code.size(stor19)
    staticcall stor19.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    uint8(stor21.field_168) = ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        sub_5d98fc27 = 1
    else:
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            sub_5d98fc27 = 10^ext_call.return_data[31 len 1]
        else:
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 0, 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 0, 17
            sub_5d98fc27 = s * t
}

function sub_696cef3a(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    '_coinStablePairAddress should not be the zero address'
    emit 0xfc484159: sub_8893d55aAddress, address(arg1)
    sub_8893d55aAddress = address(arg1)
    stor17 = address(arg1)
    require ext_code.size(stor8)
    staticcall stor8.uniswapV2Pair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    pairAddress = ext_call.return_data[12 len 20]
    stor13 = ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    sub_04bf1d6bAddress = ext_call.return_data[12 len 20]
    if sub_270bf52eAddress == ext_call.return_data[12 len 20]:
        require ext_code.size(stor13)
        staticcall stor13.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        sub_04bf1d6bAddress = ext_call.return_data[12 len 20]
    stor19 = sub_04bf1d6bAddress
    require ext_code.size(stor17)
    staticcall stor17.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    sub_c4c6c237Address = ext_call.return_data[12 len 20]
    if sub_04bf1d6bAddress == ext_call.return_data[12 len 20]:
        require ext_code.size(stor17)
        staticcall stor17.token1() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        sub_c4c6c237Address = ext_call.return_data[12 len 20]
    address(stor21.field_0) = sub_c4c6c237Address
    require ext_code.size(stor8)
    staticcall stor8.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    decimals = ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        sub_5a8c5d60 = 1
    else:
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            sub_5a8c5d60 = 10^ext_call.return_data[31 len 1]
        else:
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 0, 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 0, 17
            sub_5a8c5d60 = s * t
    require ext_code.size(stor19)
    staticcall stor19.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    uint8(stor21.field_168) = ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        sub_5d98fc27 = 1
    else:
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            sub_5d98fc27 = 10^ext_call.return_data[31 len 1]
        else:
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 0, 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 0, 17
            sub_5d98fc27 = s * t
}

function getTokenPrices() {
    mem[100] = pairAddress
    require ext_code.size(stor8)
    staticcall stor8.0x70a08231 with:
            gas gas_remaining wei
           args pairAddress
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[ceil32(return_data.size) + 100] = pairAddress
    require ext_code.size(stor19)
    staticcall stor19.0x70a08231 with:
            gas gas_remaining wei
           args pairAddress
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor15)
    staticcall stor15.latestRoundData() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 96 len 160] = ext_call.return_data[0 len 160]
    if ext_call.success:
        require return_data.size >= 160
        require ext_call.return_data[0] == ext_call.return_data[22 len 10]
        require ext_call.return_data[128] == ext_call.return_data[150 len 10]
        require ext_code.size(stor15)
        staticcall stor15.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / ext_call.return_data[0]:
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                return ext_call.return_data[0], 
                       ext_call.return_data[0],
                       ext_call.return_data[32],
                       ext_call.return_data[0] << 248,
                       0 / ext_call.return_data[0],
                       0 / sub_5d98fc27
            if 0 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / 0 / ext_call.return_data[0]:
                revert with 0, 17
            if not 0 / ext_call.return_data[0]:
                revert with 0, 18
            if 0 / ext_call.return_data[0] * ext_call.return_data[32] / 0 / ext_call.return_data[0] != ext_call.return_data[32]:
                revert with 0, 'SafeMath: multiplication overflow'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   ext_call.return_data[32],
                   ext_call.return_data[0] << 248,
                   0 / ext_call.return_data[0],
                   0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27
        if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   ext_call.return_data[32],
                   ext_call.return_data[0] << 248,
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                   0 / sub_5d98fc27
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != ext_call.return_data[32]:
            revert with 0, 'SafeMath: multiplication overflow'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        return ext_call.return_data[0], 
               ext_call.return_data[0],
               ext_call.return_data[32],
               ext_call.return_data[0] << 248,
               ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
               ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27
    if return_data.size <= 3:
        revert with ext_call.return_data[0 len return_data.size]
    mem[0 len 4] = ext_call.return_data[0 len 4]
    if uint32(mem[4 len 28]) >> 224 != Error(string arg1):
        revert with ext_call.return_data[0 len return_data.size]
    if return_data.size < 68:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 96 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
    if ext_call.return_data[0] > test266151307() or ext_call.return_data[0] + 36 > return_data.size:
        revert with ext_call.return_data[0 len return_data.size]
    if mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 96] > test266151307():
        revert with ext_call.return_data[0 len return_data.size]
    if ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 96] + 32 > return_data.size - 4:
        revert with ext_call.return_data[0 len return_data.size]
    if floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 96] + 31) + 97 < 96 or (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 96] + 31) + 97 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 96] + 31) + 97
    if not (2 * ceil32(return_data.size)) + ext_call.return_data[0] + 96:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 96] + 31) + 97] = 0x70a0823100000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = sub_8893d55aAddress
    require ext_code.size(stor19)
    staticcall stor19.0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _27 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _28 = mem[_27]
    mem[mem[64] + 4] = sub_8893d55aAddress
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _31 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _33 = mem[_31]
    if not mem[_31]:
        _40 = mem[64]
        mem[64] = mem[64] + 64
        mem[_40] = 26
        mem[_40 + 32] = 'SafeMath: division by zero'
        if not _28:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(stor21.field_0))
        staticcall address(stor21.field_0).0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _59 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_59] == mem[_59 + 31 len 1]
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / ext_call.return_data[0]:
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                return ext_call.return_data[0], 
                       ext_call.return_data[0],
                       0 / _28,
                       mem[_59] << 248,
                       0 / ext_call.return_data[0],
                       0 / sub_5d98fc27
            if 0 / ext_call.return_data[0] and 0 / _28 > -1 / 0 / ext_call.return_data[0]:
                revert with 0, 17
            if not 0 / ext_call.return_data[0]:
                revert with 0, 18
            if 0 / ext_call.return_data[0] * 0 / _28 / 0 / ext_call.return_data[0] != 0 / _28:
                revert with 0, 'SafeMath: multiplication overflow'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   0 / _28,
                   mem[_59] << 248,
                   0 / ext_call.return_data[0],
                   0 / ext_call.return_data[0] * 0 / _28 / sub_5d98fc27
        if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
            revert with 0, 'SafeMath: multiplication overflow'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   0 / _28,
                   mem[_59] << 248,
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                   0 / sub_5d98fc27
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and 0 / _28 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _28 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != 0 / _28:
            revert with 0, 'SafeMath: multiplication overflow'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        return ext_call.return_data[0], 
               ext_call.return_data[0],
               0 / _28,
               mem[_59] << 248,
               ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
               ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _28 / sub_5d98fc27
    if mem[_31] and sub_5d98fc27 > -1 / mem[_31]:
        revert with 0, 17
    if not mem[_31]:
        revert with 0, 18
    if mem[_31] * sub_5d98fc27 / mem[_31] != sub_5d98fc27:
        revert with 0, 'SafeMath: multiplication overflow'
    _51 = mem[64]
    mem[64] = mem[64] + 64
    mem[_51] = 26
    mem[_51 + 32] = 'SafeMath: division by zero'
    if not _28:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x313ce567 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _80 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    require mem[_80] == mem[_80 + 31 len 1]
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not 0 / ext_call.return_data[0]:
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _33 * sub_5d98fc27 / _28,
                   mem[_80] << 248,
                   0 / ext_call.return_data[0],
                   0 / sub_5d98fc27
        if 0 / ext_call.return_data[0] and _33 * sub_5d98fc27 / _28 > -1 / 0 / ext_call.return_data[0]:
            revert with 0, 17
        if not 0 / ext_call.return_data[0]:
            revert with 0, 18
        if 0 / ext_call.return_data[0] * _33 * sub_5d98fc27 / _28 / 0 / ext_call.return_data[0] != _33 * sub_5d98fc27 / _28:
            revert with 0, 'SafeMath: multiplication overflow'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        return ext_call.return_data[0], 
               ext_call.return_data[0],
               _33 * sub_5d98fc27 / _28,
               mem[_80] << 248,
               0 / ext_call.return_data[0],
               0 / ext_call.return_data[0] * _33 * sub_5d98fc27 / _28 / sub_5d98fc27
    if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
        revert with 0, 17
    if not ext_call.return_data[0]:
        revert with 0, 18
    if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
        revert with 0, 'SafeMath: multiplication overflow'
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        return ext_call.return_data[0], 
               ext_call.return_data[0],
               _33 * sub_5d98fc27 / _28,
               mem[_80] << 248,
               ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
               0 / sub_5d98fc27
    if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and _33 * sub_5d98fc27 / _28 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
        revert with 0, 17
    if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
        revert with 0, 18
    if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _33 * sub_5d98fc27 / _28 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != _33 * sub_5d98fc27 / _28:
        revert with 0, 'SafeMath: multiplication overflow'
    if not sub_5d98fc27:
        revert with 0, 'SafeMath: division by zero', 0
    return ext_call.return_data[0], 
           ext_call.return_data[0],
           _33 * sub_5d98fc27 / _28,
           mem[_80] << 248,
           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _33 * sub_5d98fc27 / _28 / sub_5d98fc27
}

function getStakeDetails(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    mem[96] = 96
    mem[128] = 0
    mem[160] = 0
    mem[192] = 0
    mem[224] = 0
    mem[256] = 0
    mem[288] = 0
    mem[320] = 0
    mem[352] = 0
    mem[384] = 0
    mem[416] = 0
    mem[448] = 0
    mem[480] = 0
    mem[512] = 0
    mem[544] = 0
    mem[576] = 0
    mem[612] = pairAddress
    require ext_code.size(stor8)
    staticcall stor8.0x70a08231 with:
            gas gas_remaining wei
           args pairAddress
    mem[608] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[ceil32(return_data.size) + 612] = pairAddress
    require ext_code.size(stor19)
    staticcall stor19.0x70a08231 with:
            gas gas_remaining wei
           args pairAddress
    mem[ceil32(return_data.size) + 608] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor15)
    staticcall stor15.latestRoundData() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 608 len 160] = ext_call.return_data[0 len 160]
    if ext_call.success:
        require return_data.size >= 160
        require ext_call.return_data[0] == ext_call.return_data[22 len 10]
        require ext_call.return_data[128] == ext_call.return_data[150 len 10]
        require ext_code.size(stor15)
        staticcall stor15.0x313ce567 with:
                gas gas_remaining wei
        mem[(4 * ceil32(return_data.size)) + 608] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[0]:
            mem[(6 * ceil32(return_data.size)) + 608] = 26
            mem[(6 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / ext_call.return_data[0]:
                mem[(6 * ceil32(return_data.size)) + 672] = 26
                mem[(6 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(arg1)
                staticcall arg1.getCurrentBalance() with:
                        gas gas_remaining wei
                mem[(6 * ceil32(return_data.size)) + 736] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    mem[(7 * ceil32(return_data.size)) + 736] = 26
                    mem[(7 * ceil32(return_data.size)) + 768] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    mem[(7 * ceil32(return_data.size)) + 1312] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                    require ext_code.size(arg1)
                    staticcall arg1.0xfd306c4e with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(7 * ceil32(return_data.size)) + 1312 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    _155 = mem[(7 * ceil32(return_data.size)) + 1312]
                    require mem[(7 * ceil32(return_data.size)) + 1312] <= test266151307()
                    require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1343 < (7 * ceil32(return_data.size)) + return_data.size + 1312
                    _177 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
                    if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313 > test266151307():
                        revert with 0, 65
                    mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313
                    mem[(8 * ceil32(return_data.size)) + 1312] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
                    require _155 + _177 + 32 <= return_data.size
                    mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_177)] = mem[(7 * ceil32(return_data.size)) + _155 + 1344 len ceil32(_177)]
                    if ceil32(_177) <= _177:
                        mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                        require ext_code.size(arg1)
                        staticcall arg1.0x194ba6a with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3564 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 832] = mem[_3564]
                        require ext_code.size(arg1)
                        staticcall arg1.0x27932f9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3756 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 864] = mem[_3756]
                        require ext_code.size(arg1)
                        staticcall arg1.0xaa8d8fdd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3948 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 896] = mem[_3948]
                        require ext_code.size(arg1)
                        staticcall arg1.getDepositTokens() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4140 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 928] = mem[_4140]
                        require ext_code.size(arg1)
                        staticcall arg1.getLockTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4332 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 960] = mem[_4332]
                        require ext_code.size(arg1)
                        staticcall arg1.getDepositTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4524 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 992] = mem[_4524]
                        require ext_code.size(arg1)
                        staticcall arg1.0x4b6a8ec8 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4716 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4716]
                        mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                        mem[(7 * ceil32(return_data.size)) + 1088] = 0 / sub_5a8c5d60
                        require ext_code.size(arg1)
                        staticcall arg1.0x56fe8cf7 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4908 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4908]
                        require ext_code.size(arg1)
                        staticcall arg1.getDepositorAddress() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5100 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_5100] == mem[_5100 + 12 len 20]
                        mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5100 + 12 len 20]
                        require ext_code.size(arg1)
                        staticcall arg1.0x910afbe9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5292 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_5292] == mem[_5292 + 12 len 20]
                        mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5292 + 12 len 20]
                        mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                        require ext_code.size(arg1)
                        staticcall arg1.getStatus() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5484 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_5484] == bool(mem[_5484])
                        mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5484])
                        mem[0] = arg1
                        mem[32] = sha3(msg.sender, 2)
                        mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = 512
                        _5772 = mem[(8 * ceil32(return_data.size)) + 1312]
                        mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                        mem[mem[64] + 576 len ceil32(_5772)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5772)]
                        if ceil32(_5772) > _5772:
                            mem[_5772 + mem[64] + 576] = 0
                        mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                        mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                        mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                        mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                        mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                        mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                        mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                        mem[mem[64] + 288] = ext_call.return_data[0]
                        mem[mem[64] + 320] = 0 / sub_5a8c5d60
                        mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                        mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                        mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                        mem[mem[64] + 448] = 0
                        mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                        return 32, 512, 
                               mem[mem[64] + 64 len 224],
                               ext_call.return_data[0],
                               0 / sub_5a8c5d60,
                               mem[mem[64] + 352 len 96],
                               0,
                               mem[mem[64] + 480],
                               bool(stor2[msg.sender][address(arg1)]),
                               mem[mem[64] + 544 len ceil32(_5772) + 32]
                    mem[_177 + (8 * ceil32(return_data.size)) + 1344] = 0
                    mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3565 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 832] = mem[_3565]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3757 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 864] = mem[_3757]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3949 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 896] = mem[_3949]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4141 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 928] = mem[_4141]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4333 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 960] = mem[_4333]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4525 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 992] = mem[_4525]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4717 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4717]
                    mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                    mem[(7 * ceil32(return_data.size)) + 1088] = 0 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4909 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4909]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5101 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5101] == mem[_5101 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5101 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5293 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5293] == mem[_5293 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5293 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5485 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5485] == bool(mem[_5485])
                    mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5485])
                    mem[0] = arg1
                    mem[32] = sha3(msg.sender, 2)
                    mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    _5773 = mem[(8 * ceil32(return_data.size)) + 1312]
                    mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                    mem[mem[64] + 576 len ceil32(_5773)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5773)]
                    if ceil32(_5773) > _5773:
                        mem[_5773 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                    mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                    mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                    mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                    mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                    mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                    mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                    mem[mem[64] + 288] = ext_call.return_data[0]
                    mem[mem[64] + 320] = 0 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                    mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                    mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           ext_call.return_data[0],
                           0 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(arg1)]),
                           mem[mem[64] + 544 len ceil32(_5773) + 32]
                if ext_call.return_data[0] and 0 / sub_5d98fc27 > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * 0 / sub_5d98fc27 / ext_call.return_data[0] != 0 / sub_5d98fc27:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[(7 * ceil32(return_data.size)) + 736] = 26
                mem[(7 * ceil32(return_data.size)) + 768] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                mem[(7 * ceil32(return_data.size)) + 1312] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(arg1)
                staticcall arg1.0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(7 * ceil32(return_data.size)) + 1312 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _207 = mem[(7 * ceil32(return_data.size)) + 1312]
                require mem[(7 * ceil32(return_data.size)) + 1312] <= test266151307()
                require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1343 < (7 * ceil32(return_data.size)) + return_data.size + 1312
                _232 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
                if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313 > test266151307():
                    revert with 0, 65
                mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313
                mem[(8 * ceil32(return_data.size)) + 1312] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
                require _207 + _232 + 32 <= return_data.size
                mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_232)] = mem[(7 * ceil32(return_data.size)) + _207 + 1344 len ceil32(_232)]
                if ceil32(_232) <= _232:
                    mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3562 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 832] = mem[_3562]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3754 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 864] = mem[_3754]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3946 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 896] = mem[_3946]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4138 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 928] = mem[_4138]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4330 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 960] = mem[_4330]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4522 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 992] = mem[_4522]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4714 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4714]
                    mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                    mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4906 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4906]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5098 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5098] == mem[_5098 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5098 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5290 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5290] == mem[_5290 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5290 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5482 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5482] == bool(mem[_5482])
                    mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5482])
                    mem[0] = arg1
                    mem[32] = sha3(msg.sender, 2)
                    mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    _5770 = mem[(8 * ceil32(return_data.size)) + 1312]
                    mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                    mem[mem[64] + 576 len ceil32(_5770)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5770)]
                    if ceil32(_5770) > _5770:
                        mem[_5770 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                    mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                    mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                    mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                    mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                    mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                    mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                    mem[mem[64] + 288] = ext_call.return_data[0]
                    mem[mem[64] + 320] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                    mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                    mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           ext_call.return_data[0],
                           ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(arg1)]),
                           mem[mem[64] + 544 len ceil32(_5770) + 32]
                mem[_232 + (8 * ceil32(return_data.size)) + 1344] = 0
                mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3563 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 832] = mem[_3563]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3755 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_3755]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3947 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_3947]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4139 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_4139]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4331 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_4331]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4523 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_4523]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4715 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4715]
                mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4907 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4907]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5099 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5099] == mem[_5099 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5099 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5291 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5291] == mem[_5291 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5291 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5483 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5483] == bool(mem[_5483])
                mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5483])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _5771 = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 576 len ceil32(_5771)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5771)]
                if ceil32(_5771) > _5771:
                    mem[_5771 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       mem[mem[64] + 544 len ceil32(_5771) + 32]
            if 0 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / 0 / ext_call.return_data[0]:
                revert with 0, 17
            if not 0 / ext_call.return_data[0]:
                revert with 0, 18
            if 0 / ext_call.return_data[0] * ext_call.return_data[32] / 0 / ext_call.return_data[0] != ext_call.return_data[32]:
                revert with 0, 'SafeMath: multiplication overflow'
            mem[(6 * ceil32(return_data.size)) + 672] = 26
            mem[(6 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(arg1)
            staticcall arg1.getCurrentBalance() with:
                    gas gas_remaining wei
            mem[(6 * ceil32(return_data.size)) + 736] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                mem[(7 * ceil32(return_data.size)) + 736] = 26
                mem[(7 * ceil32(return_data.size)) + 768] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                mem[(7 * ceil32(return_data.size)) + 1312] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(arg1)
                staticcall arg1.0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(7 * ceil32(return_data.size)) + 1312 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _204 = mem[(7 * ceil32(return_data.size)) + 1312]
                require mem[(7 * ceil32(return_data.size)) + 1312] <= test266151307()
                require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1343 < (7 * ceil32(return_data.size)) + return_data.size + 1312
                _231 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
                if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313 > test266151307():
                    revert with 0, 65
                mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313
                mem[(8 * ceil32(return_data.size)) + 1312] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
                require _204 + _231 + 32 <= return_data.size
                mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_231)] = mem[(7 * ceil32(return_data.size)) + _204 + 1344 len ceil32(_231)]
                if ceil32(_231) <= _231:
                    mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3560 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 832] = mem[_3560]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3752 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 864] = mem[_3752]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3944 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 896] = mem[_3944]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4136 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 928] = mem[_4136]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4328 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 960] = mem[_4328]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4520 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 992] = mem[_4520]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4712 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4712]
                    mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                    mem[(7 * ceil32(return_data.size)) + 1088] = 0 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4904 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4904]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5096 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5096] == mem[_5096 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5096 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5288 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5288] == mem[_5288 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5288 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5480 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5480] == bool(mem[_5480])
                    mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5480])
                    mem[0] = arg1
                    mem[32] = sha3(msg.sender, 2)
                    mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    _5768 = mem[(8 * ceil32(return_data.size)) + 1312]
                    mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                    mem[mem[64] + 576 len ceil32(_5768)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5768)]
                    if ceil32(_5768) > _5768:
                        mem[_5768 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                    mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                    mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                    mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                    mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                    mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                    mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                    mem[mem[64] + 288] = ext_call.return_data[0]
                    mem[mem[64] + 320] = 0 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                    mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                    mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           ext_call.return_data[0],
                           0 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(arg1)]),
                           mem[mem[64] + 544 len ceil32(_5768) + 32]
                mem[_231 + (8 * ceil32(return_data.size)) + 1344] = 0
                mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3561 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 832] = mem[_3561]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3753 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_3753]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3945 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_3945]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4137 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_4137]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4329 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_4329]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4521 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_4521]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4713 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4713]
                mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1088] = 0 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4905 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4905]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5097 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5097] == mem[_5097 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5097 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5289 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5289] == mem[_5289 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5289 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5481 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5481] == bool(mem[_5481])
                mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5481])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _5769 = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 576 len ceil32(_5769)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5769)]
                if ceil32(_5769) > _5769:
                    mem[_5769 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       mem[mem[64] + 544 len ceil32(_5769) + 32]
            if ext_call.return_data[0] and 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / ext_call.return_data[0] != 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            mem[(7 * ceil32(return_data.size)) + 736] = 26
            mem[(7 * ceil32(return_data.size)) + 768] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            mem[(7 * ceil32(return_data.size)) + 1312] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(arg1)
            staticcall arg1.0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(7 * ceil32(return_data.size)) + 1312 len return_data.size] = ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            _264 = mem[(7 * ceil32(return_data.size)) + 1312]
            require mem[(7 * ceil32(return_data.size)) + 1312] <= test266151307()
            require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1343 < (7 * ceil32(return_data.size)) + return_data.size + 1312
            _289 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
            if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313 > test266151307():
                revert with 0, 65
            mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313
            mem[(8 * ceil32(return_data.size)) + 1312] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
            require _264 + _289 + 32 <= return_data.size
            mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_289)] = mem[(7 * ceil32(return_data.size)) + _264 + 1344 len ceil32(_289)]
            if ceil32(_289) <= _289:
                mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3558 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 832] = mem[_3558]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3750 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_3750]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3942 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_3942]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4134 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_4134]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4326 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_4326]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4518 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_4518]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4710 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4710]
                mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4902 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4902]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5094 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5094] == mem[_5094 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5094 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5286 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5286] == mem[_5286 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5286 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5478 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5478] == bool(mem[_5478])
                mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5478])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _5766 = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 576 len ceil32(_5766)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5766)]
                if ceil32(_5766) > _5766:
                    mem[_5766 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       mem[mem[64] + 544 len ceil32(_5766) + 32]
            mem[_289 + (8 * ceil32(return_data.size)) + 1344] = 0
            mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3559 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 832] = mem[_3559]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3751 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 864] = mem[_3751]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3943 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 896] = mem[_3943]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4135 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 928] = mem[_4135]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4327 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 960] = mem[_4327]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4519 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 992] = mem[_4519]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4711 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4711]
            mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
            mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4903 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4903]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5095 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5095] == mem[_5095 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5095 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5287 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5287] == mem[_5287 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5287 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5479 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5479] == bool(mem[_5479])
            mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5479])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            _5767 = mem[(8 * ceil32(return_data.size)) + 1312]
            mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
            mem[mem[64] + 576 len ceil32(_5767)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5767)]
            if ceil32(_5767) > _5767:
                mem[_5767 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
            mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
            mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
            mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
            mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
            mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
            mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
            mem[mem[64] + 288] = ext_call.return_data[0]
            mem[mem[64] + 320] = ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
            mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
            mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   ext_call.return_data[0],
                   ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(arg1)]),
                   mem[mem[64] + 544 len ceil32(_5767) + 32]
        if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
            revert with 0, 'SafeMath: multiplication overflow'
        mem[(6 * ceil32(return_data.size)) + 608] = 26
        mem[(6 * ceil32(return_data.size)) + 640] = 'SafeMath: division by zero'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            mem[(6 * ceil32(return_data.size)) + 672] = 26
            mem[(6 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(arg1)
            staticcall arg1.getCurrentBalance() with:
                    gas gas_remaining wei
            mem[(6 * ceil32(return_data.size)) + 736] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                mem[(7 * ceil32(return_data.size)) + 736] = 26
                mem[(7 * ceil32(return_data.size)) + 768] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                mem[(7 * ceil32(return_data.size)) + 1312] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(arg1)
                staticcall arg1.0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(7 * ceil32(return_data.size)) + 1312 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _201 = mem[(7 * ceil32(return_data.size)) + 1312]
                require mem[(7 * ceil32(return_data.size)) + 1312] <= test266151307()
                require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1343 < (7 * ceil32(return_data.size)) + return_data.size + 1312
                _226 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
                if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313 > test266151307():
                    revert with 0, 65
                mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313
                mem[(8 * ceil32(return_data.size)) + 1312] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
                require _201 + _226 + 32 <= return_data.size
                mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_226)] = mem[(7 * ceil32(return_data.size)) + _201 + 1344 len ceil32(_226)]
                if ceil32(_226) <= _226:
                    mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3556 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 832] = mem[_3556]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3748 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 864] = mem[_3748]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3940 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 896] = mem[_3940]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4132 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 928] = mem[_4132]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4324 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 960] = mem[_4324]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4516 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 992] = mem[_4516]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4708 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4708]
                    mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                    mem[(7 * ceil32(return_data.size)) + 1088] = 0 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4900 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4900]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5092 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5092] == mem[_5092 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5092 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5284 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5284] == mem[_5284 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5284 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5476 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5476] == bool(mem[_5476])
                    mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5476])
                    mem[0] = arg1
                    mem[32] = sha3(msg.sender, 2)
                    mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    _5764 = mem[(8 * ceil32(return_data.size)) + 1312]
                    mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                    mem[mem[64] + 576 len ceil32(_5764)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5764)]
                    if ceil32(_5764) > _5764:
                        mem[_5764 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                    mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                    mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                    mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                    mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                    mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                    mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                    mem[mem[64] + 288] = ext_call.return_data[0]
                    mem[mem[64] + 320] = 0 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                    mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                    mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           ext_call.return_data[0],
                           0 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(arg1)]),
                           mem[mem[64] + 544 len ceil32(_5764) + 32]
                mem[_226 + (8 * ceil32(return_data.size)) + 1344] = 0
                mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3557 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 832] = mem[_3557]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3749 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_3749]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3941 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_3941]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4133 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_4133]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4325 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_4325]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4517 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_4517]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4709 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4709]
                mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1088] = 0 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4901 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4901]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5093 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5093] == mem[_5093 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5093 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5285 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5285] == mem[_5285 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5285 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5477 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5477] == bool(mem[_5477])
                mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5477])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _5765 = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 576 len ceil32(_5765)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5765)]
                if ceil32(_5765) > _5765:
                    mem[_5765 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       mem[mem[64] + 544 len ceil32(_5765) + 32]
            if ext_call.return_data[0] and 0 / sub_5d98fc27 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * 0 / sub_5d98fc27 / ext_call.return_data[0] != 0 / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            mem[(7 * ceil32(return_data.size)) + 736] = 26
            mem[(7 * ceil32(return_data.size)) + 768] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            mem[(7 * ceil32(return_data.size)) + 1312] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(arg1)
            staticcall arg1.0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(7 * ceil32(return_data.size)) + 1312 len return_data.size] = ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            _261 = mem[(7 * ceil32(return_data.size)) + 1312]
            require mem[(7 * ceil32(return_data.size)) + 1312] <= test266151307()
            require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1343 < (7 * ceil32(return_data.size)) + return_data.size + 1312
            _288 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
            if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313 > test266151307():
                revert with 0, 65
            mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313
            mem[(8 * ceil32(return_data.size)) + 1312] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
            require _261 + _288 + 32 <= return_data.size
            mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_288)] = mem[(7 * ceil32(return_data.size)) + _261 + 1344 len ceil32(_288)]
            if ceil32(_288) <= _288:
                mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3554 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 832] = mem[_3554]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3746 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_3746]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3938 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_3938]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4130 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_4130]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4322 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_4322]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4514 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_4514]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4706 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4706]
                mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4898 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4898]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5090 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5090] == mem[_5090 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5090 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5282 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5282] == mem[_5282 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5282 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5474 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5474] == bool(mem[_5474])
                mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5474])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _5762 = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 576 len ceil32(_5762)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5762)]
                if ceil32(_5762) > _5762:
                    mem[_5762 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       mem[mem[64] + 544 len ceil32(_5762) + 32]
            mem[_288 + (8 * ceil32(return_data.size)) + 1344] = 0
            mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3555 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 832] = mem[_3555]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3747 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 864] = mem[_3747]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3939 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 896] = mem[_3939]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4131 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 928] = mem[_4131]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4323 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 960] = mem[_4323]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4515 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 992] = mem[_4515]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4707 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4707]
            mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
            mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4899 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4899]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5091 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5091] == mem[_5091 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5091 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5283 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5283] == mem[_5283 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5283 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5475 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5475] == bool(mem[_5475])
            mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5475])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            _5763 = mem[(8 * ceil32(return_data.size)) + 1312]
            mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
            mem[mem[64] + 576 len ceil32(_5763)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5763)]
            if ceil32(_5763) > _5763:
                mem[_5763 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
            mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
            mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
            mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
            mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
            mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
            mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
            mem[mem[64] + 288] = ext_call.return_data[0]
            mem[mem[64] + 320] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
            mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
            mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   ext_call.return_data[0],
                   ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(arg1)]),
                   mem[mem[64] + 544 len ceil32(_5763) + 32]
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != ext_call.return_data[32]:
            revert with 0, 'SafeMath: multiplication overflow'
        mem[(6 * ceil32(return_data.size)) + 672] = 26
        mem[(6 * ceil32(return_data.size)) + 704] = 'SafeMath: division by zero'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(arg1)
        staticcall arg1.getCurrentBalance() with:
                gas gas_remaining wei
        mem[(6 * ceil32(return_data.size)) + 736] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            mem[(7 * ceil32(return_data.size)) + 736] = 26
            mem[(7 * ceil32(return_data.size)) + 768] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            mem[(7 * ceil32(return_data.size)) + 1312] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(arg1)
            staticcall arg1.0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(7 * ceil32(return_data.size)) + 1312 len return_data.size] = ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            _258 = mem[(7 * ceil32(return_data.size)) + 1312]
            require mem[(7 * ceil32(return_data.size)) + 1312] <= test266151307()
            require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1343 < (7 * ceil32(return_data.size)) + return_data.size + 1312
            _287 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
            if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313 > test266151307():
                revert with 0, 65
            mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313
            mem[(8 * ceil32(return_data.size)) + 1312] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
            require _258 + _287 + 32 <= return_data.size
            mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_287)] = mem[(7 * ceil32(return_data.size)) + _258 + 1344 len ceil32(_287)]
            if ceil32(_287) > _287:
                mem[_287 + (8 * ceil32(return_data.size)) + 1344] = 0
                mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3553 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 832] = mem[_3553]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3745 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_3745]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3937 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_3937]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4129 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_4129]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4321 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_4321]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4513 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_4513]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4705 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4705]
                mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1088] = 0 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4897 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4897]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5089 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5089] == mem[_5089 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5089 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5281 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5281] == mem[_5281 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5281 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5473 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5473] == bool(mem[_5473])
                mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5473])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _5761 = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
                mem[mem[64] + 576 len ceil32(_5761)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5761)]
                if ceil32(_5761) > _5761:
                    mem[_5761 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       mem[mem[64] + 544 len ceil32(_5761) + 32]
            mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3552 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 832] = mem[_3552]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3744 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 864] = mem[_3744]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3936 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 896] = mem[_3936]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4128 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 928] = mem[_4128]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4320 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 960] = mem[_4320]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4512 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 992] = mem[_4512]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4704 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4704]
            mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
            mem[(7 * ceil32(return_data.size)) + 1088] = 0 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4896 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4896]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5088 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5088] == mem[_5088 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5088 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5280 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5280] == mem[_5280 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5280 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5472 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5472] == bool(mem[_5472])
            mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5472])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
            _5664 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            _5760 = mem[(8 * ceil32(return_data.size)) + 1312]
            mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
            mem[mem[64] + 576 len ceil32(_5760)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5760)]
            if ceil32(_5760) <= _5760:
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       mem[mem[64] + 544 len ceil32(_5760) + 32]
            mem[_5760 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
            mem[_5664 + 96] = mem[(7 * ceil32(return_data.size)) + 864]
            mem[_5664 + 128] = mem[(7 * ceil32(return_data.size)) + 896]
            mem[_5664 + 160] = mem[(7 * ceil32(return_data.size)) + 928]
            mem[_5664 + 192] = mem[(7 * ceil32(return_data.size)) + 960]
            mem[_5664 + 224] = mem[(7 * ceil32(return_data.size)) + 992]
            mem[_5664 + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
            mem[_5664 + 288] = ext_call.return_data[0]
            mem[_5664 + 320] = 0 / sub_5a8c5d60
            mem[_5664 + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
            mem[_5664 + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
            mem[_5664 + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
            mem[_5664 + 448] = 0
            mem[_5664 + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
            mem[_5664 + 512] = bool(stor2[msg.sender][address(arg1)])
            return memory
              from mem[64]
               len ceil32(_5760) + _5664 + -mem[64] + 576
        if ext_call.return_data[0] and ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 > -1 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / ext_call.return_data[0] != ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        mem[(7 * ceil32(return_data.size)) + 736] = 26
        mem[(7 * ceil32(return_data.size)) + 768] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        mem[(7 * ceil32(return_data.size)) + 1312] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(arg1)
        staticcall arg1.0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(7 * ceil32(return_data.size)) + 1312 len return_data.size] = ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _320 = mem[(7 * ceil32(return_data.size)) + 1312]
        require mem[(7 * ceil32(return_data.size)) + 1312] <= test266151307()
        require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1343 < (7 * ceil32(return_data.size)) + return_data.size + 1312
        _350 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
        if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313 > test266151307():
            revert with 0, 65
        mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312])) + 1313
        mem[(8 * ceil32(return_data.size)) + 1312] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1312] + 1312]
        require _320 + _350 + 32 <= return_data.size
        mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_350)] = mem[(7 * ceil32(return_data.size)) + _320 + 1344 len ceil32(_350)]
        if ceil32(_350) <= _350:
            mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3550 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 832] = mem[_3550]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3742 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 864] = mem[_3742]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3934 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 896] = mem[_3934]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4126 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 928] = mem[_4126]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4318 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 960] = mem[_4318]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4510 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 992] = mem[_4510]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4702 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4702]
            mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
            mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4894 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4894]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5086 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5086] == mem[_5086 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5086 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5278 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5278] == mem[_5278 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5278 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5470 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5470] == bool(mem[_5470])
            mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5470])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            _5758 = mem[(8 * ceil32(return_data.size)) + 1312]
            mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
            mem[mem[64] + 576 len ceil32(_5758)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5758)]
            if ceil32(_5758) > _5758:
                mem[_5758 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
            mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
            mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
            mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
            mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
            mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
            mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
            mem[mem[64] + 288] = ext_call.return_data[0]
            mem[mem[64] + 320] = ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
            mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
            mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   ext_call.return_data[0],
                   ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(arg1)]),
                   mem[mem[64] + 544 len ceil32(_5758) + 32]
        mem[_350 + (8 * ceil32(return_data.size)) + 1344] = 0
        mem[(7 * ceil32(return_data.size)) + 800] = (8 * ceil32(return_data.size)) + 1312
        require ext_code.size(arg1)
        staticcall arg1.0x194ba6a with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3551 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 832] = mem[_3551]
        require ext_code.size(arg1)
        staticcall arg1.0x27932f9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3743 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 864] = mem[_3743]
        require ext_code.size(arg1)
        staticcall arg1.0xaa8d8fdd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3935 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 896] = mem[_3935]
        require ext_code.size(arg1)
        staticcall arg1.getDepositTokens() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4127 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 928] = mem[_4127]
        require ext_code.size(arg1)
        staticcall arg1.getLockTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4319 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 960] = mem[_4319]
        require ext_code.size(arg1)
        staticcall arg1.getDepositTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4511 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 992] = mem[_4511]
        require ext_code.size(arg1)
        staticcall arg1.0x4b6a8ec8 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4703 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 1024] = mem[_4703]
        mem[(7 * ceil32(return_data.size)) + 1056] = ext_call.return_data[0]
        mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
        require ext_code.size(arg1)
        staticcall arg1.0x56fe8cf7 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4895 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 1120] = mem[_4895]
        require ext_code.size(arg1)
        staticcall arg1.getDepositorAddress() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5087 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_5087] == mem[_5087 + 12 len 20]
        mem[(7 * ceil32(return_data.size)) + 1152] = mem[_5087 + 12 len 20]
        require ext_code.size(arg1)
        staticcall arg1.0x910afbe9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5279 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_5279] == mem[_5279 + 12 len 20]
        mem[(7 * ceil32(return_data.size)) + 1184] = mem[_5279 + 12 len 20]
        mem[(7 * ceil32(return_data.size)) + 1216] = uint8(ext_call.return_data[0])
        require ext_code.size(arg1)
        staticcall arg1.getStatus() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5471 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_5471] == bool(mem[_5471])
        mem[(7 * ceil32(return_data.size)) + 1248] = bool(mem[_5471])
        mem[0] = arg1
        mem[32] = sha3(msg.sender, 2)
        mem[(7 * ceil32(return_data.size)) + 1280] = bool(stor2[msg.sender][address(arg1)])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        _5759 = mem[(8 * ceil32(return_data.size)) + 1312]
        mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1312]
        mem[mem[64] + 576 len ceil32(_5759)] = mem[(8 * ceil32(return_data.size)) + 1344 len ceil32(_5759)]
        if ceil32(_5759) > _5759:
            mem[_5759 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 832]
        mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 864]
        mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 896]
        mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 928]
        mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 960]
        mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 992]
        mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1024]
        mem[mem[64] + 288] = ext_call.return_data[0]
        mem[mem[64] + 320] = ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1120]
        mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1164 len 20]
        mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1248])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               ext_call.return_data[0],
               ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(arg1)]),
               mem[mem[64] + 544 len ceil32(_5759) + 32]
    if return_data.size <= 3:
        revert with ext_call.return_data[0 len return_data.size]
    mem[0 len 4] = ext_call.return_data[0 len 4]
    if uint32(mem[4 len 28]) >> 224 != Error(string arg1):
        revert with ext_call.return_data[0 len return_data.size]
    if return_data.size < 68:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 608 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
    if ext_call.return_data[0] > test266151307() or ext_call.return_data[0] + 36 > return_data.size:
        revert with ext_call.return_data[0 len return_data.size]
    if mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 608] > test266151307():
        revert with ext_call.return_data[0 len return_data.size]
    if ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 608] + 32 > return_data.size - 4:
        revert with ext_call.return_data[0 len return_data.size]
    if floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 608] + 31) + 609 < 608 or (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 608] + 31) + 609 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 608] + 31) + 609
    if not (2 * ceil32(return_data.size)) + ext_call.return_data[0] + 608:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 608] + 31) + 609] = 0x70a0823100000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = sub_8893d55aAddress
    require ext_code.size(stor19)
    staticcall stor19.0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _28 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _29 = mem[_28]
    mem[mem[64] + 4] = sub_8893d55aAddress
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _32 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _34 = mem[_32]
    if not mem[_32]:
        _41 = mem[64]
        mem[64] = mem[64] + 64
        mem[_41] = 26
        mem[_41 + 32] = 'SafeMath: division by zero'
        if not _29:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(stor21.field_0))
        staticcall address(stor21.field_0).0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _60 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _67 = mem[_60]
        require mem[_60] == mem[_60 + 31 len 1]
        if not ext_call.return_data[0]:
            _101 = mem[64]
            mem[64] = mem[64] + 64
            mem[_101] = 26
            mem[_101 + 32] = 'SafeMath: division by zero'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / ext_call.return_data[0]:
                _152 = mem[64]
                mem[64] = mem[64] + 64
                mem[_152] = 26
                mem[_152 + 32] = 'SafeMath: division by zero'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(arg1)
                staticcall arg1.getCurrentBalance() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _242 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _257 = mem[_242]
                if not mem[_242]:
                    _319 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_319] = 26
                    mem[_319 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _408 = mem[64]
                    mem[64] = mem[64] + 512
                    mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                    require ext_code.size(arg1)
                    staticcall arg1.0xfd306c4e with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _438 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _471 = mem[_438]
                    require mem[_438] <= test266151307()
                    require _438 + mem[_438] + 31 < _438 + return_data.size
                    _529 = mem[_438 + mem[_438]]
                    if mem[_438 + mem[_438]] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[_438 + mem[_438]])) + 1 < 0 or _438 + ceil32(return_data.size) + ceil32(ceil32(mem[_438 + mem[_438]])) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _438 + ceil32(return_data.size) + ceil32(ceil32(mem[_438 + mem[_438]])) + 1
                    mem[_438 + ceil32(return_data.size)] = _529
                    require _471 + _529 + 32 <= return_data.size
                    mem[_438 + ceil32(return_data.size) + 32 len ceil32(_529)] = mem[_438 + _471 + 32 len ceil32(_529)]
                    if ceil32(_529) <= _529:
                        mem[_408] = _438 + ceil32(return_data.size)
                        require ext_code.size(arg1)
                        staticcall arg1.0x194ba6a with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3548 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 32] = mem[_3548]
                        require ext_code.size(arg1)
                        staticcall arg1.0x27932f9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3740 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 64] = mem[_3740]
                        require ext_code.size(arg1)
                        staticcall arg1.0xaa8d8fdd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3932 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 96] = mem[_3932]
                        require ext_code.size(arg1)
                        staticcall arg1.getDepositTokens() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4124 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 128] = mem[_4124]
                        require ext_code.size(arg1)
                        staticcall arg1.getLockTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4316 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 160] = mem[_4316]
                        require ext_code.size(arg1)
                        staticcall arg1.getDepositTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4508 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 192] = mem[_4508]
                        require ext_code.size(arg1)
                        staticcall arg1.0x4b6a8ec8 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4700 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 224] = mem[_4700]
                        mem[_408 + 256] = _257
                        mem[_408 + 288] = 0 / sub_5a8c5d60
                        require ext_code.size(arg1)
                        staticcall arg1.0x56fe8cf7 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4892 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 320] = mem[_4892]
                        require ext_code.size(arg1)
                        staticcall arg1.getDepositorAddress() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5084 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_5084] == mem[_5084 + 12 len 20]
                        mem[_408 + 352] = mem[_5084 + 12 len 20]
                        require ext_code.size(arg1)
                        staticcall arg1.0x910afbe9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5276 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_5276] == mem[_5276 + 12 len 20]
                        mem[_408 + 384] = mem[_5276 + 12 len 20]
                        mem[_408 + 416] = uint8(_67)
                        require ext_code.size(arg1)
                        staticcall arg1.getStatus() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5468 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_5468] == bool(mem[_5468])
                        mem[_408 + 448] = bool(mem[_5468])
                    else:
                        mem[_529 + _438 + ceil32(return_data.size) + 32] = 0
                        mem[_408] = _438 + ceil32(return_data.size)
                        require ext_code.size(arg1)
                        staticcall arg1.0x194ba6a with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3549 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 32] = mem[_3549]
                        require ext_code.size(arg1)
                        staticcall arg1.0x27932f9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3741 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 64] = mem[_3741]
                        require ext_code.size(arg1)
                        staticcall arg1.0xaa8d8fdd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3933 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 96] = mem[_3933]
                        require ext_code.size(arg1)
                        staticcall arg1.getDepositTokens() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4125 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 128] = mem[_4125]
                        require ext_code.size(arg1)
                        staticcall arg1.getLockTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4317 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 160] = mem[_4317]
                        require ext_code.size(arg1)
                        staticcall arg1.getDepositTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4509 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 192] = mem[_4509]
                        require ext_code.size(arg1)
                        staticcall arg1.0x4b6a8ec8 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4701 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 224] = mem[_4701]
                        mem[_408 + 256] = _257
                        mem[_408 + 288] = 0 / sub_5a8c5d60
                        require ext_code.size(arg1)
                        staticcall arg1.0x56fe8cf7 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4893 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_408 + 320] = mem[_4893]
                        require ext_code.size(arg1)
                        staticcall arg1.getDepositorAddress() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5085 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_5085] == mem[_5085 + 12 len 20]
                        mem[_408 + 352] = mem[_5085 + 12 len 20]
                        require ext_code.size(arg1)
                        staticcall arg1.0x910afbe9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5277 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_5277] == mem[_5277 + 12 len 20]
                        mem[_408 + 384] = mem[_5277 + 12 len 20]
                        mem[_408 + 416] = uint8(_67)
                        require ext_code.size(arg1)
                        staticcall arg1.getStatus() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5469 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_5469] == bool(mem[_5469])
                        mem[_408 + 448] = bool(mem[_5469])
                    mem[0] = arg1
                    mem[32] = sha3(msg.sender, 2)
                    mem[_408 + 480] = bool(stor2[msg.sender][address(arg1)])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    mem[mem[64] + 544] = _529
                    mem[mem[64] + 576 len ceil32(_529)] = mem[_438 + ceil32(return_data.size) + 32 len ceil32(_529)]
                    if ceil32(_529) > _529:
                        mem[_529 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[_408 + 32]
                    mem[mem[64] + 96] = mem[_408 + 64]
                    mem[mem[64] + 128] = mem[_408 + 96]
                    mem[mem[64] + 160] = mem[_408 + 128]
                    mem[mem[64] + 192] = mem[_408 + 160]
                    mem[mem[64] + 224] = mem[_408 + 192]
                    mem[mem[64] + 256] = mem[_408 + 224]
                    mem[mem[64] + 288] = _257
                    mem[mem[64] + 320] = 0 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[_408 + 320]
                    mem[mem[64] + 384] = mem[_408 + 364 len 20]
                    mem[mem[64] + 416] = mem[_408 + 396 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[_408 + 448])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           _257,
                           0 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(arg1)]),
                           _529,
                           mem[mem[64] + 576 len ceil32(_529)]
                if mem[_242] and 0 / sub_5d98fc27 > -1 / mem[_242]:
                    revert with 0, 17
                if not mem[_242]:
                    revert with 0, 18
                if mem[_242] * 0 / sub_5d98fc27 / mem[_242] != 0 / sub_5d98fc27:
                    revert with 0, 'SafeMath: multiplication overflow'
                _394 = mem[64]
                mem[64] = mem[64] + 64
                mem[_394] = 26
                mem[_394 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _525 = mem[64]
                mem[64] = mem[64] + 512
                mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(arg1)
                staticcall arg1.0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _558 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _610 = mem[_558]
                require mem[_558] <= test266151307()
                require _558 + mem[_558] + 31 < _558 + return_data.size
                _670 = mem[_558 + mem[_558]]
                if mem[_558 + mem[_558]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_558 + mem[_558]])) + 1 < 0 or _558 + ceil32(return_data.size) + ceil32(ceil32(mem[_558 + mem[_558]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _558 + ceil32(return_data.size) + ceil32(ceil32(mem[_558 + mem[_558]])) + 1
                mem[_558 + ceil32(return_data.size)] = _670
                require _610 + _670 + 32 <= return_data.size
                mem[_558 + ceil32(return_data.size) + 32 len ceil32(_670)] = mem[_558 + _610 + 32 len ceil32(_670)]
                if ceil32(_670) <= _670:
                    mem[_525] = _558 + ceil32(return_data.size)
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3546 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 32] = mem[_3546]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3738 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 64] = mem[_3738]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3930 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 96] = mem[_3930]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4122 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 128] = mem[_4122]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4314 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 160] = mem[_4314]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4506 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 192] = mem[_4506]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4698 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 224] = mem[_4698]
                    mem[_525 + 256] = _257
                    mem[_525 + 288] = _257 * 0 / sub_5d98fc27 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4890 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 320] = mem[_4890]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5082 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5082] == mem[_5082 + 12 len 20]
                    mem[_525 + 352] = mem[_5082 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5274 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5274] == mem[_5274 + 12 len 20]
                    mem[_525 + 384] = mem[_5274 + 12 len 20]
                    mem[_525 + 416] = uint8(_67)
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5466 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5466] == bool(mem[_5466])
                    mem[_525 + 448] = bool(mem[_5466])
                else:
                    mem[_670 + _558 + ceil32(return_data.size) + 32] = 0
                    mem[_525] = _558 + ceil32(return_data.size)
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3547 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 32] = mem[_3547]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3739 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 64] = mem[_3739]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3931 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 96] = mem[_3931]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4123 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 128] = mem[_4123]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4315 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 160] = mem[_4315]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4507 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 192] = mem[_4507]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4699 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 224] = mem[_4699]
                    mem[_525 + 256] = _257
                    mem[_525 + 288] = _257 * 0 / sub_5d98fc27 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4891 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_525 + 320] = mem[_4891]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5083 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5083] == mem[_5083 + 12 len 20]
                    mem[_525 + 352] = mem[_5083 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5275 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5275] == mem[_5275 + 12 len 20]
                    mem[_525 + 384] = mem[_5275 + 12 len 20]
                    mem[_525 + 416] = uint8(_67)
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5467 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5467] == bool(mem[_5467])
                    mem[_525 + 448] = bool(mem[_5467])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[_525 + 480] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                mem[mem[64] + 544] = _670
                mem[mem[64] + 576 len ceil32(_670)] = mem[_558 + ceil32(return_data.size) + 32 len ceil32(_670)]
                if ceil32(_670) > _670:
                    mem[_670 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[_525 + 32]
                mem[mem[64] + 96] = mem[_525 + 64]
                mem[mem[64] + 128] = mem[_525 + 96]
                mem[mem[64] + 160] = mem[_525 + 128]
                mem[mem[64] + 192] = mem[_525 + 160]
                mem[mem[64] + 224] = mem[_525 + 192]
                mem[mem[64] + 256] = mem[_525 + 224]
                mem[mem[64] + 288] = _257
                mem[mem[64] + 320] = _257 * 0 / sub_5d98fc27 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[_525 + 320]
                mem[mem[64] + 384] = mem[_525 + 364 len 20]
                mem[mem[64] + 416] = mem[_525 + 396 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[_525 + 448])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       _257,
                       _257 * 0 / sub_5d98fc27 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       _670,
                       mem[mem[64] + 576 len ceil32(_670)]
            if 0 / ext_call.return_data[0] and 0 / _29 > -1 / 0 / ext_call.return_data[0]:
                revert with 0, 17
            if not 0 / ext_call.return_data[0]:
                revert with 0, 18
            if 0 / ext_call.return_data[0] * 0 / _29 / 0 / ext_call.return_data[0] != 0 / _29:
                revert with 0, 'SafeMath: multiplication overflow'
            _199 = mem[64]
            mem[64] = mem[64] + 64
            mem[_199] = 26
            mem[_199 + 32] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(arg1)
            staticcall arg1.getCurrentBalance() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _301 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _318 = mem[_301]
            if not mem[_301]:
                _393 = mem[64]
                mem[64] = mem[64] + 64
                mem[_393] = 26
                mem[_393 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _521 = mem[64]
                mem[64] = mem[64] + 512
                mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(arg1)
                staticcall arg1.0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _557 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _607 = mem[_557]
                require mem[_557] <= test266151307()
                require _557 + mem[_557] + 31 < _557 + return_data.size
                _669 = mem[_557 + mem[_557]]
                if mem[_557 + mem[_557]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_557 + mem[_557]])) + 1 < 0 or _557 + ceil32(return_data.size) + ceil32(ceil32(mem[_557 + mem[_557]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _557 + ceil32(return_data.size) + ceil32(ceil32(mem[_557 + mem[_557]])) + 1
                mem[_557 + ceil32(return_data.size)] = _669
                require _607 + _669 + 32 <= return_data.size
                mem[_557 + ceil32(return_data.size) + 32 len ceil32(_669)] = mem[_557 + _607 + 32 len ceil32(_669)]
                if ceil32(_669) <= _669:
                    mem[_521] = _557 + ceil32(return_data.size)
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3544 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 32] = mem[_3544]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3736 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 64] = mem[_3736]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3928 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 96] = mem[_3928]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4120 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 128] = mem[_4120]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4312 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 160] = mem[_4312]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4504 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 192] = mem[_4504]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4696 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 224] = mem[_4696]
                    mem[_521 + 256] = _318
                    mem[_521 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4888 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 320] = mem[_4888]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5080 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5080] == mem[_5080 + 12 len 20]
                    mem[_521 + 352] = mem[_5080 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5272 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5272] == mem[_5272 + 12 len 20]
                    mem[_521 + 384] = mem[_5272 + 12 len 20]
                    mem[_521 + 416] = uint8(_67)
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5464 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5464] == bool(mem[_5464])
                    mem[_521 + 448] = bool(mem[_5464])
                else:
                    mem[_669 + _557 + ceil32(return_data.size) + 32] = 0
                    mem[_521] = _557 + ceil32(return_data.size)
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3545 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 32] = mem[_3545]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3737 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 64] = mem[_3737]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3929 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 96] = mem[_3929]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4121 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 128] = mem[_4121]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4313 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 160] = mem[_4313]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4505 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 192] = mem[_4505]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4697 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 224] = mem[_4697]
                    mem[_521 + 256] = _318
                    mem[_521 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4889 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_521 + 320] = mem[_4889]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5081 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5081] == mem[_5081 + 12 len 20]
                    mem[_521 + 352] = mem[_5081 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5273 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5273] == mem[_5273 + 12 len 20]
                    mem[_521 + 384] = mem[_5273 + 12 len 20]
                    mem[_521 + 416] = uint8(_67)
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5465 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5465] == bool(mem[_5465])
                    mem[_521 + 448] = bool(mem[_5465])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[_521 + 480] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                mem[mem[64] + 544] = _669
                mem[mem[64] + 576 len ceil32(_669)] = mem[_557 + ceil32(return_data.size) + 32 len ceil32(_669)]
                if ceil32(_669) > _669:
                    mem[_669 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[_521 + 32]
                mem[mem[64] + 96] = mem[_521 + 64]
                mem[mem[64] + 128] = mem[_521 + 96]
                mem[mem[64] + 160] = mem[_521 + 128]
                mem[mem[64] + 192] = mem[_521 + 160]
                mem[mem[64] + 224] = mem[_521 + 192]
                mem[mem[64] + 256] = mem[_521 + 224]
                mem[mem[64] + 288] = _318
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[_521 + 320]
                mem[mem[64] + 384] = mem[_521 + 364 len 20]
                mem[mem[64] + 416] = mem[_521 + 396 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[_521 + 448])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       _318,
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       _669,
                       mem[mem[64] + 576 len ceil32(_669)]
            if mem[_301] and 0 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 > -1 / mem[_301]:
                revert with 0, 17
            if not mem[_301]:
                revert with 0, 18
            if mem[_301] * 0 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / mem[_301] != 0 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            _498 = mem[64]
            mem[64] = mem[64] + 64
            mem[_498] = 26
            mem[_498 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _665 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(arg1)
            staticcall arg1.0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _704 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _761 = mem[_704]
            require mem[_704] <= test266151307()
            require _704 + mem[_704] + 31 < _704 + return_data.size
            _808 = mem[_704 + mem[_704]]
            if mem[_704 + mem[_704]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_704 + mem[_704]])) + 1 < 0 or _704 + ceil32(return_data.size) + ceil32(ceil32(mem[_704 + mem[_704]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _704 + ceil32(return_data.size) + ceil32(ceil32(mem[_704 + mem[_704]])) + 1
            mem[_704 + ceil32(return_data.size)] = _808
            require _761 + _808 + 32 <= return_data.size
            mem[_704 + ceil32(return_data.size) + 32 len ceil32(_808)] = mem[_704 + _761 + 32 len ceil32(_808)]
            if ceil32(_808) <= _808:
                mem[_665] = _704 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3542 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 32] = mem[_3542]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3734 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 64] = mem[_3734]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3926 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 96] = mem[_3926]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4118 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 128] = mem[_4118]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4310 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 160] = mem[_4310]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4502 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 192] = mem[_4502]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4694 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 224] = mem[_4694]
                mem[_665 + 256] = _318
                mem[_665 + 288] = _318 * 0 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4886 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 320] = mem[_4886]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5078 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5078] == mem[_5078 + 12 len 20]
                mem[_665 + 352] = mem[_5078 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5270 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5270] == mem[_5270 + 12 len 20]
                mem[_665 + 384] = mem[_5270 + 12 len 20]
                mem[_665 + 416] = uint8(_67)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5462 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5462] == bool(mem[_5462])
                mem[_665 + 448] = bool(mem[_5462])
            else:
                mem[_808 + _704 + ceil32(return_data.size) + 32] = 0
                mem[_665] = _704 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3543 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 32] = mem[_3543]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3735 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 64] = mem[_3735]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3927 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 96] = mem[_3927]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4119 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 128] = mem[_4119]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4311 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 160] = mem[_4311]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4503 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 192] = mem[_4503]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4695 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 224] = mem[_4695]
                mem[_665 + 256] = _318
                mem[_665 + 288] = _318 * 0 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4887 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_665 + 320] = mem[_4887]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5079 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5079] == mem[_5079 + 12 len 20]
                mem[_665 + 352] = mem[_5079 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5271 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5271] == mem[_5271 + 12 len 20]
                mem[_665 + 384] = mem[_5271 + 12 len 20]
                mem[_665 + 416] = uint8(_67)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5463 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5463] == bool(mem[_5463])
                mem[_665 + 448] = bool(mem[_5463])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[_665 + 480] = bool(stor2[msg.sender][address(arg1)])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _808
            mem[mem[64] + 576 len ceil32(_808)] = mem[_704 + ceil32(return_data.size) + 32 len ceil32(_808)]
            if ceil32(_808) > _808:
                mem[_808 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_665 + 32]
            mem[mem[64] + 96] = mem[_665 + 64]
            mem[mem[64] + 128] = mem[_665 + 96]
            mem[mem[64] + 160] = mem[_665 + 128]
            mem[mem[64] + 192] = mem[_665 + 160]
            mem[mem[64] + 224] = mem[_665 + 192]
            mem[mem[64] + 256] = mem[_665 + 224]
            mem[mem[64] + 288] = _318
            mem[mem[64] + 320] = _318 * 0 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_665 + 320]
            mem[mem[64] + 384] = mem[_665 + 364 len 20]
            mem[mem[64] + 416] = mem[_665 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_665 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _318,
                   _318 * 0 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(arg1)]),
                   _808,
                   mem[mem[64] + 576 len ceil32(_808)]
        if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
            revert with 0, 'SafeMath: multiplication overflow'
        _121 = mem[64]
        mem[64] = mem[64] + 64
        mem[_121] = 26
        mem[_121 + 32] = 'SafeMath: division by zero'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            _198 = mem[64]
            mem[64] = mem[64] + 64
            mem[_198] = 26
            mem[_198 + 32] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(arg1)
            staticcall arg1.getCurrentBalance() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _300 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _317 = mem[_300]
            if not mem[_300]:
                _392 = mem[64]
                mem[64] = mem[64] + 64
                mem[_392] = 26
                mem[_392 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _517 = mem[64]
                mem[64] = mem[64] + 512
                mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(arg1)
                staticcall arg1.0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _556 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _604 = mem[_556]
                require mem[_556] <= test266151307()
                require _556 + mem[_556] + 31 < _556 + return_data.size
                _664 = mem[_556 + mem[_556]]
                if mem[_556 + mem[_556]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_556 + mem[_556]])) + 1 < 0 or _556 + ceil32(return_data.size) + ceil32(ceil32(mem[_556 + mem[_556]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _556 + ceil32(return_data.size) + ceil32(ceil32(mem[_556 + mem[_556]])) + 1
                mem[_556 + ceil32(return_data.size)] = _664
                require _604 + _664 + 32 <= return_data.size
                mem[_556 + ceil32(return_data.size) + 32 len ceil32(_664)] = mem[_556 + _604 + 32 len ceil32(_664)]
                if ceil32(_664) <= _664:
                    mem[_517] = _556 + ceil32(return_data.size)
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3540 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 32] = mem[_3540]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3732 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 64] = mem[_3732]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3924 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 96] = mem[_3924]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4116 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 128] = mem[_4116]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4308 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 160] = mem[_4308]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4500 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 192] = mem[_4500]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4692 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 224] = mem[_4692]
                    mem[_517 + 256] = _317
                    mem[_517 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4884 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 320] = mem[_4884]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5076 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5076] == mem[_5076 + 12 len 20]
                    mem[_517 + 352] = mem[_5076 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5268 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5268] == mem[_5268 + 12 len 20]
                    mem[_517 + 384] = mem[_5268 + 12 len 20]
                    mem[_517 + 416] = uint8(_67)
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5460 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5460] == bool(mem[_5460])
                    mem[_517 + 448] = bool(mem[_5460])
                else:
                    mem[_664 + _556 + ceil32(return_data.size) + 32] = 0
                    mem[_517] = _556 + ceil32(return_data.size)
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3541 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 32] = mem[_3541]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3733 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 64] = mem[_3733]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3925 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 96] = mem[_3925]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4117 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 128] = mem[_4117]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4309 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 160] = mem[_4309]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4501 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 192] = mem[_4501]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4693 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 224] = mem[_4693]
                    mem[_517 + 256] = _317
                    mem[_517 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4885 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_517 + 320] = mem[_4885]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5077 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5077] == mem[_5077 + 12 len 20]
                    mem[_517 + 352] = mem[_5077 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5269 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5269] == mem[_5269 + 12 len 20]
                    mem[_517 + 384] = mem[_5269 + 12 len 20]
                    mem[_517 + 416] = uint8(_67)
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5461 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5461] == bool(mem[_5461])
                    mem[_517 + 448] = bool(mem[_5461])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[_517 + 480] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                mem[mem[64] + 544] = _664
                mem[mem[64] + 576 len ceil32(_664)] = mem[_556 + ceil32(return_data.size) + 32 len ceil32(_664)]
                if ceil32(_664) > _664:
                    mem[_664 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[_517 + 32]
                mem[mem[64] + 96] = mem[_517 + 64]
                mem[mem[64] + 128] = mem[_517 + 96]
                mem[mem[64] + 160] = mem[_517 + 128]
                mem[mem[64] + 192] = mem[_517 + 160]
                mem[mem[64] + 224] = mem[_517 + 192]
                mem[mem[64] + 256] = mem[_517 + 224]
                mem[mem[64] + 288] = _317
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[_517 + 320]
                mem[mem[64] + 384] = mem[_517 + 364 len 20]
                mem[mem[64] + 416] = mem[_517 + 396 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[_517 + 448])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       _317,
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       _664,
                       mem[mem[64] + 576 len ceil32(_664)]
            if mem[_300] and 0 / sub_5d98fc27 > -1 / mem[_300]:
                revert with 0, 17
            if not mem[_300]:
                revert with 0, 18
            if mem[_300] * 0 / sub_5d98fc27 / mem[_300] != 0 / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            _497 = mem[64]
            mem[64] = mem[64] + 64
            mem[_497] = 26
            mem[_497 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _660 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(arg1)
            staticcall arg1.0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _703 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _758 = mem[_703]
            require mem[_703] <= test266151307()
            require _703 + mem[_703] + 31 < _703 + return_data.size
            _807 = mem[_703 + mem[_703]]
            if mem[_703 + mem[_703]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_703 + mem[_703]])) + 1 < 0 or _703 + ceil32(return_data.size) + ceil32(ceil32(mem[_703 + mem[_703]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _703 + ceil32(return_data.size) + ceil32(ceil32(mem[_703 + mem[_703]])) + 1
            mem[_703 + ceil32(return_data.size)] = _807
            require _758 + _807 + 32 <= return_data.size
            mem[_703 + ceil32(return_data.size) + 32 len ceil32(_807)] = mem[_703 + _758 + 32 len ceil32(_807)]
            if ceil32(_807) <= _807:
                mem[_660] = _703 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3538 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 32] = mem[_3538]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3730 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 64] = mem[_3730]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3922 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 96] = mem[_3922]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4114 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 128] = mem[_4114]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4306 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 160] = mem[_4306]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4498 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 192] = mem[_4498]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4690 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 224] = mem[_4690]
                mem[_660 + 256] = _317
                mem[_660 + 288] = _317 * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4882 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 320] = mem[_4882]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5074 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5074] == mem[_5074 + 12 len 20]
                mem[_660 + 352] = mem[_5074 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5266 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5266] == mem[_5266 + 12 len 20]
                mem[_660 + 384] = mem[_5266 + 12 len 20]
                mem[_660 + 416] = uint8(_67)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5458 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5458] == bool(mem[_5458])
                mem[_660 + 448] = bool(mem[_5458])
            else:
                mem[_807 + _703 + ceil32(return_data.size) + 32] = 0
                mem[_660] = _703 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3539 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 32] = mem[_3539]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3731 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 64] = mem[_3731]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3923 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 96] = mem[_3923]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4115 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 128] = mem[_4115]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4307 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 160] = mem[_4307]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4499 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 192] = mem[_4499]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4691 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 224] = mem[_4691]
                mem[_660 + 256] = _317
                mem[_660 + 288] = _317 * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4883 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_660 + 320] = mem[_4883]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5075 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5075] == mem[_5075 + 12 len 20]
                mem[_660 + 352] = mem[_5075 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5267 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5267] == mem[_5267 + 12 len 20]
                mem[_660 + 384] = mem[_5267 + 12 len 20]
                mem[_660 + 416] = uint8(_67)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5459 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5459] == bool(mem[_5459])
                mem[_660 + 448] = bool(mem[_5459])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[_660 + 480] = bool(stor2[msg.sender][address(arg1)])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _807
            mem[mem[64] + 576 len ceil32(_807)] = mem[_703 + ceil32(return_data.size) + 32 len ceil32(_807)]
            if ceil32(_807) > _807:
                mem[_807 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_660 + 32]
            mem[mem[64] + 96] = mem[_660 + 64]
            mem[mem[64] + 128] = mem[_660 + 96]
            mem[mem[64] + 160] = mem[_660 + 128]
            mem[mem[64] + 192] = mem[_660 + 160]
            mem[mem[64] + 224] = mem[_660 + 192]
            mem[mem[64] + 256] = mem[_660 + 224]
            mem[mem[64] + 288] = _317
            mem[mem[64] + 320] = _317 * 0 / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_660 + 320]
            mem[mem[64] + 384] = mem[_660 + 364 len 20]
            mem[mem[64] + 416] = mem[_660 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_660 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _317,
                   _317 * 0 / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(arg1)]),
                   _807,
                   mem[mem[64] + 576 len ceil32(_807)]
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and 0 / _29 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _29 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != 0 / _29:
            revert with 0, 'SafeMath: multiplication overflow'
        _256 = mem[64]
        mem[64] = mem[64] + 64
        mem[_256] = 26
        mem[_256 + 32] = 'SafeMath: division by zero'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(arg1)
        staticcall arg1.getCurrentBalance() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _363 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _391 = mem[_363]
        if not mem[_363]:
            _496 = mem[64]
            mem[64] = mem[64] + 64
            mem[_496] = 26
            mem[_496 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _656 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(arg1)
            staticcall arg1.0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _702 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _755 = mem[_702]
            require mem[_702] <= test266151307()
            require _702 + mem[_702] + 31 < _702 + return_data.size
            _806 = mem[_702 + mem[_702]]
            if mem[_702 + mem[_702]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_702 + mem[_702]])) + 1 < 0 or _702 + ceil32(return_data.size) + ceil32(ceil32(mem[_702 + mem[_702]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _702 + ceil32(return_data.size) + ceil32(ceil32(mem[_702 + mem[_702]])) + 1
            mem[_702 + ceil32(return_data.size)] = _806
            require _755 + _806 + 32 <= return_data.size
            mem[_702 + ceil32(return_data.size) + 32 len ceil32(_806)] = mem[_702 + _755 + 32 len ceil32(_806)]
            if ceil32(_806) <= _806:
                mem[_656] = _702 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3536 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 32] = mem[_3536]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3728 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 64] = mem[_3728]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3920 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 96] = mem[_3920]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4112 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 128] = mem[_4112]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4304 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 160] = mem[_4304]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4496 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 192] = mem[_4496]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4688 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 224] = mem[_4688]
                mem[_656 + 256] = _391
                mem[_656 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4880 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 320] = mem[_4880]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5072 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5072] == mem[_5072 + 12 len 20]
                mem[_656 + 352] = mem[_5072 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5264 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5264] == mem[_5264 + 12 len 20]
                mem[_656 + 384] = mem[_5264 + 12 len 20]
                mem[_656 + 416] = uint8(_67)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5456 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5456] == bool(mem[_5456])
                mem[_656 + 448] = bool(mem[_5456])
            else:
                mem[_806 + _702 + ceil32(return_data.size) + 32] = 0
                mem[_656] = _702 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3537 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 32] = mem[_3537]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3729 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 64] = mem[_3729]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3921 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 96] = mem[_3921]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4113 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 128] = mem[_4113]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4305 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 160] = mem[_4305]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4497 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 192] = mem[_4497]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4689 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 224] = mem[_4689]
                mem[_656 + 256] = _391
                mem[_656 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4881 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_656 + 320] = mem[_4881]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5073 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5073] == mem[_5073 + 12 len 20]
                mem[_656 + 352] = mem[_5073 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5265 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5265] == mem[_5265 + 12 len 20]
                mem[_656 + 384] = mem[_5265 + 12 len 20]
                mem[_656 + 416] = uint8(_67)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5457 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5457] == bool(mem[_5457])
                mem[_656 + 448] = bool(mem[_5457])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[_656 + 480] = bool(stor2[msg.sender][address(arg1)])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _806
            mem[mem[64] + 576 len ceil32(_806)] = mem[_702 + ceil32(return_data.size) + 32 len ceil32(_806)]
            if ceil32(_806) > _806:
                mem[_806 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_656 + 32]
            mem[mem[64] + 96] = mem[_656 + 64]
            mem[mem[64] + 128] = mem[_656 + 96]
            mem[mem[64] + 160] = mem[_656 + 128]
            mem[mem[64] + 192] = mem[_656 + 160]
            mem[mem[64] + 224] = mem[_656 + 192]
            mem[mem[64] + 256] = mem[_656 + 224]
            mem[mem[64] + 288] = _391
            mem[mem[64] + 320] = 0 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_656 + 320]
            mem[mem[64] + 384] = mem[_656 + 364 len 20]
            mem[mem[64] + 416] = mem[_656 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_656 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _391,
                   0 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(arg1)]),
                   _806,
                   mem[mem[64] + 576 len ceil32(_806)]
        if mem[_363] and ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 > -1 / mem[_363]:
            revert with 0, 17
        if not mem[_363]:
            revert with 0, 18
        if mem[_363] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / mem[_363] != ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        _632 = mem[64]
        mem[64] = mem[64] + 64
        mem[_632] = 26
        mem[_632 + 32] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        _802 = mem[64]
        mem[64] = mem[64] + 512
        mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(arg1)
        staticcall arg1.0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _852 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _894 = mem[_852]
        require mem[_852] <= test266151307()
        require _852 + mem[_852] + 31 < _852 + return_data.size
        _944 = mem[_852 + mem[_852]]
        if mem[_852 + mem[_852]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_852 + mem[_852]])) + 1 < 0 or _852 + ceil32(return_data.size) + ceil32(ceil32(mem[_852 + mem[_852]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _852 + ceil32(return_data.size) + ceil32(ceil32(mem[_852 + mem[_852]])) + 1
        mem[_852 + ceil32(return_data.size)] = _944
        require _894 + _944 + 32 <= return_data.size
        mem[_852 + ceil32(return_data.size) + 32 len ceil32(_944)] = mem[_852 + _894 + 32 len ceil32(_944)]
        if ceil32(_944) <= _944:
            mem[_802] = _852 + ceil32(return_data.size)
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3534 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 32] = mem[_3534]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3726 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 64] = mem[_3726]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3918 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 96] = mem[_3918]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4110 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 128] = mem[_4110]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4302 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 160] = mem[_4302]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4494 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 192] = mem[_4494]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4686 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 224] = mem[_4686]
            mem[_802 + 256] = _391
            mem[_802 + 288] = _391 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4878 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 320] = mem[_4878]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5070 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5070] == mem[_5070 + 12 len 20]
            mem[_802 + 352] = mem[_5070 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5262 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5262] == mem[_5262 + 12 len 20]
            mem[_802 + 384] = mem[_5262 + 12 len 20]
            mem[_802 + 416] = uint8(_67)
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5454 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5454] == bool(mem[_5454])
            mem[_802 + 448] = bool(mem[_5454])
        else:
            mem[_944 + _852 + ceil32(return_data.size) + 32] = 0
            mem[_802] = _852 + ceil32(return_data.size)
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3535 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 32] = mem[_3535]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3727 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 64] = mem[_3727]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3919 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 96] = mem[_3919]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4111 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 128] = mem[_4111]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4303 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 160] = mem[_4303]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4495 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 192] = mem[_4495]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4687 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 224] = mem[_4687]
            mem[_802 + 256] = _391
            mem[_802 + 288] = _391 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4879 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_802 + 320] = mem[_4879]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5071 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5071] == mem[_5071 + 12 len 20]
            mem[_802 + 352] = mem[_5071 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5263 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5263] == mem[_5263 + 12 len 20]
            mem[_802 + 384] = mem[_5263 + 12 len 20]
            mem[_802 + 416] = uint8(_67)
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5455 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5455] == bool(mem[_5455])
            mem[_802 + 448] = bool(mem[_5455])
        mem[0] = arg1
        mem[32] = sha3(msg.sender, 2)
        mem[_802 + 480] = bool(stor2[msg.sender][address(arg1)])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        mem[mem[64] + 544] = _944
        mem[mem[64] + 576 len ceil32(_944)] = mem[_852 + ceil32(return_data.size) + 32 len ceil32(_944)]
        if ceil32(_944) > _944:
            mem[_944 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[_802 + 32]
        mem[mem[64] + 96] = mem[_802 + 64]
        mem[mem[64] + 128] = mem[_802 + 96]
        mem[mem[64] + 160] = mem[_802 + 128]
        mem[mem[64] + 192] = mem[_802 + 160]
        mem[mem[64] + 224] = mem[_802 + 192]
        mem[mem[64] + 256] = mem[_802 + 224]
        mem[mem[64] + 288] = _391
        mem[mem[64] + 320] = _391 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[_802 + 320]
        mem[mem[64] + 384] = mem[_802 + 364 len 20]
        mem[mem[64] + 416] = mem[_802 + 396 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[_802 + 448])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               _391,
               _391 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _29 / sub_5d98fc27 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(arg1)]),
               _944,
               mem[mem[64] + 576 len ceil32(_944)]
    if mem[_32] and sub_5d98fc27 > -1 / mem[_32]:
        revert with 0, 17
    if not mem[_32]:
        revert with 0, 18
    if mem[_32] * sub_5d98fc27 / mem[_32] != sub_5d98fc27:
        revert with 0, 'SafeMath: multiplication overflow'
    _52 = mem[64]
    mem[64] = mem[64] + 64
    mem[_52] = 26
    mem[_52 + 32] = 'SafeMath: division by zero'
    if not _29:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x313ce567 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _82 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _88 = mem[_82]
    require mem[_82] == mem[_82 + 31 len 1]
    if not ext_call.return_data[0]:
        _120 = mem[64]
        mem[64] = mem[64] + 64
        mem[_120] = 26
        mem[_120 + 32] = 'SafeMath: division by zero'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not 0 / ext_call.return_data[0]:
            _197 = mem[64]
            mem[64] = mem[64] + 64
            mem[_197] = 26
            mem[_197 + 32] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(arg1)
            staticcall arg1.getCurrentBalance() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _298 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _316 = mem[_298]
            if not mem[_298]:
                _390 = mem[64]
                mem[64] = mem[64] + 64
                mem[_390] = 26
                mem[_390 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _513 = mem[64]
                mem[64] = mem[64] + 512
                mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(arg1)
                staticcall arg1.0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _555 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _600 = mem[_555]
                require mem[_555] <= test266151307()
                require _555 + mem[_555] + 31 < _555 + return_data.size
                _655 = mem[_555 + mem[_555]]
                if mem[_555 + mem[_555]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_555 + mem[_555]])) + 1 < 0 or _555 + ceil32(return_data.size) + ceil32(ceil32(mem[_555 + mem[_555]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _555 + ceil32(return_data.size) + ceil32(ceil32(mem[_555 + mem[_555]])) + 1
                mem[_555 + ceil32(return_data.size)] = _655
                require _600 + _655 + 32 <= return_data.size
                mem[_555 + ceil32(return_data.size) + 32 len ceil32(_655)] = mem[_555 + _600 + 32 len ceil32(_655)]
                if ceil32(_655) <= _655:
                    mem[_513] = _555 + ceil32(return_data.size)
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3532 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 32] = mem[_3532]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3724 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 64] = mem[_3724]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3916 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 96] = mem[_3916]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4108 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 128] = mem[_4108]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4300 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 160] = mem[_4300]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4492 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 192] = mem[_4492]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4684 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 224] = mem[_4684]
                    mem[_513 + 256] = _316
                    mem[_513 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4876 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 320] = mem[_4876]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5068 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5068] == mem[_5068 + 12 len 20]
                    mem[_513 + 352] = mem[_5068 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5260 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5260] == mem[_5260 + 12 len 20]
                    mem[_513 + 384] = mem[_5260 + 12 len 20]
                    mem[_513 + 416] = uint8(_88)
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5452 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5452] == bool(mem[_5452])
                    mem[_513 + 448] = bool(mem[_5452])
                else:
                    mem[_655 + _555 + ceil32(return_data.size) + 32] = 0
                    mem[_513] = _555 + ceil32(return_data.size)
                    require ext_code.size(arg1)
                    staticcall arg1.0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3533 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 32] = mem[_3533]
                    require ext_code.size(arg1)
                    staticcall arg1.0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3725 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 64] = mem[_3725]
                    require ext_code.size(arg1)
                    staticcall arg1.0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3917 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 96] = mem[_3917]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4109 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 128] = mem[_4109]
                    require ext_code.size(arg1)
                    staticcall arg1.getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4301 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 160] = mem[_4301]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4493 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 192] = mem[_4493]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4685 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 224] = mem[_4685]
                    mem[_513 + 256] = _316
                    mem[_513 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(arg1)
                    staticcall arg1.0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4877 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_513 + 320] = mem[_4877]
                    require ext_code.size(arg1)
                    staticcall arg1.getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5069 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5069] == mem[_5069 + 12 len 20]
                    mem[_513 + 352] = mem[_5069 + 12 len 20]
                    require ext_code.size(arg1)
                    staticcall arg1.0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5261 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5261] == mem[_5261 + 12 len 20]
                    mem[_513 + 384] = mem[_5261 + 12 len 20]
                    mem[_513 + 416] = uint8(_88)
                    require ext_code.size(arg1)
                    staticcall arg1.getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5453 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_5453] == bool(mem[_5453])
                    mem[_513 + 448] = bool(mem[_5453])
                mem[0] = arg1
                mem[32] = sha3(msg.sender, 2)
                mem[_513 + 480] = bool(stor2[msg.sender][address(arg1)])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                mem[mem[64] + 544] = _655
                mem[mem[64] + 576 len ceil32(_655)] = mem[_555 + ceil32(return_data.size) + 32 len ceil32(_655)]
                if ceil32(_655) > _655:
                    mem[_655 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[_513 + 32]
                mem[mem[64] + 96] = mem[_513 + 64]
                mem[mem[64] + 128] = mem[_513 + 96]
                mem[mem[64] + 160] = mem[_513 + 128]
                mem[mem[64] + 192] = mem[_513 + 160]
                mem[mem[64] + 224] = mem[_513 + 192]
                mem[mem[64] + 256] = mem[_513 + 224]
                mem[mem[64] + 288] = _316
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[_513 + 320]
                mem[mem[64] + 384] = mem[_513 + 364 len 20]
                mem[mem[64] + 416] = mem[_513 + 396 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[_513 + 448])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       _316,
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(arg1)]),
                       _655,
                       mem[mem[64] + 576 len ceil32(_655)]
            if mem[_298] and 0 / sub_5d98fc27 > -1 / mem[_298]:
                revert with 0, 17
            if not mem[_298]:
                revert with 0, 18
            if mem[_298] * 0 / sub_5d98fc27 / mem[_298] != 0 / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            _495 = mem[64]
            mem[64] = mem[64] + 64
            mem[_495] = 26
            mem[_495 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _651 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(arg1)
            staticcall arg1.0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _701 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _752 = mem[_701]
            require mem[_701] <= test266151307()
            require _701 + mem[_701] + 31 < _701 + return_data.size
            _801 = mem[_701 + mem[_701]]
            if mem[_701 + mem[_701]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_701 + mem[_701]])) + 1 < 0 or _701 + ceil32(return_data.size) + ceil32(ceil32(mem[_701 + mem[_701]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _701 + ceil32(return_data.size) + ceil32(ceil32(mem[_701 + mem[_701]])) + 1
            mem[_701 + ceil32(return_data.size)] = _801
            require _752 + _801 + 32 <= return_data.size
            mem[_701 + ceil32(return_data.size) + 32 len ceil32(_801)] = mem[_701 + _752 + 32 len ceil32(_801)]
            if ceil32(_801) <= _801:
                mem[_651] = _701 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3530 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 32] = mem[_3530]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3722 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 64] = mem[_3722]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3914 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 96] = mem[_3914]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4106 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 128] = mem[_4106]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4298 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 160] = mem[_4298]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4490 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 192] = mem[_4490]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4682 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 224] = mem[_4682]
                mem[_651 + 256] = _316
                mem[_651 + 288] = _316 * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4874 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 320] = mem[_4874]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5066 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5066] == mem[_5066 + 12 len 20]
                mem[_651 + 352] = mem[_5066 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5258 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5258] == mem[_5258 + 12 len 20]
                mem[_651 + 384] = mem[_5258 + 12 len 20]
                mem[_651 + 416] = uint8(_88)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5450 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5450] == bool(mem[_5450])
                mem[_651 + 448] = bool(mem[_5450])
            else:
                mem[_801 + _701 + ceil32(return_data.size) + 32] = 0
                mem[_651] = _701 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3531 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 32] = mem[_3531]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3723 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 64] = mem[_3723]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3915 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 96] = mem[_3915]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4107 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 128] = mem[_4107]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4299 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 160] = mem[_4299]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4491 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 192] = mem[_4491]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4683 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 224] = mem[_4683]
                mem[_651 + 256] = _316
                mem[_651 + 288] = _316 * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4875 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_651 + 320] = mem[_4875]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5067 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5067] == mem[_5067 + 12 len 20]
                mem[_651 + 352] = mem[_5067 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5259 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5259] == mem[_5259 + 12 len 20]
                mem[_651 + 384] = mem[_5259 + 12 len 20]
                mem[_651 + 416] = uint8(_88)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5451 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5451] == bool(mem[_5451])
                mem[_651 + 448] = bool(mem[_5451])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[_651 + 480] = bool(stor2[msg.sender][address(arg1)])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _801
            mem[mem[64] + 576 len ceil32(_801)] = mem[_701 + ceil32(return_data.size) + 32 len ceil32(_801)]
            if ceil32(_801) > _801:
                mem[_801 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_651 + 32]
            mem[mem[64] + 96] = mem[_651 + 64]
            mem[mem[64] + 128] = mem[_651 + 96]
            mem[mem[64] + 160] = mem[_651 + 128]
            mem[mem[64] + 192] = mem[_651 + 160]
            mem[mem[64] + 224] = mem[_651 + 192]
            mem[mem[64] + 256] = mem[_651 + 224]
            mem[mem[64] + 288] = _316
            mem[mem[64] + 320] = _316 * 0 / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_651 + 320]
            mem[mem[64] + 384] = mem[_651 + 364 len 20]
            mem[mem[64] + 416] = mem[_651 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_651 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _316,
                   _316 * 0 / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(arg1)]),
                   _801,
                   mem[mem[64] + 576 len ceil32(_801)]
        if 0 / ext_call.return_data[0] and _34 * sub_5d98fc27 / _29 > -1 / 0 / ext_call.return_data[0]:
            revert with 0, 17
        if not 0 / ext_call.return_data[0]:
            revert with 0, 18
        if 0 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / 0 / ext_call.return_data[0] != _34 * sub_5d98fc27 / _29:
            revert with 0, 'SafeMath: multiplication overflow'
        _255 = mem[64]
        mem[64] = mem[64] + 64
        mem[_255] = 26
        mem[_255 + 32] = 'SafeMath: division by zero'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(arg1)
        staticcall arg1.getCurrentBalance() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _362 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _389 = mem[_362]
        if not mem[_362]:
            _494 = mem[64]
            mem[64] = mem[64] + 64
            mem[_494] = 26
            mem[_494 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _647 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(arg1)
            staticcall arg1.0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _700 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _749 = mem[_700]
            require mem[_700] <= test266151307()
            require _700 + mem[_700] + 31 < _700 + return_data.size
            _800 = mem[_700 + mem[_700]]
            if mem[_700 + mem[_700]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_700 + mem[_700]])) + 1 < 0 or _700 + ceil32(return_data.size) + ceil32(ceil32(mem[_700 + mem[_700]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _700 + ceil32(return_data.size) + ceil32(ceil32(mem[_700 + mem[_700]])) + 1
            mem[_700 + ceil32(return_data.size)] = _800
            require _749 + _800 + 32 <= return_data.size
            mem[_700 + ceil32(return_data.size) + 32 len ceil32(_800)] = mem[_700 + _749 + 32 len ceil32(_800)]
            if ceil32(_800) <= _800:
                mem[_647] = _700 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3528 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 32] = mem[_3528]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3720 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 64] = mem[_3720]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3912 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 96] = mem[_3912]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4104 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 128] = mem[_4104]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4296 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 160] = mem[_4296]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4488 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 192] = mem[_4488]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4680 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 224] = mem[_4680]
                mem[_647 + 256] = _389
                mem[_647 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4872 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 320] = mem[_4872]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5064 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5064] == mem[_5064 + 12 len 20]
                mem[_647 + 352] = mem[_5064 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5256 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5256] == mem[_5256 + 12 len 20]
                mem[_647 + 384] = mem[_5256 + 12 len 20]
                mem[_647 + 416] = uint8(_88)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5448 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5448] == bool(mem[_5448])
                mem[_647 + 448] = bool(mem[_5448])
            else:
                mem[_800 + _700 + ceil32(return_data.size) + 32] = 0
                mem[_647] = _700 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3529 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 32] = mem[_3529]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3721 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 64] = mem[_3721]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3913 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 96] = mem[_3913]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4105 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 128] = mem[_4105]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4297 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 160] = mem[_4297]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4489 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 192] = mem[_4489]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4681 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 224] = mem[_4681]
                mem[_647 + 256] = _389
                mem[_647 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4873 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_647 + 320] = mem[_4873]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5065 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5065] == mem[_5065 + 12 len 20]
                mem[_647 + 352] = mem[_5065 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5257 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5257] == mem[_5257 + 12 len 20]
                mem[_647 + 384] = mem[_5257 + 12 len 20]
                mem[_647 + 416] = uint8(_88)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5449 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5449] == bool(mem[_5449])
                mem[_647 + 448] = bool(mem[_5449])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[_647 + 480] = bool(stor2[msg.sender][address(arg1)])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _800
            mem[mem[64] + 576 len ceil32(_800)] = mem[_700 + ceil32(return_data.size) + 32 len ceil32(_800)]
            if ceil32(_800) > _800:
                mem[_800 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_647 + 32]
            mem[mem[64] + 96] = mem[_647 + 64]
            mem[mem[64] + 128] = mem[_647 + 96]
            mem[mem[64] + 160] = mem[_647 + 128]
            mem[mem[64] + 192] = mem[_647 + 160]
            mem[mem[64] + 224] = mem[_647 + 192]
            mem[mem[64] + 256] = mem[_647 + 224]
            mem[mem[64] + 288] = _389
            mem[mem[64] + 320] = 0 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_647 + 320]
            mem[mem[64] + 384] = mem[_647 + 364 len 20]
            mem[mem[64] + 416] = mem[_647 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_647 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _389,
                   0 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(arg1)]),
                   _800,
                   mem[mem[64] + 576 len ceil32(_800)]
        if mem[_362] and 0 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 > -1 / mem[_362]:
            revert with 0, 17
        if not mem[_362]:
            revert with 0, 18
        if mem[_362] * 0 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / mem[_362] != 0 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        _631 = mem[64]
        mem[64] = mem[64] + 64
        mem[_631] = 26
        mem[_631 + 32] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        _796 = mem[64]
        mem[64] = mem[64] + 512
        mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(arg1)
        staticcall arg1.0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _850 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _891 = mem[_850]
        require mem[_850] <= test266151307()
        require _850 + mem[_850] + 31 < _850 + return_data.size
        _943 = mem[_850 + mem[_850]]
        if mem[_850 + mem[_850]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_850 + mem[_850]])) + 1 < 0 or _850 + ceil32(return_data.size) + ceil32(ceil32(mem[_850 + mem[_850]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _850 + ceil32(return_data.size) + ceil32(ceil32(mem[_850 + mem[_850]])) + 1
        mem[_850 + ceil32(return_data.size)] = _943
        require _891 + _943 + 32 <= return_data.size
        mem[_850 + ceil32(return_data.size) + 32 len ceil32(_943)] = mem[_850 + _891 + 32 len ceil32(_943)]
        if ceil32(_943) <= _943:
            mem[_796] = _850 + ceil32(return_data.size)
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3526 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 32] = mem[_3526]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3718 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 64] = mem[_3718]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3910 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 96] = mem[_3910]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4102 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 128] = mem[_4102]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4294 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 160] = mem[_4294]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4486 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 192] = mem[_4486]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4678 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 224] = mem[_4678]
            mem[_796 + 256] = _389
            mem[_796 + 288] = _389 * 0 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4870 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 320] = mem[_4870]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5062 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5062] == mem[_5062 + 12 len 20]
            mem[_796 + 352] = mem[_5062 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5254 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5254] == mem[_5254 + 12 len 20]
            mem[_796 + 384] = mem[_5254 + 12 len 20]
            mem[_796 + 416] = uint8(_88)
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5446 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5446] == bool(mem[_5446])
            mem[_796 + 448] = bool(mem[_5446])
        else:
            mem[_943 + _850 + ceil32(return_data.size) + 32] = 0
            mem[_796] = _850 + ceil32(return_data.size)
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3527 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 32] = mem[_3527]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3719 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 64] = mem[_3719]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3911 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 96] = mem[_3911]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4103 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 128] = mem[_4103]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4295 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 160] = mem[_4295]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4487 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 192] = mem[_4487]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4679 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 224] = mem[_4679]
            mem[_796 + 256] = _389
            mem[_796 + 288] = _389 * 0 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4871 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_796 + 320] = mem[_4871]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5063 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5063] == mem[_5063 + 12 len 20]
            mem[_796 + 352] = mem[_5063 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5255 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5255] == mem[_5255 + 12 len 20]
            mem[_796 + 384] = mem[_5255 + 12 len 20]
            mem[_796 + 416] = uint8(_88)
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5447 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5447] == bool(mem[_5447])
            mem[_796 + 448] = bool(mem[_5447])
        mem[0] = arg1
        mem[32] = sha3(msg.sender, 2)
        mem[_796 + 480] = bool(stor2[msg.sender][address(arg1)])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        mem[mem[64] + 544] = _943
        mem[mem[64] + 576 len ceil32(_943)] = mem[_850 + ceil32(return_data.size) + 32 len ceil32(_943)]
        if ceil32(_943) > _943:
            mem[_943 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[_796 + 32]
        mem[mem[64] + 96] = mem[_796 + 64]
        mem[mem[64] + 128] = mem[_796 + 96]
        mem[mem[64] + 160] = mem[_796 + 128]
        mem[mem[64] + 192] = mem[_796 + 160]
        mem[mem[64] + 224] = mem[_796 + 192]
        mem[mem[64] + 256] = mem[_796 + 224]
        mem[mem[64] + 288] = _389
        mem[mem[64] + 320] = _389 * 0 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[_796 + 320]
        mem[mem[64] + 384] = mem[_796 + 364 len 20]
        mem[mem[64] + 416] = mem[_796 + 396 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[_796 + 448])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               _389,
               _389 * 0 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(arg1)]),
               _943,
               mem[mem[64] + 576 len ceil32(_943)]
    if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
        revert with 0, 17
    if not ext_call.return_data[0]:
        revert with 0, 18
    if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
        revert with 0, 'SafeMath: multiplication overflow'
    _151 = mem[64]
    mem[64] = mem[64] + 64
    mem[_151] = 26
    mem[_151 + 32] = 'SafeMath: division by zero'
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
        _254 = mem[64]
        mem[64] = mem[64] + 64
        mem[_254] = 26
        mem[_254 + 32] = 'SafeMath: division by zero'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(arg1)
        staticcall arg1.getCurrentBalance() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _361 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _388 = mem[_361]
        if not mem[_361]:
            _493 = mem[64]
            mem[64] = mem[64] + 64
            mem[_493] = 26
            mem[_493 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _643 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(arg1)
            staticcall arg1.0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _699 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _746 = mem[_699]
            require mem[_699] <= test266151307()
            require _699 + mem[_699] + 31 < _699 + return_data.size
            _795 = mem[_699 + mem[_699]]
            if mem[_699 + mem[_699]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_699 + mem[_699]])) + 1 < 0 or _699 + ceil32(return_data.size) + ceil32(ceil32(mem[_699 + mem[_699]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _699 + ceil32(return_data.size) + ceil32(ceil32(mem[_699 + mem[_699]])) + 1
            mem[_699 + ceil32(return_data.size)] = _795
            require _746 + _795 + 32 <= return_data.size
            mem[_699 + ceil32(return_data.size) + 32 len ceil32(_795)] = mem[_699 + _746 + 32 len ceil32(_795)]
            if ceil32(_795) <= _795:
                mem[_643] = _699 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3524 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 32] = mem[_3524]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3716 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 64] = mem[_3716]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3908 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 96] = mem[_3908]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4100 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 128] = mem[_4100]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4292 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 160] = mem[_4292]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4484 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 192] = mem[_4484]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4676 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 224] = mem[_4676]
                mem[_643 + 256] = _388
                mem[_643 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4868 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 320] = mem[_4868]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5060 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5060] == mem[_5060 + 12 len 20]
                mem[_643 + 352] = mem[_5060 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5252 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5252] == mem[_5252 + 12 len 20]
                mem[_643 + 384] = mem[_5252 + 12 len 20]
                mem[_643 + 416] = uint8(_88)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5444 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5444] == bool(mem[_5444])
                mem[_643 + 448] = bool(mem[_5444])
            else:
                mem[_795 + _699 + ceil32(return_data.size) + 32] = 0
                mem[_643] = _699 + ceil32(return_data.size)
                require ext_code.size(arg1)
                staticcall arg1.0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3525 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 32] = mem[_3525]
                require ext_code.size(arg1)
                staticcall arg1.0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3717 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 64] = mem[_3717]
                require ext_code.size(arg1)
                staticcall arg1.0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3909 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 96] = mem[_3909]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4101 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 128] = mem[_4101]
                require ext_code.size(arg1)
                staticcall arg1.getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4293 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 160] = mem[_4293]
                require ext_code.size(arg1)
                staticcall arg1.getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4485 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 192] = mem[_4485]
                require ext_code.size(arg1)
                staticcall arg1.0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4677 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 224] = mem[_4677]
                mem[_643 + 256] = _388
                mem[_643 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(arg1)
                staticcall arg1.0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4869 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_643 + 320] = mem[_4869]
                require ext_code.size(arg1)
                staticcall arg1.getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5061 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5061] == mem[_5061 + 12 len 20]
                mem[_643 + 352] = mem[_5061 + 12 len 20]
                require ext_code.size(arg1)
                staticcall arg1.0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5253 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5253] == mem[_5253 + 12 len 20]
                mem[_643 + 384] = mem[_5253 + 12 len 20]
                mem[_643 + 416] = uint8(_88)
                require ext_code.size(arg1)
                staticcall arg1.getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5445 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_5445] == bool(mem[_5445])
                mem[_643 + 448] = bool(mem[_5445])
            mem[0] = arg1
            mem[32] = sha3(msg.sender, 2)
            mem[_643 + 480] = bool(stor2[msg.sender][address(arg1)])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _795
            mem[mem[64] + 576 len ceil32(_795)] = mem[_699 + ceil32(return_data.size) + 32 len ceil32(_795)]
            if ceil32(_795) > _795:
                mem[_795 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_643 + 32]
            mem[mem[64] + 96] = mem[_643 + 64]
            mem[mem[64] + 128] = mem[_643 + 96]
            mem[mem[64] + 160] = mem[_643 + 128]
            mem[mem[64] + 192] = mem[_643 + 160]
            mem[mem[64] + 224] = mem[_643 + 192]
            mem[mem[64] + 256] = mem[_643 + 224]
            mem[mem[64] + 288] = _388
            mem[mem[64] + 320] = 0 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_643 + 320]
            mem[mem[64] + 384] = mem[_643 + 364 len 20]
            mem[mem[64] + 416] = mem[_643 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_643 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _388,
                   0 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(arg1)]),
                   _795,
                   mem[mem[64] + 576 len ceil32(_795)]
        if mem[_361] and 0 / sub_5d98fc27 > -1 / mem[_361]:
            revert with 0, 17
        if not mem[_361]:
            revert with 0, 18
        if mem[_361] * 0 / sub_5d98fc27 / mem[_361] != 0 / sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        _630 = mem[64]
        mem[64] = mem[64] + 64
        mem[_630] = 26
        mem[_630 + 32] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        _791 = mem[64]
        mem[64] = mem[64] + 512
        mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(arg1)
        staticcall arg1.0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _849 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _888 = mem[_849]
        require mem[_849] <= test266151307()
        require _849 + mem[_849] + 31 < _849 + return_data.size
        _942 = mem[_849 + mem[_849]]
        if mem[_849 + mem[_849]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_849 + mem[_849]])) + 1 < 0 or _849 + ceil32(return_data.size) + ceil32(ceil32(mem[_849 + mem[_849]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _849 + ceil32(return_data.size) + ceil32(ceil32(mem[_849 + mem[_849]])) + 1
        mem[_849 + ceil32(return_data.size)] = _942
        require _888 + _942 + 32 <= return_data.size
        mem[_849 + ceil32(return_data.size) + 32 len ceil32(_942)] = mem[_849 + _888 + 32 len ceil32(_942)]
        if ceil32(_942) <= _942:
            mem[_791] = _849 + ceil32(return_data.size)
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3522 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 32] = mem[_3522]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3714 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 64] = mem[_3714]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3906 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 96] = mem[_3906]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4098 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 128] = mem[_4098]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4290 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 160] = mem[_4290]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4482 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 192] = mem[_4482]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4674 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 224] = mem[_4674]
            mem[_791 + 256] = _388
            mem[_791 + 288] = _388 * 0 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4866 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 320] = mem[_4866]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5058 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5058] == mem[_5058 + 12 len 20]
            mem[_791 + 352] = mem[_5058 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5250 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5250] == mem[_5250 + 12 len 20]
            mem[_791 + 384] = mem[_5250 + 12 len 20]
            mem[_791 + 416] = uint8(_88)
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5442 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5442] == bool(mem[_5442])
            mem[_791 + 448] = bool(mem[_5442])
        else:
            mem[_942 + _849 + ceil32(return_data.size) + 32] = 0
            mem[_791] = _849 + ceil32(return_data.size)
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3523 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 32] = mem[_3523]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3715 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 64] = mem[_3715]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3907 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 96] = mem[_3907]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4099 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 128] = mem[_4099]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4291 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 160] = mem[_4291]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4483 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 192] = mem[_4483]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4675 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 224] = mem[_4675]
            mem[_791 + 256] = _388
            mem[_791 + 288] = _388 * 0 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4867 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_791 + 320] = mem[_4867]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5059 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5059] == mem[_5059 + 12 len 20]
            mem[_791 + 352] = mem[_5059 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5251 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5251] == mem[_5251 + 12 len 20]
            mem[_791 + 384] = mem[_5251 + 12 len 20]
            mem[_791 + 416] = uint8(_88)
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5443 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5443] == bool(mem[_5443])
            mem[_791 + 448] = bool(mem[_5443])
        mem[0] = arg1
        mem[32] = sha3(msg.sender, 2)
        mem[_791 + 480] = bool(stor2[msg.sender][address(arg1)])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        mem[mem[64] + 544] = _942
        mem[mem[64] + 576 len ceil32(_942)] = mem[_849 + ceil32(return_data.size) + 32 len ceil32(_942)]
        if ceil32(_942) > _942:
            mem[_942 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[_791 + 32]
        mem[mem[64] + 96] = mem[_791 + 64]
        mem[mem[64] + 128] = mem[_791 + 96]
        mem[mem[64] + 160] = mem[_791 + 128]
        mem[mem[64] + 192] = mem[_791 + 160]
        mem[mem[64] + 224] = mem[_791 + 192]
        mem[mem[64] + 256] = mem[_791 + 224]
        mem[mem[64] + 288] = _388
        mem[mem[64] + 320] = _388 * 0 / sub_5d98fc27 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[_791 + 320]
        mem[mem[64] + 384] = mem[_791 + 364 len 20]
        mem[mem[64] + 416] = mem[_791 + 396 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[_791 + 448])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               _388,
               _388 * 0 / sub_5d98fc27 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(arg1)]),
               _942,
               mem[mem[64] + 576 len ceil32(_942)]
    if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and _34 * sub_5d98fc27 / _29 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
        revert with 0, 17
    if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
        revert with 0, 18
    if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != _34 * sub_5d98fc27 / _29:
        revert with 0, 'SafeMath: multiplication overflow'
    _315 = mem[64]
    mem[64] = mem[64] + 64
    mem[_315] = 26
    mem[_315 + 32] = 'SafeMath: division by zero'
    if not sub_5d98fc27:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(arg1)
    staticcall arg1.getCurrentBalance() with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _447 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _492 = mem[_447]
    if not mem[_447]:
        _629 = mem[64]
        mem[64] = mem[64] + 64
        mem[_629] = 26
        mem[_629 + 32] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        _787 = mem[64]
        mem[64] = mem[64] + 512
        mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(arg1)
        staticcall arg1.0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _848 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _885 = mem[_848]
        require mem[_848] <= test266151307()
        require _848 + mem[_848] + 31 < _848 + return_data.size
        _941 = mem[_848 + mem[_848]]
        if mem[_848 + mem[_848]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_848 + mem[_848]])) + 1 < 0 or _848 + ceil32(return_data.size) + ceil32(ceil32(mem[_848 + mem[_848]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _848 + ceil32(return_data.size) + ceil32(ceil32(mem[_848 + mem[_848]])) + 1
        mem[_848 + ceil32(return_data.size)] = _941
        require _885 + _941 + 32 <= return_data.size
        mem[_848 + ceil32(return_data.size) + 32 len ceil32(_941)] = mem[_848 + _885 + 32 len ceil32(_941)]
        if ceil32(_941) <= _941:
            mem[_787] = _848 + ceil32(return_data.size)
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3520 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 32] = mem[_3520]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3712 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 64] = mem[_3712]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3904 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 96] = mem[_3904]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4096 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 128] = mem[_4096]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4288 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 160] = mem[_4288]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4480 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 192] = mem[_4480]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4672 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 224] = mem[_4672]
            mem[_787 + 256] = _492
            mem[_787 + 288] = 0 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4864 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 320] = mem[_4864]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5056 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5056] == mem[_5056 + 12 len 20]
            mem[_787 + 352] = mem[_5056 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5248 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5248] == mem[_5248 + 12 len 20]
            mem[_787 + 384] = mem[_5248 + 12 len 20]
            mem[_787 + 416] = uint8(_88)
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5440 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5440] == bool(mem[_5440])
            mem[_787 + 448] = bool(mem[_5440])
        else:
            mem[_941 + _848 + ceil32(return_data.size) + 32] = 0
            mem[_787] = _848 + ceil32(return_data.size)
            require ext_code.size(arg1)
            staticcall arg1.0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3521 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 32] = mem[_3521]
            require ext_code.size(arg1)
            staticcall arg1.0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3713 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 64] = mem[_3713]
            require ext_code.size(arg1)
            staticcall arg1.0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3905 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 96] = mem[_3905]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4097 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 128] = mem[_4097]
            require ext_code.size(arg1)
            staticcall arg1.getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4289 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 160] = mem[_4289]
            require ext_code.size(arg1)
            staticcall arg1.getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4481 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 192] = mem[_4481]
            require ext_code.size(arg1)
            staticcall arg1.0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4673 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 224] = mem[_4673]
            mem[_787 + 256] = _492
            mem[_787 + 288] = 0 / sub_5a8c5d60
            require ext_code.size(arg1)
            staticcall arg1.0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4865 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_787 + 320] = mem[_4865]
            require ext_code.size(arg1)
            staticcall arg1.getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5057 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5057] == mem[_5057 + 12 len 20]
            mem[_787 + 352] = mem[_5057 + 12 len 20]
            require ext_code.size(arg1)
            staticcall arg1.0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5249 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5249] == mem[_5249 + 12 len 20]
            mem[_787 + 384] = mem[_5249 + 12 len 20]
            mem[_787 + 416] = uint8(_88)
            require ext_code.size(arg1)
            staticcall arg1.getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5441 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_5441] == bool(mem[_5441])
            mem[_787 + 448] = bool(mem[_5441])
        mem[0] = arg1
        mem[32] = sha3(msg.sender, 2)
        mem[_787 + 480] = bool(stor2[msg.sender][address(arg1)])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        mem[mem[64] + 544] = _941
        mem[mem[64] + 576 len ceil32(_941)] = mem[_848 + ceil32(return_data.size) + 32 len ceil32(_941)]
        if ceil32(_941) > _941:
            mem[_941 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[_787 + 32]
        mem[mem[64] + 96] = mem[_787 + 64]
        mem[mem[64] + 128] = mem[_787 + 96]
        mem[mem[64] + 160] = mem[_787 + 128]
        mem[mem[64] + 192] = mem[_787 + 160]
        mem[mem[64] + 224] = mem[_787 + 192]
        mem[mem[64] + 256] = mem[_787 + 224]
        mem[mem[64] + 288] = _492
        mem[mem[64] + 320] = 0 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[_787 + 320]
        mem[mem[64] + 384] = mem[_787 + 364 len 20]
        mem[mem[64] + 416] = mem[_787 + 396 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[_787 + 448])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               _492,
               0 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(arg1)]),
               _941,
               mem[mem[64] + 576 len ceil32(_941)]
    if mem[_447] and ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 > -1 / mem[_447]:
        revert with 0, 17
    if not mem[_447]:
        revert with 0, 18
    if mem[_447] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / mem[_447] != ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27:
        revert with 0, 'SafeMath: multiplication overflow'
    _774 = mem[64]
    mem[64] = mem[64] + 64
    mem[_774] = 26
    mem[_774 + 32] = 'SafeMath: division by zero'
    if not sub_5a8c5d60:
        revert with 0, 'SafeMath: division by zero', 0
    _937 = mem[64]
    mem[64] = mem[64] + 512
    mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
    require ext_code.size(arg1)
    staticcall arg1.0xfd306c4e with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _993 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _1032 = mem[_993]
    require mem[_993] <= test266151307()
    require _993 + mem[_993] + 31 < _993 + return_data.size
    _1107 = mem[_993 + mem[_993]]
    if mem[_993 + mem[_993]] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[_993 + mem[_993]])) + 1 < 0 or _993 + ceil32(return_data.size) + ceil32(ceil32(mem[_993 + mem[_993]])) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _993 + ceil32(return_data.size) + ceil32(ceil32(mem[_993 + mem[_993]])) + 1
    mem[_993 + ceil32(return_data.size)] = _1107
    require _1032 + _1107 + 32 <= return_data.size
    mem[_993 + ceil32(return_data.size) + 32 len ceil32(_1107)] = mem[_993 + _1032 + 32 len ceil32(_1107)]
    if ceil32(_1107) <= _1107:
        mem[_937] = _993 + ceil32(return_data.size)
        require ext_code.size(arg1)
        staticcall arg1.0x194ba6a with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3518 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 32] = mem[_3518]
        require ext_code.size(arg1)
        staticcall arg1.0x27932f9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3710 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 64] = mem[_3710]
        require ext_code.size(arg1)
        staticcall arg1.0xaa8d8fdd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3902 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 96] = mem[_3902]
        require ext_code.size(arg1)
        staticcall arg1.getDepositTokens() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4094 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 128] = mem[_4094]
        require ext_code.size(arg1)
        staticcall arg1.getLockTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4286 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 160] = mem[_4286]
        require ext_code.size(arg1)
        staticcall arg1.getDepositTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4478 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 192] = mem[_4478]
        require ext_code.size(arg1)
        staticcall arg1.0x4b6a8ec8 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4670 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 224] = mem[_4670]
        mem[_937 + 256] = _492
        mem[_937 + 288] = _492 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / sub_5a8c5d60
        require ext_code.size(arg1)
        staticcall arg1.0x56fe8cf7 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4862 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 320] = mem[_4862]
        require ext_code.size(arg1)
        staticcall arg1.getDepositorAddress() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5054 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_5054] == mem[_5054 + 12 len 20]
        mem[_937 + 352] = mem[_5054 + 12 len 20]
        require ext_code.size(arg1)
        staticcall arg1.0x910afbe9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5246 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_5246] == mem[_5246 + 12 len 20]
        mem[_937 + 384] = mem[_5246 + 12 len 20]
        mem[_937 + 416] = uint8(_88)
        require ext_code.size(arg1)
        staticcall arg1.getStatus() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5438 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_5438] == bool(mem[_5438])
        mem[_937 + 448] = bool(mem[_5438])
    else:
        mem[_1107 + _993 + ceil32(return_data.size) + 32] = 0
        mem[_937] = _993 + ceil32(return_data.size)
        require ext_code.size(arg1)
        staticcall arg1.0x194ba6a with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3519 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 32] = mem[_3519]
        require ext_code.size(arg1)
        staticcall arg1.0x27932f9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3711 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 64] = mem[_3711]
        require ext_code.size(arg1)
        staticcall arg1.0xaa8d8fdd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3903 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 96] = mem[_3903]
        require ext_code.size(arg1)
        staticcall arg1.getDepositTokens() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4095 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 128] = mem[_4095]
        require ext_code.size(arg1)
        staticcall arg1.getLockTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4287 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 160] = mem[_4287]
        require ext_code.size(arg1)
        staticcall arg1.getDepositTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4479 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 192] = mem[_4479]
        require ext_code.size(arg1)
        staticcall arg1.0x4b6a8ec8 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4671 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 224] = mem[_4671]
        mem[_937 + 256] = _492
        mem[_937 + 288] = _492 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / sub_5a8c5d60
        require ext_code.size(arg1)
        staticcall arg1.0x56fe8cf7 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4863 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_937 + 320] = mem[_4863]
        require ext_code.size(arg1)
        staticcall arg1.getDepositorAddress() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5055 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_5055] == mem[_5055 + 12 len 20]
        mem[_937 + 352] = mem[_5055 + 12 len 20]
        require ext_code.size(arg1)
        staticcall arg1.0x910afbe9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5247 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_5247] == mem[_5247 + 12 len 20]
        mem[_937 + 384] = mem[_5247 + 12 len 20]
        mem[_937 + 416] = uint8(_88)
        require ext_code.size(arg1)
        staticcall arg1.getStatus() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5439 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_5439] == bool(mem[_5439])
        mem[_937 + 448] = bool(mem[_5439])
    mem[0] = arg1
    mem[32] = sha3(msg.sender, 2)
    mem[_937 + 480] = bool(stor2[msg.sender][address(arg1)])
    mem[mem[64]] = 32
    mem[mem[64] + 32] = 512
    mem[mem[64] + 544] = _1107
    mem[mem[64] + 576 len ceil32(_1107)] = mem[_993 + ceil32(return_data.size) + 32 len ceil32(_1107)]
    if ceil32(_1107) > _1107:
        mem[_1107 + mem[64] + 576] = 0
    mem[mem[64] + 64] = mem[_937 + 32]
    mem[mem[64] + 96] = mem[_937 + 64]
    mem[mem[64] + 128] = mem[_937 + 96]
    mem[mem[64] + 160] = mem[_937 + 128]
    mem[mem[64] + 192] = mem[_937 + 160]
    mem[mem[64] + 224] = mem[_937 + 192]
    mem[mem[64] + 256] = mem[_937 + 224]
    mem[mem[64] + 288] = _492
    mem[mem[64] + 320] = _492 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / sub_5a8c5d60
    mem[mem[64] + 352] = mem[_937 + 320]
    mem[mem[64] + 384] = mem[_937 + 364 len 20]
    mem[mem[64] + 416] = mem[_937 + 396 len 20]
    mem[mem[64] + 448] = 0
    mem[mem[64] + 480] = bool(mem[_937 + 448])
    return 32, 512, 
           mem[mem[64] + 64 len 224],
           _492,
           _492 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _34 * sub_5d98fc27 / _29 / sub_5d98fc27 / sub_5a8c5d60,
           mem[mem[64] + 352 len 96],
           0,
           mem[mem[64] + 480],
           bool(stor2[msg.sender][address(arg1)]),
           _1107,
           mem[mem[64] + 576 len ceil32(_1107)]
}

function _fallback() payable {
    mem[64] = 128
    if calldata.size < 4:
    if unknown_0x92b8b617(?????) > uint32(call.func_hash) >> 224:
        if unknown_0x5d98fc27(?????) <= uint32(call.func_hash) >> 224:
            if unknown_0x7c68e584(?????) <= uint32(call.func_hash) >> 224:
                if unknown_0x7c68e584(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return sub_7c68e584Address
                if uint32(call.func_hash) >> 224 != unknown_0x7e7cf198(?????):
                    if uint32(call.func_hash) >> 224 != unknown_0x85ac393f(?????):
                        if unknown_0x8893d55a(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return sub_8893d55aAddress
                        if unknown_0x8da5cb5b(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            return owner
                        if uint32(call.func_hash) >> 224 != unknown_0x92535c78(?????):
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        return bool(stor4[cd[4]])
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    mem[64] = (32 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + 160
                    mem[128] = uint256(sub_6c520f8b[address(cd[4])].field_0)
                    if not uint256(sub_6c520f8b[address(cd[4])].field_0):
                        mem[(32 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + 160] = 32
                        mem[(32 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + 192] = uint256(sub_6c520f8b[address(cd[4])].field_0)
                        idx = 0
                        s = (32 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + 224
                        t = 160
                        while idx < uint256(sub_6c520f8b[address(cd[4])].field_0):
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        return memory
                          from (32 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + 160
                           len (96 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + 64
                    mem[160] = address(sub_6c520f8b[address(cd[4])].field_0)
                    idx = 160
                    s = 0
                    while (32 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + 128 > idx:
                        mem[idx + 32] = address(sub_6c520f8b[address(cd[4])][s].field_256)
                        idx = idx + 32
                        s = s + 1
                        continue 
                    mem[(32 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + 160] = 32
                    mem[(32 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + 192] = uint256(sub_6c520f8b[address(cd[4])].field_0)
                    idx = 0
                    s = mem[64] + 64
                    t = 160
                    while idx < uint256(sub_6c520f8b[address(cd[4])].field_0):
                        mem[s] = mem[t + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    return memory
                      from mem[64]
                       len (64 * uint256(sub_6c520f8b[address(cd[4])].field_0)) + -mem[64] + 224
                require not msg.value
                require calldata.size - 4 >= 64
                require cd[4] <= test266151307()
                require cd[4] + 35 < calldata.size
                require ('cd', 4).length <= test266151307()
                require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
                require cd[36] <= test266151307()
                require cd[36] + 35 < calldata.size
                require ('cd', 36).length <= test266151307()
                require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
                if owner != msg.sender:
                    revert with 0, 'Ownable: caller is not the owner'
                if ('cd', 36).length == ('cd', 4).length:
                    revert with 0, 'ownerAddresses and contractAddresses should be same length'
                idx = 0
                while idx < ('cd', 36).length:
                    require cd[((32 * idx) + cd[36] + 36)] == address(cd[((32 * idx) + cd[36] + 36)])
                    if idx >= ('cd', 4).length:
                        revert with 0, 50
                    require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
                    if not address(cd[((32 * idx) + cd[4] + 36)]):
                        revert with 0, 'contractAddress should not be the zero address'
                    if not address(cd[((32 * idx) + cd[36] + 36)]):
                        revert with 0, 'contractAddress should not be the zero address'
                    if this.address == address(cd[((32 * idx) + cd[36] + 36)]):
                        revert with 0, 'contractAddress not be this contract'
                    mem[mem[64] + 4] = address(cd[((32 * idx) + cd[36] + 36)])
                    require ext_code.size(stor10)
                    staticcall stor10.0x7bb5ce37 with:
                            gas gas_remaining wei
                           args address(cd[((32 * idx) + cd[36] + 36)])
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8190 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8244 = mem[_8190]
                    require mem[_8190] == mem[_8190 + 12 len 20]
                    mem[0] = mem[_8190 + 12 len 20]
                    if not stor2[mem[0]][address(cd[((32 * idx) + cd[36] + 36)])]:
                        if address(_8244) != address(cd[((32 * idx) + cd[4] + 36)]):
                            revert with 0, 'ownerAddress is not the depositor of this stake'
                        stor2[address(_8244)][address(cd[((32 * idx) + cd[36] + 36)])] = 1
                        uint256(sub_6c520f8b[address(_8244)].field_0)++
                        address(sub_6c520f8b[address(_8244)][uint256(sub_6c520f8b[address(_8244)].field_0)].field_0) = address(cd[((32 * idx) + cd[36] + 36)])
                    mem[0] = address(cd[((32 * idx) + cd[36] + 36)])
                    mem[32] = 4
                    if not stor4[address(cd[((32 * idx) + cd[36] + 36)])]:
                        sub_cc4285e9.length++
                        sub_cc4285e9[sub_cc4285e9.length] = address(cd[((32 * idx) + cd[36] + 36)])
                        mem[0] = address(cd[((32 * idx) + cd[36] + 36)])
                        mem[32] = 4
                        stor4[address(cd[((32 * idx) + cd[36] + 36)])] = 1
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if unknown_0x5d98fc27(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return sub_5d98fc27
                if uint32(call.func_hash) >> 224 != unknown_0x696cef3a(?????):
                    if unknown_0x6c520f8b(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        require cd[36] < uint256(sub_6c520f8b[cd[4]].field_0)
                        return address(sub_6c520f8b[cd[4]][cd[36]].field_0)
                    if unknown_0x70a08231(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        mem[0] = address(cd[4])
                        mem[32] = 1
                        idx = 0
                        s = 0
                        while idx < uint256(sub_6c520f8b[address(cd[4])].field_0):
                            mem[0] = sha3(address(cd[4]), 1)
                            require ext_code.size(address(sub_6c520f8b[address(cd[4])][idx].field_0))
                            staticcall address(sub_6c520f8b[address(cd[4])][idx].field_0).getCurrentBalance() with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6670 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if s > !mem[_6670]:
                                revert with 0, 17
                            if s + mem[_6670] < s:
                                revert with 0, 'SafeMath: addition overflow'
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + mem[_6670]
                            continue 
                        return (s * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0) * uint256(sub_6c520f8b[address(cd[4])].field_0))
                    if unknown_0x7872e268(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 32
                        require cd[4] == address(cd[4])
                        if not msg.sender:
                            revert with 0, 'contractAddress should not be the zero address'
                        if not address(cd[4]):
                            revert with 0, 'contractAddress should not be the zero address'
                        if this.address == address(cd[4]):
                            revert with 0, 'contractAddress not be this contract'
                        require ext_code.size(stor10)
                        staticcall stor10.0x7bb5ce37 with:
                                gas gas_remaining wei
                               args address(cd[4])
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if not stor2[ext_call.return_data[12 len 20]][address(cd[4])]:
                            if ext_call.return_data[12 len 20] != msg.sender:
                                revert with 0, 'ownerAddress is not the depositor of this stake'
                            stor2[address(ext_call.return_data[0])][address(cd[4])] = 1
                            uint256(sub_6c520f8b[address(ext_call.return_data[0])].field_0)++
                            address(sub_6c520f8b[address(ext_call.return_data[0])][uint256(sub_6c520f8b[address(ext_call.return_data[0])].field_0)].field_0) = address(cd[4])
                else:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    if not address(cd[4]):
                        revert with 0, '_coinStablePairAddress should not be the zero address'
                    emit 0xfc484159: sub_8893d55aAddress, address(cd[4])
                    sub_8893d55aAddress = address(cd[4])
                    stor17 = address(cd[4])
                    require ext_code.size(stor8)
                    staticcall stor8.uniswapV2Pair() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    pairAddress = ext_call.return_data[12 len 20]
                    stor13 = ext_call.return_data[12 len 20]
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    sub_04bf1d6bAddress = ext_call.return_data[12 len 20]
                    if sub_270bf52eAddress == ext_call.return_data[12 len 20]:
                        require ext_code.size(stor13)
                        staticcall stor13.token1() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        sub_04bf1d6bAddress = ext_call.return_data[12 len 20]
                    stor19 = sub_04bf1d6bAddress
                    require ext_code.size(stor17)
                    staticcall stor17.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    sub_c4c6c237Address = ext_call.return_data[12 len 20]
                    if sub_04bf1d6bAddress == ext_call.return_data[12 len 20]:
                        require ext_code.size(stor17)
                        staticcall stor17.token1() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        sub_c4c6c237Address = ext_call.return_data[12 len 20]
                    address(stor21.field_0) = sub_c4c6c237Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    decimals = ext_call.return_data[31 len 1]
                    if not ext_call.return_data[31 len 1]:
                        sub_5a8c5d60 = 1
                    else:
                        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                            sub_5a8c5d60 = 10^ext_call.return_data[31 len 1]
                        else:
                            s = 10
                            t = 1
                            idx = ext_call.return_data[31 len 1]
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            sub_5a8c5d60 = s * t
                    require ext_code.size(stor19)
                    staticcall stor19.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                    uint8(stor21.field_168) = ext_call.return_data[31 len 1]
                    if not ext_call.return_data[31 len 1]:
                        sub_5d98fc27 = 1
                    else:
                        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                            sub_5d98fc27 = 10^ext_call.return_data[31 len 1]
                        else:
                            s = 10
                            t = 1
                            idx = ext_call.return_data[31 len 1]
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            sub_5d98fc27 = s * t
        else:
            if unknown_0x18160ddd(?????) <= uint32(call.func_hash) >> 224:
                if unknown_0x18160ddd(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require ext_code.size(stor8)
                    staticcall stor8.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return ext_call.return_data[0]
                if unknown_0x270bf52e(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return sub_270bf52eAddress
                if unknown_0x2b1087db(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    if not address(cd[4]):
                        revert with 0, '_usdOracleAddress should not be the zero address'
                    emit 0xadb18193: sub_e976faeeAddress, address(cd[4])
                    sub_e976faeeAddress = address(cd[4])
                    stor15 = address(cd[4])
                else:
                    if unknown_0x313ce567(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        return decimals
                    if uint32(call.func_hash) >> 224 != unknown_0x3477320c(?????):
                        if uint32(call.func_hash) >> 224 != unknown_0x5a8c5d60(?????):
                        require not msg.value
                        return sub_5a8c5d60
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    if owner != msg.sender:
                        revert with 0, 'Ownable: caller is not the owner'
                    if not address(cd[4]):
                        revert with 0, '_everBridgeVaultAddress should not be the zero address'
                    emit 0xae987d6c: sub_92b8b617Address, address(cd[4])
                    sub_92b8b617Address = address(cd[4])
            else:
                if unknown_0x04bf1d6b(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return sub_04bf1d6bAddress
                if name() == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return '', 0
                if unknown_0x15d5679e(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    require calldata.size - 4 >= 32
                    require cd[4] == address(cd[4])
                    if not stor2[msg.sender][address(cd[4])]:
                        revert with 0, 'contractAddress is not registered staking contract'
                    if stor2[address(msg.sender)][address(cd[4])]:
                        stor2[address(msg.sender)][address(cd[4])] = 0
                        idx = 0
                        while idx < uint256(sub_6c520f8b[address(msg.sender)].field_0):
                            mem[0] = sha3(address(msg.sender), 1)
                            if address(sub_6c520f8b[address(msg.sender)][idx].field_0) != address(cd[4]):
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if uint256(sub_6c520f8b[address(msg.sender)].field_0) < 1:
                                revert with 0, 17
                            if uint256(sub_6c520f8b[address(msg.sender)].field_0) - 1 >= uint256(sub_6c520f8b[address(msg.sender)].field_0):
                                revert with 0, 50
                            if idx >= uint256(sub_6c520f8b[address(msg.sender)].field_0):
                                revert with 0, 50
                            address(sub_6c520f8b[address(msg.sender)][idx].field_0) = address(sub_6c520f8b[address(msg.sender)][uint256(sub_6c520f8b[address(msg.sender)].field_0)].field_0)
                            if not uint256(sub_6c520f8b[address(msg.sender)].field_0):
                                revert with 0, 49
                            address(sub_6c520f8b[address(msg.sender)][uint256(sub_6c520f8b[address(msg.sender)].field_0)].field_0) = 0
                            uint256(sub_6c520f8b[address(msg.sender)].field_0)--
                else:
                    if unknown_0x171c1fda(?????) == uint32(call.func_hash) >> 224:
                        require not msg.value
                        require calldata.size - 4 >= 64
                        require cd[4] == address(cd[4])
                        require cd[36] == address(cd[36])
                        if owner != msg.sender:
                            revert with 0, 'Ownable: caller is not the owner'
                        if not address(cd[4]):
                            revert with 0, 'Token Address can not be a zero address'
                        if not address(cd[36]):
                            revert with 0, 'To Address can not be a zero address'
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'Balance is zero'
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(cd[4]))
                        call address(cd[4]).0xa9059cbb with:
                             gas gas_remaining wei
                            args address(cd[36]), ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    else:
                        if unknown_0x179961f4(?????) == uint32(call.func_hash) >> 224:
                            require not msg.value
                            require calldata.size - 4 >= 32
                            require cd[4] == address(cd[4])
                            if owner != msg.sender:
                                revert with 0, 'Ownable: caller is not the owner'
                            if not address(cd[4]):
                                revert with 0, '_everRiseAddress should not be the zero address'
                            emit 0x1de85728: sub_270bf52eAddress, address(cd[4])
                            sub_270bf52eAddress = address(cd[4])
                            stor8 = address(cd[4])
                            require ext_code.size(stor8)
                            staticcall stor8.uniswapV2Pair() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            pairAddress = ext_call.return_data[12 len 20]
                            stor13 = ext_call.return_data[12 len 20]
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).token0() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            sub_04bf1d6bAddress = ext_call.return_data[12 len 20]
                            if sub_270bf52eAddress == ext_call.return_data[12 len 20]:
                                require ext_code.size(stor13)
                                staticcall stor13.token1() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                sub_04bf1d6bAddress = ext_call.return_data[12 len 20]
                            stor19 = sub_04bf1d6bAddress
                            require ext_code.size(stor17)
                            staticcall stor17.token0() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            sub_c4c6c237Address = ext_call.return_data[12 len 20]
                            if sub_04bf1d6bAddress == ext_call.return_data[12 len 20]:
                                require ext_code.size(stor17)
                                staticcall stor17.token1() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                sub_c4c6c237Address = ext_call.return_data[12 len 20]
                            address(stor21.field_0) = sub_c4c6c237Address
                            require ext_code.size(stor8)
                            staticcall stor8.0x313ce567 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                            decimals = ext_call.return_data[31 len 1]
                            if not ext_call.return_data[31 len 1]:
                                sub_5a8c5d60 = 1
                            else:
                                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                                    sub_5a8c5d60 = 10^ext_call.return_data[31 len 1]
                                else:
                                    s = 10
                                    t = 1
                                    idx = ext_call.return_data[31 len 1]
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    sub_5a8c5d60 = s * t
                            require ext_code.size(stor19)
                            staticcall stor19.0x313ce567 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                            uint8(stor21.field_168) = ext_call.return_data[31 len 1]
                            if not ext_call.return_data[31 len 1]:
                                sub_5d98fc27 = 1
                            else:
                                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                                    sub_5d98fc27 = 10^ext_call.return_data[31 len 1]
                                else:
                                    s = 10
                                    t = 1
                                    idx = ext_call.return_data[31 len 1]
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    sub_5d98fc27 = s * t
    if unknown_0xcb616f2f(?????) > uint32(call.func_hash) >> 224:
        if unknown_0xa9059cbb(?????) > uint32(call.func_hash) >> 224:
            if unknown_0x92b8b617(?????) == uint32(call.func_hash) >> 224:
                require not msg.value
                return sub_92b8b617Address
            if unknown_0x95d89b41(?????) == uint32(call.func_hash) >> 224:
                require not msg.value
                return 'RISESTAKE', 0
            if uint32(call.func_hash) >> 224 != unknown_0xa33529f2(?????):
                if uint32(call.func_hash) >> 224 != unknown_0xa8863048(?????):
                    if uint32(call.func_hash) >> 224 != unknown_0xa8b08982(?????):
                    require not msg.value
                    return pairAddress
                require not msg.value
                require calldata.size - 4 >= 64
                require cd[4] == address(cd[4])
                require cd[36] == address(cd[36])
                return bool(stor2[cd[4]][cd[36]])
            require not msg.value
            require calldata.size - 4 >= 64
            require cd[4] == address(cd[4])
            require cd[36] == address(cd[36])
            if owner != msg.sender:
                revert with 0, 'Ownable: caller is not the owner'
            if stor2[address(cd[4])][address(cd[36])]:
                stor2[address(cd[4])][address(cd[36])] = 0
                idx = 0
                while idx < uint256(sub_6c520f8b[address(cd[4])].field_0):
                    mem[0] = sha3(address(cd[4]), 1)
                    if address(sub_6c520f8b[address(cd[4])][idx].field_0) != address(cd[36]):
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if uint256(sub_6c520f8b[address(cd[4])].field_0) < 1:
                        revert with 0, 17
                    if uint256(sub_6c520f8b[address(cd[4])].field_0) - 1 >= uint256(sub_6c520f8b[address(cd[4])].field_0):
                        revert with 0, 50
                    if idx >= uint256(sub_6c520f8b[address(cd[4])].field_0):
                        revert with 0, 50
                    address(sub_6c520f8b[address(cd[4])][idx].field_0) = address(sub_6c520f8b[address(cd[4])][uint256(sub_6c520f8b[address(cd[4])].field_0)].field_0)
                    if not uint256(sub_6c520f8b[address(cd[4])].field_0):
                        revert with 0, 49
                    address(sub_6c520f8b[address(cd[4])][uint256(sub_6c520f8b[address(cd[4])].field_0)].field_0) = 0
                    uint256(sub_6c520f8b[address(cd[4])].field_0)--
                    if stor4[address(cd[36])]:
                        stor4[address(cd[36])] = 0
                        idx = 0
                        while idx < sub_cc4285e9.length:
                            mem[0] = 3
                            if sub_cc4285e9[idx] != address(cd[36]):
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if sub_cc4285e9.length < 1:
                                revert with 0, 17
                            if sub_cc4285e9.length - 1 >= sub_cc4285e9.length:
                                revert with 0, 50
                            if idx >= sub_cc4285e9.length:
                                revert with 0, 50
                            sub_cc4285e9[idx] = sub_cc4285e9[sub_cc4285e9.length]
                            if not sub_cc4285e9.length:
                                revert with 0, 49
                            sub_cc4285e9[sub_cc4285e9.length] = 0
                            sub_cc4285e9.length--
            if stor4[address(cd[36])]:
                stor4[address(cd[36])] = 0
                idx = 0
                while idx < sub_cc4285e9.length:
                    mem[0] = 3
                    if sub_cc4285e9[idx] != address(cd[36]):
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if sub_cc4285e9.length < 1:
                        revert with 0, 17
                    if sub_cc4285e9.length - 1 >= sub_cc4285e9.length:
                        revert with 0, 50
                    if idx >= sub_cc4285e9.length:
                        revert with 0, 50
                    sub_cc4285e9[idx] = sub_cc4285e9[sub_cc4285e9.length]
                    if not sub_cc4285e9.length:
                        revert with 0, 49
                    sub_cc4285e9[sub_cc4285e9.length] = 0
                    sub_cc4285e9.length--
        if unknown_0xa9059cbb(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require calldata.size - 4 >= 64
            require cd[4] == address(cd[4])
            if not address(cd[4]):
                revert with 0, 'to should not be the zero address'
            if not cd[36]:
                revert with 0, 'value should not be zero'
            revert with 0, 'This is a virtual token and cannot be transferred'
        if unknown_0xa957daf7(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require ext_code.size(stor19)
            staticcall stor19.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_8893d55aAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor21.field_0))
            staticcall address(stor21.field_0).0x70a08231 with:
                    gas gas_remaining wei
                   args sub_8893d55aAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(address(stor21.field_0))
                staticcall address(stor21.field_0).0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                return 0 / ext_call.return_data[0], uint8(ext_call.return_data[0])
            if ext_call.return_data[0] and sub_5d98fc27 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5d98fc27 / ext_call.return_data[0] != sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(address(stor21.field_0))
            staticcall address(stor21.field_0).0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            return ext_call.return_data[0] * sub_5d98fc27 / ext_call.return_data[0], uint8(ext_call.return_data[0])
        if unknown_0xaa13ca76(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            mem[132] = pairAddress
            require ext_code.size(stor8)
            staticcall stor8.0x70a08231 with:
                    gas gas_remaining wei
                   args pairAddress
            mem[128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 132] = pairAddress
            require ext_code.size(stor19)
            staticcall stor19.0x70a08231 with:
                    gas gas_remaining wei
                   args pairAddress
            mem[ceil32(return_data.size) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor15)
            staticcall stor15.latestRoundData() with:
                    gas gas_remaining wei
            mem[(2 * ceil32(return_data.size)) + 128 len 160] = ext_call.return_data[0 len 160]
            if ext_call.success:
                require return_data.size >= 160
                require ext_call.return_data[0] == ext_call.return_data[22 len 10]
                require ext_call.return_data[128] == ext_call.return_data[150 len 10]
                require ext_code.size(stor15)
                staticcall stor15.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    if not 0 / ext_call.return_data[0]:
                        if not sub_5d98fc27:
                            revert with 0, 'SafeMath: division by zero', 0
                        return ext_call.return_data[0], 
                               ext_call.return_data[0],
                               ext_call.return_data[32],
                               ext_call.return_data[0] << 248,
                               0 / ext_call.return_data[0],
                               0 / sub_5d98fc27
                    if 0 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / 0 / ext_call.return_data[0]:
                        revert with 0, 17
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 18
                    if 0 / ext_call.return_data[0] * ext_call.return_data[32] / 0 / ext_call.return_data[0] != ext_call.return_data[32]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not sub_5d98fc27:
                        revert with 0, 'SafeMath: division by zero', 0
                    return ext_call.return_data[0], 
                           ext_call.return_data[0],
                           ext_call.return_data[32],
                           ext_call.return_data[0] << 248,
                           0 / ext_call.return_data[0],
                           0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27
                if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                    if not sub_5d98fc27:
                        revert with 0, 'SafeMath: division by zero', 0
                    return ext_call.return_data[0], 
                           ext_call.return_data[0],
                           ext_call.return_data[32],
                           ext_call.return_data[0] << 248,
                           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                           0 / sub_5d98fc27
                if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != ext_call.return_data[32]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                return ext_call.return_data[0], 
                       ext_call.return_data[0],
                       ext_call.return_data[32],
                       ext_call.return_data[0] << 248,
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27
            if return_data.size <= 3:
                revert with ext_call.return_data[0 len return_data.size]
            mem[0 len 4] = ext_call.return_data[0 len 4]
            if uint32(mem[4 len 28]) >> 224 != Error(string arg1):
                revert with ext_call.return_data[0 len return_data.size]
            if return_data.size < 68:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
            if ext_call.return_data[0] > test266151307() or ext_call.return_data[0] + 36 > return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            if mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 128] > test266151307():
                revert with ext_call.return_data[0 len return_data.size]
            if ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
                revert with ext_call.return_data[0 len return_data.size]
            if floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 128] + 31) + 129 < 128 or (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 128] + 31) + 129
            if not (2 * ceil32(return_data.size)) + ext_call.return_data[0] + 128:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 128] + 31) + 129] = 0x70a0823100000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = sub_8893d55aAddress
            require ext_code.size(stor19)
            staticcall stor19.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_8893d55aAddress
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _411 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _429 = mem[_411]
            mem[mem[64] + 4] = sub_8893d55aAddress
            require ext_code.size(address(stor21.field_0))
            staticcall address(stor21.field_0).0x70a08231 with:
                    gas gas_remaining wei
                   args sub_8893d55aAddress
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _461 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _474 = mem[_461]
            if not mem[_461]:
                _515 = mem[64]
                mem[64] = mem[64] + 64
                mem[_515] = 26
                mem[_515 + 32] = 'SafeMath: division by zero'
                if not _429:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(address(stor21.field_0))
                staticcall address(stor21.field_0).0x313ce567 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _608 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_608] == mem[_608 + 31 len 1]
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    if not 0 / ext_call.return_data[0]:
                        if not sub_5d98fc27:
                            revert with 0, 'SafeMath: division by zero', 0
                        return ext_call.return_data[0], 
                               ext_call.return_data[0],
                               0 / _429,
                               mem[_608] << 248,
                               0 / ext_call.return_data[0],
                               0 / sub_5d98fc27
                    if 0 / ext_call.return_data[0] and 0 / _429 > -1 / 0 / ext_call.return_data[0]:
                        revert with 0, 17
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 18
                    if 0 / ext_call.return_data[0] * 0 / _429 / 0 / ext_call.return_data[0] != 0 / _429:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not sub_5d98fc27:
                        revert with 0, 'SafeMath: division by zero', 0
                    return ext_call.return_data[0], 
                           ext_call.return_data[0],
                           0 / _429,
                           mem[_608] << 248,
                           0 / ext_call.return_data[0],
                           0 / ext_call.return_data[0] * 0 / _429 / sub_5d98fc27
                if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                    if not sub_5d98fc27:
                        revert with 0, 'SafeMath: division by zero', 0
                    return ext_call.return_data[0], 
                           ext_call.return_data[0],
                           0 / _429,
                           mem[_608] << 248,
                           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                           0 / sub_5d98fc27
                if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and 0 / _429 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _429 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != 0 / _429:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                return ext_call.return_data[0], 
                       ext_call.return_data[0],
                       0 / _429,
                       mem[_608] << 248,
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _429 / sub_5d98fc27
            if mem[_461] and sub_5d98fc27 > -1 / mem[_461]:
                revert with 0, 17
            if not mem[_461]:
                revert with 0, 18
            if mem[_461] * sub_5d98fc27 / mem[_461] != sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            _581 = mem[64]
            mem[64] = mem[64] + 64
            mem[_581] = 26
            mem[_581 + 32] = 'SafeMath: division by zero'
            if not _429:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(address(stor21.field_0))
            staticcall address(stor21.field_0).0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _691 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_691] == mem[_691 + 31 len 1]
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not 0 / ext_call.return_data[0]:
                    if not sub_5d98fc27:
                        revert with 0, 'SafeMath: division by zero', 0
                    return ext_call.return_data[0], 
                           ext_call.return_data[0],
                           _474 * sub_5d98fc27 / _429,
                           mem[_691] << 248,
                           0 / ext_call.return_data[0],
                           0 / sub_5d98fc27
                if 0 / ext_call.return_data[0] and _474 * sub_5d98fc27 / _429 > -1 / 0 / ext_call.return_data[0]:
                    revert with 0, 17
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 18
                if 0 / ext_call.return_data[0] * _474 * sub_5d98fc27 / _429 / 0 / ext_call.return_data[0] != _474 * sub_5d98fc27 / _429:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                return ext_call.return_data[0], 
                       ext_call.return_data[0],
                       _474 * sub_5d98fc27 / _429,
                       mem[_691] << 248,
                       0 / ext_call.return_data[0],
                       0 / ext_call.return_data[0] * _474 * sub_5d98fc27 / _429 / sub_5d98fc27
            if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                return ext_call.return_data[0], 
                       ext_call.return_data[0],
                       _474 * sub_5d98fc27 / _429,
                       mem[_691] << 248,
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       0 / sub_5d98fc27
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and _474 * sub_5d98fc27 / _429 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _474 * sub_5d98fc27 / _429 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != _474 * sub_5d98fc27 / _429:
                revert with 0, 'SafeMath: multiplication overflow'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _474 * sub_5d98fc27 / _429,
                   mem[_691] << 248,
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _474 * sub_5d98fc27 / _429 / sub_5d98fc27
        if unknown_0xb898b1e8(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            return sub_cc4285e9.length
        if unknown_0xc4c6c237(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            return sub_c4c6c237Address
        if uint32(call.func_hash) >> 224 != unknown_0xc59d4847(?????):
        require not msg.value
        mem[128] = 0
        mem[160] = 0
        mem[192] = 0
        mem[224] = 0
        mem[256] = 0
        mem[288] = 0
        mem[320] = 0
        mem[352] = 0
        mem[384] = 0
        mem[416] = 0
        mem[448] = 0
        mem[480] = 0
        mem[512] = 0
        mem[544] = 0
        mem[576] = 0
        mem[608] = 0
        mem[640] = 0
        mem[672] = 0
        mem[704] = 0
        mem[736] = 0
        mem[768] = 0
        mem[804] = pairAddress
        require ext_code.size(stor8)
        staticcall stor8.0x70a08231 with:
                gas gas_remaining wei
               args pairAddress
        mem[800] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        mem[ceil32(return_data.size) + 804] = pairAddress
        require ext_code.size(stor19)
        staticcall stor19.0x70a08231 with:
                gas gas_remaining wei
               args pairAddress
        mem[ceil32(return_data.size) + 800] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor15)
        staticcall stor15.latestRoundData() with:
                gas gas_remaining wei
        mem[(2 * ceil32(return_data.size)) + 800 len 160] = ext_call.return_data[0 len 160]
        if ext_call.success:
            require return_data.size >= 160
            require ext_call.return_data[0] == ext_call.return_data[22 len 10]
            require ext_call.return_data[128] == ext_call.return_data[150 len 10]
            require ext_code.size(stor15)
            staticcall stor15.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not 0 / ext_call.return_data[0]:
                    if not sub_5d98fc27:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.0xb9e5a03b with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.0x41e70fa6 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] > !ext_call.return_data[0]:
                        revert with 0, 17
                    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalAmountStaked() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor10)
                    staticcall stor10.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_7c68e584Address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor10)
                    staticcall stor10.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] > ext_call.return_data[0]:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if ext_call.return_data[0] < ext_call.return_data[0]:
                        revert with 0, 17
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / sub_5d98fc27:
                        if not sub_5a8c5d60:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor8)
                        staticcall stor8.getTotalRewardsDistributed() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor8)
                        staticcall stor8.totalVolume() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor8)
                        staticcall stor8.0x70a08231 with:
                                gas gas_remaining wei
                               args sub_92b8b617Address
                        mem[(15 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor8)
                        staticcall stor8.holders() with:
                                gas gas_remaining wei
                        mem[(16 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[(13 * ceil32(return_data.size)) + 1632] = ext_call.return_data[28 len 4]
                        return eth.balance(sub_270bf52eAddress), 
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               0 / ext_call.return_data[0],
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               2 * ext_call.return_data[0],
                               ext_call.return_data[0],
                               0 / ext_call.return_data[0],
                               ext_call.return_data[32],
                               0 / sub_5d98fc27,
                               0 / sub_5a8c5d60,
                               block.number << 128,
                               mem[(13 * ceil32(return_data.size)) + 1660 len 4],
                               uint8(stor21.field_0),
                               uint8(stor21.field_0),
                               ext_call.return_data[0] << 248,
                               8
                    if 0 / sub_5d98fc27 and ext_call.return_data[0] > -1 / 0 / sub_5d98fc27:
                        revert with 0, 17
                    if not 0 / sub_5d98fc27:
                        revert with 0, 18
                    if 0 / sub_5d98fc27 * ext_call.return_data[0] / 0 / sub_5d98fc27 != ext_call.return_data[0]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[(15 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[(16 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[(13 * ceil32(return_data.size)) + 1632] = ext_call.return_data[28 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           0 / ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           2 * ext_call.return_data[0],
                           ext_call.return_data[0],
                           0 / ext_call.return_data[0],
                           ext_call.return_data[32],
                           0 / sub_5d98fc27,
                           0 / sub_5d98fc27 * ext_call.return_data[0] / sub_5a8c5d60,
                           block.number << 128,
                           mem[(13 * ceil32(return_data.size)) + 1660 len 4],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           ext_call.return_data[0] << 248,
                           8
                if 0 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / 0 / ext_call.return_data[0]:
                    revert with 0, 17
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 18
                if 0 / ext_call.return_data[0] * ext_call.return_data[32] / 0 / ext_call.return_data[0] != ext_call.return_data[32]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0xb9e5a03b with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.0x41e70fa6 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] > !ext_call.return_data[0]:
                    revert with 0, 17
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(stor8)
                staticcall stor8.getTotalAmountStaked() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor10)
                staticcall stor10.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_7c68e584Address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor10)
                staticcall stor10.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] > ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[(15 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[(16 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[(13 * ceil32(return_data.size)) + 1632] = ext_call.return_data[28 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           0 / ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           2 * ext_call.return_data[0],
                           ext_call.return_data[0],
                           0 / ext_call.return_data[0],
                           ext_call.return_data[32],
                           0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27,
                           0 / sub_5a8c5d60,
                           block.number << 128,
                           mem[(13 * ceil32(return_data.size)) + 1660 len 4],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           ext_call.return_data[0] << 248,
                           8
                if 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 and ext_call.return_data[0] > -1 / 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
                    revert with 0, 17
                if not 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
                    revert with 0, 18
                if 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 * ext_call.return_data[0] / 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[(15 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[(16 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[(13 * ceil32(return_data.size)) + 1632] = ext_call.return_data[28 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       0 / ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       2 * ext_call.return_data[0],
                       ext_call.return_data[0],
                       0 / ext_call.return_data[0],
                       ext_call.return_data[32],
                       0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27,
                       0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 * ext_call.return_data[0] / sub_5a8c5d60,
                       block.number << 128,
                       mem[(13 * ceil32(return_data.size)) + 1660 len 4],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       ext_call.return_data[0] << 248,
                       8
            if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
                revert with 0, 'SafeMath: multiplication overflow'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0xb9e5a03b with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.0x41e70fa6 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] > !ext_call.return_data[0]:
                    revert with 0, 17
                if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(stor8)
                staticcall stor8.getTotalAmountStaked() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor10)
                staticcall stor10.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_7c68e584Address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor10)
                staticcall stor10.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] > ext_call.return_data[0]:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if ext_call.return_data[0] < ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / sub_5d98fc27:
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[(15 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[(16 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[(13 * ceil32(return_data.size)) + 1632] = ext_call.return_data[28 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           0 / ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           2 * ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                           ext_call.return_data[32],
                           0 / sub_5d98fc27,
                           0 / sub_5a8c5d60,
                           block.number << 128,
                           mem[(13 * ceil32(return_data.size)) + 1660 len 4],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           ext_call.return_data[0] << 248,
                           8
                if 0 / sub_5d98fc27 and ext_call.return_data[0] > -1 / 0 / sub_5d98fc27:
                    revert with 0, 17
                if not 0 / sub_5d98fc27:
                    revert with 0, 18
                if 0 / sub_5d98fc27 * ext_call.return_data[0] / 0 / sub_5d98fc27 != ext_call.return_data[0]:
                    revert with 0, 'SafeMath: multiplication overflow'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[(15 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[(16 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[(13 * ceil32(return_data.size)) + 1632] = ext_call.return_data[28 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       0 / ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       2 * ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       ext_call.return_data[32],
                       0 / sub_5d98fc27,
                       0 / sub_5d98fc27 * ext_call.return_data[0] / sub_5a8c5d60,
                       block.number << 128,
                       mem[(13 * ceil32(return_data.size)) + 1660 len 4],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       ext_call.return_data[0] << 248,
                       8
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != ext_call.return_data[32]:
                revert with 0, 'SafeMath: multiplication overflow'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.0xb9e5a03b with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor8)
            staticcall stor8.0x41e70fa6 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] > !ext_call.return_data[0]:
                revert with 0, 17
            if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(stor8)
            staticcall stor8.getTotalAmountStaked() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor10)
            staticcall stor10.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_7c68e584Address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor10)
            staticcall stor10.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] > ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow', 0
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[(15 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[(16 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[(13 * ceil32(return_data.size)) + 1632] = ext_call.return_data[28 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       0 / ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       2 * ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       ext_call.return_data[32],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27,
                       0 / sub_5a8c5d60,
                       block.number << 128,
                       mem[(13 * ceil32(return_data.size)) + 1660 len 4],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       ext_call.return_data[0] << 248,
                       8
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 and ext_call.return_data[0] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
                revert with 0, 17
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 * ext_call.return_data[0] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 != ext_call.return_data[0]:
                revert with 0, 'SafeMath: multiplication overflow'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.getTotalRewardsDistributed() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor8)
            staticcall stor8.totalVolume() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor8)
            staticcall stor8.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_92b8b617Address
            mem[(15 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor8)
            staticcall stor8.holders() with:
                    gas gas_remaining wei
            mem[(16 * ceil32(return_data.size)) + 1792] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(13 * ceil32(return_data.size)) + 1632] = ext_call.return_data[28 len 4]
            return eth.balance(sub_270bf52eAddress), 
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   0 / ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   2 * ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                   ext_call.return_data[32],
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27,
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 * ext_call.return_data[0] / sub_5a8c5d60,
                   block.number << 128,
                   mem[(13 * ceil32(return_data.size)) + 1660 len 4],
                   uint8(stor21.field_0),
                   uint8(stor21.field_0),
                   ext_call.return_data[0] << 248,
                   8
        if return_data.size <= 3:
            revert with ext_call.return_data[0 len return_data.size]
        mem[0 len 4] = ext_call.return_data[0 len 4]
        if uint32(mem[4 len 28]) >> 224 != Error(string arg1):
            revert with ext_call.return_data[0 len return_data.size]
        if return_data.size < 68:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 800 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
        if ext_call.return_data[0] > test266151307() or ext_call.return_data[0] + 36 > return_data.size:
            revert with ext_call.return_data[0 len return_data.size]
        if mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 800] > test266151307():
            revert with ext_call.return_data[0 len return_data.size]
        if ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 800] + 32 > return_data.size - 4:
            revert with ext_call.return_data[0 len return_data.size]
        if floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 800] + 31) + 801 < 800 or (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 800] + 31) + 801 > test266151307():
            revert with 0, 65
        mem[64] = (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 800] + 31) + 801
        if not (2 * ceil32(return_data.size)) + ext_call.return_data[0] + 800:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 800] + 31) + 801] = 0x70a0823100000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = sub_8893d55aAddress
        require ext_code.size(stor19)
        staticcall stor19.0x70a08231 with:
                gas gas_remaining wei
               args sub_8893d55aAddress
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _463 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _476 = mem[_463]
        mem[mem[64] + 4] = sub_8893d55aAddress
        require ext_code.size(address(stor21.field_0))
        staticcall address(stor21.field_0).0x70a08231 with:
                gas gas_remaining wei
               args sub_8893d55aAddress
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _493 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _508 = mem[_493]
        if not mem[_493]:
            _575 = mem[64]
            mem[64] = mem[64] + 64
            mem[_575] = 26
            mem[_575 + 32] = 'SafeMath: division by zero'
            if not _476:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(address(stor21.field_0))
            staticcall address(stor21.field_0).0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _677 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _701 = mem[_677]
            require mem[_677] == mem[_677 + 31 len 1]
            if not ext_call.return_data[0]:
                _837 = mem[64]
                mem[64] = mem[64] + 64
                mem[_837] = 26
                mem[_837 + 32] = 'SafeMath: division by zero'
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero', 0
                if not 0 / ext_call.return_data[0]:
                    _964 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_964] = 26
                    mem[_964 + 32] = 'SafeMath: division by zero'
                    if not sub_5d98fc27:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.0xb9e5a03b with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1123 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1174 = mem[_1123]
                    require ext_code.size(stor8)
                    staticcall stor8.0x41e70fa6 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1230 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1270 = mem[_1230]
                    if _1174 > !mem[_1230]:
                        revert with 0, 17
                    if _1174 + mem[_1230] < _1174:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalAmountStaked() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1452 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1478 = mem[_1452]
                    mem[mem[64] + 4] = sub_7c68e584Address
                    require ext_code.size(stor10)
                    staticcall stor10.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_7c68e584Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1568 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1598 = mem[_1568]
                    require ext_code.size(stor10)
                    staticcall stor10.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1704 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1765 = mem[_1704]
                    _1828 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1828] = 30
                    mem[_1828 + 32] = 'SafeMath: subtraction overflow'
                    if _1598 > _1765:
                        revert with 0, 'SafeMath: subtraction overflow', 0
                    if _1765 < _1598:
                        revert with 0, 17
                    if not _1765 - _1598:
                        _2244 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_2244] = 26
                        mem[_2244 + 32] = 'SafeMath: division by zero'
                        if not _1478:
                            revert with 0, 'SafeMath: division by zero', 0
                        require ext_code.size(stor8)
                        staticcall stor8.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _2639 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _2724 = mem[_2639]
                        if not 0 / sub_5d98fc27:
                            _3107 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_3107] = 26
                            mem[_3107 + 32] = 'SafeMath: division by zero'
                            if not sub_5a8c5d60:
                                revert with 0, 'SafeMath: division by zero', 0
                            _3605 = mem[64]
                            mem[64] = mem[64] + 672
                            mem[_3605] = eth.balance(sub_270bf52eAddress)
                            mem[_3605 + 32] = ext_call.return_data[0]
                            mem[_3605 + 64] = ext_call.return_data[0]
                            mem[_3605 + 96] = _1478
                            mem[_3605 + 128] = 0 / _1478
                            require ext_code.size(stor8)
                            staticcall stor8.getTotalRewardsDistributed() with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3689 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_3605 + 160] = mem[_3689]
                            require ext_code.size(stor8)
                            staticcall stor8.totalVolume() with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4116 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_3605 + 192] = mem[_4116]
                            mem[_3605 + 224] = _1174
                            mem[_3605 + 256] = _1270
                            mem[_3605 + 288] = _1174 + _1270
                            mem[mem[64] + 4] = sub_92b8b617Address
                            require ext_code.size(stor8)
                            staticcall stor8.0x70a08231 with:
                                    gas gas_remaining wei
                                   args sub_92b8b617Address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4500 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_3605 + 320] = mem[_4500]
                            mem[_3605 + 352] = 0 / ext_call.return_data[0]
                            mem[_3605 + 384] = 0 / _476
                            mem[_3605 + 416] = 0 / sub_5d98fc27
                            mem[_3605 + 448] = 0 / sub_5a8c5d60
                            mem[_3605 + 480] = uint128(block.number)
                            require ext_code.size(stor8)
                            staticcall stor8.holders() with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4869 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_3605 + 512] = mem[_4869 + 28 len 4]
                            mem[_3605 + 544] = decimals
                            mem[_3605 + 576] = uint8(stor21.field_168)
                            mem[_3605 + 608] = uint8(_701)
                            mem[_3605 + 640] = 8
                            mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                            mem[mem[64] + 32] = ext_call.return_data[0]
                            mem[mem[64] + 64] = ext_call.return_data[0]
                            mem[mem[64] + 96] = _1478
                            mem[mem[64] + 128] = 0 / _1478
                            mem[mem[64] + 160] = mem[_3605 + 160]
                            mem[mem[64] + 192] = mem[_3605 + 192]
                            mem[mem[64] + 224] = _1174
                            mem[mem[64] + 256] = _1270
                            mem[mem[64] + 288] = _1174 + _1270
                            mem[mem[64] + 320] = mem[_3605 + 320]
                            mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                            mem[mem[64] + 384] = 0 / _476
                            mem[mem[64] + 416] = 0 / sub_5d98fc27
                            mem[mem[64] + 448] = 0 / sub_5a8c5d60
                            mem[mem[64] + 480] = uint128(block.number)
                            mem[mem[64] + 512] = mem[_3605 + 540 len 4]
                            return eth.balance(sub_270bf52eAddress), 
                                   ext_call.return_data[0],
                                   ext_call.return_data[0],
                                   _1478,
                                   0 / _1478,
                                   mem[mem[64] + 160 len 64],
                                   _1174,
                                   _1270,
                                   _1174 + _1270,
                                   mem[mem[64] + 320],
                                   0 / ext_call.return_data[0],
                                   0 / _476,
                                   0 / sub_5d98fc27,
                                   0 / sub_5a8c5d60,
                                   block.number << 128,
                                   mem[mem[64] + 512],
                                   uint8(stor21.field_0),
                                   uint8(stor21.field_0),
                                   _701 << 248,
                                   8
                        if 0 / sub_5d98fc27 and mem[_2639] > -1 / 0 / sub_5d98fc27:
                            revert with 0, 17
                        if not 0 / sub_5d98fc27:
                            revert with 0, 18
                        if 0 / sub_5d98fc27 * mem[_2639] / 0 / sub_5d98fc27 != mem[_2639]:
                            revert with 0, 'SafeMath: multiplication overflow'
                        _3560 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3560] = 26
                        mem[_3560 + 32] = 'SafeMath: division by zero'
                        if not sub_5a8c5d60:
                            revert with 0, 'SafeMath: division by zero', 0
                        _4061 = mem[64]
                        mem[64] = mem[64] + 672
                        mem[_4061] = eth.balance(sub_270bf52eAddress)
                        mem[_4061 + 32] = ext_call.return_data[0]
                        mem[_4061 + 64] = ext_call.return_data[0]
                        mem[_4061 + 96] = _1478
                        mem[_4061 + 128] = 0 / _1478
                        require ext_code.size(stor8)
                        staticcall stor8.getTotalRewardsDistributed() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4154 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4061 + 160] = mem[_4154]
                        require ext_code.size(stor8)
                        staticcall stor8.totalVolume() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4560 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4061 + 192] = mem[_4560]
                        mem[_4061 + 224] = _1174
                        mem[_4061 + 256] = _1270
                        mem[_4061 + 288] = _1174 + _1270
                        mem[mem[64] + 4] = sub_92b8b617Address
                        require ext_code.size(stor8)
                        staticcall stor8.0x70a08231 with:
                                gas gas_remaining wei
                               args sub_92b8b617Address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4955 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4061 + 320] = mem[_4955]
                        mem[_4061 + 352] = 0 / ext_call.return_data[0]
                        mem[_4061 + 384] = 0 / _476
                        mem[_4061 + 416] = 0 / sub_5d98fc27
                        mem[_4061 + 448] = 0 / sub_5d98fc27 * _2724 / sub_5a8c5d60
                        mem[_4061 + 480] = uint128(block.number)
                        require ext_code.size(stor8)
                        staticcall stor8.holders() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5420 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4061 + 512] = mem[_5420 + 28 len 4]
                        mem[_4061 + 544] = decimals
                        mem[_4061 + 576] = uint8(stor21.field_168)
                        mem[_4061 + 608] = uint8(_701)
                        mem[_4061 + 640] = 8
                        mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        mem[mem[64] + 64] = ext_call.return_data[0]
                        mem[mem[64] + 96] = _1478
                        mem[mem[64] + 128] = 0 / _1478
                        mem[mem[64] + 160] = mem[_4061 + 160]
                        mem[mem[64] + 192] = mem[_4061 + 192]
                        mem[mem[64] + 224] = _1174
                        mem[mem[64] + 256] = _1270
                        mem[mem[64] + 288] = _1174 + _1270
                        mem[mem[64] + 320] = mem[_4061 + 320]
                        mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                        mem[mem[64] + 384] = 0 / _476
                        mem[mem[64] + 416] = 0 / sub_5d98fc27
                        mem[mem[64] + 448] = 0 / sub_5d98fc27 * _2724 / sub_5a8c5d60
                        mem[mem[64] + 480] = uint128(block.number)
                        mem[mem[64] + 512] = mem[_4061 + 540 len 4]
                        return eth.balance(sub_270bf52eAddress), 
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               _1478,
                               0 / _1478,
                               mem[mem[64] + 160 len 64],
                               _1174,
                               _1270,
                               _1174 + _1270,
                               mem[mem[64] + 320],
                               0 / ext_call.return_data[0],
                               0 / _476,
                               0 / sub_5d98fc27,
                               0 / sub_5d98fc27 * _2724 / sub_5a8c5d60,
                               block.number << 128,
                               mem[mem[64] + 512],
                               uint8(stor21.field_0),
                               uint8(stor21.field_0),
                               _701 << 248,
                               8
                    if _1765 - _1598 and 100 * 10^6 > -1 / _1765 - _1598:
                        revert with 0, 17
                    if not _1765 - _1598:
                        revert with 0, 18
                    if (100 * 10^6 * _1765) - (100 * 10^6 * _1598) / _1765 - _1598 != 100 * 10^6:
                        revert with 0, 'SafeMath: multiplication overflow'
                    _2482 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2482] = 26
                    mem[_2482 + 32] = 'SafeMath: division by zero'
                    if not _1478:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2970 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3104 = mem[_2970]
                    if not 0 / sub_5d98fc27:
                        _3559 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3559] = 26
                        mem[_3559 + 32] = 'SafeMath: division by zero'
                        if not sub_5a8c5d60:
                            revert with 0, 'SafeMath: division by zero', 0
                        _4057 = mem[64]
                        mem[64] = mem[64] + 672
                        mem[_4057] = eth.balance(sub_270bf52eAddress)
                        mem[_4057 + 32] = ext_call.return_data[0]
                        mem[_4057 + 64] = ext_call.return_data[0]
                        mem[_4057 + 96] = _1478
                        mem[_4057 + 128] = (100 * 10^6 * _1765) - (100 * 10^6 * _1598) / _1478
                        require ext_code.size(stor8)
                        staticcall stor8.getTotalRewardsDistributed() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4153 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4057 + 160] = mem[_4153]
                        require ext_code.size(stor8)
                        staticcall stor8.totalVolume() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4559 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4057 + 192] = mem[_4559]
                        mem[_4057 + 224] = _1174
                        mem[_4057 + 256] = _1270
                        mem[_4057 + 288] = _1174 + _1270
                        mem[mem[64] + 4] = sub_92b8b617Address
                        require ext_code.size(stor8)
                        staticcall stor8.0x70a08231 with:
                                gas gas_remaining wei
                               args sub_92b8b617Address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4954 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4057 + 320] = mem[_4954]
                        mem[_4057 + 352] = 0 / ext_call.return_data[0]
                        mem[_4057 + 384] = 0 / _476
                        mem[_4057 + 416] = 0 / sub_5d98fc27
                        mem[_4057 + 448] = 0 / sub_5a8c5d60
                        mem[_4057 + 480] = uint128(block.number)
                        require ext_code.size(stor8)
                        staticcall stor8.holders() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5419 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4057 + 512] = mem[_5419 + 28 len 4]
                        mem[_4057 + 544] = decimals
                        mem[_4057 + 576] = uint8(stor21.field_168)
                        mem[_4057 + 608] = uint8(_701)
                        mem[_4057 + 640] = 8
                        mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        mem[mem[64] + 64] = ext_call.return_data[0]
                        mem[mem[64] + 96] = _1478
                        mem[mem[64] + 128] = (100 * 10^6 * _1765) - (100 * 10^6 * _1598) / _1478
                        mem[mem[64] + 160] = mem[_4057 + 160]
                        mem[mem[64] + 192] = mem[_4057 + 192]
                        mem[mem[64] + 224] = _1174
                        mem[mem[64] + 256] = _1270
                        mem[mem[64] + 288] = _1174 + _1270
                        mem[mem[64] + 320] = mem[_4057 + 320]
                        mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                        mem[mem[64] + 384] = 0 / _476
                        mem[mem[64] + 416] = 0 / sub_5d98fc27
                        mem[mem[64] + 448] = 0 / sub_5a8c5d60
                        mem[mem[64] + 480] = uint128(block.number)
                        mem[mem[64] + 512] = mem[_4057 + 540 len 4]
                        return eth.balance(sub_270bf52eAddress), 
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               _1478,
                               (100 * 10^6 * _1765) - (100 * 10^6 * _1598) / _1478,
                               mem[mem[64] + 160 len 64],
                               _1174,
                               _1270,
                               _1174 + _1270,
                               mem[mem[64] + 320],
                               0 / ext_call.return_data[0],
                               0 / _476,
                               0 / sub_5d98fc27,
                               0 / sub_5a8c5d60,
                               block.number << 128,
                               mem[mem[64] + 512],
                               uint8(stor21.field_0),
                               uint8(stor21.field_0),
                               _701 << 248,
                               8
                    if 0 / sub_5d98fc27 and mem[_2970] > -1 / 0 / sub_5d98fc27:
                        revert with 0, 17
                    if not 0 / sub_5d98fc27:
                        revert with 0, 18
                    if 0 / sub_5d98fc27 * mem[_2970] / 0 / sub_5d98fc27 != mem[_2970]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    _4014 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_4014] = 26
                    mem[_4014 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4496 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4496] = eth.balance(sub_270bf52eAddress)
                    mem[_4496 + 32] = ext_call.return_data[0]
                    mem[_4496 + 64] = ext_call.return_data[0]
                    mem[_4496 + 96] = _1478
                    mem[_4496 + 128] = (100 * 10^6 * _1765) - (100 * 10^6 * _1598) / _1478
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4654 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4496 + 160] = mem[_4654]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5014 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4496 + 192] = mem[_5014]
                    mem[_4496 + 224] = _1174
                    mem[_4496 + 256] = _1270
                    mem[_4496 + 288] = _1174 + _1270
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5498 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4496 + 320] = mem[_5498]
                    mem[_4496 + 352] = 0 / ext_call.return_data[0]
                    mem[_4496 + 384] = 0 / _476
                    mem[_4496 + 416] = 0 / sub_5d98fc27
                    mem[_4496 + 448] = 0 / sub_5d98fc27 * _3104 / sub_5a8c5d60
                    mem[_4496 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6008 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4496 + 512] = mem[_6008 + 28 len 4]
                    mem[_4496 + 544] = decimals
                    mem[_4496 + 576] = uint8(stor21.field_168)
                    mem[_4496 + 608] = uint8(_701)
                    mem[_4496 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1478
                    mem[mem[64] + 128] = (100 * 10^6 * _1765) - (100 * 10^6 * _1598) / _1478
                    mem[mem[64] + 160] = mem[_4496 + 160]
                    mem[mem[64] + 192] = mem[_4496 + 192]
                    mem[mem[64] + 224] = _1174
                    mem[mem[64] + 256] = _1270
                    mem[mem[64] + 288] = _1174 + _1270
                    mem[mem[64] + 320] = mem[_4496 + 320]
                    mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                    mem[mem[64] + 384] = 0 / _476
                    mem[mem[64] + 416] = 0 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / sub_5d98fc27 * _3104 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4496 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1478,
                           (100 * 10^6 * _1765) - (100 * 10^6 * _1598) / _1478,
                           mem[mem[64] + 160 len 64],
                           _1174,
                           _1270,
                           _1174 + _1270,
                           mem[mem[64] + 320],
                           0 / ext_call.return_data[0],
                           0 / _476,
                           0 / sub_5d98fc27,
                           0 / sub_5d98fc27 * _3104 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _701 << 248,
                           8
                if 0 / ext_call.return_data[0] and 0 / _476 > -1 / 0 / ext_call.return_data[0]:
                    revert with 0, 17
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 18
                if 0 / ext_call.return_data[0] * 0 / _476 / 0 / ext_call.return_data[0] != 0 / _476:
                    revert with 0, 'SafeMath: multiplication overflow'
                _1052 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1052] = 26
                mem[_1052 + 32] = 'SafeMath: division by zero'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0xb9e5a03b with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1253 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1297 = mem[_1253]
                require ext_code.size(stor8)
                staticcall stor8.0x41e70fa6 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1350 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1389 = mem[_1350]
                if _1297 > !mem[_1350]:
                    revert with 0, 17
                if _1297 + mem[_1350] < _1297:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(stor8)
                staticcall stor8.getTotalAmountStaked() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1586 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1625 = mem[_1586]
                mem[mem[64] + 4] = sub_7c68e584Address
                require ext_code.size(stor10)
                staticcall stor10.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_7c68e584Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1743 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1787 = mem[_1743]
                require ext_code.size(stor10)
                staticcall stor10.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1898 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1973 = mem[_1898]
                _2040 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2040] = 30
                mem[_2040 + 32] = 'SafeMath: subtraction overflow'
                if _1787 > _1973:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if _1973 < _1787:
                    revert with 0, 17
                if not _1973 - _1787:
                    _2481 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2481] = 26
                    mem[_2481 + 32] = 'SafeMath: division by zero'
                    if not _1625:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2969 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3101 = mem[_2969]
                    if not 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                        _3558 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3558] = 26
                        mem[_3558 + 32] = 'SafeMath: division by zero'
                        if not sub_5a8c5d60:
                            revert with 0, 'SafeMath: division by zero', 0
                        _4053 = mem[64]
                        mem[64] = mem[64] + 672
                        mem[_4053] = eth.balance(sub_270bf52eAddress)
                        mem[_4053 + 32] = ext_call.return_data[0]
                        mem[_4053 + 64] = ext_call.return_data[0]
                        mem[_4053 + 96] = _1625
                        mem[_4053 + 128] = 0 / _1625
                        require ext_code.size(stor8)
                        staticcall stor8.getTotalRewardsDistributed() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4152 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4053 + 160] = mem[_4152]
                        require ext_code.size(stor8)
                        staticcall stor8.totalVolume() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4558 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4053 + 192] = mem[_4558]
                        mem[_4053 + 224] = _1297
                        mem[_4053 + 256] = _1389
                        mem[_4053 + 288] = _1297 + _1389
                        mem[mem[64] + 4] = sub_92b8b617Address
                        require ext_code.size(stor8)
                        staticcall stor8.0x70a08231 with:
                                gas gas_remaining wei
                               args sub_92b8b617Address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4953 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4053 + 320] = mem[_4953]
                        mem[_4053 + 352] = 0 / ext_call.return_data[0]
                        mem[_4053 + 384] = 0 / _476
                        mem[_4053 + 416] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                        mem[_4053 + 448] = 0 / sub_5a8c5d60
                        mem[_4053 + 480] = uint128(block.number)
                        require ext_code.size(stor8)
                        staticcall stor8.holders() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5418 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4053 + 512] = mem[_5418 + 28 len 4]
                        mem[_4053 + 544] = decimals
                        mem[_4053 + 576] = uint8(stor21.field_168)
                        mem[_4053 + 608] = uint8(_701)
                        mem[_4053 + 640] = 8
                        mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        mem[mem[64] + 64] = ext_call.return_data[0]
                        mem[mem[64] + 96] = _1625
                        mem[mem[64] + 128] = 0 / _1625
                        mem[mem[64] + 160] = mem[_4053 + 160]
                        mem[mem[64] + 192] = mem[_4053 + 192]
                        mem[mem[64] + 224] = _1297
                        mem[mem[64] + 256] = _1389
                        mem[mem[64] + 288] = _1297 + _1389
                        mem[mem[64] + 320] = mem[_4053 + 320]
                        mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                        mem[mem[64] + 384] = 0 / _476
                        mem[mem[64] + 416] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                        mem[mem[64] + 448] = 0 / sub_5a8c5d60
                        mem[mem[64] + 480] = uint128(block.number)
                        mem[mem[64] + 512] = mem[_4053 + 540 len 4]
                        return eth.balance(sub_270bf52eAddress), 
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               _1625,
                               0 / _1625,
                               mem[mem[64] + 160 len 64],
                               _1297,
                               _1389,
                               _1297 + _1389,
                               mem[mem[64] + 320],
                               0 / ext_call.return_data[0],
                               0 / _476,
                               0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27,
                               0 / sub_5a8c5d60,
                               block.number << 128,
                               mem[mem[64] + 512],
                               uint8(stor21.field_0),
                               uint8(stor21.field_0),
                               _701 << 248,
                               8
                    if 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 and mem[_2969] > -1 / 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                        revert with 0, 17
                    if not 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                        revert with 0, 18
                    if 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * mem[_2969] / 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 != mem[_2969]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    _4013 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_4013] = 26
                    mem[_4013 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4492 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4492] = eth.balance(sub_270bf52eAddress)
                    mem[_4492 + 32] = ext_call.return_data[0]
                    mem[_4492 + 64] = ext_call.return_data[0]
                    mem[_4492 + 96] = _1625
                    mem[_4492 + 128] = 0 / _1625
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4653 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4492 + 160] = mem[_4653]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5013 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4492 + 192] = mem[_5013]
                    mem[_4492 + 224] = _1297
                    mem[_4492 + 256] = _1389
                    mem[_4492 + 288] = _1297 + _1389
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5497 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4492 + 320] = mem[_5497]
                    mem[_4492 + 352] = 0 / ext_call.return_data[0]
                    mem[_4492 + 384] = 0 / _476
                    mem[_4492 + 416] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                    mem[_4492 + 448] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _3101 / sub_5a8c5d60
                    mem[_4492 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6007 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4492 + 512] = mem[_6007 + 28 len 4]
                    mem[_4492 + 544] = decimals
                    mem[_4492 + 576] = uint8(stor21.field_168)
                    mem[_4492 + 608] = uint8(_701)
                    mem[_4492 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1625
                    mem[mem[64] + 128] = 0 / _1625
                    mem[mem[64] + 160] = mem[_4492 + 160]
                    mem[mem[64] + 192] = mem[_4492 + 192]
                    mem[mem[64] + 224] = _1297
                    mem[mem[64] + 256] = _1389
                    mem[mem[64] + 288] = _1297 + _1389
                    mem[mem[64] + 320] = mem[_4492 + 320]
                    mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                    mem[mem[64] + 384] = 0 / _476
                    mem[mem[64] + 416] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _3101 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4492 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1625,
                           0 / _1625,
                           mem[mem[64] + 160 len 64],
                           _1297,
                           _1389,
                           _1297 + _1389,
                           mem[mem[64] + 320],
                           0 / ext_call.return_data[0],
                           0 / _476,
                           0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27,
                           0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _3101 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _701 << 248,
                           8
                if _1973 - _1787 and 100 * 10^6 > -1 / _1973 - _1787:
                    revert with 0, 17
                if not _1973 - _1787:
                    revert with 0, 18
                if (100 * 10^6 * _1973) - (100 * 10^6 * _1787) / _1973 - _1787 != 100 * 10^6:
                    revert with 0, 'SafeMath: multiplication overflow'
                _2795 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2795] = 26
                mem[_2795 + 32] = 'SafeMath: division by zero'
                if not _1625:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3335 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3555 = mem[_3335]
                if not 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                    _4012 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_4012] = 26
                    mem[_4012 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4488 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4488] = eth.balance(sub_270bf52eAddress)
                    mem[_4488 + 32] = ext_call.return_data[0]
                    mem[_4488 + 64] = ext_call.return_data[0]
                    mem[_4488 + 96] = _1625
                    mem[_4488 + 128] = (100 * 10^6 * _1973) - (100 * 10^6 * _1787) / _1625
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4652 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4488 + 160] = mem[_4652]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5012 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4488 + 192] = mem[_5012]
                    mem[_4488 + 224] = _1297
                    mem[_4488 + 256] = _1389
                    mem[_4488 + 288] = _1297 + _1389
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5496 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4488 + 320] = mem[_5496]
                    mem[_4488 + 352] = 0 / ext_call.return_data[0]
                    mem[_4488 + 384] = 0 / _476
                    mem[_4488 + 416] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                    mem[_4488 + 448] = 0 / sub_5a8c5d60
                    mem[_4488 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6006 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4488 + 512] = mem[_6006 + 28 len 4]
                    mem[_4488 + 544] = decimals
                    mem[_4488 + 576] = uint8(stor21.field_168)
                    mem[_4488 + 608] = uint8(_701)
                    mem[_4488 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1625
                    mem[mem[64] + 128] = (100 * 10^6 * _1973) - (100 * 10^6 * _1787) / _1625
                    mem[mem[64] + 160] = mem[_4488 + 160]
                    mem[mem[64] + 192] = mem[_4488 + 192]
                    mem[mem[64] + 224] = _1297
                    mem[mem[64] + 256] = _1389
                    mem[mem[64] + 288] = _1297 + _1389
                    mem[mem[64] + 320] = mem[_4488 + 320]
                    mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                    mem[mem[64] + 384] = 0 / _476
                    mem[mem[64] + 416] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4488 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1625,
                           (100 * 10^6 * _1973) - (100 * 10^6 * _1787) / _1625,
                           mem[mem[64] + 160 len 64],
                           _1297,
                           _1389,
                           _1297 + _1389,
                           mem[mem[64] + 320],
                           0 / ext_call.return_data[0],
                           0 / _476,
                           0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27,
                           0 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _701 << 248,
                           8
                if 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 and mem[_3335] > -1 / 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                    revert with 0, 17
                if not 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                    revert with 0, 18
                if 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * mem[_3335] / 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 != mem[_3335]:
                    revert with 0, 'SafeMath: multiplication overflow'
                _4423 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4423] = 26
                mem[_4423 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4949 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4949] = eth.balance(sub_270bf52eAddress)
                mem[_4949 + 32] = ext_call.return_data[0]
                mem[_4949 + 64] = ext_call.return_data[0]
                mem[_4949 + 96] = _1625
                mem[_4949 + 128] = (100 * 10^6 * _1973) - (100 * 10^6 * _1787) / _1625
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5195 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4949 + 160] = mem[_5195]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5543 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4949 + 192] = mem[_5543]
                mem[_4949 + 224] = _1297
                mem[_4949 + 256] = _1389
                mem[_4949 + 288] = _1297 + _1389
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6062 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4949 + 320] = mem[_6062]
                mem[_4949 + 352] = 0 / ext_call.return_data[0]
                mem[_4949 + 384] = 0 / _476
                mem[_4949 + 416] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                mem[_4949 + 448] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _3555 / sub_5a8c5d60
                mem[_4949 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6669 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4949 + 512] = mem[_6669 + 28 len 4]
                mem[_4949 + 544] = decimals
                mem[_4949 + 576] = uint8(stor21.field_168)
                mem[_4949 + 608] = uint8(_701)
                mem[_4949 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _1625
                mem[mem[64] + 128] = (100 * 10^6 * _1973) - (100 * 10^6 * _1787) / _1625
                mem[mem[64] + 160] = mem[_4949 + 160]
                mem[mem[64] + 192] = mem[_4949 + 192]
                mem[mem[64] + 224] = _1297
                mem[mem[64] + 256] = _1389
                mem[mem[64] + 288] = _1297 + _1389
                mem[mem[64] + 320] = mem[_4949 + 320]
                mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                mem[mem[64] + 384] = 0 / _476
                mem[mem[64] + 416] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                mem[mem[64] + 448] = 0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _3555 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4949 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _1625,
                       (100 * 10^6 * _1973) - (100 * 10^6 * _1787) / _1625,
                       mem[mem[64] + 160 len 64],
                       _1297,
                       _1389,
                       _1297 + _1389,
                       mem[mem[64] + 320],
                       0 / ext_call.return_data[0],
                       0 / _476,
                       0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27,
                       0 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _3555 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _701 << 248,
                       8
            if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
                revert with 0, 'SafeMath: multiplication overflow'
            _904 = mem[64]
            mem[64] = mem[64] + 64
            mem[_904] = 26
            mem[_904 + 32] = 'SafeMath: division by zero'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                _1051 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1051] = 26
                mem[_1051 + 32] = 'SafeMath: division by zero'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0xb9e5a03b with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1252 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1296 = mem[_1252]
                require ext_code.size(stor8)
                staticcall stor8.0x41e70fa6 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1349 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1388 = mem[_1349]
                if _1296 > !mem[_1349]:
                    revert with 0, 17
                if _1296 + mem[_1349] < _1296:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(stor8)
                staticcall stor8.getTotalAmountStaked() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1585 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1624 = mem[_1585]
                mem[mem[64] + 4] = sub_7c68e584Address
                require ext_code.size(stor10)
                staticcall stor10.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_7c68e584Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1742 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1786 = mem[_1742]
                require ext_code.size(stor10)
                staticcall stor10.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1897 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1972 = mem[_1897]
                _2039 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2039] = 30
                mem[_2039 + 32] = 'SafeMath: subtraction overflow'
                if _1786 > _1972:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if _1972 < _1786:
                    revert with 0, 17
                if not _1972 - _1786:
                    _2480 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2480] = 26
                    mem[_2480 + 32] = 'SafeMath: division by zero'
                    if not _1624:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2968 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3098 = mem[_2968]
                    if not 0 / sub_5d98fc27:
                        _3554 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3554] = 26
                        mem[_3554 + 32] = 'SafeMath: division by zero'
                        if not sub_5a8c5d60:
                            revert with 0, 'SafeMath: division by zero', 0
                        _4049 = mem[64]
                        mem[64] = mem[64] + 672
                        mem[_4049] = eth.balance(sub_270bf52eAddress)
                        mem[_4049 + 32] = ext_call.return_data[0]
                        mem[_4049 + 64] = ext_call.return_data[0]
                        mem[_4049 + 96] = _1624
                        mem[_4049 + 128] = 0 / _1624
                        require ext_code.size(stor8)
                        staticcall stor8.getTotalRewardsDistributed() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4151 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4049 + 160] = mem[_4151]
                        require ext_code.size(stor8)
                        staticcall stor8.totalVolume() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4556 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4049 + 192] = mem[_4556]
                        mem[_4049 + 224] = _1296
                        mem[_4049 + 256] = _1388
                        mem[_4049 + 288] = _1296 + _1388
                        mem[mem[64] + 4] = sub_92b8b617Address
                        require ext_code.size(stor8)
                        staticcall stor8.0x70a08231 with:
                                gas gas_remaining wei
                               args sub_92b8b617Address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4948 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4049 + 320] = mem[_4948]
                        mem[_4049 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                        mem[_4049 + 384] = 0 / _476
                        mem[_4049 + 416] = 0 / sub_5d98fc27
                        mem[_4049 + 448] = 0 / sub_5a8c5d60
                        mem[_4049 + 480] = uint128(block.number)
                        require ext_code.size(stor8)
                        staticcall stor8.holders() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5415 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4049 + 512] = mem[_5415 + 28 len 4]
                        mem[_4049 + 544] = decimals
                        mem[_4049 + 576] = uint8(stor21.field_168)
                        mem[_4049 + 608] = uint8(_701)
                        mem[_4049 + 640] = 8
                        mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        mem[mem[64] + 64] = ext_call.return_data[0]
                        mem[mem[64] + 96] = _1624
                        mem[mem[64] + 128] = 0 / _1624
                        mem[mem[64] + 160] = mem[_4049 + 160]
                        mem[mem[64] + 192] = mem[_4049 + 192]
                        mem[mem[64] + 224] = _1296
                        mem[mem[64] + 256] = _1388
                        mem[mem[64] + 288] = _1296 + _1388
                        mem[mem[64] + 320] = mem[_4049 + 320]
                        mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                        mem[mem[64] + 384] = 0 / _476
                        mem[mem[64] + 416] = 0 / sub_5d98fc27
                        mem[mem[64] + 448] = 0 / sub_5a8c5d60
                        mem[mem[64] + 480] = uint128(block.number)
                        mem[mem[64] + 512] = mem[_4049 + 540 len 4]
                        return eth.balance(sub_270bf52eAddress), 
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               _1624,
                               0 / _1624,
                               mem[mem[64] + 160 len 64],
                               _1296,
                               _1388,
                               _1296 + _1388,
                               mem[mem[64] + 320],
                               ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                               0 / _476,
                               0 / sub_5d98fc27,
                               0 / sub_5a8c5d60,
                               block.number << 128,
                               mem[mem[64] + 512],
                               uint8(stor21.field_0),
                               uint8(stor21.field_0),
                               _701 << 248,
                               8
                    if 0 / sub_5d98fc27 and mem[_2968] > -1 / 0 / sub_5d98fc27:
                        revert with 0, 17
                    if not 0 / sub_5d98fc27:
                        revert with 0, 18
                    if 0 / sub_5d98fc27 * mem[_2968] / 0 / sub_5d98fc27 != mem[_2968]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    _4011 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_4011] = 26
                    mem[_4011 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4484 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4484] = eth.balance(sub_270bf52eAddress)
                    mem[_4484 + 32] = ext_call.return_data[0]
                    mem[_4484 + 64] = ext_call.return_data[0]
                    mem[_4484 + 96] = _1624
                    mem[_4484 + 128] = 0 / _1624
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4651 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4484 + 160] = mem[_4651]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5011 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4484 + 192] = mem[_5011]
                    mem[_4484 + 224] = _1296
                    mem[_4484 + 256] = _1388
                    mem[_4484 + 288] = _1296 + _1388
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5495 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4484 + 320] = mem[_5495]
                    mem[_4484 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                    mem[_4484 + 384] = 0 / _476
                    mem[_4484 + 416] = 0 / sub_5d98fc27
                    mem[_4484 + 448] = 0 / sub_5d98fc27 * _3098 / sub_5a8c5d60
                    mem[_4484 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6005 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4484 + 512] = mem[_6005 + 28 len 4]
                    mem[_4484 + 544] = decimals
                    mem[_4484 + 576] = uint8(stor21.field_168)
                    mem[_4484 + 608] = uint8(_701)
                    mem[_4484 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1624
                    mem[mem[64] + 128] = 0 / _1624
                    mem[mem[64] + 160] = mem[_4484 + 160]
                    mem[mem[64] + 192] = mem[_4484 + 192]
                    mem[mem[64] + 224] = _1296
                    mem[mem[64] + 256] = _1388
                    mem[mem[64] + 288] = _1296 + _1388
                    mem[mem[64] + 320] = mem[_4484 + 320]
                    mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                    mem[mem[64] + 384] = 0 / _476
                    mem[mem[64] + 416] = 0 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / sub_5d98fc27 * _3098 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4484 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1624,
                           0 / _1624,
                           mem[mem[64] + 160 len 64],
                           _1296,
                           _1388,
                           _1296 + _1388,
                           mem[mem[64] + 320],
                           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                           0 / _476,
                           0 / sub_5d98fc27,
                           0 / sub_5d98fc27 * _3098 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _701 << 248,
                           8
                if _1972 - _1786 and 100 * 10^6 > -1 / _1972 - _1786:
                    revert with 0, 17
                if not _1972 - _1786:
                    revert with 0, 18
                if (100 * 10^6 * _1972) - (100 * 10^6 * _1786) / _1972 - _1786 != 100 * 10^6:
                    revert with 0, 'SafeMath: multiplication overflow'
                _2794 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2794] = 26
                mem[_2794 + 32] = 'SafeMath: division by zero'
                if not _1624:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3334 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3551 = mem[_3334]
                if not 0 / sub_5d98fc27:
                    _4010 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_4010] = 26
                    mem[_4010 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4480 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4480] = eth.balance(sub_270bf52eAddress)
                    mem[_4480 + 32] = ext_call.return_data[0]
                    mem[_4480 + 64] = ext_call.return_data[0]
                    mem[_4480 + 96] = _1624
                    mem[_4480 + 128] = (100 * 10^6 * _1972) - (100 * 10^6 * _1786) / _1624
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4650 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4480 + 160] = mem[_4650]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5010 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4480 + 192] = mem[_5010]
                    mem[_4480 + 224] = _1296
                    mem[_4480 + 256] = _1388
                    mem[_4480 + 288] = _1296 + _1388
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5494 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4480 + 320] = mem[_5494]
                    mem[_4480 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                    mem[_4480 + 384] = 0 / _476
                    mem[_4480 + 416] = 0 / sub_5d98fc27
                    mem[_4480 + 448] = 0 / sub_5a8c5d60
                    mem[_4480 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6004 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4480 + 512] = mem[_6004 + 28 len 4]
                    mem[_4480 + 544] = decimals
                    mem[_4480 + 576] = uint8(stor21.field_168)
                    mem[_4480 + 608] = uint8(_701)
                    mem[_4480 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1624
                    mem[mem[64] + 128] = (100 * 10^6 * _1972) - (100 * 10^6 * _1786) / _1624
                    mem[mem[64] + 160] = mem[_4480 + 160]
                    mem[mem[64] + 192] = mem[_4480 + 192]
                    mem[mem[64] + 224] = _1296
                    mem[mem[64] + 256] = _1388
                    mem[mem[64] + 288] = _1296 + _1388
                    mem[mem[64] + 320] = mem[_4480 + 320]
                    mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                    mem[mem[64] + 384] = 0 / _476
                    mem[mem[64] + 416] = 0 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4480 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1624,
                           (100 * 10^6 * _1972) - (100 * 10^6 * _1786) / _1624,
                           mem[mem[64] + 160 len 64],
                           _1296,
                           _1388,
                           _1296 + _1388,
                           mem[mem[64] + 320],
                           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                           0 / _476,
                           0 / sub_5d98fc27,
                           0 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _701 << 248,
                           8
                if 0 / sub_5d98fc27 and mem[_3334] > -1 / 0 / sub_5d98fc27:
                    revert with 0, 17
                if not 0 / sub_5d98fc27:
                    revert with 0, 18
                if 0 / sub_5d98fc27 * mem[_3334] / 0 / sub_5d98fc27 != mem[_3334]:
                    revert with 0, 'SafeMath: multiplication overflow'
                _4420 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4420] = 26
                mem[_4420 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4944 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4944] = eth.balance(sub_270bf52eAddress)
                mem[_4944 + 32] = ext_call.return_data[0]
                mem[_4944 + 64] = ext_call.return_data[0]
                mem[_4944 + 96] = _1624
                mem[_4944 + 128] = (100 * 10^6 * _1972) - (100 * 10^6 * _1786) / _1624
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5193 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4944 + 160] = mem[_5193]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5541 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4944 + 192] = mem[_5541]
                mem[_4944 + 224] = _1296
                mem[_4944 + 256] = _1388
                mem[_4944 + 288] = _1296 + _1388
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6061 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4944 + 320] = mem[_6061]
                mem[_4944 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[_4944 + 384] = 0 / _476
                mem[_4944 + 416] = 0 / sub_5d98fc27
                mem[_4944 + 448] = 0 / sub_5d98fc27 * _3551 / sub_5a8c5d60
                mem[_4944 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6668 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4944 + 512] = mem[_6668 + 28 len 4]
                mem[_4944 + 544] = decimals
                mem[_4944 + 576] = uint8(stor21.field_168)
                mem[_4944 + 608] = uint8(_701)
                mem[_4944 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _1624
                mem[mem[64] + 128] = (100 * 10^6 * _1972) - (100 * 10^6 * _1786) / _1624
                mem[mem[64] + 160] = mem[_4944 + 160]
                mem[mem[64] + 192] = mem[_4944 + 192]
                mem[mem[64] + 224] = _1296
                mem[mem[64] + 256] = _1388
                mem[mem[64] + 288] = _1296 + _1388
                mem[mem[64] + 320] = mem[_4944 + 320]
                mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[mem[64] + 384] = 0 / _476
                mem[mem[64] + 416] = 0 / sub_5d98fc27
                mem[mem[64] + 448] = 0 / sub_5d98fc27 * _3551 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4944 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _1624,
                       (100 * 10^6 * _1972) - (100 * 10^6 * _1786) / _1624,
                       mem[mem[64] + 160 len 64],
                       _1296,
                       _1388,
                       _1296 + _1388,
                       mem[mem[64] + 320],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       0 / _476,
                       0 / sub_5d98fc27,
                       0 / sub_5d98fc27 * _3551 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _701 << 248,
                       8
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and 0 / _476 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != 0 / _476:
                revert with 0, 'SafeMath: multiplication overflow'
            _1173 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1173] = 26
            mem[_1173 + 32] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.0xb9e5a03b with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1369 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1409 = mem[_1369]
            require ext_code.size(stor8)
            staticcall stor8.0x41e70fa6 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1462 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1506 = mem[_1462]
            if _1409 > !mem[_1462]:
                revert with 0, 17
            if _1409 + mem[_1462] < _1409:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(stor8)
            staticcall stor8.getTotalAmountStaked() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1764 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1823 = mem[_1764]
            mem[mem[64] + 4] = sub_7c68e584Address
            require ext_code.size(stor10)
            staticcall stor10.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_7c68e584Address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1948 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2007 = mem[_1948]
            require ext_code.size(stor10)
            staticcall stor10.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2106 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2182 = mem[_2106]
            _2243 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2243] = 30
            mem[_2243 + 32] = 'SafeMath: subtraction overflow'
            if _2007 > _2182:
                revert with 0, 'SafeMath: subtraction overflow', 0
            if _2182 < _2007:
                revert with 0, 17
            if not _2182 - _2007:
                _2793 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2793] = 26
                mem[_2793 + 32] = 'SafeMath: division by zero'
                if not _1823:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3333 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3548 = mem[_3333]
                if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                    _4009 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_4009] = 26
                    mem[_4009 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4476 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4476] = eth.balance(sub_270bf52eAddress)
                    mem[_4476 + 32] = ext_call.return_data[0]
                    mem[_4476 + 64] = ext_call.return_data[0]
                    mem[_4476 + 96] = _1823
                    mem[_4476 + 128] = 0 / _1823
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4649 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4476 + 160] = mem[_4649]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5009 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4476 + 192] = mem[_5009]
                    mem[_4476 + 224] = _1409
                    mem[_4476 + 256] = _1506
                    mem[_4476 + 288] = _1409 + _1506
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5493 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4476 + 320] = mem[_5493]
                    mem[_4476 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                    mem[_4476 + 384] = 0 / _476
                    mem[_4476 + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                    mem[_4476 + 448] = 0 / sub_5a8c5d60
                    mem[_4476 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6003 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4476 + 512] = mem[_6003 + 28 len 4]
                    mem[_4476 + 544] = decimals
                    mem[_4476 + 576] = uint8(stor21.field_168)
                    mem[_4476 + 608] = uint8(_701)
                    mem[_4476 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1823
                    mem[mem[64] + 128] = 0 / _1823
                    mem[mem[64] + 160] = mem[_4476 + 160]
                    mem[mem[64] + 192] = mem[_4476 + 192]
                    mem[mem[64] + 224] = _1409
                    mem[mem[64] + 256] = _1506
                    mem[mem[64] + 288] = _1409 + _1506
                    mem[mem[64] + 320] = mem[_4476 + 320]
                    mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                    mem[mem[64] + 384] = 0 / _476
                    mem[mem[64] + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4476 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1823,
                           0 / _1823,
                           mem[mem[64] + 160 len 64],
                           _1409,
                           _1506,
                           _1409 + _1506,
                           mem[mem[64] + 320],
                           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                           0 / _476,
                           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27,
                           0 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _701 << 248,
                           8
                if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 and mem[_3333] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                    revert with 0, 17
                if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                    revert with 0, 18
                if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * mem[_3333] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 != mem[_3333]:
                    revert with 0, 'SafeMath: multiplication overflow'
                _4419 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4419] = 26
                mem[_4419 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4940 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4940] = eth.balance(sub_270bf52eAddress)
                mem[_4940 + 32] = ext_call.return_data[0]
                mem[_4940 + 64] = ext_call.return_data[0]
                mem[_4940 + 96] = _1823
                mem[_4940 + 128] = 0 / _1823
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5192 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4940 + 160] = mem[_5192]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5540 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4940 + 192] = mem[_5540]
                mem[_4940 + 224] = _1409
                mem[_4940 + 256] = _1506
                mem[_4940 + 288] = _1409 + _1506
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6060 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4940 + 320] = mem[_6060]
                mem[_4940 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[_4940 + 384] = 0 / _476
                mem[_4940 + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                mem[_4940 + 448] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _3548 / sub_5a8c5d60
                mem[_4940 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6667 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4940 + 512] = mem[_6667 + 28 len 4]
                mem[_4940 + 544] = decimals
                mem[_4940 + 576] = uint8(stor21.field_168)
                mem[_4940 + 608] = uint8(_701)
                mem[_4940 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _1823
                mem[mem[64] + 128] = 0 / _1823
                mem[mem[64] + 160] = mem[_4940 + 160]
                mem[mem[64] + 192] = mem[_4940 + 192]
                mem[mem[64] + 224] = _1409
                mem[mem[64] + 256] = _1506
                mem[mem[64] + 288] = _1409 + _1506
                mem[mem[64] + 320] = mem[_4940 + 320]
                mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[mem[64] + 384] = 0 / _476
                mem[mem[64] + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                mem[mem[64] + 448] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _3548 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4940 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _1823,
                       0 / _1823,
                       mem[mem[64] + 160 len 64],
                       _1409,
                       _1506,
                       _1409 + _1506,
                       mem[mem[64] + 320],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       0 / _476,
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27,
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _3548 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _701 << 248,
                       8
            if _2182 - _2007 and 100 * 10^6 > -1 / _2182 - _2007:
                revert with 0, 17
            if not _2182 - _2007:
                revert with 0, 18
            if (100 * 10^6 * _2182) - (100 * 10^6 * _2007) / _2182 - _2007 != 100 * 10^6:
                revert with 0, 'SafeMath: multiplication overflow'
            _3176 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3176] = 26
            mem[_3176 + 32] = 'SafeMath: division by zero'
            if not _1823:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3748 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _4006 = mem[_3748]
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                _4418 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4418] = 26
                mem[_4418 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4936 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4936] = eth.balance(sub_270bf52eAddress)
                mem[_4936 + 32] = ext_call.return_data[0]
                mem[_4936 + 64] = ext_call.return_data[0]
                mem[_4936 + 96] = _1823
                mem[_4936 + 128] = (100 * 10^6 * _2182) - (100 * 10^6 * _2007) / _1823
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5191 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4936 + 160] = mem[_5191]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5539 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4936 + 192] = mem[_5539]
                mem[_4936 + 224] = _1409
                mem[_4936 + 256] = _1506
                mem[_4936 + 288] = _1409 + _1506
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6059 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4936 + 320] = mem[_6059]
                mem[_4936 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[_4936 + 384] = 0 / _476
                mem[_4936 + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                mem[_4936 + 448] = 0 / sub_5a8c5d60
                mem[_4936 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6666 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4936 + 512] = mem[_6666 + 28 len 4]
                mem[_4936 + 544] = decimals
                mem[_4936 + 576] = uint8(stor21.field_168)
                mem[_4936 + 608] = uint8(_701)
                mem[_4936 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _1823
                mem[mem[64] + 128] = (100 * 10^6 * _2182) - (100 * 10^6 * _2007) / _1823
                mem[mem[64] + 160] = mem[_4936 + 160]
                mem[mem[64] + 192] = mem[_4936 + 192]
                mem[mem[64] + 224] = _1409
                mem[mem[64] + 256] = _1506
                mem[mem[64] + 288] = _1409 + _1506
                mem[mem[64] + 320] = mem[_4936 + 320]
                mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[mem[64] + 384] = 0 / _476
                mem[mem[64] + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
                mem[mem[64] + 448] = 0 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4936 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _1823,
                       (100 * 10^6 * _2182) - (100 * 10^6 * _2007) / _1823,
                       mem[mem[64] + 160 len 64],
                       _1409,
                       _1506,
                       _1409 + _1506,
                       mem[mem[64] + 320],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       0 / _476,
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27,
                       0 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _701 << 248,
                       8
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 and mem[_3748] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                revert with 0, 17
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * mem[_3748] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 != mem[_3748]:
                revert with 0, 'SafeMath: multiplication overflow'
            _4856 = mem[64]
            mem[64] = mem[64] + 64
            mem[_4856] = 26
            mem[_4856 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _5489 = mem[64]
            mem[64] = mem[64] + 672
            mem[_5489] = eth.balance(sub_270bf52eAddress)
            mem[_5489 + 32] = ext_call.return_data[0]
            mem[_5489 + 64] = ext_call.return_data[0]
            mem[_5489 + 96] = _1823
            mem[_5489 + 128] = (100 * 10^6 * _2182) - (100 * 10^6 * _2007) / _1823
            require ext_code.size(stor8)
            staticcall stor8.getTotalRewardsDistributed() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5721 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5489 + 160] = mem[_5721]
            require ext_code.size(stor8)
            staticcall stor8.totalVolume() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6087 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5489 + 192] = mem[_6087]
            mem[_5489 + 224] = _1409
            mem[_5489 + 256] = _1506
            mem[_5489 + 288] = _1409 + _1506
            mem[mem[64] + 4] = sub_92b8b617Address
            require ext_code.size(stor8)
            staticcall stor8.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_92b8b617Address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6675 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5489 + 320] = mem[_6675]
            mem[_5489 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
            mem[_5489 + 384] = 0 / _476
            mem[_5489 + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
            mem[_5489 + 448] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _4006 / sub_5a8c5d60
            mem[_5489 + 480] = uint128(block.number)
            require ext_code.size(stor8)
            staticcall stor8.holders() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7523 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5489 + 512] = mem[_7523 + 28 len 4]
            mem[_5489 + 544] = decimals
            mem[_5489 + 576] = uint8(stor21.field_168)
            mem[_5489 + 608] = uint8(_701)
            mem[_5489 + 640] = 8
            mem[mem[64]] = eth.balance(sub_270bf52eAddress)
            mem[mem[64] + 32] = ext_call.return_data[0]
            mem[mem[64] + 64] = ext_call.return_data[0]
            mem[mem[64] + 96] = _1823
            mem[mem[64] + 128] = (100 * 10^6 * _2182) - (100 * 10^6 * _2007) / _1823
            mem[mem[64] + 160] = mem[_5489 + 160]
            mem[mem[64] + 192] = mem[_5489 + 192]
            mem[mem[64] + 224] = _1409
            mem[mem[64] + 256] = _1506
            mem[mem[64] + 288] = _1409 + _1506
            mem[mem[64] + 320] = mem[_5489 + 320]
            mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
            mem[mem[64] + 384] = 0 / _476
            mem[mem[64] + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27
            mem[mem[64] + 448] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _4006 / sub_5a8c5d60
            mem[mem[64] + 480] = uint128(block.number)
            mem[mem[64] + 512] = mem[_5489 + 540 len 4]
            return eth.balance(sub_270bf52eAddress), 
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   _1823,
                   (100 * 10^6 * _2182) - (100 * 10^6 * _2007) / _1823,
                   mem[mem[64] + 160 len 64],
                   _1409,
                   _1506,
                   _1409 + _1506,
                   mem[mem[64] + 320],
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                   0 / _476,
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27,
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _476 / sub_5d98fc27 * _4006 / sub_5a8c5d60,
                   block.number << 128,
                   mem[mem[64] + 512],
                   uint8(stor21.field_0),
                   uint8(stor21.field_0),
                   _701 << 248,
                   8
        if mem[_493] and sub_5d98fc27 > -1 / mem[_493]:
            revert with 0, 17
        if not mem[_493]:
            revert with 0, 18
        if mem[_493] * sub_5d98fc27 / mem[_493] != sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        _638 = mem[64]
        mem[64] = mem[64] + 64
        mem[_638] = 26
        mem[_638 + 32] = 'SafeMath: division by zero'
        if not _476:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(stor21.field_0))
        staticcall address(stor21.field_0).0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _758 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _787 = mem[_758]
        require mem[_758] == mem[_758 + 31 len 1]
        if not ext_call.return_data[0]:
            _903 = mem[64]
            mem[64] = mem[64] + 64
            mem[_903] = 26
            mem[_903 + 32] = 'SafeMath: division by zero'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / ext_call.return_data[0]:
                _1050 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1050] = 26
                mem[_1050 + 32] = 'SafeMath: division by zero'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0xb9e5a03b with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1250 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1295 = mem[_1250]
                require ext_code.size(stor8)
                staticcall stor8.0x41e70fa6 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1348 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1385 = mem[_1348]
                if _1295 > !mem[_1348]:
                    revert with 0, 17
                if _1295 + mem[_1348] < _1295:
                    revert with 0, 'SafeMath: addition overflow'
                require ext_code.size(stor8)
                staticcall stor8.getTotalAmountStaked() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1584 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1623 = mem[_1584]
                mem[mem[64] + 4] = sub_7c68e584Address
                require ext_code.size(stor10)
                staticcall stor10.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_7c68e584Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1741 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1785 = mem[_1741]
                require ext_code.size(stor10)
                staticcall stor10.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1896 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1971 = mem[_1896]
                _2036 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2036] = 30
                mem[_2036 + 32] = 'SafeMath: subtraction overflow'
                if _1785 > _1971:
                    revert with 0, 'SafeMath: subtraction overflow', 0
                if _1971 < _1785:
                    revert with 0, 17
                if not _1971 - _1785:
                    _2479 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_2479] = 26
                    mem[_2479 + 32] = 'SafeMath: division by zero'
                    if not _1623:
                        revert with 0, 'SafeMath: division by zero', 0
                    require ext_code.size(stor8)
                    staticcall stor8.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _2967 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3094 = mem[_2967]
                    if not 0 / sub_5d98fc27:
                        _3547 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_3547] = 26
                        mem[_3547 + 32] = 'SafeMath: division by zero'
                        if not sub_5a8c5d60:
                            revert with 0, 'SafeMath: division by zero', 0
                        _4045 = mem[64]
                        mem[64] = mem[64] + 672
                        mem[_4045] = eth.balance(sub_270bf52eAddress)
                        mem[_4045 + 32] = ext_call.return_data[0]
                        mem[_4045 + 64] = ext_call.return_data[0]
                        mem[_4045 + 96] = _1623
                        mem[_4045 + 128] = 0 / _1623
                        require ext_code.size(stor8)
                        staticcall stor8.getTotalRewardsDistributed() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4150 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4045 + 160] = mem[_4150]
                        require ext_code.size(stor8)
                        staticcall stor8.totalVolume() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4552 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4045 + 192] = mem[_4552]
                        mem[_4045 + 224] = _1295
                        mem[_4045 + 256] = _1385
                        mem[_4045 + 288] = _1295 + _1385
                        mem[mem[64] + 4] = sub_92b8b617Address
                        require ext_code.size(stor8)
                        staticcall stor8.0x70a08231 with:
                                gas gas_remaining wei
                               args sub_92b8b617Address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4935 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4045 + 320] = mem[_4935]
                        mem[_4045 + 352] = 0 / ext_call.return_data[0]
                        mem[_4045 + 384] = _508 * sub_5d98fc27 / _476
                        mem[_4045 + 416] = 0 / sub_5d98fc27
                        mem[_4045 + 448] = 0 / sub_5a8c5d60
                        mem[_4045 + 480] = uint128(block.number)
                        require ext_code.size(stor8)
                        staticcall stor8.holders() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5408 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_4045 + 512] = mem[_5408 + 28 len 4]
                        mem[_4045 + 544] = decimals
                        mem[_4045 + 576] = uint8(stor21.field_168)
                        mem[_4045 + 608] = uint8(_787)
                        mem[_4045 + 640] = 8
                        mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        mem[mem[64] + 64] = ext_call.return_data[0]
                        mem[mem[64] + 96] = _1623
                        mem[mem[64] + 128] = 0 / _1623
                        mem[mem[64] + 160] = mem[_4045 + 160]
                        mem[mem[64] + 192] = mem[_4045 + 192]
                        mem[mem[64] + 224] = _1295
                        mem[mem[64] + 256] = _1385
                        mem[mem[64] + 288] = _1295 + _1385
                        mem[mem[64] + 320] = mem[_4045 + 320]
                        mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                        mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                        mem[mem[64] + 416] = 0 / sub_5d98fc27
                        mem[mem[64] + 448] = 0 / sub_5a8c5d60
                        mem[mem[64] + 480] = uint128(block.number)
                        mem[mem[64] + 512] = mem[_4045 + 540 len 4]
                        return eth.balance(sub_270bf52eAddress), 
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               _1623,
                               0 / _1623,
                               mem[mem[64] + 160 len 64],
                               _1295,
                               _1385,
                               _1295 + _1385,
                               mem[mem[64] + 320],
                               0 / ext_call.return_data[0],
                               _508 * sub_5d98fc27 / _476,
                               0 / sub_5d98fc27,
                               0 / sub_5a8c5d60,
                               block.number << 128,
                               mem[mem[64] + 512],
                               uint8(stor21.field_0),
                               uint8(stor21.field_0),
                               _787 << 248,
                               8
                    if 0 / sub_5d98fc27 and mem[_2967] > -1 / 0 / sub_5d98fc27:
                        revert with 0, 17
                    if not 0 / sub_5d98fc27:
                        revert with 0, 18
                    if 0 / sub_5d98fc27 * mem[_2967] / 0 / sub_5d98fc27 != mem[_2967]:
                        revert with 0, 'SafeMath: multiplication overflow'
                    _4005 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_4005] = 26
                    mem[_4005 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4472 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4472] = eth.balance(sub_270bf52eAddress)
                    mem[_4472 + 32] = ext_call.return_data[0]
                    mem[_4472 + 64] = ext_call.return_data[0]
                    mem[_4472 + 96] = _1623
                    mem[_4472 + 128] = 0 / _1623
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4648 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4472 + 160] = mem[_4648]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5007 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4472 + 192] = mem[_5007]
                    mem[_4472 + 224] = _1295
                    mem[_4472 + 256] = _1385
                    mem[_4472 + 288] = _1295 + _1385
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5488 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4472 + 320] = mem[_5488]
                    mem[_4472 + 352] = 0 / ext_call.return_data[0]
                    mem[_4472 + 384] = _508 * sub_5d98fc27 / _476
                    mem[_4472 + 416] = 0 / sub_5d98fc27
                    mem[_4472 + 448] = 0 / sub_5d98fc27 * _3094 / sub_5a8c5d60
                    mem[_4472 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6000 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4472 + 512] = mem[_6000 + 28 len 4]
                    mem[_4472 + 544] = decimals
                    mem[_4472 + 576] = uint8(stor21.field_168)
                    mem[_4472 + 608] = uint8(_787)
                    mem[_4472 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1623
                    mem[mem[64] + 128] = 0 / _1623
                    mem[mem[64] + 160] = mem[_4472 + 160]
                    mem[mem[64] + 192] = mem[_4472 + 192]
                    mem[mem[64] + 224] = _1295
                    mem[mem[64] + 256] = _1385
                    mem[mem[64] + 288] = _1295 + _1385
                    mem[mem[64] + 320] = mem[_4472 + 320]
                    mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                    mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                    mem[mem[64] + 416] = 0 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / sub_5d98fc27 * _3094 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4472 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1623,
                           0 / _1623,
                           mem[mem[64] + 160 len 64],
                           _1295,
                           _1385,
                           _1295 + _1385,
                           mem[mem[64] + 320],
                           0 / ext_call.return_data[0],
                           _508 * sub_5d98fc27 / _476,
                           0 / sub_5d98fc27,
                           0 / sub_5d98fc27 * _3094 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _787 << 248,
                           8
                if _1971 - _1785 and 100 * 10^6 > -1 / _1971 - _1785:
                    revert with 0, 17
                if not _1971 - _1785:
                    revert with 0, 18
                if (100 * 10^6 * _1971) - (100 * 10^6 * _1785) / _1971 - _1785 != 100 * 10^6:
                    revert with 0, 'SafeMath: multiplication overflow'
                _2792 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2792] = 26
                mem[_2792 + 32] = 'SafeMath: division by zero'
                if not _1623:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3332 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3544 = mem[_3332]
                if not 0 / sub_5d98fc27:
                    _4004 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_4004] = 26
                    mem[_4004 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4468 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4468] = eth.balance(sub_270bf52eAddress)
                    mem[_4468 + 32] = ext_call.return_data[0]
                    mem[_4468 + 64] = ext_call.return_data[0]
                    mem[_4468 + 96] = _1623
                    mem[_4468 + 128] = (100 * 10^6 * _1971) - (100 * 10^6 * _1785) / _1623
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4647 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4468 + 160] = mem[_4647]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5006 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4468 + 192] = mem[_5006]
                    mem[_4468 + 224] = _1295
                    mem[_4468 + 256] = _1385
                    mem[_4468 + 288] = _1295 + _1385
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5487 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4468 + 320] = mem[_5487]
                    mem[_4468 + 352] = 0 / ext_call.return_data[0]
                    mem[_4468 + 384] = _508 * sub_5d98fc27 / _476
                    mem[_4468 + 416] = 0 / sub_5d98fc27
                    mem[_4468 + 448] = 0 / sub_5a8c5d60
                    mem[_4468 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5999 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4468 + 512] = mem[_5999 + 28 len 4]
                    mem[_4468 + 544] = decimals
                    mem[_4468 + 576] = uint8(stor21.field_168)
                    mem[_4468 + 608] = uint8(_787)
                    mem[_4468 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1623
                    mem[mem[64] + 128] = (100 * 10^6 * _1971) - (100 * 10^6 * _1785) / _1623
                    mem[mem[64] + 160] = mem[_4468 + 160]
                    mem[mem[64] + 192] = mem[_4468 + 192]
                    mem[mem[64] + 224] = _1295
                    mem[mem[64] + 256] = _1385
                    mem[mem[64] + 288] = _1295 + _1385
                    mem[mem[64] + 320] = mem[_4468 + 320]
                    mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                    mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                    mem[mem[64] + 416] = 0 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4468 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1623,
                           (100 * 10^6 * _1971) - (100 * 10^6 * _1785) / _1623,
                           mem[mem[64] + 160 len 64],
                           _1295,
                           _1385,
                           _1295 + _1385,
                           mem[mem[64] + 320],
                           0 / ext_call.return_data[0],
                           _508 * sub_5d98fc27 / _476,
                           0 / sub_5d98fc27,
                           0 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _787 << 248,
                           8
                if 0 / sub_5d98fc27 and mem[_3332] > -1 / 0 / sub_5d98fc27:
                    revert with 0, 17
                if not 0 / sub_5d98fc27:
                    revert with 0, 18
                if 0 / sub_5d98fc27 * mem[_3332] / 0 / sub_5d98fc27 != mem[_3332]:
                    revert with 0, 'SafeMath: multiplication overflow'
                _4415 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4415] = 26
                mem[_4415 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4931 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4931] = eth.balance(sub_270bf52eAddress)
                mem[_4931 + 32] = ext_call.return_data[0]
                mem[_4931 + 64] = ext_call.return_data[0]
                mem[_4931 + 96] = _1623
                mem[_4931 + 128] = (100 * 10^6 * _1971) - (100 * 10^6 * _1785) / _1623
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5189 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4931 + 160] = mem[_5189]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5537 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4931 + 192] = mem[_5537]
                mem[_4931 + 224] = _1295
                mem[_4931 + 256] = _1385
                mem[_4931 + 288] = _1295 + _1385
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6058 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4931 + 320] = mem[_6058]
                mem[_4931 + 352] = 0 / ext_call.return_data[0]
                mem[_4931 + 384] = _508 * sub_5d98fc27 / _476
                mem[_4931 + 416] = 0 / sub_5d98fc27
                mem[_4931 + 448] = 0 / sub_5d98fc27 * _3544 / sub_5a8c5d60
                mem[_4931 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6665 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4931 + 512] = mem[_6665 + 28 len 4]
                mem[_4931 + 544] = decimals
                mem[_4931 + 576] = uint8(stor21.field_168)
                mem[_4931 + 608] = uint8(_787)
                mem[_4931 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _1623
                mem[mem[64] + 128] = (100 * 10^6 * _1971) - (100 * 10^6 * _1785) / _1623
                mem[mem[64] + 160] = mem[_4931 + 160]
                mem[mem[64] + 192] = mem[_4931 + 192]
                mem[mem[64] + 224] = _1295
                mem[mem[64] + 256] = _1385
                mem[mem[64] + 288] = _1295 + _1385
                mem[mem[64] + 320] = mem[_4931 + 320]
                mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                mem[mem[64] + 416] = 0 / sub_5d98fc27
                mem[mem[64] + 448] = 0 / sub_5d98fc27 * _3544 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4931 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _1623,
                       (100 * 10^6 * _1971) - (100 * 10^6 * _1785) / _1623,
                       mem[mem[64] + 160 len 64],
                       _1295,
                       _1385,
                       _1295 + _1385,
                       mem[mem[64] + 320],
                       0 / ext_call.return_data[0],
                       _508 * sub_5d98fc27 / _476,
                       0 / sub_5d98fc27,
                       0 / sub_5d98fc27 * _3544 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _787 << 248,
                       8
            if 0 / ext_call.return_data[0] and _508 * sub_5d98fc27 / _476 > -1 / 0 / ext_call.return_data[0]:
                revert with 0, 17
            if not 0 / ext_call.return_data[0]:
                revert with 0, 18
            if 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / 0 / ext_call.return_data[0] != _508 * sub_5d98fc27 / _476:
                revert with 0, 'SafeMath: multiplication overflow'
            _1172 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1172] = 26
            mem[_1172 + 32] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.0xb9e5a03b with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1368 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1408 = mem[_1368]
            require ext_code.size(stor8)
            staticcall stor8.0x41e70fa6 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1461 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1504 = mem[_1461]
            if _1408 > !mem[_1461]:
                revert with 0, 17
            if _1408 + mem[_1461] < _1408:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(stor8)
            staticcall stor8.getTotalAmountStaked() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1763 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1820 = mem[_1763]
            mem[mem[64] + 4] = sub_7c68e584Address
            require ext_code.size(stor10)
            staticcall stor10.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_7c68e584Address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1947 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2006 = mem[_1947]
            require ext_code.size(stor10)
            staticcall stor10.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2104 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2180 = mem[_2104]
            _2242 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2242] = 30
            mem[_2242 + 32] = 'SafeMath: subtraction overflow'
            if _2006 > _2180:
                revert with 0, 'SafeMath: subtraction overflow', 0
            if _2180 < _2006:
                revert with 0, 17
            if not _2180 - _2006:
                _2791 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2791] = 26
                mem[_2791 + 32] = 'SafeMath: division by zero'
                if not _1820:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3331 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3541 = mem[_3331]
                if not 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
                    _4003 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_4003] = 26
                    mem[_4003 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4464 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4464] = eth.balance(sub_270bf52eAddress)
                    mem[_4464 + 32] = ext_call.return_data[0]
                    mem[_4464 + 64] = ext_call.return_data[0]
                    mem[_4464 + 96] = _1820
                    mem[_4464 + 128] = 0 / _1820
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4646 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4464 + 160] = mem[_4646]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5005 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4464 + 192] = mem[_5005]
                    mem[_4464 + 224] = _1408
                    mem[_4464 + 256] = _1504
                    mem[_4464 + 288] = _1408 + _1504
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5486 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4464 + 320] = mem[_5486]
                    mem[_4464 + 352] = 0 / ext_call.return_data[0]
                    mem[_4464 + 384] = _508 * sub_5d98fc27 / _476
                    mem[_4464 + 416] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
                    mem[_4464 + 448] = 0 / sub_5a8c5d60
                    mem[_4464 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5998 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4464 + 512] = mem[_5998 + 28 len 4]
                    mem[_4464 + 544] = decimals
                    mem[_4464 + 576] = uint8(stor21.field_168)
                    mem[_4464 + 608] = uint8(_787)
                    mem[_4464 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1820
                    mem[mem[64] + 128] = 0 / _1820
                    mem[mem[64] + 160] = mem[_4464 + 160]
                    mem[mem[64] + 192] = mem[_4464 + 192]
                    mem[mem[64] + 224] = _1408
                    mem[mem[64] + 256] = _1504
                    mem[mem[64] + 288] = _1408 + _1504
                    mem[mem[64] + 320] = mem[_4464 + 320]
                    mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                    mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                    mem[mem[64] + 416] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4464 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1820,
                           0 / _1820,
                           mem[mem[64] + 160 len 64],
                           _1408,
                           _1504,
                           _1408 + _1504,
                           mem[mem[64] + 320],
                           0 / ext_call.return_data[0],
                           _508 * sub_5d98fc27 / _476,
                           0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27,
                           0 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _787 << 248,
                           8
                if 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 and mem[_3331] > -1 / 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
                    revert with 0, 17
                if not 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
                    revert with 0, 18
                if 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * mem[_3331] / 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 != mem[_3331]:
                    revert with 0, 'SafeMath: multiplication overflow'
                _4414 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4414] = 26
                mem[_4414 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4927 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4927] = eth.balance(sub_270bf52eAddress)
                mem[_4927 + 32] = ext_call.return_data[0]
                mem[_4927 + 64] = ext_call.return_data[0]
                mem[_4927 + 96] = _1820
                mem[_4927 + 128] = 0 / _1820
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5188 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4927 + 160] = mem[_5188]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5536 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4927 + 192] = mem[_5536]
                mem[_4927 + 224] = _1408
                mem[_4927 + 256] = _1504
                mem[_4927 + 288] = _1408 + _1504
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6057 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4927 + 320] = mem[_6057]
                mem[_4927 + 352] = 0 / ext_call.return_data[0]
                mem[_4927 + 384] = _508 * sub_5d98fc27 / _476
                mem[_4927 + 416] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
                mem[_4927 + 448] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _3541 / sub_5a8c5d60
                mem[_4927 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6664 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4927 + 512] = mem[_6664 + 28 len 4]
                mem[_4927 + 544] = decimals
                mem[_4927 + 576] = uint8(stor21.field_168)
                mem[_4927 + 608] = uint8(_787)
                mem[_4927 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _1820
                mem[mem[64] + 128] = 0 / _1820
                mem[mem[64] + 160] = mem[_4927 + 160]
                mem[mem[64] + 192] = mem[_4927 + 192]
                mem[mem[64] + 224] = _1408
                mem[mem[64] + 256] = _1504
                mem[mem[64] + 288] = _1408 + _1504
                mem[mem[64] + 320] = mem[_4927 + 320]
                mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                mem[mem[64] + 416] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
                mem[mem[64] + 448] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _3541 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4927 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _1820,
                       0 / _1820,
                       mem[mem[64] + 160 len 64],
                       _1408,
                       _1504,
                       _1408 + _1504,
                       mem[mem[64] + 320],
                       0 / ext_call.return_data[0],
                       _508 * sub_5d98fc27 / _476,
                       0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27,
                       0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _3541 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _787 << 248,
                       8
            if _2180 - _2006 and 100 * 10^6 > -1 / _2180 - _2006:
                revert with 0, 17
            if not _2180 - _2006:
                revert with 0, 18
            if (100 * 10^6 * _2180) - (100 * 10^6 * _2006) / _2180 - _2006 != 100 * 10^6:
                revert with 0, 'SafeMath: multiplication overflow'
            _3175 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3175] = 26
            mem[_3175 + 32] = 'SafeMath: division by zero'
            if not _1820:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3745 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _4000 = mem[_3745]
            if not 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
                _4413 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4413] = 26
                mem[_4413 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4923 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4923] = eth.balance(sub_270bf52eAddress)
                mem[_4923 + 32] = ext_call.return_data[0]
                mem[_4923 + 64] = ext_call.return_data[0]
                mem[_4923 + 96] = _1820
                mem[_4923 + 128] = (100 * 10^6 * _2180) - (100 * 10^6 * _2006) / _1820
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5187 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4923 + 160] = mem[_5187]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5535 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4923 + 192] = mem[_5535]
                mem[_4923 + 224] = _1408
                mem[_4923 + 256] = _1504
                mem[_4923 + 288] = _1408 + _1504
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6056 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4923 + 320] = mem[_6056]
                mem[_4923 + 352] = 0 / ext_call.return_data[0]
                mem[_4923 + 384] = _508 * sub_5d98fc27 / _476
                mem[_4923 + 416] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
                mem[_4923 + 448] = 0 / sub_5a8c5d60
                mem[_4923 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6663 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4923 + 512] = mem[_6663 + 28 len 4]
                mem[_4923 + 544] = decimals
                mem[_4923 + 576] = uint8(stor21.field_168)
                mem[_4923 + 608] = uint8(_787)
                mem[_4923 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _1820
                mem[mem[64] + 128] = (100 * 10^6 * _2180) - (100 * 10^6 * _2006) / _1820
                mem[mem[64] + 160] = mem[_4923 + 160]
                mem[mem[64] + 192] = mem[_4923 + 192]
                mem[mem[64] + 224] = _1408
                mem[mem[64] + 256] = _1504
                mem[mem[64] + 288] = _1408 + _1504
                mem[mem[64] + 320] = mem[_4923 + 320]
                mem[mem[64] + 352] = 0 / ext_call.return_data[0]
                mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                mem[mem[64] + 416] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
                mem[mem[64] + 448] = 0 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4923 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _1820,
                       (100 * 10^6 * _2180) - (100 * 10^6 * _2006) / _1820,
                       mem[mem[64] + 160 len 64],
                       _1408,
                       _1504,
                       _1408 + _1504,
                       mem[mem[64] + 320],
                       0 / ext_call.return_data[0],
                       _508 * sub_5d98fc27 / _476,
                       0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27,
                       0 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _787 << 248,
                       8
            if 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 and mem[_3745] > -1 / 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
                revert with 0, 17
            if not 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
                revert with 0, 18
            if 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * mem[_3745] / 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 != mem[_3745]:
                revert with 0, 'SafeMath: multiplication overflow'
            _4849 = mem[64]
            mem[64] = mem[64] + 64
            mem[_4849] = 26
            mem[_4849 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _5482 = mem[64]
            mem[64] = mem[64] + 672
            mem[_5482] = eth.balance(sub_270bf52eAddress)
            mem[_5482 + 32] = ext_call.return_data[0]
            mem[_5482 + 64] = ext_call.return_data[0]
            mem[_5482 + 96] = _1820
            mem[_5482 + 128] = (100 * 10^6 * _2180) - (100 * 10^6 * _2006) / _1820
            require ext_code.size(stor8)
            staticcall stor8.getTotalRewardsDistributed() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5717 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5482 + 160] = mem[_5717]
            require ext_code.size(stor8)
            staticcall stor8.totalVolume() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6083 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5482 + 192] = mem[_6083]
            mem[_5482 + 224] = _1408
            mem[_5482 + 256] = _1504
            mem[_5482 + 288] = _1408 + _1504
            mem[mem[64] + 4] = sub_92b8b617Address
            require ext_code.size(stor8)
            staticcall stor8.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_92b8b617Address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6674 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5482 + 320] = mem[_6674]
            mem[_5482 + 352] = 0 / ext_call.return_data[0]
            mem[_5482 + 384] = _508 * sub_5d98fc27 / _476
            mem[_5482 + 416] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
            mem[_5482 + 448] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _4000 / sub_5a8c5d60
            mem[_5482 + 480] = uint128(block.number)
            require ext_code.size(stor8)
            staticcall stor8.holders() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7522 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5482 + 512] = mem[_7522 + 28 len 4]
            mem[_5482 + 544] = decimals
            mem[_5482 + 576] = uint8(stor21.field_168)
            mem[_5482 + 608] = uint8(_787)
            mem[_5482 + 640] = 8
            mem[mem[64]] = eth.balance(sub_270bf52eAddress)
            mem[mem[64] + 32] = ext_call.return_data[0]
            mem[mem[64] + 64] = ext_call.return_data[0]
            mem[mem[64] + 96] = _1820
            mem[mem[64] + 128] = (100 * 10^6 * _2180) - (100 * 10^6 * _2006) / _1820
            mem[mem[64] + 160] = mem[_5482 + 160]
            mem[mem[64] + 192] = mem[_5482 + 192]
            mem[mem[64] + 224] = _1408
            mem[mem[64] + 256] = _1504
            mem[mem[64] + 288] = _1408 + _1504
            mem[mem[64] + 320] = mem[_5482 + 320]
            mem[mem[64] + 352] = 0 / ext_call.return_data[0]
            mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
            mem[mem[64] + 416] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
            mem[mem[64] + 448] = 0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _4000 / sub_5a8c5d60
            mem[mem[64] + 480] = uint128(block.number)
            mem[mem[64] + 512] = mem[_5482 + 540 len 4]
            return eth.balance(sub_270bf52eAddress), 
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   _1820,
                   (100 * 10^6 * _2180) - (100 * 10^6 * _2006) / _1820,
                   mem[mem[64] + 160 len 64],
                   _1408,
                   _1504,
                   _1408 + _1504,
                   mem[mem[64] + 320],
                   0 / ext_call.return_data[0],
                   _508 * sub_5d98fc27 / _476,
                   0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27,
                   0 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _4000 / sub_5a8c5d60,
                   block.number << 128,
                   mem[mem[64] + 512],
                   uint8(stor21.field_0),
                   uint8(stor21.field_0),
                   _787 << 248,
                   8
        if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
            revert with 0, 'SafeMath: multiplication overflow'
        _963 = mem[64]
        mem[64] = mem[64] + 64
        mem[_963] = 26
        mem[_963 + 32] = 'SafeMath: division by zero'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            _1171 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1171] = 26
            mem[_1171 + 32] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.0xb9e5a03b with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1367 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1407 = mem[_1367]
            require ext_code.size(stor8)
            staticcall stor8.0x41e70fa6 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1460 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1503 = mem[_1460]
            if _1407 > !mem[_1460]:
                revert with 0, 17
            if _1407 + mem[_1460] < _1407:
                revert with 0, 'SafeMath: addition overflow'
            require ext_code.size(stor8)
            staticcall stor8.getTotalAmountStaked() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1762 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1819 = mem[_1762]
            mem[mem[64] + 4] = sub_7c68e584Address
            require ext_code.size(stor10)
            staticcall stor10.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_7c68e584Address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1946 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2005 = mem[_1946]
            require ext_code.size(stor10)
            staticcall stor10.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2103 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2179 = mem[_2103]
            _2241 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2241] = 30
            mem[_2241 + 32] = 'SafeMath: subtraction overflow'
            if _2005 > _2179:
                revert with 0, 'SafeMath: subtraction overflow', 0
            if _2179 < _2005:
                revert with 0, 17
            if not _2179 - _2005:
                _2790 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2790] = 26
                mem[_2790 + 32] = 'SafeMath: division by zero'
                if not _1819:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(stor8)
                staticcall stor8.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3330 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3538 = mem[_3330]
                if not 0 / sub_5d98fc27:
                    _3999 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_3999] = 26
                    mem[_3999 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _4460 = mem[64]
                    mem[64] = mem[64] + 672
                    mem[_4460] = eth.balance(sub_270bf52eAddress)
                    mem[_4460 + 32] = ext_call.return_data[0]
                    mem[_4460 + 64] = ext_call.return_data[0]
                    mem[_4460 + 96] = _1819
                    mem[_4460 + 128] = 0 / _1819
                    require ext_code.size(stor8)
                    staticcall stor8.getTotalRewardsDistributed() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _4645 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4460 + 160] = mem[_4645]
                    require ext_code.size(stor8)
                    staticcall stor8.totalVolume() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5003 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4460 + 192] = mem[_5003]
                    mem[_4460 + 224] = _1407
                    mem[_4460 + 256] = _1503
                    mem[_4460 + 288] = _1407 + _1503
                    mem[mem[64] + 4] = sub_92b8b617Address
                    require ext_code.size(stor8)
                    staticcall stor8.0x70a08231 with:
                            gas gas_remaining wei
                           args sub_92b8b617Address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5481 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4460 + 320] = mem[_5481]
                    mem[_4460 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                    mem[_4460 + 384] = _508 * sub_5d98fc27 / _476
                    mem[_4460 + 416] = 0 / sub_5d98fc27
                    mem[_4460 + 448] = 0 / sub_5a8c5d60
                    mem[_4460 + 480] = uint128(block.number)
                    require ext_code.size(stor8)
                    staticcall stor8.holders() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5995 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_4460 + 512] = mem[_5995 + 28 len 4]
                    mem[_4460 + 544] = decimals
                    mem[_4460 + 576] = uint8(stor21.field_168)
                    mem[_4460 + 608] = uint8(_787)
                    mem[_4460 + 640] = 8
                    mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                    mem[mem[64] + 32] = ext_call.return_data[0]
                    mem[mem[64] + 64] = ext_call.return_data[0]
                    mem[mem[64] + 96] = _1819
                    mem[mem[64] + 128] = 0 / _1819
                    mem[mem[64] + 160] = mem[_4460 + 160]
                    mem[mem[64] + 192] = mem[_4460 + 192]
                    mem[mem[64] + 224] = _1407
                    mem[mem[64] + 256] = _1503
                    mem[mem[64] + 288] = _1407 + _1503
                    mem[mem[64] + 320] = mem[_4460 + 320]
                    mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                    mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                    mem[mem[64] + 416] = 0 / sub_5d98fc27
                    mem[mem[64] + 448] = 0 / sub_5a8c5d60
                    mem[mem[64] + 480] = uint128(block.number)
                    mem[mem[64] + 512] = mem[_4460 + 540 len 4]
                    return eth.balance(sub_270bf52eAddress), 
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           _1819,
                           0 / _1819,
                           mem[mem[64] + 160 len 64],
                           _1407,
                           _1503,
                           _1407 + _1503,
                           mem[mem[64] + 320],
                           ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                           _508 * sub_5d98fc27 / _476,
                           0 / sub_5d98fc27,
                           0 / sub_5a8c5d60,
                           block.number << 128,
                           mem[mem[64] + 512],
                           uint8(stor21.field_0),
                           uint8(stor21.field_0),
                           _787 << 248,
                           8
                if 0 / sub_5d98fc27 and mem[_3330] > -1 / 0 / sub_5d98fc27:
                    revert with 0, 17
                if not 0 / sub_5d98fc27:
                    revert with 0, 18
                if 0 / sub_5d98fc27 * mem[_3330] / 0 / sub_5d98fc27 != mem[_3330]:
                    revert with 0, 'SafeMath: multiplication overflow'
                _4412 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4412] = 26
                mem[_4412 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4919 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4919] = eth.balance(sub_270bf52eAddress)
                mem[_4919 + 32] = ext_call.return_data[0]
                mem[_4919 + 64] = ext_call.return_data[0]
                mem[_4919 + 96] = _1819
                mem[_4919 + 128] = 0 / _1819
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5186 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4919 + 160] = mem[_5186]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5534 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4919 + 192] = mem[_5534]
                mem[_4919 + 224] = _1407
                mem[_4919 + 256] = _1503
                mem[_4919 + 288] = _1407 + _1503
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6055 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4919 + 320] = mem[_6055]
                mem[_4919 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[_4919 + 384] = _508 * sub_5d98fc27 / _476
                mem[_4919 + 416] = 0 / sub_5d98fc27
                mem[_4919 + 448] = 0 / sub_5d98fc27 * _3538 / sub_5a8c5d60
                mem[_4919 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6662 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4919 + 512] = mem[_6662 + 28 len 4]
                mem[_4919 + 544] = decimals
                mem[_4919 + 576] = uint8(stor21.field_168)
                mem[_4919 + 608] = uint8(_787)
                mem[_4919 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _1819
                mem[mem[64] + 128] = 0 / _1819
                mem[mem[64] + 160] = mem[_4919 + 160]
                mem[mem[64] + 192] = mem[_4919 + 192]
                mem[mem[64] + 224] = _1407
                mem[mem[64] + 256] = _1503
                mem[mem[64] + 288] = _1407 + _1503
                mem[mem[64] + 320] = mem[_4919 + 320]
                mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                mem[mem[64] + 416] = 0 / sub_5d98fc27
                mem[mem[64] + 448] = 0 / sub_5d98fc27 * _3538 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4919 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _1819,
                       0 / _1819,
                       mem[mem[64] + 160 len 64],
                       _1407,
                       _1503,
                       _1407 + _1503,
                       mem[mem[64] + 320],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       _508 * sub_5d98fc27 / _476,
                       0 / sub_5d98fc27,
                       0 / sub_5d98fc27 * _3538 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _787 << 248,
                       8
            if _2179 - _2005 and 100 * 10^6 > -1 / _2179 - _2005:
                revert with 0, 17
            if not _2179 - _2005:
                revert with 0, 18
            if (100 * 10^6 * _2179) - (100 * 10^6 * _2005) / _2179 - _2005 != 100 * 10^6:
                revert with 0, 'SafeMath: multiplication overflow'
            _3174 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3174] = 26
            mem[_3174 + 32] = 'SafeMath: division by zero'
            if not _1819:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3744 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3996 = mem[_3744]
            if not 0 / sub_5d98fc27:
                _4411 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4411] = 26
                mem[_4411 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4915 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4915] = eth.balance(sub_270bf52eAddress)
                mem[_4915 + 32] = ext_call.return_data[0]
                mem[_4915 + 64] = ext_call.return_data[0]
                mem[_4915 + 96] = _1819
                mem[_4915 + 128] = (100 * 10^6 * _2179) - (100 * 10^6 * _2005) / _1819
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5185 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4915 + 160] = mem[_5185]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5533 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4915 + 192] = mem[_5533]
                mem[_4915 + 224] = _1407
                mem[_4915 + 256] = _1503
                mem[_4915 + 288] = _1407 + _1503
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6054 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4915 + 320] = mem[_6054]
                mem[_4915 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[_4915 + 384] = _508 * sub_5d98fc27 / _476
                mem[_4915 + 416] = 0 / sub_5d98fc27
                mem[_4915 + 448] = 0 / sub_5a8c5d60
                mem[_4915 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6661 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4915 + 512] = mem[_6661 + 28 len 4]
                mem[_4915 + 544] = decimals
                mem[_4915 + 576] = uint8(stor21.field_168)
                mem[_4915 + 608] = uint8(_787)
                mem[_4915 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _1819
                mem[mem[64] + 128] = (100 * 10^6 * _2179) - (100 * 10^6 * _2005) / _1819
                mem[mem[64] + 160] = mem[_4915 + 160]
                mem[mem[64] + 192] = mem[_4915 + 192]
                mem[mem[64] + 224] = _1407
                mem[mem[64] + 256] = _1503
                mem[mem[64] + 288] = _1407 + _1503
                mem[mem[64] + 320] = mem[_4915 + 320]
                mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                mem[mem[64] + 416] = 0 / sub_5d98fc27
                mem[mem[64] + 448] = 0 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4915 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _1819,
                       (100 * 10^6 * _2179) - (100 * 10^6 * _2005) / _1819,
                       mem[mem[64] + 160 len 64],
                       _1407,
                       _1503,
                       _1407 + _1503,
                       mem[mem[64] + 320],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       _508 * sub_5d98fc27 / _476,
                       0 / sub_5d98fc27,
                       0 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _787 << 248,
                       8
            if 0 / sub_5d98fc27 and mem[_3744] > -1 / 0 / sub_5d98fc27:
                revert with 0, 17
            if not 0 / sub_5d98fc27:
                revert with 0, 18
            if 0 / sub_5d98fc27 * mem[_3744] / 0 / sub_5d98fc27 != mem[_3744]:
                revert with 0, 'SafeMath: multiplication overflow'
            _4846 = mem[64]
            mem[64] = mem[64] + 64
            mem[_4846] = 26
            mem[_4846 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _5477 = mem[64]
            mem[64] = mem[64] + 672
            mem[_5477] = eth.balance(sub_270bf52eAddress)
            mem[_5477 + 32] = ext_call.return_data[0]
            mem[_5477 + 64] = ext_call.return_data[0]
            mem[_5477 + 96] = _1819
            mem[_5477 + 128] = (100 * 10^6 * _2179) - (100 * 10^6 * _2005) / _1819
            require ext_code.size(stor8)
            staticcall stor8.getTotalRewardsDistributed() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5715 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5477 + 160] = mem[_5715]
            require ext_code.size(stor8)
            staticcall stor8.totalVolume() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6081 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5477 + 192] = mem[_6081]
            mem[_5477 + 224] = _1407
            mem[_5477 + 256] = _1503
            mem[_5477 + 288] = _1407 + _1503
            mem[mem[64] + 4] = sub_92b8b617Address
            require ext_code.size(stor8)
            staticcall stor8.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_92b8b617Address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6673 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5477 + 320] = mem[_6673]
            mem[_5477 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
            mem[_5477 + 384] = _508 * sub_5d98fc27 / _476
            mem[_5477 + 416] = 0 / sub_5d98fc27
            mem[_5477 + 448] = 0 / sub_5d98fc27 * _3996 / sub_5a8c5d60
            mem[_5477 + 480] = uint128(block.number)
            require ext_code.size(stor8)
            staticcall stor8.holders() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7521 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5477 + 512] = mem[_7521 + 28 len 4]
            mem[_5477 + 544] = decimals
            mem[_5477 + 576] = uint8(stor21.field_168)
            mem[_5477 + 608] = uint8(_787)
            mem[_5477 + 640] = 8
            mem[mem[64]] = eth.balance(sub_270bf52eAddress)
            mem[mem[64] + 32] = ext_call.return_data[0]
            mem[mem[64] + 64] = ext_call.return_data[0]
            mem[mem[64] + 96] = _1819
            mem[mem[64] + 128] = (100 * 10^6 * _2179) - (100 * 10^6 * _2005) / _1819
            mem[mem[64] + 160] = mem[_5477 + 160]
            mem[mem[64] + 192] = mem[_5477 + 192]
            mem[mem[64] + 224] = _1407
            mem[mem[64] + 256] = _1503
            mem[mem[64] + 288] = _1407 + _1503
            mem[mem[64] + 320] = mem[_5477 + 320]
            mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
            mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
            mem[mem[64] + 416] = 0 / sub_5d98fc27
            mem[mem[64] + 448] = 0 / sub_5d98fc27 * _3996 / sub_5a8c5d60
            mem[mem[64] + 480] = uint128(block.number)
            mem[mem[64] + 512] = mem[_5477 + 540 len 4]
            return eth.balance(sub_270bf52eAddress), 
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   _1819,
                   (100 * 10^6 * _2179) - (100 * 10^6 * _2005) / _1819,
                   mem[mem[64] + 160 len 64],
                   _1407,
                   _1503,
                   _1407 + _1503,
                   mem[mem[64] + 320],
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                   _508 * sub_5d98fc27 / _476,
                   0 / sub_5d98fc27,
                   0 / sub_5d98fc27 * _3996 / sub_5a8c5d60,
                   block.number << 128,
                   mem[mem[64] + 512],
                   uint8(stor21.field_0),
                   uint8(stor21.field_0),
                   _787 << 248,
                   8
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and _508 * sub_5d98fc27 / _476 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != _508 * sub_5d98fc27 / _476:
            revert with 0, 'SafeMath: multiplication overflow'
        _1294 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1294] = 26
        mem[_1294 + 32] = 'SafeMath: division by zero'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor8)
        staticcall stor8.0xb9e5a03b with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1477 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1533 = mem[_1477]
        require ext_code.size(stor8)
        staticcall stor8.0x41e70fa6 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1597 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1661 = mem[_1597]
        if _1533 > !mem[_1597]:
            revert with 0, 17
        if _1533 + mem[_1597] < _1533:
            revert with 0, 'SafeMath: addition overflow'
        require ext_code.size(stor8)
        staticcall stor8.getTotalAmountStaked() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1970 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2031 = mem[_1970]
        mem[mem[64] + 4] = sub_7c68e584Address
        require ext_code.size(stor10)
        staticcall stor10.0x70a08231 with:
                gas gas_remaining wei
               args sub_7c68e584Address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2150 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2217 = mem[_2150]
        require ext_code.size(stor10)
        staticcall stor10.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2327 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2399 = mem[_2327]
        _2478 = mem[64]
        mem[64] = mem[64] + 64
        mem[_2478] = 30
        mem[_2478 + 32] = 'SafeMath: subtraction overflow'
        if _2217 > _2399:
            revert with 0, 'SafeMath: subtraction overflow', 0
        if _2399 < _2217:
            revert with 0, 17
        if not _2399 - _2217:
            _3173 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3173] = 26
            mem[_3173 + 32] = 'SafeMath: division by zero'
            if not _2031:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(stor8)
            staticcall stor8.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3743 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3993 = mem[_3743]
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
                _4410 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4410] = 26
                mem[_4410 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _4911 = mem[64]
                mem[64] = mem[64] + 672
                mem[_4911] = eth.balance(sub_270bf52eAddress)
                mem[_4911 + 32] = ext_call.return_data[0]
                mem[_4911 + 64] = ext_call.return_data[0]
                mem[_4911 + 96] = _2031
                mem[_4911 + 128] = 0 / _2031
                require ext_code.size(stor8)
                staticcall stor8.getTotalRewardsDistributed() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5184 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4911 + 160] = mem[_5184]
                require ext_code.size(stor8)
                staticcall stor8.totalVolume() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5532 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4911 + 192] = mem[_5532]
                mem[_4911 + 224] = _1533
                mem[_4911 + 256] = _1661
                mem[_4911 + 288] = _1533 + _1661
                mem[mem[64] + 4] = sub_92b8b617Address
                require ext_code.size(stor8)
                staticcall stor8.0x70a08231 with:
                        gas gas_remaining wei
                       args sub_92b8b617Address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6053 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4911 + 320] = mem[_6053]
                mem[_4911 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[_4911 + 384] = _508 * sub_5d98fc27 / _476
                mem[_4911 + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
                mem[_4911 + 448] = 0 / sub_5a8c5d60
                mem[_4911 + 480] = uint128(block.number)
                require ext_code.size(stor8)
                staticcall stor8.holders() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6660 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_4911 + 512] = mem[_6660 + 28 len 4]
                mem[_4911 + 544] = decimals
                mem[_4911 + 576] = uint8(stor21.field_168)
                mem[_4911 + 608] = uint8(_787)
                mem[_4911 + 640] = 8
                mem[mem[64]] = eth.balance(sub_270bf52eAddress)
                mem[mem[64] + 32] = ext_call.return_data[0]
                mem[mem[64] + 64] = ext_call.return_data[0]
                mem[mem[64] + 96] = _2031
                mem[mem[64] + 128] = 0 / _2031
                mem[mem[64] + 160] = mem[_4911 + 160]
                mem[mem[64] + 192] = mem[_4911 + 192]
                mem[mem[64] + 224] = _1533
                mem[mem[64] + 256] = _1661
                mem[mem[64] + 288] = _1533 + _1661
                mem[mem[64] + 320] = mem[_4911 + 320]
                mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
                mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
                mem[mem[64] + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
                mem[mem[64] + 448] = 0 / sub_5a8c5d60
                mem[mem[64] + 480] = uint128(block.number)
                mem[mem[64] + 512] = mem[_4911 + 540 len 4]
                return eth.balance(sub_270bf52eAddress), 
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       _2031,
                       0 / _2031,
                       mem[mem[64] + 160 len 64],
                       _1533,
                       _1661,
                       _1533 + _1661,
                       mem[mem[64] + 320],
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                       _508 * sub_5d98fc27 / _476,
                       ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27,
                       0 / sub_5a8c5d60,
                       block.number << 128,
                       mem[mem[64] + 512],
                       uint8(stor21.field_0),
                       uint8(stor21.field_0),
                       _787 << 248,
                       8
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 and mem[_3743] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
                revert with 0, 17
            if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
                revert with 0, 18
            if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * mem[_3743] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 != mem[_3743]:
                revert with 0, 'SafeMath: multiplication overflow'
            _4845 = mem[64]
            mem[64] = mem[64] + 64
            mem[_4845] = 26
            mem[_4845 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _5473 = mem[64]
            mem[64] = mem[64] + 672
            mem[_5473] = eth.balance(sub_270bf52eAddress)
            mem[_5473 + 32] = ext_call.return_data[0]
            mem[_5473 + 64] = ext_call.return_data[0]
            mem[_5473 + 96] = _2031
            mem[_5473 + 128] = 0 / _2031
            require ext_code.size(stor8)
            staticcall stor8.getTotalRewardsDistributed() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5714 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5473 + 160] = mem[_5714]
            require ext_code.size(stor8)
            staticcall stor8.totalVolume() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6080 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5473 + 192] = mem[_6080]
            mem[_5473 + 224] = _1533
            mem[_5473 + 256] = _1661
            mem[_5473 + 288] = _1533 + _1661
            mem[mem[64] + 4] = sub_92b8b617Address
            require ext_code.size(stor8)
            staticcall stor8.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_92b8b617Address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6672 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5473 + 320] = mem[_6672]
            mem[_5473 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
            mem[_5473 + 384] = _508 * sub_5d98fc27 / _476
            mem[_5473 + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
            mem[_5473 + 448] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _3993 / sub_5a8c5d60
            mem[_5473 + 480] = uint128(block.number)
            require ext_code.size(stor8)
            staticcall stor8.holders() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7520 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5473 + 512] = mem[_7520 + 28 len 4]
            mem[_5473 + 544] = decimals
            mem[_5473 + 576] = uint8(stor21.field_168)
            mem[_5473 + 608] = uint8(_787)
            mem[_5473 + 640] = 8
            mem[mem[64]] = eth.balance(sub_270bf52eAddress)
            mem[mem[64] + 32] = ext_call.return_data[0]
            mem[mem[64] + 64] = ext_call.return_data[0]
            mem[mem[64] + 96] = _2031
            mem[mem[64] + 128] = 0 / _2031
            mem[mem[64] + 160] = mem[_5473 + 160]
            mem[mem[64] + 192] = mem[_5473 + 192]
            mem[mem[64] + 224] = _1533
            mem[mem[64] + 256] = _1661
            mem[mem[64] + 288] = _1533 + _1661
            mem[mem[64] + 320] = mem[_5473 + 320]
            mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
            mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
            mem[mem[64] + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
            mem[mem[64] + 448] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _3993 / sub_5a8c5d60
            mem[mem[64] + 480] = uint128(block.number)
            mem[mem[64] + 512] = mem[_5473 + 540 len 4]
            return eth.balance(sub_270bf52eAddress), 
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   _2031,
                   0 / _2031,
                   mem[mem[64] + 160 len 64],
                   _1533,
                   _1661,
                   _1533 + _1661,
                   mem[mem[64] + 320],
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                   _508 * sub_5d98fc27 / _476,
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27,
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _3993 / sub_5a8c5d60,
                   block.number << 128,
                   mem[mem[64] + 512],
                   uint8(stor21.field_0),
                   uint8(stor21.field_0),
                   _787 << 248,
                   8
        if _2399 - _2217 and 100 * 10^6 > -1 / _2399 - _2217:
            revert with 0, 17
        if not _2399 - _2217:
            revert with 0, 18
        if (100 * 10^6 * _2399) - (100 * 10^6 * _2217) / _2399 - _2217 != 100 * 10^6:
            revert with 0, 'SafeMath: multiplication overflow'
        _3604 = mem[64]
        mem[64] = mem[64] + 64
        mem[_3604] = 26
        mem[_3604 + 32] = 'SafeMath: division by zero'
        if not _2031:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(stor8)
        staticcall stor8.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4203 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _4407 = mem[_4203]
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
            _4844 = mem[64]
            mem[64] = mem[64] + 64
            mem[_4844] = 26
            mem[_4844 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _5469 = mem[64]
            mem[64] = mem[64] + 672
            mem[_5469] = eth.balance(sub_270bf52eAddress)
            mem[_5469 + 32] = ext_call.return_data[0]
            mem[_5469 + 64] = ext_call.return_data[0]
            mem[_5469 + 96] = _2031
            mem[_5469 + 128] = (100 * 10^6 * _2399) - (100 * 10^6 * _2217) / _2031
            require ext_code.size(stor8)
            staticcall stor8.getTotalRewardsDistributed() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5713 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5469 + 160] = mem[_5713]
            require ext_code.size(stor8)
            staticcall stor8.totalVolume() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6079 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5469 + 192] = mem[_6079]
            mem[_5469 + 224] = _1533
            mem[_5469 + 256] = _1661
            mem[_5469 + 288] = _1533 + _1661
            mem[mem[64] + 4] = sub_92b8b617Address
            require ext_code.size(stor8)
            staticcall stor8.0x70a08231 with:
                    gas gas_remaining wei
                   args sub_92b8b617Address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6671 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5469 + 320] = mem[_6671]
            mem[_5469 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
            mem[_5469 + 384] = _508 * sub_5d98fc27 / _476
            mem[_5469 + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
            mem[_5469 + 448] = 0 / sub_5a8c5d60
            mem[_5469 + 480] = uint128(block.number)
            require ext_code.size(stor8)
            staticcall stor8.holders() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7519 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_5469 + 512] = mem[_7519 + 28 len 4]
            mem[_5469 + 544] = decimals
            mem[_5469 + 576] = uint8(stor21.field_168)
            mem[_5469 + 608] = uint8(_787)
            mem[_5469 + 640] = 8
            mem[mem[64]] = eth.balance(sub_270bf52eAddress)
            mem[mem[64] + 32] = ext_call.return_data[0]
            mem[mem[64] + 64] = ext_call.return_data[0]
            mem[mem[64] + 96] = _2031
            mem[mem[64] + 128] = (100 * 10^6 * _2399) - (100 * 10^6 * _2217) / _2031
            mem[mem[64] + 160] = mem[_5469 + 160]
            mem[mem[64] + 192] = mem[_5469 + 192]
            mem[mem[64] + 224] = _1533
            mem[mem[64] + 256] = _1661
            mem[mem[64] + 288] = _1533 + _1661
            mem[mem[64] + 320] = mem[_5469 + 320]
            mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
            mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
            mem[mem[64] + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
            mem[mem[64] + 448] = 0 / sub_5a8c5d60
            mem[mem[64] + 480] = uint128(block.number)
            mem[mem[64] + 512] = mem[_5469 + 540 len 4]
            return eth.balance(sub_270bf52eAddress), 
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   _2031,
                   (100 * 10^6 * _2399) - (100 * 10^6 * _2217) / _2031,
                   mem[mem[64] + 160 len 64],
                   _1533,
                   _1661,
                   _1533 + _1661,
                   mem[mem[64] + 320],
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
                   _508 * sub_5d98fc27 / _476,
                   ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27,
                   0 / sub_5a8c5d60,
                   block.number << 128,
                   mem[mem[64] + 512],
                   uint8(stor21.field_0),
                   uint8(stor21.field_0),
                   _787 << 248,
                   8
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 and mem[_4203] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
            revert with 0, 17
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * mem[_4203] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 != mem[_4203]:
            revert with 0, 'SafeMath: multiplication overflow'
        _5395 = mem[64]
        mem[64] = mem[64] + 64
        mem[_5395] = 26
        mem[_5395 + 32] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        _6049 = mem[64]
        mem[64] = mem[64] + 672
        mem[_6049] = eth.balance(sub_270bf52eAddress)
        mem[_6049 + 32] = ext_call.return_data[0]
        mem[_6049 + 64] = ext_call.return_data[0]
        mem[_6049 + 96] = _2031
        mem[_6049 + 128] = (100 * 10^6 * _2399) - (100 * 10^6 * _2217) / _2031
        require ext_code.size(stor8)
        staticcall stor8.getTotalRewardsDistributed() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _6172 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_6049 + 160] = mem[_6172]
        require ext_code.size(stor8)
        staticcall stor8.totalVolume() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _6837 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_6049 + 192] = mem[_6837]
        mem[_6049 + 224] = _1533
        mem[_6049 + 256] = _1661
        mem[_6049 + 288] = _1533 + _1661
        mem[mem[64] + 4] = sub_92b8b617Address
        require ext_code.size(stor8)
        staticcall stor8.0x70a08231 with:
                gas gas_remaining wei
               args sub_92b8b617Address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7622 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_6049 + 320] = mem[_7622]
        mem[_6049 + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
        mem[_6049 + 384] = _508 * sub_5d98fc27 / _476
        mem[_6049 + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
        mem[_6049 + 448] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _4407 / sub_5a8c5d60
        mem[_6049 + 480] = uint128(block.number)
        require ext_code.size(stor8)
        staticcall stor8.holders() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7960 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_6049 + 512] = mem[_7960 + 28 len 4]
        mem[_6049 + 544] = decimals
        mem[_6049 + 576] = uint8(stor21.field_168)
        mem[_6049 + 608] = uint8(_787)
        mem[_6049 + 640] = 8
        mem[mem[64]] = eth.balance(sub_270bf52eAddress)
        mem[mem[64] + 32] = ext_call.return_data[0]
        mem[mem[64] + 64] = ext_call.return_data[0]
        mem[mem[64] + 96] = _2031
        mem[mem[64] + 128] = (100 * 10^6 * _2399) - (100 * 10^6 * _2217) / _2031
        mem[mem[64] + 160] = mem[_6049 + 160]
        mem[mem[64] + 192] = mem[_6049 + 192]
        mem[mem[64] + 224] = _1533
        mem[mem[64] + 256] = _1661
        mem[mem[64] + 288] = _1533 + _1661
        mem[mem[64] + 320] = mem[_6049 + 320]
        mem[mem[64] + 352] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]
        mem[mem[64] + 384] = _508 * sub_5d98fc27 / _476
        mem[mem[64] + 416] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27
        mem[mem[64] + 448] = ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _4407 / sub_5a8c5d60
        mem[mem[64] + 480] = uint128(block.number)
        mem[mem[64] + 512] = mem[_6049 + 540 len 4]
        return eth.balance(sub_270bf52eAddress), 
               ext_call.return_data[0],
               ext_call.return_data[0],
               _2031,
               (100 * 10^6 * _2399) - (100 * 10^6 * _2217) / _2031,
               mem[mem[64] + 160 len 64],
               _1533,
               _1661,
               _1533 + _1661,
               mem[mem[64] + 320],
               ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0],
               _508 * sub_5d98fc27 / _476,
               ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27,
               ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _508 * sub_5d98fc27 / _476 / sub_5d98fc27 * _4407 / sub_5a8c5d60,
               block.number << 128,
               mem[mem[64] + 512],
               uint8(stor21.field_0),
               uint8(stor21.field_0),
               _787 << 248,
               8
    if unknown_0xe976faee(?????) > uint32(call.func_hash) >> 224:
        if unknown_0xcb616f2f(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require calldata.size - 4 >= 32
            require cd[4] == address(cd[4])
            if owner != msg.sender:
                revert with 0, 'Ownable: caller is not the owner'
            if not address(cd[4]):
                revert with 0, '_everStakeAddress should not be the zero address'
            emit 0x2ff53b5f: sub_7c68e584Address, address(cd[4])
            sub_7c68e584Address = address(cd[4])
            stor10 = address(cd[4])
        if unknown_0xcc4285e9(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require calldata.size - 4 >= 32
            require cd[4] < sub_cc4285e9.length
            return sub_cc4285e9[cd[4]]
        if uint32(call.func_hash) >> 224 != unknown_0xcd0336c0(?????):
            if unknown_0xd3da927f(?????) == uint32(call.func_hash) >> 224:
                require not msg.value
                require calldata.size - 4 >= 64
                require cd[4] == address(cd[4])
                require cd[36] == address(cd[36])
                return bool(stor2[address(cd[4])][address(cd[36])])
            if unknown_0xdba58991(?????) == uint32(call.func_hash) >> 224:
                require not msg.value
                require calldata.size - 4 >= 64
                require cd[4] == address(cd[4])
                require cd[36] == address(cd[36])
                if owner != msg.sender:
                    revert with 0, 'Ownable: caller is not the owner'
                if not address(cd[4]):
                    revert with 0, 'contractAddress should not be the zero address'
                if not address(cd[36]):
                    revert with 0, 'contractAddress should not be the zero address'
                if this.address == address(cd[36]):
                    revert with 0, 'contractAddress not be this contract'
                require ext_code.size(stor10)
                staticcall stor10.0x7bb5ce37 with:
                        gas gas_remaining wei
                       args address(cd[36])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if not stor2[ext_call.return_data[12 len 20]][address(cd[36])]:
                    if ext_call.return_data[12 len 20] != address(cd[4]):
                        revert with 0, 'ownerAddress is not the depositor of this stake'
                    stor2[address(ext_call.return_data[0])][address(cd[36])] = 1
                    uint256(sub_6c520f8b[address(ext_call.return_data[0])].field_0)++
                    address(sub_6c520f8b[address(ext_call.return_data[0])][uint256(sub_6c520f8b[address(ext_call.return_data[0])].field_0)].field_0) = address(cd[36])
                if not stor4[address(cd[36])]:
                    sub_cc4285e9.length++
                    sub_cc4285e9[sub_cc4285e9.length] = address(cd[36])
                    stor4[address(cd[36])] = 1
        require not msg.value
        require ext_code.size(stor15)
        staticcall stor15.latestRoundData() with:
                gas gas_remaining wei
        mem[128 len 160] = ext_call.return_data[0 len 160]
        if ext_call.success:
            require return_data.size >= 160
            require ext_call.return_data[0] == ext_call.return_data[22 len 10]
            require ext_call.return_data[128] == ext_call.return_data[150 len 10]
            require ext_code.size(stor15)
            staticcall stor15.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            return ext_call.return_data[32], uint8(ext_call.return_data[0])
        if return_data.size <= 3:
            revert with ext_call.return_data[0 len return_data.size]
        mem[0 len 4] = ext_call.return_data[0 len 4]
        if uint32(mem[4 len 28]) >> 224 != Error(string arg1):
            revert with ext_call.return_data[0 len return_data.size]
        if return_data.size < 68:
            revert with ext_call.return_data[0 len return_data.size]
        mem[128 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
        if ext_call.return_data[0] > test266151307() or ext_call.return_data[0] + 36 > return_data.size:
            revert with ext_call.return_data[0 len return_data.size]
        if mem[ext_call.return_data[0] + 128] > test266151307():
            revert with ext_call.return_data[0 len return_data.size]
        if ext_call.return_data[0] + mem[ext_call.return_data[0] + 128] + 32 > return_data.size - 4:
            revert with ext_call.return_data[0 len return_data.size]
        if floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 128] + 31) + 129 < 128 or floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 128] + 31) + 129 > test266151307():
            revert with 0, 65
        mem[64] = floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 128] + 31) + 129
        if not ext_call.return_data[0] + 128:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(ext_call.return_data[0] + mem[ext_call.return_data[0] + 128] + 31) + 129] = 0x70a0823100000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = sub_8893d55aAddress
        require ext_code.size(stor19)
        staticcall stor19.0x70a08231 with:
                gas gas_remaining wei
               args sub_8893d55aAddress
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _289 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _316 = mem[_289]
        mem[mem[64] + 4] = sub_8893d55aAddress
        require ext_code.size(address(stor21.field_0))
        staticcall address(stor21.field_0).0x70a08231 with:
                gas gas_remaining wei
               args sub_8893d55aAddress
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _354 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _381 = mem[_354]
        if not mem[_354]:
            _430 = mem[64]
            mem[64] = mem[64] + 64
            mem[_430] = 26
            mem[_430 + 32] = 'SafeMath: division by zero'
            if not _316:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(address(stor21.field_0))
            staticcall address(stor21.field_0).0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _504 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_504] == mem[_504 + 31 len 1]
            return 0 / _316, mem[_504 + 31 len 1]
        if mem[_354] and sub_5d98fc27 > -1 / mem[_354]:
            revert with 0, 17
        if not mem[_354]:
            revert with 0, 18
        if mem[_354] * sub_5d98fc27 / mem[_354] != sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        _481 = mem[64]
        mem[64] = mem[64] + 64
        mem[_481] = 26
        mem[_481 + 32] = 'SafeMath: division by zero'
        if not _316:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(stor21.field_0))
        staticcall address(stor21.field_0).0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _565 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_565] == mem[_565 + 31 len 1]
        return _381 * sub_5d98fc27 / _316, mem[_565 + 31 len 1]
    if unknown_0xe976faee(?????) == uint32(call.func_hash) >> 224:
        require not msg.value
        return sub_e976faeeAddress
    if unknown_0xea7c0297(?????) == uint32(call.func_hash) >> 224:
        require not msg.value
        require calldata.size - 4 >= 32
        require cd[4] <= test266151307()
        require cd[4] + 35 < calldata.size
        require ('cd', 4).length <= test266151307()
        require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
        idx = 0
        while idx < ('cd', 4).length:
            require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
            if not msg.sender:
                revert with 0, 'contractAddress should not be the zero address'
            if not address(cd[((32 * idx) + cd[4] + 36)]):
                revert with 0, 'contractAddress should not be the zero address'
            if this.address == address(cd[((32 * idx) + cd[4] + 36)]):
                revert with 0, 'contractAddress not be this contract'
            mem[mem[64] + 4] = address(cd[((32 * idx) + cd[4] + 36)])
            require ext_code.size(stor10)
            staticcall stor10.0x7bb5ce37 with:
                    gas gas_remaining wei
                   args address(cd[((32 * idx) + cd[4] + 36)])
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7961 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _8014 = mem[_7961]
            require mem[_7961] == mem[_7961 + 12 len 20]
            mem[0] = mem[_7961 + 12 len 20]
            _8191 = sha3(mem[0], 2)
            mem[0] = address(cd[((32 * idx) + cd[4] + 36)])
            mem[32] = _8191
            if not stor[_8191][address(cd[((32 * idx) + cd[4] + 36)])]:
                if address(_8014) != msg.sender:
                    revert with 0, 'ownerAddress is not the depositor of this stake'
                stor2[address(_8014)][address(cd[((32 * idx) + cd[4] + 36)])] = 1
                mem[32] = 1
                uint256(sub_6c520f8b[address(_8014)].field_0)++
                mem[0] = sha3(address(_8014), 1)
                address(sub_6c520f8b[address(_8014)][uint256(sub_6c520f8b[address(_8014)].field_0)].field_0) = address(cd[((32 * idx) + cd[4] + 36)])
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if unknown_0xf128b0c1(?????) == uint32(call.func_hash) >> 224:
        require not msg.value
        require calldata.size - 4 >= 32
        require cd[4] == address(cd[4])
        if owner != msg.sender:
            revert with 0, 'Ownable: caller is not the owner'
        call address(cd[4]) with:
           value eth.balance(this.address) wei
             gas 2300 * is_zero(value) wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
    if unknown_0xf2fde38b(?????) == uint32(call.func_hash) >> 224:
        require not msg.value
        require calldata.size - 4 >= 32
        require cd[4] == address(cd[4])
        if owner != msg.sender:
            revert with 0, 'Ownable: caller is not the owner'
        if not address(cd[4]):
            revert with 0, 'Ownable: new owner is the zero address'
        emit OwnershipTransferred(owner, address(cd[4]));
        owner = address(cd[4])
    if uint32(call.func_hash) >> 224 != unknown_0xf41322ac(?????):
        if unknown_0xfeb1dc6d(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require calldata.size - 4 >= 32
            require cd[4] <= test266151307()
            require cd[4] + 35 < calldata.size
            require ('cd', 4).length <= test266151307()
            require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
            idx = 0
            while idx < ('cd', 4).length:
                require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
                if not stor2[msg.sender][address(cd[((32 * idx) + cd[4] + 36)])]:
                    revert with 0, 'contractAddress is not registered staking contract'
                mem[0] = address(cd[((32 * idx) + cd[4] + 36)])
                mem[32] = sha3(address(msg.sender), 2)
                if stor2[address(msg.sender)][address(cd[((32 * idx) + cd[4] + 36)])]:
                    stor2[address(msg.sender)][address(cd[((32 * idx) + cd[4] + 36)])] = 0
                    mem[0] = msg.sender
                    mem[32] = 1
                    s = 0
                    while s < uint256(sub_6c520f8b[address(msg.sender)].field_0):
                        mem[0] = sha3(address(msg.sender), 1)
                        if address(sub_6c520f8b[address(msg.sender)][s].field_0) != address(cd[((32 * idx) + cd[4] + 36)]):
                            if s == -1:
                                revert with 0, 17
                            s = s + 1
                            continue 
                        if uint256(sub_6c520f8b[address(msg.sender)].field_0) < 1:
                            revert with 0, 17
                        if uint256(sub_6c520f8b[address(msg.sender)].field_0) - 1 >= uint256(sub_6c520f8b[address(msg.sender)].field_0):
                            revert with 0, 50
                        if s >= uint256(sub_6c520f8b[address(msg.sender)].field_0):
                            revert with 0, 50
                        address(sub_6c520f8b[address(msg.sender)][s].field_0) = address(sub_6c520f8b[address(msg.sender)][uint256(sub_6c520f8b[address(msg.sender)].field_0)].field_0)
                        if not uint256(sub_6c520f8b[address(msg.sender)].field_0):
                            revert with 0, 49
                        mem[0] = sha3(address(msg.sender), 1)
                        address(sub_6c520f8b[address(msg.sender)][uint256(sub_6c520f8b[address(msg.sender)].field_0)].field_0) = 0
                        uint256(sub_6c520f8b[address(msg.sender)].field_0)--
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
    require not msg.value
    require calldata.size - 4 >= 32
    require cd[4] == address(cd[4])
    mem[128] = 96
    mem[160] = 0
    mem[192] = 0
    mem[224] = 0
    mem[256] = 0
    mem[288] = 0
    mem[320] = 0
    mem[352] = 0
    mem[384] = 0
    mem[416] = 0
    mem[448] = 0
    mem[480] = 0
    mem[512] = 0
    mem[544] = 0
    mem[576] = 0
    mem[608] = 0
    mem[644] = pairAddress
    require ext_code.size(stor8)
    staticcall stor8.0x70a08231 with:
            gas gas_remaining wei
           args pairAddress
    mem[640] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[ceil32(return_data.size) + 644] = pairAddress
    require ext_code.size(stor19)
    staticcall stor19.0x70a08231 with:
            gas gas_remaining wei
           args pairAddress
    mem[ceil32(return_data.size) + 640] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor15)
    staticcall stor15.latestRoundData() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 640 len 160] = ext_call.return_data[0 len 160]
    if ext_call.success:
        require return_data.size >= 160
        require ext_call.return_data[0] == ext_call.return_data[22 len 10]
        require ext_call.return_data[128] == ext_call.return_data[150 len 10]
        require ext_code.size(stor15)
        staticcall stor15.0x313ce567 with:
                gas gas_remaining wei
        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[0]:
            mem[(6 * ceil32(return_data.size)) + 640] = 26
            mem[(6 * ceil32(return_data.size)) + 672] = 'SafeMath: division by zero'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / ext_call.return_data[0]:
                mem[(6 * ceil32(return_data.size)) + 704] = 26
                mem[(6 * ceil32(return_data.size)) + 736] = 'SafeMath: division by zero'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getCurrentBalance() with:
                        gas gas_remaining wei
                mem[(6 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    mem[(7 * ceil32(return_data.size)) + 768] = 26
                    mem[(7 * ceil32(return_data.size)) + 800] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    mem[(7 * ceil32(return_data.size)) + 1344] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xfd306c4e with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(7 * ceil32(return_data.size)) + 1344 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    _1041 = mem[(7 * ceil32(return_data.size)) + 1344]
                    require mem[(7 * ceil32(return_data.size)) + 1344] <= test266151307()
                    require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1375 < (7 * ceil32(return_data.size)) + return_data.size + 1344
                    _1086 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
                    if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345 > test266151307():
                        revert with 0, 65
                    mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345
                    mem[(8 * ceil32(return_data.size)) + 1344] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
                    require _1041 + _1086 + 32 <= return_data.size
                    mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_1086)] = mem[(7 * ceil32(return_data.size)) + _1041 + 1376 len ceil32(_1086)]
                    if ceil32(_1086) <= _1086:
                        mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x194ba6a with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7200 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 864] = mem[_7200]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x27932f9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7676 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 896] = mem[_7676]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0xaa8d8fdd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8009 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 928] = mem[_8009]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getDepositTokens() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8239 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 960] = mem[_8239]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getLockTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8443 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 992] = mem[_8443]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getDepositTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8646 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8646]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x4b6a8ec8 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8839 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8839]
                        mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                        mem[(7 * ceil32(return_data.size)) + 1120] = 0 / sub_5a8c5d60
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x56fe8cf7 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9031 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9031]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getDepositorAddress() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9223 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_9223] == mem[_9223 + 12 len 20]
                        mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9223 + 12 len 20]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x910afbe9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9415 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_9415] == mem[_9415 + 12 len 20]
                        mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9415 + 12 len 20]
                        mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getStatus() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9607 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_9607] == bool(mem[_9607])
                        mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9607])
                        mem[0] = address(cd[4])
                        mem[32] = sha3(msg.sender, 2)
                        mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                        mem[mem[64]] = 32
                        mem[mem[64] + 32] = 512
                        _9895 = mem[(8 * ceil32(return_data.size)) + 1344]
                        mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                        mem[mem[64] + 576 len ceil32(_9895)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9895)]
                        if ceil32(_9895) > _9895:
                            mem[_9895 + mem[64] + 576] = 0
                        mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                        mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                        mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                        mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                        mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                        mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                        mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                        mem[mem[64] + 288] = ext_call.return_data[0]
                        mem[mem[64] + 320] = 0 / sub_5a8c5d60
                        mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                        mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                        mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                        mem[mem[64] + 448] = 0
                        mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                        return 32, 512, 
                               mem[mem[64] + 64 len 224],
                               ext_call.return_data[0],
                               0 / sub_5a8c5d60,
                               mem[mem[64] + 352 len 96],
                               0,
                               mem[mem[64] + 480],
                               bool(stor2[msg.sender][address(cd[4])]),
                               mem[mem[64] + 544 len ceil32(_9895) + 32]
                    mem[_1086 + (8 * ceil32(return_data.size)) + 1376] = 0
                    mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7201 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 864] = mem[_7201]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7677 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 896] = mem[_7677]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8010 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 928] = mem[_8010]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8240 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 960] = mem[_8240]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8444 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 992] = mem[_8444]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8647 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8647]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8840 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8840]
                    mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                    mem[(7 * ceil32(return_data.size)) + 1120] = 0 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9032 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9032]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9224 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9224] == mem[_9224 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9224 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9416 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9416] == mem[_9416 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9416 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9608 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9608] == bool(mem[_9608])
                    mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9608])
                    mem[0] = address(cd[4])
                    mem[32] = sha3(msg.sender, 2)
                    mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    _9896 = mem[(8 * ceil32(return_data.size)) + 1344]
                    mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                    mem[mem[64] + 576 len ceil32(_9896)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9896)]
                    if ceil32(_9896) > _9896:
                        mem[_9896 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                    mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                    mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                    mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                    mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                    mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                    mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                    mem[mem[64] + 288] = ext_call.return_data[0]
                    mem[mem[64] + 320] = 0 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                    mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                    mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           ext_call.return_data[0],
                           0 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(cd[4])]),
                           mem[mem[64] + 544 len ceil32(_9896) + 32]
                if ext_call.return_data[0] and 0 / sub_5d98fc27 > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if not ext_call.return_data[0]:
                    revert with 0, 18
                if ext_call.return_data[0] * 0 / sub_5d98fc27 / ext_call.return_data[0] != 0 / sub_5d98fc27:
                    revert with 0, 'SafeMath: multiplication overflow'
                mem[(7 * ceil32(return_data.size)) + 768] = 26
                mem[(7 * ceil32(return_data.size)) + 800] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                mem[(7 * ceil32(return_data.size)) + 1344] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(7 * ceil32(return_data.size)) + 1344 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _1161 = mem[(7 * ceil32(return_data.size)) + 1344]
                require mem[(7 * ceil32(return_data.size)) + 1344] <= test266151307()
                require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1375 < (7 * ceil32(return_data.size)) + return_data.size + 1344
                _1208 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
                if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345 > test266151307():
                    revert with 0, 65
                mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345
                mem[(8 * ceil32(return_data.size)) + 1344] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
                require _1161 + _1208 + 32 <= return_data.size
                mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_1208)] = mem[(7 * ceil32(return_data.size)) + _1161 + 1376 len ceil32(_1208)]
                if ceil32(_1208) > _1208:
                    mem[_1208 + (8 * ceil32(return_data.size)) + 1376] = 0
                    mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7199 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 864] = mem[_7199]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7675 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 896] = mem[_7675]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8008 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 928] = mem[_8008]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8238 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 960] = mem[_8238]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8442 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 992] = mem[_8442]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8645 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8645]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8838 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8838]
                    mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                    mem[(7 * ceil32(return_data.size)) + 1120] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9030 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9030]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9222 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9222] == mem[_9222 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9222 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9414 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9414] == mem[_9414 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9414 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9606 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9606] == bool(mem[_9606])
                    mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9606])
                    mem[0] = address(cd[4])
                    mem[32] = sha3(msg.sender, 2)
                    mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    _9894 = mem[(8 * ceil32(return_data.size)) + 1344]
                    mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                    mem[mem[64] + 576 len ceil32(_9894)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9894)]
                    if ceil32(_9894) > _9894:
                        mem[_9894 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                    mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                    mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                    mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                    mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                    mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                    mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                    mem[mem[64] + 288] = ext_call.return_data[0]
                    mem[mem[64] + 320] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                    mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                    mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           ext_call.return_data[0],
                           ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(cd[4])]),
                           mem[mem[64] + 544 len ceil32(_9894) + 32]
                mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7198 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_7198]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7674 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_7674]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8007 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_8007]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8237 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_8237]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8441 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_8441]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8644 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8644]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8837 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8837]
                mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1120] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9029 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9029]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9221 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9221] == mem[_9221 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9221 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9413 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9413] == mem[_9413 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9413 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9605 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9605] == bool(mem[_9605])
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9605])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                _9797 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _9893 = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 576 len ceil32(_9893)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9893)]
                if ceil32(_9893) <= _9893:
                    mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                    mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                    mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                    mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                    mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                    mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                    mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                    mem[mem[64] + 288] = ext_call.return_data[0]
                    mem[mem[64] + 320] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                    mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                    mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           ext_call.return_data[0],
                           ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(cd[4])]),
                           mem[mem[64] + 544 len ceil32(_9893) + 32]
                mem[_9893 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[_9797 + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[_9797 + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[_9797 + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[_9797 + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[_9797 + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[_9797 + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                mem[_9797 + 288] = ext_call.return_data[0]
                mem[_9797 + 320] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                mem[_9797 + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                mem[_9797 + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[_9797 + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                mem[_9797 + 448] = 0
                mem[_9797 + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                mem[_9797 + 512] = bool(stor2[msg.sender][address(cd[4])])
                return memory
                  from mem[64]
                   len ceil32(_9893) + _9797 + -mem[64] + 576
            if 0 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / 0 / ext_call.return_data[0]:
                revert with 0, 17
            if not 0 / ext_call.return_data[0]:
                revert with 0, 18
            if 0 / ext_call.return_data[0] * ext_call.return_data[32] / 0 / ext_call.return_data[0] != ext_call.return_data[32]:
                revert with 0, 'SafeMath: multiplication overflow'
            mem[(6 * ceil32(return_data.size)) + 704] = 26
            mem[(6 * ceil32(return_data.size)) + 736] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getCurrentBalance() with:
                    gas gas_remaining wei
            mem[(6 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                mem[(7 * ceil32(return_data.size)) + 768] = 26
                mem[(7 * ceil32(return_data.size)) + 800] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                mem[(7 * ceil32(return_data.size)) + 1344] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(7 * ceil32(return_data.size)) + 1344 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _1158 = mem[(7 * ceil32(return_data.size)) + 1344]
                require mem[(7 * ceil32(return_data.size)) + 1344] <= test266151307()
                require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1375 < (7 * ceil32(return_data.size)) + return_data.size + 1344
                _1207 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
                if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345 > test266151307():
                    revert with 0, 65
                mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345
                mem[(8 * ceil32(return_data.size)) + 1344] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
                require _1158 + _1207 + 32 <= return_data.size
                mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_1207)] = mem[(7 * ceil32(return_data.size)) + _1158 + 1376 len ceil32(_1207)]
                if ceil32(_1207) <= _1207:
                    mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7196 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 864] = mem[_7196]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7672 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 896] = mem[_7672]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8005 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 928] = mem[_8005]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8235 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 960] = mem[_8235]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8439 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 992] = mem[_8439]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8642 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8642]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8835 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8835]
                    mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                    mem[(7 * ceil32(return_data.size)) + 1120] = 0 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9027 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9027]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9219 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9219] == mem[_9219 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9219 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9411 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9411] == mem[_9411 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9411 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9603 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9603] == bool(mem[_9603])
                    mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9603])
                    mem[0] = address(cd[4])
                    mem[32] = sha3(msg.sender, 2)
                    mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    _9891 = mem[(8 * ceil32(return_data.size)) + 1344]
                    mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                    mem[mem[64] + 576 len ceil32(_9891)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9891)]
                    if ceil32(_9891) > _9891:
                        mem[_9891 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                    mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                    mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                    mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                    mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                    mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                    mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                    mem[mem[64] + 288] = ext_call.return_data[0]
                    mem[mem[64] + 320] = 0 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                    mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                    mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           ext_call.return_data[0],
                           0 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(cd[4])]),
                           mem[mem[64] + 544 len ceil32(_9891) + 32]
                mem[_1207 + (8 * ceil32(return_data.size)) + 1376] = 0
                mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7197 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_7197]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7673 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_7673]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8006 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_8006]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8236 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_8236]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8440 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_8440]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8643 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8643]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8836 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8836]
                mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1120] = 0 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9028 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9028]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9220 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9220] == mem[_9220 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9220 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9412 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9412] == mem[_9412 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9412 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9604 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9604] == bool(mem[_9604])
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9604])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _9892 = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 576 len ceil32(_9892)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9892)]
                if ceil32(_9892) > _9892:
                    mem[_9892 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(cd[4])]),
                       mem[mem[64] + 544 len ceil32(_9892) + 32]
            if ext_call.return_data[0] and 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / ext_call.return_data[0] != 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            mem[(7 * ceil32(return_data.size)) + 768] = 26
            mem[(7 * ceil32(return_data.size)) + 800] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            mem[(7 * ceil32(return_data.size)) + 1344] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(7 * ceil32(return_data.size)) + 1344 len return_data.size] = ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            _1285 = mem[(7 * ceil32(return_data.size)) + 1344]
            require mem[(7 * ceil32(return_data.size)) + 1344] <= test266151307()
            require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1375 < (7 * ceil32(return_data.size)) + return_data.size + 1344
            _1333 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
            if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345 > test266151307():
                revert with 0, 65
            mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345
            mem[(8 * ceil32(return_data.size)) + 1344] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
            require _1285 + _1333 + 32 <= return_data.size
            mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_1333)] = mem[(7 * ceil32(return_data.size)) + _1285 + 1376 len ceil32(_1333)]
            if ceil32(_1333) <= _1333:
                mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7194 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_7194]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7670 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_7670]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8003 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_8003]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8233 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_8233]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8437 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_8437]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8640 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8640]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8833 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8833]
                mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1120] = ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9025 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9025]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9217 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9217] == mem[_9217 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9217 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9409 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9409] == mem[_9409 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9409 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9601 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9601] == bool(mem[_9601])
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9601])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _9889 = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 576 len ceil32(_9889)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9889)]
                if ceil32(_9889) > _9889:
                    mem[_9889 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(cd[4])]),
                       mem[mem[64] + 544 len ceil32(_9889) + 32]
            mem[_1333 + (8 * ceil32(return_data.size)) + 1376] = 0
            mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7195 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 864] = mem[_7195]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7671 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 896] = mem[_7671]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8004 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 928] = mem[_8004]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8234 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 960] = mem[_8234]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8438 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 992] = mem[_8438]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8641 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8641]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8834 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8834]
            mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
            mem[(7 * ceil32(return_data.size)) + 1120] = ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9026 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9026]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9218 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9218] == mem[_9218 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9218 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9410 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9410] == mem[_9410 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9410 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9602 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9602] == bool(mem[_9602])
            mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9602])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            _9890 = mem[(8 * ceil32(return_data.size)) + 1344]
            mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
            mem[mem[64] + 576 len ceil32(_9890)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9890)]
            if ceil32(_9890) > _9890:
                mem[_9890 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
            mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
            mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
            mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
            mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
            mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
            mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
            mem[mem[64] + 288] = ext_call.return_data[0]
            mem[mem[64] + 320] = ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
            mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
            mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   ext_call.return_data[0],
                   ext_call.return_data[0] * 0 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   mem[mem[64] + 544 len ceil32(_9890) + 32]
        if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
            revert with 0, 'SafeMath: multiplication overflow'
        mem[(6 * ceil32(return_data.size)) + 640] = 26
        mem[(6 * ceil32(return_data.size)) + 672] = 'SafeMath: division by zero'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            mem[(6 * ceil32(return_data.size)) + 704] = 26
            mem[(6 * ceil32(return_data.size)) + 736] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getCurrentBalance() with:
                    gas gas_remaining wei
            mem[(6 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                mem[(7 * ceil32(return_data.size)) + 768] = 26
                mem[(7 * ceil32(return_data.size)) + 800] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                mem[(7 * ceil32(return_data.size)) + 1344] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(7 * ceil32(return_data.size)) + 1344 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _1155 = mem[(7 * ceil32(return_data.size)) + 1344]
                require mem[(7 * ceil32(return_data.size)) + 1344] <= test266151307()
                require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1375 < (7 * ceil32(return_data.size)) + return_data.size + 1344
                _1202 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
                if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345 > test266151307():
                    revert with 0, 65
                mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345
                mem[(8 * ceil32(return_data.size)) + 1344] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
                require _1155 + _1202 + 32 <= return_data.size
                mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_1202)] = mem[(7 * ceil32(return_data.size)) + _1155 + 1376 len ceil32(_1202)]
                if ceil32(_1202) <= _1202:
                    mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7192 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 864] = mem[_7192]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7668 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 896] = mem[_7668]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8001 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 928] = mem[_8001]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8231 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 960] = mem[_8231]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8435 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 992] = mem[_8435]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8638 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8638]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8831 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8831]
                    mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                    mem[(7 * ceil32(return_data.size)) + 1120] = 0 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9023 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9023]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9215 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9215] == mem[_9215 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9215 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9407 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9407] == mem[_9407 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9407 + 12 len 20]
                    mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9599 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9599] == bool(mem[_9599])
                    mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9599])
                    mem[0] = address(cd[4])
                    mem[32] = sha3(msg.sender, 2)
                    mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    _9887 = mem[(8 * ceil32(return_data.size)) + 1344]
                    mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                    mem[mem[64] + 576 len ceil32(_9887)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9887)]
                    if ceil32(_9887) > _9887:
                        mem[_9887 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                    mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                    mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                    mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                    mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                    mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                    mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                    mem[mem[64] + 288] = ext_call.return_data[0]
                    mem[mem[64] + 320] = 0 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                    mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                    mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           ext_call.return_data[0],
                           0 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(cd[4])]),
                           mem[mem[64] + 544 len ceil32(_9887) + 32]
                mem[_1202 + (8 * ceil32(return_data.size)) + 1376] = 0
                mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7193 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_7193]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7669 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_7669]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8002 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_8002]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8232 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_8232]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8436 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_8436]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8639 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8639]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8832 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8832]
                mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1120] = 0 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9024 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9024]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9216 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9216] == mem[_9216 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9216 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9408 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9408] == mem[_9408 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9408 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9600 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9600] == bool(mem[_9600])
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9600])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _9888 = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 576 len ceil32(_9888)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9888)]
                if ceil32(_9888) > _9888:
                    mem[_9888 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(cd[4])]),
                       mem[mem[64] + 544 len ceil32(_9888) + 32]
            if ext_call.return_data[0] and 0 / sub_5d98fc27 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            if ext_call.return_data[0] * 0 / sub_5d98fc27 / ext_call.return_data[0] != 0 / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            mem[(7 * ceil32(return_data.size)) + 768] = 26
            mem[(7 * ceil32(return_data.size)) + 800] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            mem[(7 * ceil32(return_data.size)) + 1344] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(7 * ceil32(return_data.size)) + 1344 len return_data.size] = ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            _1282 = mem[(7 * ceil32(return_data.size)) + 1344]
            require mem[(7 * ceil32(return_data.size)) + 1344] <= test266151307()
            require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1375 < (7 * ceil32(return_data.size)) + return_data.size + 1344
            _1332 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
            if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345 > test266151307():
                revert with 0, 65
            mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345
            mem[(8 * ceil32(return_data.size)) + 1344] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
            require _1282 + _1332 + 32 <= return_data.size
            mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_1332)] = mem[(7 * ceil32(return_data.size)) + _1282 + 1376 len ceil32(_1332)]
            if ceil32(_1332) <= _1332:
                mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7190 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_7190]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7666 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_7666]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7999 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_7999]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8229 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_8229]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8433 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_8433]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8636 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8636]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8829 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8829]
                mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1120] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9021 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9021]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9213 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9213] == mem[_9213 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9213 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9405 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9405] == mem[_9405 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9405 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9597 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9597] == bool(mem[_9597])
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9597])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _9885 = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 576 len ceil32(_9885)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9885)]
                if ceil32(_9885) > _9885:
                    mem[_9885 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(cd[4])]),
                       mem[mem[64] + 544 len ceil32(_9885) + 32]
            mem[_1332 + (8 * ceil32(return_data.size)) + 1376] = 0
            mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7191 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 864] = mem[_7191]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7667 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 896] = mem[_7667]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8000 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 928] = mem[_8000]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8230 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 960] = mem[_8230]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8434 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 992] = mem[_8434]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8637 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8637]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8830 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8830]
            mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
            mem[(7 * ceil32(return_data.size)) + 1120] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9022 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9022]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9214 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9214] == mem[_9214 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9214 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9406 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9406] == mem[_9406 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9406 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9598 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9598] == bool(mem[_9598])
            mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9598])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            _9886 = mem[(8 * ceil32(return_data.size)) + 1344]
            mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
            mem[mem[64] + 576 len ceil32(_9886)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9886)]
            if ceil32(_9886) > _9886:
                mem[_9886 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
            mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
            mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
            mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
            mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
            mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
            mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
            mem[mem[64] + 288] = ext_call.return_data[0]
            mem[mem[64] + 320] = ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
            mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
            mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   ext_call.return_data[0],
                   ext_call.return_data[0] * 0 / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   mem[mem[64] + 544 len ceil32(_9886) + 32]
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and ext_call.return_data[32] > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != ext_call.return_data[32]:
            revert with 0, 'SafeMath: multiplication overflow'
        mem[(6 * ceil32(return_data.size)) + 704] = 26
        mem[(6 * ceil32(return_data.size)) + 736] = 'SafeMath: division by zero'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getCurrentBalance() with:
                gas gas_remaining wei
        mem[(6 * ceil32(return_data.size)) + 768] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            mem[(7 * ceil32(return_data.size)) + 768] = 26
            mem[(7 * ceil32(return_data.size)) + 800] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            mem[(7 * ceil32(return_data.size)) + 1344] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(7 * ceil32(return_data.size)) + 1344 len return_data.size] = ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            _1279 = mem[(7 * ceil32(return_data.size)) + 1344]
            require mem[(7 * ceil32(return_data.size)) + 1344] <= test266151307()
            require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1375 < (7 * ceil32(return_data.size)) + return_data.size + 1344
            _1331 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
            if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345 > test266151307():
                revert with 0, 65
            mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345
            mem[(8 * ceil32(return_data.size)) + 1344] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
            require _1279 + _1331 + 32 <= return_data.size
            mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_1331)] = mem[(7 * ceil32(return_data.size)) + _1279 + 1376 len ceil32(_1331)]
            if ceil32(_1331) <= _1331:
                mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7188 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 864] = mem[_7188]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7664 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 896] = mem[_7664]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7997 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 928] = mem[_7997]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8227 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 960] = mem[_8227]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8431 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 992] = mem[_8431]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8634 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8634]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8827 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8827]
                mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
                mem[(7 * ceil32(return_data.size)) + 1120] = 0 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9019 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9019]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9211 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9211] == mem[_9211 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9211 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9403 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9403] == mem[_9403 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9403 + 12 len 20]
                mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9595 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9595] == bool(mem[_9595])
                mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9595])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                _9883 = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
                mem[mem[64] + 576 len ceil32(_9883)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9883)]
                if ceil32(_9883) > _9883:
                    mem[_9883 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
                mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
                mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
                mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
                mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
                mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
                mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
                mem[mem[64] + 288] = ext_call.return_data[0]
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
                mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
                mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       ext_call.return_data[0],
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(cd[4])]),
                       mem[mem[64] + 544 len ceil32(_9883) + 32]
            mem[_1331 + (8 * ceil32(return_data.size)) + 1376] = 0
            mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7189 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 864] = mem[_7189]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7665 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 896] = mem[_7665]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7998 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 928] = mem[_7998]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8228 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 960] = mem[_8228]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8432 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 992] = mem[_8432]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8635 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8635]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8828 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8828]
            mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
            mem[(7 * ceil32(return_data.size)) + 1120] = 0 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9020 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9020]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9212 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9212] == mem[_9212 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9212 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9404 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9404] == mem[_9404 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9404 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9596 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9596] == bool(mem[_9596])
            mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9596])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            _9884 = mem[(8 * ceil32(return_data.size)) + 1344]
            mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
            mem[mem[64] + 576 len ceil32(_9884)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9884)]
            if ceil32(_9884) > _9884:
                mem[_9884 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
            mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
            mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
            mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
            mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
            mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
            mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
            mem[mem[64] + 288] = ext_call.return_data[0]
            mem[mem[64] + 320] = 0 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
            mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
            mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   ext_call.return_data[0],
                   0 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   mem[mem[64] + 544 len ceil32(_9884) + 32]
        if ext_call.return_data[0] and ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 > -1 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / ext_call.return_data[0] != ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        mem[(7 * ceil32(return_data.size)) + 768] = 26
        mem[(7 * ceil32(return_data.size)) + 800] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        mem[(7 * ceil32(return_data.size)) + 1344] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(7 * ceil32(return_data.size)) + 1344 len return_data.size] = ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _1398 = mem[(7 * ceil32(return_data.size)) + 1344]
        require mem[(7 * ceil32(return_data.size)) + 1344] <= test266151307()
        require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1375 < (7 * ceil32(return_data.size)) + return_data.size + 1344
        _1447 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
        if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1 < 0 or (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345 > test266151307():
            revert with 0, 65
        mem[64] = (8 * ceil32(return_data.size)) + ceil32(ceil32(mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344])) + 1345
        mem[(8 * ceil32(return_data.size)) + 1344] = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 1344] + 1344]
        require _1398 + _1447 + 32 <= return_data.size
        mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_1447)] = mem[(7 * ceil32(return_data.size)) + _1398 + 1376 len ceil32(_1447)]
        if ceil32(_1447) <= _1447:
            mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7186 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 864] = mem[_7186]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7662 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 896] = mem[_7662]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7995 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 928] = mem[_7995]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8225 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 960] = mem[_8225]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8429 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 992] = mem[_8429]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8632 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8632]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8825 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8825]
            mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
            mem[(7 * ceil32(return_data.size)) + 1120] = ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9017 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9017]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9209 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9209] == mem[_9209 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9209 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9401 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9401] == mem[_9401 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9401 + 12 len 20]
            mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9593 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9593] == bool(mem[_9593])
            mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9593])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            _9881 = mem[(8 * ceil32(return_data.size)) + 1344]
            mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
            mem[mem[64] + 576 len ceil32(_9881)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9881)]
            if ceil32(_9881) > _9881:
                mem[_9881 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
            mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
            mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
            mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
            mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
            mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
            mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
            mem[mem[64] + 288] = ext_call.return_data[0]
            mem[mem[64] + 320] = ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
            mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
            mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   ext_call.return_data[0],
                   ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   mem[mem[64] + 544 len ceil32(_9881) + 32]
        mem[_1447 + (8 * ceil32(return_data.size)) + 1376] = 0
        mem[(7 * ceil32(return_data.size)) + 832] = (8 * ceil32(return_data.size)) + 1344
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x194ba6a with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7187 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 864] = mem[_7187]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x27932f9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7663 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 896] = mem[_7663]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0xaa8d8fdd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7996 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 928] = mem[_7996]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getDepositTokens() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8226 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 960] = mem[_8226]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getLockTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8430 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 992] = mem[_8430]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getDepositTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8633 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 1024] = mem[_8633]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x4b6a8ec8 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8826 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 1056] = mem[_8826]
        mem[(7 * ceil32(return_data.size)) + 1088] = ext_call.return_data[0]
        mem[(7 * ceil32(return_data.size)) + 1120] = ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x56fe8cf7 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9018 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[(7 * ceil32(return_data.size)) + 1152] = mem[_9018]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getDepositorAddress() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9210 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_9210] == mem[_9210 + 12 len 20]
        mem[(7 * ceil32(return_data.size)) + 1184] = mem[_9210 + 12 len 20]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x910afbe9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9402 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_9402] == mem[_9402 + 12 len 20]
        mem[(7 * ceil32(return_data.size)) + 1216] = mem[_9402 + 12 len 20]
        mem[(7 * ceil32(return_data.size)) + 1248] = uint8(ext_call.return_data[0])
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getStatus() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9594 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_9594] == bool(mem[_9594])
        mem[(7 * ceil32(return_data.size)) + 1280] = bool(mem[_9594])
        mem[0] = address(cd[4])
        mem[32] = sha3(msg.sender, 2)
        mem[(7 * ceil32(return_data.size)) + 1312] = bool(stor2[msg.sender][address(cd[4])])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        _9882 = mem[(8 * ceil32(return_data.size)) + 1344]
        mem[mem[64] + 544] = mem[(8 * ceil32(return_data.size)) + 1344]
        mem[mem[64] + 576 len ceil32(_9882)] = mem[(8 * ceil32(return_data.size)) + 1376 len ceil32(_9882)]
        if ceil32(_9882) > _9882:
            mem[_9882 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[(7 * ceil32(return_data.size)) + 864]
        mem[mem[64] + 96] = mem[(7 * ceil32(return_data.size)) + 896]
        mem[mem[64] + 128] = mem[(7 * ceil32(return_data.size)) + 928]
        mem[mem[64] + 160] = mem[(7 * ceil32(return_data.size)) + 960]
        mem[mem[64] + 192] = mem[(7 * ceil32(return_data.size)) + 992]
        mem[mem[64] + 224] = mem[(7 * ceil32(return_data.size)) + 1024]
        mem[mem[64] + 256] = mem[(7 * ceil32(return_data.size)) + 1056]
        mem[mem[64] + 288] = ext_call.return_data[0]
        mem[mem[64] + 320] = ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[(7 * ceil32(return_data.size)) + 1152]
        mem[mem[64] + 384] = mem[(7 * ceil32(return_data.size)) + 1196 len 20]
        mem[mem[64] + 416] = mem[(7 * ceil32(return_data.size)) + 1228 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[(7 * ceil32(return_data.size)) + 1280])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               ext_call.return_data[0],
               ext_call.return_data[0] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * ext_call.return_data[32] / sub_5d98fc27 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(cd[4])]),
               mem[mem[64] + 544 len ceil32(_9882) + 32]
    if return_data.size <= 3:
        revert with ext_call.return_data[0 len return_data.size]
    mem[0 len 4] = ext_call.return_data[0 len 4]
    if uint32(mem[4 len 28]) >> 224 != Error(string arg1):
        revert with ext_call.return_data[0 len return_data.size]
    if return_data.size < 68:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 640 len return_data.size - 4] = ext_call.return_data[4 len return_data.size - 4]
    if ext_call.return_data[0] > test266151307() or ext_call.return_data[0] + 36 > return_data.size:
        revert with ext_call.return_data[0 len return_data.size]
    if mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 640] > test266151307():
        revert with ext_call.return_data[0 len return_data.size]
    if ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 640] + 32 > return_data.size - 4:
        revert with ext_call.return_data[0 len return_data.size]
    if floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 640] + 31) + 641 < 640 or (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 640] + 31) + 641 > test266151307():
        revert with 0, 65
    mem[64] = (2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 640] + 31) + 641
    if not (2 * ceil32(return_data.size)) + ext_call.return_data[0] + 640:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + floor32(ext_call.return_data[0] + mem[(2 * ceil32(return_data.size)) + ext_call.return_data[0] + 640] + 31) + 641] = 0x70a0823100000000000000000000000000000000000000000000000000000000
    mem[mem[64] + 4] = sub_8893d55aAddress
    require ext_code.size(stor19)
    staticcall stor19.0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _496 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _511 = mem[_496]
    mem[mem[64] + 4] = sub_8893d55aAddress
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x70a08231 with:
            gas gas_remaining wei
           args sub_8893d55aAddress
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _548 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _566 = mem[_548]
    if not mem[_548]:
        _630 = mem[64]
        mem[64] = mem[64] + 64
        mem[_630] = 26
        mem[_630 + 32] = 'SafeMath: division by zero'
        if not _511:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(stor21.field_0))
        staticcall address(stor21.field_0).0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _751 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _775 = mem[_751]
        require mem[_751] == mem[_751 + 31 len 1]
        if not ext_call.return_data[0]:
            _894 = mem[64]
            mem[64] = mem[64] + 64
            mem[_894] = 26
            mem[_894 + 32] = 'SafeMath: division by zero'
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero', 0
            if not 0 / ext_call.return_data[0]:
                _1038 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1038] = 26
                mem[_1038 + 32] = 'SafeMath: division by zero'
                if not sub_5d98fc27:
                    revert with 0, 'SafeMath: division by zero', 0
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getCurrentBalance() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1239 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1278 = mem[_1239]
                if not mem[_1239]:
                    _1397 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1397] = 26
                    mem[_1397 + 32] = 'SafeMath: division by zero'
                    if not sub_5a8c5d60:
                        revert with 0, 'SafeMath: division by zero', 0
                    _1548 = mem[64]
                    mem[64] = mem[64] + 512
                    mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xfd306c4e with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1588 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1640 = mem[_1588]
                    require mem[_1588] <= test266151307()
                    require _1588 + mem[_1588] + 31 < _1588 + return_data.size
                    _1730 = mem[_1588 + mem[_1588]]
                    if mem[_1588 + mem[_1588]] > test266151307():
                        revert with 0, 65
                    if ceil32(ceil32(mem[_1588 + mem[_1588]])) + 1 < 0 or _1588 + ceil32(return_data.size) + ceil32(ceil32(mem[_1588 + mem[_1588]])) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _1588 + ceil32(return_data.size) + ceil32(ceil32(mem[_1588 + mem[_1588]])) + 1
                    mem[_1588 + ceil32(return_data.size)] = _1730
                    require _1640 + _1730 + 32 <= return_data.size
                    mem[_1588 + ceil32(return_data.size) + 32 len ceil32(_1730)] = mem[_1588 + _1640 + 32 len ceil32(_1730)]
                    if ceil32(_1730) <= _1730:
                        mem[_1548] = _1588 + ceil32(return_data.size)
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x194ba6a with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7184 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 32] = mem[_7184]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x27932f9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7660 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 64] = mem[_7660]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0xaa8d8fdd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7993 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 96] = mem[_7993]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getDepositTokens() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8223 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 128] = mem[_8223]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getLockTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8427 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 160] = mem[_8427]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getDepositTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8630 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 192] = mem[_8630]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x4b6a8ec8 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8823 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 224] = mem[_8823]
                        mem[_1548 + 256] = _1278
                        mem[_1548 + 288] = 0 / sub_5a8c5d60
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x56fe8cf7 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9015 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 320] = mem[_9015]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getDepositorAddress() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9207 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_9207] == mem[_9207 + 12 len 20]
                        mem[_1548 + 352] = mem[_9207 + 12 len 20]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x910afbe9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9399 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_9399] == mem[_9399 + 12 len 20]
                        mem[_1548 + 384] = mem[_9399 + 12 len 20]
                        mem[_1548 + 416] = uint8(_775)
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getStatus() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9591 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_9591] == bool(mem[_9591])
                        mem[_1548 + 448] = bool(mem[_9591])
                    else:
                        mem[_1730 + _1588 + ceil32(return_data.size) + 32] = 0
                        mem[_1548] = _1588 + ceil32(return_data.size)
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x194ba6a with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7185 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 32] = mem[_7185]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x27932f9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7661 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 64] = mem[_7661]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0xaa8d8fdd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7994 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 96] = mem[_7994]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getDepositTokens() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8224 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 128] = mem[_8224]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getLockTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8428 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 160] = mem[_8428]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getDepositTime() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8631 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 192] = mem[_8631]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x4b6a8ec8 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8824 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 224] = mem[_8824]
                        mem[_1548 + 256] = _1278
                        mem[_1548 + 288] = 0 / sub_5a8c5d60
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x56fe8cf7 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9016 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_1548 + 320] = mem[_9016]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getDepositorAddress() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9208 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_9208] == mem[_9208 + 12 len 20]
                        mem[_1548 + 352] = mem[_9208 + 12 len 20]
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).0x910afbe9 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9400 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_9400] == mem[_9400 + 12 len 20]
                        mem[_1548 + 384] = mem[_9400 + 12 len 20]
                        mem[_1548 + 416] = uint8(_775)
                        require ext_code.size(address(cd[4]))
                        staticcall address(cd[4]).getStatus() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9592 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_9592] == bool(mem[_9592])
                        mem[_1548 + 448] = bool(mem[_9592])
                    mem[0] = address(cd[4])
                    mem[32] = sha3(msg.sender, 2)
                    mem[_1548 + 480] = bool(stor2[msg.sender][address(cd[4])])
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = 512
                    mem[mem[64] + 544] = _1730
                    mem[mem[64] + 576 len ceil32(_1730)] = mem[_1588 + ceil32(return_data.size) + 32 len ceil32(_1730)]
                    if ceil32(_1730) > _1730:
                        mem[_1730 + mem[64] + 576] = 0
                    mem[mem[64] + 64] = mem[_1548 + 32]
                    mem[mem[64] + 96] = mem[_1548 + 64]
                    mem[mem[64] + 128] = mem[_1548 + 96]
                    mem[mem[64] + 160] = mem[_1548 + 128]
                    mem[mem[64] + 192] = mem[_1548 + 160]
                    mem[mem[64] + 224] = mem[_1548 + 192]
                    mem[mem[64] + 256] = mem[_1548 + 224]
                    mem[mem[64] + 288] = _1278
                    mem[mem[64] + 320] = 0 / sub_5a8c5d60
                    mem[mem[64] + 352] = mem[_1548 + 320]
                    mem[mem[64] + 384] = mem[_1548 + 364 len 20]
                    mem[mem[64] + 416] = mem[_1548 + 396 len 20]
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = bool(mem[_1548 + 448])
                    return 32, 512, 
                           mem[mem[64] + 64 len 224],
                           _1278,
                           0 / sub_5a8c5d60,
                           mem[mem[64] + 352 len 96],
                           0,
                           mem[mem[64] + 480],
                           bool(stor2[msg.sender][address(cd[4])]),
                           _1730,
                           mem[mem[64] + 576 len ceil32(_1730)]
                if mem[_1239] and 0 / sub_5d98fc27 > -1 / mem[_1239]:
                    revert with 0, 17
                if not mem[_1239]:
                    revert with 0, 18
                if mem[_1239] * 0 / sub_5d98fc27 / mem[_1239] != 0 / sub_5d98fc27:
                    revert with 0, 'SafeMath: multiplication overflow'
                _1520 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1520] = 26
                mem[_1520 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _1726 = mem[64]
                mem[64] = mem[64] + 512
                mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1772 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1852 = mem[_1772]
                require mem[_1772] <= test266151307()
                require _1772 + mem[_1772] + 31 < _1772 + return_data.size
                _1937 = mem[_1772 + mem[_1772]]
                if mem[_1772 + mem[_1772]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_1772 + mem[_1772]])) + 1 < 0 or _1772 + ceil32(return_data.size) + ceil32(ceil32(mem[_1772 + mem[_1772]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _1772 + ceil32(return_data.size) + ceil32(ceil32(mem[_1772 + mem[_1772]])) + 1
                mem[_1772 + ceil32(return_data.size)] = _1937
                require _1852 + _1937 + 32 <= return_data.size
                mem[_1772 + ceil32(return_data.size) + 32 len ceil32(_1937)] = mem[_1772 + _1852 + 32 len ceil32(_1937)]
                if ceil32(_1937) <= _1937:
                    mem[_1726] = _1772 + ceil32(return_data.size)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7182 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 32] = mem[_7182]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7658 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 64] = mem[_7658]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7991 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 96] = mem[_7991]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8221 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 128] = mem[_8221]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8425 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 160] = mem[_8425]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8628 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 192] = mem[_8628]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8821 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 224] = mem[_8821]
                    mem[_1726 + 256] = _1278
                    mem[_1726 + 288] = _1278 * 0 / sub_5d98fc27 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9013 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 320] = mem[_9013]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9205 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9205] == mem[_9205 + 12 len 20]
                    mem[_1726 + 352] = mem[_9205 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9397 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9397] == mem[_9397 + 12 len 20]
                    mem[_1726 + 384] = mem[_9397 + 12 len 20]
                    mem[_1726 + 416] = uint8(_775)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9589 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9589] == bool(mem[_9589])
                    mem[_1726 + 448] = bool(mem[_9589])
                else:
                    mem[_1937 + _1772 + ceil32(return_data.size) + 32] = 0
                    mem[_1726] = _1772 + ceil32(return_data.size)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7183 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 32] = mem[_7183]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7659 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 64] = mem[_7659]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7992 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 96] = mem[_7992]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8222 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 128] = mem[_8222]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8426 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 160] = mem[_8426]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8629 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 192] = mem[_8629]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8822 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 224] = mem[_8822]
                    mem[_1726 + 256] = _1278
                    mem[_1726 + 288] = _1278 * 0 / sub_5d98fc27 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9014 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1726 + 320] = mem[_9014]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9206 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9206] == mem[_9206 + 12 len 20]
                    mem[_1726 + 352] = mem[_9206 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9398 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9398] == mem[_9398 + 12 len 20]
                    mem[_1726 + 384] = mem[_9398 + 12 len 20]
                    mem[_1726 + 416] = uint8(_775)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9590 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9590] == bool(mem[_9590])
                    mem[_1726 + 448] = bool(mem[_9590])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[_1726 + 480] = bool(stor2[msg.sender][address(cd[4])])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                mem[mem[64] + 544] = _1937
                mem[mem[64] + 576 len ceil32(_1937)] = mem[_1772 + ceil32(return_data.size) + 32 len ceil32(_1937)]
                if ceil32(_1937) > _1937:
                    mem[_1937 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[_1726 + 32]
                mem[mem[64] + 96] = mem[_1726 + 64]
                mem[mem[64] + 128] = mem[_1726 + 96]
                mem[mem[64] + 160] = mem[_1726 + 128]
                mem[mem[64] + 192] = mem[_1726 + 160]
                mem[mem[64] + 224] = mem[_1726 + 192]
                mem[mem[64] + 256] = mem[_1726 + 224]
                mem[mem[64] + 288] = _1278
                mem[mem[64] + 320] = _1278 * 0 / sub_5d98fc27 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[_1726 + 320]
                mem[mem[64] + 384] = mem[_1726 + 364 len 20]
                mem[mem[64] + 416] = mem[_1726 + 396 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[_1726 + 448])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       _1278,
                       _1278 * 0 / sub_5d98fc27 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(cd[4])]),
                       _1937,
                       mem[mem[64] + 576 len ceil32(_1937)]
            if 0 / ext_call.return_data[0] and 0 / _511 > -1 / 0 / ext_call.return_data[0]:
                revert with 0, 17
            if not 0 / ext_call.return_data[0]:
                revert with 0, 18
            if 0 / ext_call.return_data[0] * 0 / _511 / 0 / ext_call.return_data[0] != 0 / _511:
                revert with 0, 'SafeMath: multiplication overflow'
            _1153 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1153] = 26
            mem[_1153 + 32] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getCurrentBalance() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1360 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1396 = mem[_1360]
            if not mem[_1360]:
                _1519 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1519] = 26
                mem[_1519 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _1722 = mem[64]
                mem[64] = mem[64] + 512
                mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1771 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1849 = mem[_1771]
                require mem[_1771] <= test266151307()
                require _1771 + mem[_1771] + 31 < _1771 + return_data.size
                _1936 = mem[_1771 + mem[_1771]]
                if mem[_1771 + mem[_1771]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_1771 + mem[_1771]])) + 1 < 0 or _1771 + ceil32(return_data.size) + ceil32(ceil32(mem[_1771 + mem[_1771]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _1771 + ceil32(return_data.size) + ceil32(ceil32(mem[_1771 + mem[_1771]])) + 1
                mem[_1771 + ceil32(return_data.size)] = _1936
                require _1849 + _1936 + 32 <= return_data.size
                mem[_1771 + ceil32(return_data.size) + 32 len ceil32(_1936)] = mem[_1771 + _1849 + 32 len ceil32(_1936)]
                if ceil32(_1936) <= _1936:
                    mem[_1722] = _1771 + ceil32(return_data.size)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7180 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 32] = mem[_7180]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7656 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 64] = mem[_7656]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7989 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 96] = mem[_7989]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8219 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 128] = mem[_8219]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8423 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 160] = mem[_8423]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8626 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 192] = mem[_8626]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8819 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 224] = mem[_8819]
                    mem[_1722 + 256] = _1396
                    mem[_1722 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9011 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 320] = mem[_9011]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9203 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9203] == mem[_9203 + 12 len 20]
                    mem[_1722 + 352] = mem[_9203 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9395 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9395] == mem[_9395 + 12 len 20]
                    mem[_1722 + 384] = mem[_9395 + 12 len 20]
                    mem[_1722 + 416] = uint8(_775)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9587 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9587] == bool(mem[_9587])
                    mem[_1722 + 448] = bool(mem[_9587])
                else:
                    mem[_1936 + _1771 + ceil32(return_data.size) + 32] = 0
                    mem[_1722] = _1771 + ceil32(return_data.size)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7181 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 32] = mem[_7181]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7657 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 64] = mem[_7657]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7990 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 96] = mem[_7990]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8220 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 128] = mem[_8220]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8424 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 160] = mem[_8424]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8627 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 192] = mem[_8627]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8820 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 224] = mem[_8820]
                    mem[_1722 + 256] = _1396
                    mem[_1722 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9012 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1722 + 320] = mem[_9012]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9204 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9204] == mem[_9204 + 12 len 20]
                    mem[_1722 + 352] = mem[_9204 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9396 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9396] == mem[_9396 + 12 len 20]
                    mem[_1722 + 384] = mem[_9396 + 12 len 20]
                    mem[_1722 + 416] = uint8(_775)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9588 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9588] == bool(mem[_9588])
                    mem[_1722 + 448] = bool(mem[_9588])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[_1722 + 480] = bool(stor2[msg.sender][address(cd[4])])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                mem[mem[64] + 544] = _1936
                mem[mem[64] + 576 len ceil32(_1936)] = mem[_1771 + ceil32(return_data.size) + 32 len ceil32(_1936)]
                if ceil32(_1936) > _1936:
                    mem[_1936 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[_1722 + 32]
                mem[mem[64] + 96] = mem[_1722 + 64]
                mem[mem[64] + 128] = mem[_1722 + 96]
                mem[mem[64] + 160] = mem[_1722 + 128]
                mem[mem[64] + 192] = mem[_1722 + 160]
                mem[mem[64] + 224] = mem[_1722 + 192]
                mem[mem[64] + 256] = mem[_1722 + 224]
                mem[mem[64] + 288] = _1396
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[_1722 + 320]
                mem[mem[64] + 384] = mem[_1722 + 364 len 20]
                mem[mem[64] + 416] = mem[_1722 + 396 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[_1722 + 448])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       _1396,
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(cd[4])]),
                       _1936,
                       mem[mem[64] + 576 len ceil32(_1936)]
            if mem[_1360] and 0 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 > -1 / mem[_1360]:
                revert with 0, 17
            if not mem[_1360]:
                revert with 0, 18
            if mem[_1360] * 0 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / mem[_1360] != 0 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            _1680 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1680] = 26
            mem[_1680 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _1932 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1985 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2070 = mem[_1985]
            require mem[_1985] <= test266151307()
            require _1985 + mem[_1985] + 31 < _1985 + return_data.size
            _2137 = mem[_1985 + mem[_1985]]
            if mem[_1985 + mem[_1985]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_1985 + mem[_1985]])) + 1 < 0 or _1985 + ceil32(return_data.size) + ceil32(ceil32(mem[_1985 + mem[_1985]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1985 + ceil32(return_data.size) + ceil32(ceil32(mem[_1985 + mem[_1985]])) + 1
            mem[_1985 + ceil32(return_data.size)] = _2137
            require _2070 + _2137 + 32 <= return_data.size
            mem[_1985 + ceil32(return_data.size) + 32 len ceil32(_2137)] = mem[_1985 + _2070 + 32 len ceil32(_2137)]
            if ceil32(_2137) <= _2137:
                mem[_1932] = _1985 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7178 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 32] = mem[_7178]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7654 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 64] = mem[_7654]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7987 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 96] = mem[_7987]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8217 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 128] = mem[_8217]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8421 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 160] = mem[_8421]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8624 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 192] = mem[_8624]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8817 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 224] = mem[_8817]
                mem[_1932 + 256] = _1396
                mem[_1932 + 288] = _1396 * 0 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9009 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 320] = mem[_9009]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9201 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9201] == mem[_9201 + 12 len 20]
                mem[_1932 + 352] = mem[_9201 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9393 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9393] == mem[_9393 + 12 len 20]
                mem[_1932 + 384] = mem[_9393 + 12 len 20]
                mem[_1932 + 416] = uint8(_775)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9585 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9585] == bool(mem[_9585])
                mem[_1932 + 448] = bool(mem[_9585])
            else:
                mem[_2137 + _1985 + ceil32(return_data.size) + 32] = 0
                mem[_1932] = _1985 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7179 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 32] = mem[_7179]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7655 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 64] = mem[_7655]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7988 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 96] = mem[_7988]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8218 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 128] = mem[_8218]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8422 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 160] = mem[_8422]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8625 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 192] = mem[_8625]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8818 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 224] = mem[_8818]
                mem[_1932 + 256] = _1396
                mem[_1932 + 288] = _1396 * 0 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9010 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1932 + 320] = mem[_9010]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9202 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9202] == mem[_9202 + 12 len 20]
                mem[_1932 + 352] = mem[_9202 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9394 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9394] == mem[_9394 + 12 len 20]
                mem[_1932 + 384] = mem[_9394 + 12 len 20]
                mem[_1932 + 416] = uint8(_775)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9586 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9586] == bool(mem[_9586])
                mem[_1932 + 448] = bool(mem[_9586])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[_1932 + 480] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _2137
            mem[mem[64] + 576 len ceil32(_2137)] = mem[_1985 + ceil32(return_data.size) + 32 len ceil32(_2137)]
            if ceil32(_2137) > _2137:
                mem[_2137 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_1932 + 32]
            mem[mem[64] + 96] = mem[_1932 + 64]
            mem[mem[64] + 128] = mem[_1932 + 96]
            mem[mem[64] + 160] = mem[_1932 + 128]
            mem[mem[64] + 192] = mem[_1932 + 160]
            mem[mem[64] + 224] = mem[_1932 + 192]
            mem[mem[64] + 256] = mem[_1932 + 224]
            mem[mem[64] + 288] = _1396
            mem[mem[64] + 320] = _1396 * 0 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_1932 + 320]
            mem[mem[64] + 384] = mem[_1932 + 364 len 20]
            mem[mem[64] + 416] = mem[_1932 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_1932 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _1396,
                   _1396 * 0 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   _2137,
                   mem[mem[64] + 576 len ceil32(_2137)]
        if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
            revert with 0, 'SafeMath: multiplication overflow'
        _954 = mem[64]
        mem[64] = mem[64] + 64
        mem[_954] = 26
        mem[_954 + 32] = 'SafeMath: division by zero'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            _1152 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1152] = 26
            mem[_1152 + 32] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getCurrentBalance() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1359 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1395 = mem[_1359]
            if not mem[_1359]:
                _1518 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1518] = 26
                mem[_1518 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _1718 = mem[64]
                mem[64] = mem[64] + 512
                mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1770 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1846 = mem[_1770]
                require mem[_1770] <= test266151307()
                require _1770 + mem[_1770] + 31 < _1770 + return_data.size
                _1931 = mem[_1770 + mem[_1770]]
                if mem[_1770 + mem[_1770]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_1770 + mem[_1770]])) + 1 < 0 or _1770 + ceil32(return_data.size) + ceil32(ceil32(mem[_1770 + mem[_1770]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _1770 + ceil32(return_data.size) + ceil32(ceil32(mem[_1770 + mem[_1770]])) + 1
                mem[_1770 + ceil32(return_data.size)] = _1931
                require _1846 + _1931 + 32 <= return_data.size
                mem[_1770 + ceil32(return_data.size) + 32 len ceil32(_1931)] = mem[_1770 + _1846 + 32 len ceil32(_1931)]
                if ceil32(_1931) <= _1931:
                    mem[_1718] = _1770 + ceil32(return_data.size)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7176 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 32] = mem[_7176]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7652 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 64] = mem[_7652]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7985 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 96] = mem[_7985]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8215 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 128] = mem[_8215]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8419 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 160] = mem[_8419]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8622 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 192] = mem[_8622]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8815 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 224] = mem[_8815]
                    mem[_1718 + 256] = _1395
                    mem[_1718 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9007 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 320] = mem[_9007]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9199 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9199] == mem[_9199 + 12 len 20]
                    mem[_1718 + 352] = mem[_9199 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9391 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9391] == mem[_9391 + 12 len 20]
                    mem[_1718 + 384] = mem[_9391 + 12 len 20]
                    mem[_1718 + 416] = uint8(_775)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9583 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9583] == bool(mem[_9583])
                    mem[_1718 + 448] = bool(mem[_9583])
                else:
                    mem[_1931 + _1770 + ceil32(return_data.size) + 32] = 0
                    mem[_1718] = _1770 + ceil32(return_data.size)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7177 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 32] = mem[_7177]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7653 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 64] = mem[_7653]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7986 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 96] = mem[_7986]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8216 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 128] = mem[_8216]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8420 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 160] = mem[_8420]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8623 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 192] = mem[_8623]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8816 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 224] = mem[_8816]
                    mem[_1718 + 256] = _1395
                    mem[_1718 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9008 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1718 + 320] = mem[_9008]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9200 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9200] == mem[_9200 + 12 len 20]
                    mem[_1718 + 352] = mem[_9200 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9392 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9392] == mem[_9392 + 12 len 20]
                    mem[_1718 + 384] = mem[_9392 + 12 len 20]
                    mem[_1718 + 416] = uint8(_775)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9584 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9584] == bool(mem[_9584])
                    mem[_1718 + 448] = bool(mem[_9584])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[_1718 + 480] = bool(stor2[msg.sender][address(cd[4])])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                mem[mem[64] + 544] = _1931
                mem[mem[64] + 576 len ceil32(_1931)] = mem[_1770 + ceil32(return_data.size) + 32 len ceil32(_1931)]
                if ceil32(_1931) > _1931:
                    mem[_1931 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[_1718 + 32]
                mem[mem[64] + 96] = mem[_1718 + 64]
                mem[mem[64] + 128] = mem[_1718 + 96]
                mem[mem[64] + 160] = mem[_1718 + 128]
                mem[mem[64] + 192] = mem[_1718 + 160]
                mem[mem[64] + 224] = mem[_1718 + 192]
                mem[mem[64] + 256] = mem[_1718 + 224]
                mem[mem[64] + 288] = _1395
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[_1718 + 320]
                mem[mem[64] + 384] = mem[_1718 + 364 len 20]
                mem[mem[64] + 416] = mem[_1718 + 396 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[_1718 + 448])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       _1395,
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(cd[4])]),
                       _1931,
                       mem[mem[64] + 576 len ceil32(_1931)]
            if mem[_1359] and 0 / sub_5d98fc27 > -1 / mem[_1359]:
                revert with 0, 17
            if not mem[_1359]:
                revert with 0, 18
            if mem[_1359] * 0 / sub_5d98fc27 / mem[_1359] != 0 / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            _1679 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1679] = 26
            mem[_1679 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _1927 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1984 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2067 = mem[_1984]
            require mem[_1984] <= test266151307()
            require _1984 + mem[_1984] + 31 < _1984 + return_data.size
            _2136 = mem[_1984 + mem[_1984]]
            if mem[_1984 + mem[_1984]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_1984 + mem[_1984]])) + 1 < 0 or _1984 + ceil32(return_data.size) + ceil32(ceil32(mem[_1984 + mem[_1984]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1984 + ceil32(return_data.size) + ceil32(ceil32(mem[_1984 + mem[_1984]])) + 1
            mem[_1984 + ceil32(return_data.size)] = _2136
            require _2067 + _2136 + 32 <= return_data.size
            mem[_1984 + ceil32(return_data.size) + 32 len ceil32(_2136)] = mem[_1984 + _2067 + 32 len ceil32(_2136)]
            if ceil32(_2136) <= _2136:
                mem[_1927] = _1984 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7174 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 32] = mem[_7174]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7650 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 64] = mem[_7650]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7983 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 96] = mem[_7983]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8213 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 128] = mem[_8213]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8417 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 160] = mem[_8417]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8620 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 192] = mem[_8620]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8813 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 224] = mem[_8813]
                mem[_1927 + 256] = _1395
                mem[_1927 + 288] = _1395 * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9005 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 320] = mem[_9005]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9197 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9197] == mem[_9197 + 12 len 20]
                mem[_1927 + 352] = mem[_9197 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9389 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9389] == mem[_9389 + 12 len 20]
                mem[_1927 + 384] = mem[_9389 + 12 len 20]
                mem[_1927 + 416] = uint8(_775)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9581 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9581] == bool(mem[_9581])
                mem[_1927 + 448] = bool(mem[_9581])
            else:
                mem[_2136 + _1984 + ceil32(return_data.size) + 32] = 0
                mem[_1927] = _1984 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7175 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 32] = mem[_7175]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7651 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 64] = mem[_7651]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7984 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 96] = mem[_7984]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8214 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 128] = mem[_8214]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8418 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 160] = mem[_8418]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8621 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 192] = mem[_8621]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8814 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 224] = mem[_8814]
                mem[_1927 + 256] = _1395
                mem[_1927 + 288] = _1395 * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9006 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1927 + 320] = mem[_9006]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9198 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9198] == mem[_9198 + 12 len 20]
                mem[_1927 + 352] = mem[_9198 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9390 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9390] == mem[_9390 + 12 len 20]
                mem[_1927 + 384] = mem[_9390 + 12 len 20]
                mem[_1927 + 416] = uint8(_775)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9582 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9582] == bool(mem[_9582])
                mem[_1927 + 448] = bool(mem[_9582])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[_1927 + 480] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _2136
            mem[mem[64] + 576 len ceil32(_2136)] = mem[_1984 + ceil32(return_data.size) + 32 len ceil32(_2136)]
            if ceil32(_2136) > _2136:
                mem[_2136 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_1927 + 32]
            mem[mem[64] + 96] = mem[_1927 + 64]
            mem[mem[64] + 128] = mem[_1927 + 96]
            mem[mem[64] + 160] = mem[_1927 + 128]
            mem[mem[64] + 192] = mem[_1927 + 160]
            mem[mem[64] + 224] = mem[_1927 + 192]
            mem[mem[64] + 256] = mem[_1927 + 224]
            mem[mem[64] + 288] = _1395
            mem[mem[64] + 320] = _1395 * 0 / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_1927 + 320]
            mem[mem[64] + 384] = mem[_1927 + 364 len 20]
            mem[mem[64] + 416] = mem[_1927 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_1927 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _1395,
                   _1395 * 0 / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   _2136,
                   mem[mem[64] + 576 len ceil32(_2136)]
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and 0 / _511 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
            revert with 0, 18
        if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _511 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != 0 / _511:
            revert with 0, 'SafeMath: multiplication overflow'
        _1277 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1277] = 26
        mem[_1277 + 32] = 'SafeMath: division by zero'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getCurrentBalance() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1469 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1517 = mem[_1469]
        if not mem[_1469]:
            _1678 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1678] = 26
            mem[_1678 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _1923 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1983 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2064 = mem[_1983]
            require mem[_1983] <= test266151307()
            require _1983 + mem[_1983] + 31 < _1983 + return_data.size
            _2135 = mem[_1983 + mem[_1983]]
            if mem[_1983 + mem[_1983]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_1983 + mem[_1983]])) + 1 < 0 or _1983 + ceil32(return_data.size) + ceil32(ceil32(mem[_1983 + mem[_1983]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1983 + ceil32(return_data.size) + ceil32(ceil32(mem[_1983 + mem[_1983]])) + 1
            mem[_1983 + ceil32(return_data.size)] = _2135
            require _2064 + _2135 + 32 <= return_data.size
            mem[_1983 + ceil32(return_data.size) + 32 len ceil32(_2135)] = mem[_1983 + _2064 + 32 len ceil32(_2135)]
            if ceil32(_2135) <= _2135:
                mem[_1923] = _1983 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7172 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 32] = mem[_7172]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7648 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 64] = mem[_7648]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7981 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 96] = mem[_7981]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8211 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 128] = mem[_8211]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8415 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 160] = mem[_8415]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8618 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 192] = mem[_8618]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8811 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 224] = mem[_8811]
                mem[_1923 + 256] = _1517
                mem[_1923 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9003 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 320] = mem[_9003]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9195 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9195] == mem[_9195 + 12 len 20]
                mem[_1923 + 352] = mem[_9195 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9387 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9387] == mem[_9387 + 12 len 20]
                mem[_1923 + 384] = mem[_9387 + 12 len 20]
                mem[_1923 + 416] = uint8(_775)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9579 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9579] == bool(mem[_9579])
                mem[_1923 + 448] = bool(mem[_9579])
            else:
                mem[_2135 + _1983 + ceil32(return_data.size) + 32] = 0
                mem[_1923] = _1983 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7173 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 32] = mem[_7173]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7649 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 64] = mem[_7649]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7982 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 96] = mem[_7982]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8212 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 128] = mem[_8212]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8416 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 160] = mem[_8416]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8619 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 192] = mem[_8619]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8812 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 224] = mem[_8812]
                mem[_1923 + 256] = _1517
                mem[_1923 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9004 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1923 + 320] = mem[_9004]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9196 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9196] == mem[_9196 + 12 len 20]
                mem[_1923 + 352] = mem[_9196 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9388 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9388] == mem[_9388 + 12 len 20]
                mem[_1923 + 384] = mem[_9388 + 12 len 20]
                mem[_1923 + 416] = uint8(_775)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9580 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9580] == bool(mem[_9580])
                mem[_1923 + 448] = bool(mem[_9580])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[_1923 + 480] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _2135
            mem[mem[64] + 576 len ceil32(_2135)] = mem[_1983 + ceil32(return_data.size) + 32 len ceil32(_2135)]
            if ceil32(_2135) > _2135:
                mem[_2135 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_1923 + 32]
            mem[mem[64] + 96] = mem[_1923 + 64]
            mem[mem[64] + 128] = mem[_1923 + 96]
            mem[mem[64] + 160] = mem[_1923 + 128]
            mem[mem[64] + 192] = mem[_1923 + 160]
            mem[mem[64] + 224] = mem[_1923 + 192]
            mem[mem[64] + 256] = mem[_1923 + 224]
            mem[mem[64] + 288] = _1517
            mem[mem[64] + 320] = 0 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_1923 + 320]
            mem[mem[64] + 384] = mem[_1923 + 364 len 20]
            mem[mem[64] + 416] = mem[_1923 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_1923 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _1517,
                   0 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   _2135,
                   mem[mem[64] + 576 len ceil32(_2135)]
        if mem[_1469] and ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 > -1 / mem[_1469]:
            revert with 0, 17
        if not mem[_1469]:
            revert with 0, 18
        if mem[_1469] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / mem[_1469] != ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        _1882 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1882] = 26
        mem[_1882 + 32] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        _2131 = mem[64]
        mem[64] = mem[64] + 512
        mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2197 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2265 = mem[_2197]
        require mem[_2197] <= test266151307()
        require _2197 + mem[_2197] + 31 < _2197 + return_data.size
        _2346 = mem[_2197 + mem[_2197]]
        if mem[_2197 + mem[_2197]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_2197 + mem[_2197]])) + 1 < 0 or _2197 + ceil32(return_data.size) + ceil32(ceil32(mem[_2197 + mem[_2197]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _2197 + ceil32(return_data.size) + ceil32(ceil32(mem[_2197 + mem[_2197]])) + 1
        mem[_2197 + ceil32(return_data.size)] = _2346
        require _2265 + _2346 + 32 <= return_data.size
        mem[_2197 + ceil32(return_data.size) + 32 len ceil32(_2346)] = mem[_2197 + _2265 + 32 len ceil32(_2346)]
        if ceil32(_2346) <= _2346:
            mem[_2131] = _2197 + ceil32(return_data.size)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7170 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 32] = mem[_7170]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7646 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 64] = mem[_7646]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7979 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 96] = mem[_7979]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8209 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 128] = mem[_8209]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8413 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 160] = mem[_8413]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8616 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 192] = mem[_8616]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8809 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 224] = mem[_8809]
            mem[_2131 + 256] = _1517
            mem[_2131 + 288] = _1517 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9001 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 320] = mem[_9001]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9193 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9193] == mem[_9193 + 12 len 20]
            mem[_2131 + 352] = mem[_9193 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9385 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9385] == mem[_9385 + 12 len 20]
            mem[_2131 + 384] = mem[_9385 + 12 len 20]
            mem[_2131 + 416] = uint8(_775)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9577 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9577] == bool(mem[_9577])
            mem[_2131 + 448] = bool(mem[_9577])
        else:
            mem[_2346 + _2197 + ceil32(return_data.size) + 32] = 0
            mem[_2131] = _2197 + ceil32(return_data.size)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7171 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 32] = mem[_7171]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7647 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 64] = mem[_7647]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7980 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 96] = mem[_7980]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8210 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 128] = mem[_8210]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8414 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 160] = mem[_8414]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8617 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 192] = mem[_8617]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8810 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 224] = mem[_8810]
            mem[_2131 + 256] = _1517
            mem[_2131 + 288] = _1517 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9002 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2131 + 320] = mem[_9002]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9194 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9194] == mem[_9194 + 12 len 20]
            mem[_2131 + 352] = mem[_9194 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9386 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9386] == mem[_9386 + 12 len 20]
            mem[_2131 + 384] = mem[_9386 + 12 len 20]
            mem[_2131 + 416] = uint8(_775)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9578 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9578] == bool(mem[_9578])
            mem[_2131 + 448] = bool(mem[_9578])
        mem[0] = address(cd[4])
        mem[32] = sha3(msg.sender, 2)
        mem[_2131 + 480] = bool(stor2[msg.sender][address(cd[4])])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        mem[mem[64] + 544] = _2346
        mem[mem[64] + 576 len ceil32(_2346)] = mem[_2197 + ceil32(return_data.size) + 32 len ceil32(_2346)]
        if ceil32(_2346) > _2346:
            mem[_2346 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[_2131 + 32]
        mem[mem[64] + 96] = mem[_2131 + 64]
        mem[mem[64] + 128] = mem[_2131 + 96]
        mem[mem[64] + 160] = mem[_2131 + 128]
        mem[mem[64] + 192] = mem[_2131 + 160]
        mem[mem[64] + 224] = mem[_2131 + 192]
        mem[mem[64] + 256] = mem[_2131 + 224]
        mem[mem[64] + 288] = _1517
        mem[mem[64] + 320] = _1517 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[_2131 + 320]
        mem[mem[64] + 384] = mem[_2131 + 364 len 20]
        mem[mem[64] + 416] = mem[_2131 + 396 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[_2131 + 448])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               _1517,
               _1517 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * 0 / _511 / sub_5d98fc27 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(cd[4])]),
               _2346,
               mem[mem[64] + 576 len ceil32(_2346)]
    if mem[_548] and sub_5d98fc27 > -1 / mem[_548]:
        revert with 0, 17
    if not mem[_548]:
        revert with 0, 18
    if mem[_548] * sub_5d98fc27 / mem[_548] != sub_5d98fc27:
        revert with 0, 'SafeMath: multiplication overflow'
    _705 = mem[64]
    mem[64] = mem[64] + 64
    mem[_705] = 26
    mem[_705 + 32] = 'SafeMath: division by zero'
    if not _511:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(address(stor21.field_0))
    staticcall address(stor21.field_0).0x313ce567 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _828 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _853 = mem[_828]
    require mem[_828] == mem[_828 + 31 len 1]
    if not ext_call.return_data[0]:
        _953 = mem[64]
        mem[64] = mem[64] + 64
        mem[_953] = 26
        mem[_953 + 32] = 'SafeMath: division by zero'
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero', 0
        if not 0 / ext_call.return_data[0]:
            _1151 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1151] = 26
            mem[_1151 + 32] = 'SafeMath: division by zero'
            if not sub_5d98fc27:
                revert with 0, 'SafeMath: division by zero', 0
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getCurrentBalance() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1357 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1394 = mem[_1357]
            if not mem[_1357]:
                _1516 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1516] = 26
                mem[_1516 + 32] = 'SafeMath: division by zero'
                if not sub_5a8c5d60:
                    revert with 0, 'SafeMath: division by zero', 0
                _1714 = mem[64]
                mem[64] = mem[64] + 512
                mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xfd306c4e with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1769 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1842 = mem[_1769]
                require mem[_1769] <= test266151307()
                require _1769 + mem[_1769] + 31 < _1769 + return_data.size
                _1922 = mem[_1769 + mem[_1769]]
                if mem[_1769 + mem[_1769]] > test266151307():
                    revert with 0, 65
                if ceil32(ceil32(mem[_1769 + mem[_1769]])) + 1 < 0 or _1769 + ceil32(return_data.size) + ceil32(ceil32(mem[_1769 + mem[_1769]])) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _1769 + ceil32(return_data.size) + ceil32(ceil32(mem[_1769 + mem[_1769]])) + 1
                mem[_1769 + ceil32(return_data.size)] = _1922
                require _1842 + _1922 + 32 <= return_data.size
                mem[_1769 + ceil32(return_data.size) + 32 len ceil32(_1922)] = mem[_1769 + _1842 + 32 len ceil32(_1922)]
                if ceil32(_1922) <= _1922:
                    mem[_1714] = _1769 + ceil32(return_data.size)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7168 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 32] = mem[_7168]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7644 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 64] = mem[_7644]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7977 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 96] = mem[_7977]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8207 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 128] = mem[_8207]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8411 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 160] = mem[_8411]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8614 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 192] = mem[_8614]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8807 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 224] = mem[_8807]
                    mem[_1714 + 256] = _1394
                    mem[_1714 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8999 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 320] = mem[_8999]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9191 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9191] == mem[_9191 + 12 len 20]
                    mem[_1714 + 352] = mem[_9191 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9383 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9383] == mem[_9383 + 12 len 20]
                    mem[_1714 + 384] = mem[_9383 + 12 len 20]
                    mem[_1714 + 416] = uint8(_853)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9575 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9575] == bool(mem[_9575])
                    mem[_1714 + 448] = bool(mem[_9575])
                else:
                    mem[_1922 + _1769 + ceil32(return_data.size) + 32] = 0
                    mem[_1714] = _1769 + ceil32(return_data.size)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x194ba6a with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7169 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 32] = mem[_7169]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x27932f9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7645 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 64] = mem[_7645]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0xaa8d8fdd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7978 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 96] = mem[_7978]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTokens() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8208 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 128] = mem[_8208]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getLockTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8412 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 160] = mem[_8412]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositTime() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8615 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 192] = mem[_8615]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x4b6a8ec8 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8808 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 224] = mem[_8808]
                    mem[_1714 + 256] = _1394
                    mem[_1714 + 288] = 0 / sub_5a8c5d60
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x56fe8cf7 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9000 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_1714 + 320] = mem[_9000]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getDepositorAddress() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9192 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9192] == mem[_9192 + 12 len 20]
                    mem[_1714 + 352] = mem[_9192 + 12 len 20]
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).0x910afbe9 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9384 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9384] == mem[_9384 + 12 len 20]
                    mem[_1714 + 384] = mem[_9384 + 12 len 20]
                    mem[_1714 + 416] = uint8(_853)
                    require ext_code.size(address(cd[4]))
                    staticcall address(cd[4]).getStatus() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9576 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_9576] == bool(mem[_9576])
                    mem[_1714 + 448] = bool(mem[_9576])
                mem[0] = address(cd[4])
                mem[32] = sha3(msg.sender, 2)
                mem[_1714 + 480] = bool(stor2[msg.sender][address(cd[4])])
                mem[mem[64]] = 32
                mem[mem[64] + 32] = 512
                mem[mem[64] + 544] = _1922
                mem[mem[64] + 576 len ceil32(_1922)] = mem[_1769 + ceil32(return_data.size) + 32 len ceil32(_1922)]
                if ceil32(_1922) > _1922:
                    mem[_1922 + mem[64] + 576] = 0
                mem[mem[64] + 64] = mem[_1714 + 32]
                mem[mem[64] + 96] = mem[_1714 + 64]
                mem[mem[64] + 128] = mem[_1714 + 96]
                mem[mem[64] + 160] = mem[_1714 + 128]
                mem[mem[64] + 192] = mem[_1714 + 160]
                mem[mem[64] + 224] = mem[_1714 + 192]
                mem[mem[64] + 256] = mem[_1714 + 224]
                mem[mem[64] + 288] = _1394
                mem[mem[64] + 320] = 0 / sub_5a8c5d60
                mem[mem[64] + 352] = mem[_1714 + 320]
                mem[mem[64] + 384] = mem[_1714 + 364 len 20]
                mem[mem[64] + 416] = mem[_1714 + 396 len 20]
                mem[mem[64] + 448] = 0
                mem[mem[64] + 480] = bool(mem[_1714 + 448])
                return 32, 512, 
                       mem[mem[64] + 64 len 224],
                       _1394,
                       0 / sub_5a8c5d60,
                       mem[mem[64] + 352 len 96],
                       0,
                       mem[mem[64] + 480],
                       bool(stor2[msg.sender][address(cd[4])]),
                       _1922,
                       mem[mem[64] + 576 len ceil32(_1922)]
            if mem[_1357] and 0 / sub_5d98fc27 > -1 / mem[_1357]:
                revert with 0, 17
            if not mem[_1357]:
                revert with 0, 18
            if mem[_1357] * 0 / sub_5d98fc27 / mem[_1357] != 0 / sub_5d98fc27:
                revert with 0, 'SafeMath: multiplication overflow'
            _1677 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1677] = 26
            mem[_1677 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _1918 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1982 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2061 = mem[_1982]
            require mem[_1982] <= test266151307()
            require _1982 + mem[_1982] + 31 < _1982 + return_data.size
            _2130 = mem[_1982 + mem[_1982]]
            if mem[_1982 + mem[_1982]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_1982 + mem[_1982]])) + 1 < 0 or _1982 + ceil32(return_data.size) + ceil32(ceil32(mem[_1982 + mem[_1982]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1982 + ceil32(return_data.size) + ceil32(ceil32(mem[_1982 + mem[_1982]])) + 1
            mem[_1982 + ceil32(return_data.size)] = _2130
            require _2061 + _2130 + 32 <= return_data.size
            mem[_1982 + ceil32(return_data.size) + 32 len ceil32(_2130)] = mem[_1982 + _2061 + 32 len ceil32(_2130)]
            if ceil32(_2130) <= _2130:
                mem[_1918] = _1982 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7166 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 32] = mem[_7166]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7642 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 64] = mem[_7642]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7975 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 96] = mem[_7975]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8205 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 128] = mem[_8205]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8409 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 160] = mem[_8409]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8612 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 192] = mem[_8612]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8805 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 224] = mem[_8805]
                mem[_1918 + 256] = _1394
                mem[_1918 + 288] = _1394 * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8997 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 320] = mem[_8997]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9189 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9189] == mem[_9189 + 12 len 20]
                mem[_1918 + 352] = mem[_9189 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9381 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9381] == mem[_9381 + 12 len 20]
                mem[_1918 + 384] = mem[_9381 + 12 len 20]
                mem[_1918 + 416] = uint8(_853)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9573 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9573] == bool(mem[_9573])
                mem[_1918 + 448] = bool(mem[_9573])
            else:
                mem[_2130 + _1982 + ceil32(return_data.size) + 32] = 0
                mem[_1918] = _1982 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7167 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 32] = mem[_7167]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7643 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 64] = mem[_7643]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7976 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 96] = mem[_7976]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8206 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 128] = mem[_8206]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8410 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 160] = mem[_8410]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8613 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 192] = mem[_8613]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8806 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 224] = mem[_8806]
                mem[_1918 + 256] = _1394
                mem[_1918 + 288] = _1394 * 0 / sub_5d98fc27 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8998 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1918 + 320] = mem[_8998]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9190 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9190] == mem[_9190 + 12 len 20]
                mem[_1918 + 352] = mem[_9190 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9382 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9382] == mem[_9382 + 12 len 20]
                mem[_1918 + 384] = mem[_9382 + 12 len 20]
                mem[_1918 + 416] = uint8(_853)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9574 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9574] == bool(mem[_9574])
                mem[_1918 + 448] = bool(mem[_9574])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[_1918 + 480] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _2130
            mem[mem[64] + 576 len ceil32(_2130)] = mem[_1982 + ceil32(return_data.size) + 32 len ceil32(_2130)]
            if ceil32(_2130) > _2130:
                mem[_2130 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_1918 + 32]
            mem[mem[64] + 96] = mem[_1918 + 64]
            mem[mem[64] + 128] = mem[_1918 + 96]
            mem[mem[64] + 160] = mem[_1918 + 128]
            mem[mem[64] + 192] = mem[_1918 + 160]
            mem[mem[64] + 224] = mem[_1918 + 192]
            mem[mem[64] + 256] = mem[_1918 + 224]
            mem[mem[64] + 288] = _1394
            mem[mem[64] + 320] = _1394 * 0 / sub_5d98fc27 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_1918 + 320]
            mem[mem[64] + 384] = mem[_1918 + 364 len 20]
            mem[mem[64] + 416] = mem[_1918 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_1918 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _1394,
                   _1394 * 0 / sub_5d98fc27 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   _2130,
                   mem[mem[64] + 576 len ceil32(_2130)]
        if 0 / ext_call.return_data[0] and _566 * sub_5d98fc27 / _511 > -1 / 0 / ext_call.return_data[0]:
            revert with 0, 17
        if not 0 / ext_call.return_data[0]:
            revert with 0, 18
        if 0 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / 0 / ext_call.return_data[0] != _566 * sub_5d98fc27 / _511:
            revert with 0, 'SafeMath: multiplication overflow'
        _1276 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1276] = 26
        mem[_1276 + 32] = 'SafeMath: division by zero'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getCurrentBalance() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1468 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1515 = mem[_1468]
        if not mem[_1468]:
            _1676 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1676] = 26
            mem[_1676 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _1914 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1981 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2058 = mem[_1981]
            require mem[_1981] <= test266151307()
            require _1981 + mem[_1981] + 31 < _1981 + return_data.size
            _2129 = mem[_1981 + mem[_1981]]
            if mem[_1981 + mem[_1981]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_1981 + mem[_1981]])) + 1 < 0 or _1981 + ceil32(return_data.size) + ceil32(ceil32(mem[_1981 + mem[_1981]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1981 + ceil32(return_data.size) + ceil32(ceil32(mem[_1981 + mem[_1981]])) + 1
            mem[_1981 + ceil32(return_data.size)] = _2129
            require _2058 + _2129 + 32 <= return_data.size
            mem[_1981 + ceil32(return_data.size) + 32 len ceil32(_2129)] = mem[_1981 + _2058 + 32 len ceil32(_2129)]
            if ceil32(_2129) <= _2129:
                mem[_1914] = _1981 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7164 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 32] = mem[_7164]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7640 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 64] = mem[_7640]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7973 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 96] = mem[_7973]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8203 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 128] = mem[_8203]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8407 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 160] = mem[_8407]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8610 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 192] = mem[_8610]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8803 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 224] = mem[_8803]
                mem[_1914 + 256] = _1515
                mem[_1914 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8995 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 320] = mem[_8995]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9187 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9187] == mem[_9187 + 12 len 20]
                mem[_1914 + 352] = mem[_9187 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9379 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9379] == mem[_9379 + 12 len 20]
                mem[_1914 + 384] = mem[_9379 + 12 len 20]
                mem[_1914 + 416] = uint8(_853)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9571 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9571] == bool(mem[_9571])
                mem[_1914 + 448] = bool(mem[_9571])
            else:
                mem[_2129 + _1981 + ceil32(return_data.size) + 32] = 0
                mem[_1914] = _1981 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7165 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 32] = mem[_7165]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7641 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 64] = mem[_7641]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7974 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 96] = mem[_7974]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8204 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 128] = mem[_8204]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8408 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 160] = mem[_8408]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8611 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 192] = mem[_8611]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8804 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 224] = mem[_8804]
                mem[_1914 + 256] = _1515
                mem[_1914 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8996 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1914 + 320] = mem[_8996]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9188 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9188] == mem[_9188 + 12 len 20]
                mem[_1914 + 352] = mem[_9188 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9380 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9380] == mem[_9380 + 12 len 20]
                mem[_1914 + 384] = mem[_9380 + 12 len 20]
                mem[_1914 + 416] = uint8(_853)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9572 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9572] == bool(mem[_9572])
                mem[_1914 + 448] = bool(mem[_9572])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[_1914 + 480] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _2129
            mem[mem[64] + 576 len ceil32(_2129)] = mem[_1981 + ceil32(return_data.size) + 32 len ceil32(_2129)]
            if ceil32(_2129) > _2129:
                mem[_2129 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_1914 + 32]
            mem[mem[64] + 96] = mem[_1914 + 64]
            mem[mem[64] + 128] = mem[_1914 + 96]
            mem[mem[64] + 160] = mem[_1914 + 128]
            mem[mem[64] + 192] = mem[_1914 + 160]
            mem[mem[64] + 224] = mem[_1914 + 192]
            mem[mem[64] + 256] = mem[_1914 + 224]
            mem[mem[64] + 288] = _1515
            mem[mem[64] + 320] = 0 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_1914 + 320]
            mem[mem[64] + 384] = mem[_1914 + 364 len 20]
            mem[mem[64] + 416] = mem[_1914 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_1914 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _1515,
                   0 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   _2129,
                   mem[mem[64] + 576 len ceil32(_2129)]
        if mem[_1468] and 0 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 > -1 / mem[_1468]:
            revert with 0, 17
        if not mem[_1468]:
            revert with 0, 18
        if mem[_1468] * 0 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / mem[_1468] != 0 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        _1881 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1881] = 26
        mem[_1881 + 32] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        _2125 = mem[64]
        mem[64] = mem[64] + 512
        mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2195 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2262 = mem[_2195]
        require mem[_2195] <= test266151307()
        require _2195 + mem[_2195] + 31 < _2195 + return_data.size
        _2345 = mem[_2195 + mem[_2195]]
        if mem[_2195 + mem[_2195]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_2195 + mem[_2195]])) + 1 < 0 or _2195 + ceil32(return_data.size) + ceil32(ceil32(mem[_2195 + mem[_2195]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _2195 + ceil32(return_data.size) + ceil32(ceil32(mem[_2195 + mem[_2195]])) + 1
        mem[_2195 + ceil32(return_data.size)] = _2345
        require _2262 + _2345 + 32 <= return_data.size
        mem[_2195 + ceil32(return_data.size) + 32 len ceil32(_2345)] = mem[_2195 + _2262 + 32 len ceil32(_2345)]
        if ceil32(_2345) <= _2345:
            mem[_2125] = _2195 + ceil32(return_data.size)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7162 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 32] = mem[_7162]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7638 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 64] = mem[_7638]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7971 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 96] = mem[_7971]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8201 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 128] = mem[_8201]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8405 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 160] = mem[_8405]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8608 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 192] = mem[_8608]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8801 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 224] = mem[_8801]
            mem[_2125 + 256] = _1515
            mem[_2125 + 288] = _1515 * 0 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8993 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 320] = mem[_8993]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9185 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9185] == mem[_9185 + 12 len 20]
            mem[_2125 + 352] = mem[_9185 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9377 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9377] == mem[_9377 + 12 len 20]
            mem[_2125 + 384] = mem[_9377 + 12 len 20]
            mem[_2125 + 416] = uint8(_853)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9569 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9569] == bool(mem[_9569])
            mem[_2125 + 448] = bool(mem[_9569])
        else:
            mem[_2345 + _2195 + ceil32(return_data.size) + 32] = 0
            mem[_2125] = _2195 + ceil32(return_data.size)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7163 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 32] = mem[_7163]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7639 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 64] = mem[_7639]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7972 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 96] = mem[_7972]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8202 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 128] = mem[_8202]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8406 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 160] = mem[_8406]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8609 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 192] = mem[_8609]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8802 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 224] = mem[_8802]
            mem[_2125 + 256] = _1515
            mem[_2125 + 288] = _1515 * 0 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8994 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2125 + 320] = mem[_8994]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9186 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9186] == mem[_9186 + 12 len 20]
            mem[_2125 + 352] = mem[_9186 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9378 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9378] == mem[_9378 + 12 len 20]
            mem[_2125 + 384] = mem[_9378 + 12 len 20]
            mem[_2125 + 416] = uint8(_853)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9570 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9570] == bool(mem[_9570])
            mem[_2125 + 448] = bool(mem[_9570])
        mem[0] = address(cd[4])
        mem[32] = sha3(msg.sender, 2)
        mem[_2125 + 480] = bool(stor2[msg.sender][address(cd[4])])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        mem[mem[64] + 544] = _2345
        mem[mem[64] + 576 len ceil32(_2345)] = mem[_2195 + ceil32(return_data.size) + 32 len ceil32(_2345)]
        if ceil32(_2345) > _2345:
            mem[_2345 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[_2125 + 32]
        mem[mem[64] + 96] = mem[_2125 + 64]
        mem[mem[64] + 128] = mem[_2125 + 96]
        mem[mem[64] + 160] = mem[_2125 + 128]
        mem[mem[64] + 192] = mem[_2125 + 160]
        mem[mem[64] + 224] = mem[_2125 + 192]
        mem[mem[64] + 256] = mem[_2125 + 224]
        mem[mem[64] + 288] = _1515
        mem[mem[64] + 320] = _1515 * 0 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[_2125 + 320]
        mem[mem[64] + 384] = mem[_2125 + 364 len 20]
        mem[mem[64] + 416] = mem[_2125 + 396 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[_2125 + 448])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               _1515,
               _1515 * 0 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(cd[4])]),
               _2345,
               mem[mem[64] + 576 len ceil32(_2345)]
    if ext_call.return_data[0] and sub_5a8c5d60 > -1 / ext_call.return_data[0]:
        revert with 0, 17
    if not ext_call.return_data[0]:
        revert with 0, 18
    if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != sub_5a8c5d60:
        revert with 0, 'SafeMath: multiplication overflow'
    _1037 = mem[64]
    mem[64] = mem[64] + 64
    mem[_1037] = 26
    mem[_1037 + 32] = 'SafeMath: division by zero'
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero', 0
    if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
        _1275 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1275] = 26
        mem[_1275 + 32] = 'SafeMath: division by zero'
        if not sub_5d98fc27:
            revert with 0, 'SafeMath: division by zero', 0
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getCurrentBalance() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1467 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1514 = mem[_1467]
        if not mem[_1467]:
            _1675 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1675] = 26
            mem[_1675 + 32] = 'SafeMath: division by zero'
            if not sub_5a8c5d60:
                revert with 0, 'SafeMath: division by zero', 0
            _1910 = mem[64]
            mem[64] = mem[64] + 512
            mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xfd306c4e with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1980 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2055 = mem[_1980]
            require mem[_1980] <= test266151307()
            require _1980 + mem[_1980] + 31 < _1980 + return_data.size
            _2124 = mem[_1980 + mem[_1980]]
            if mem[_1980 + mem[_1980]] > test266151307():
                revert with 0, 65
            if ceil32(ceil32(mem[_1980 + mem[_1980]])) + 1 < 0 or _1980 + ceil32(return_data.size) + ceil32(ceil32(mem[_1980 + mem[_1980]])) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1980 + ceil32(return_data.size) + ceil32(ceil32(mem[_1980 + mem[_1980]])) + 1
            mem[_1980 + ceil32(return_data.size)] = _2124
            require _2055 + _2124 + 32 <= return_data.size
            mem[_1980 + ceil32(return_data.size) + 32 len ceil32(_2124)] = mem[_1980 + _2055 + 32 len ceil32(_2124)]
            if ceil32(_2124) <= _2124:
                mem[_1910] = _1980 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7160 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 32] = mem[_7160]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7636 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 64] = mem[_7636]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7969 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 96] = mem[_7969]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8199 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 128] = mem[_8199]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8403 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 160] = mem[_8403]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8606 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 192] = mem[_8606]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8799 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 224] = mem[_8799]
                mem[_1910 + 256] = _1514
                mem[_1910 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8991 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 320] = mem[_8991]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9183 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9183] == mem[_9183 + 12 len 20]
                mem[_1910 + 352] = mem[_9183 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9375 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9375] == mem[_9375 + 12 len 20]
                mem[_1910 + 384] = mem[_9375 + 12 len 20]
                mem[_1910 + 416] = uint8(_853)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9567 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9567] == bool(mem[_9567])
                mem[_1910 + 448] = bool(mem[_9567])
            else:
                mem[_2124 + _1980 + ceil32(return_data.size) + 32] = 0
                mem[_1910] = _1980 + ceil32(return_data.size)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x194ba6a with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7161 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 32] = mem[_7161]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x27932f9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7637 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 64] = mem[_7637]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0xaa8d8fdd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7970 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 96] = mem[_7970]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTokens() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8200 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 128] = mem[_8200]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getLockTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8404 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 160] = mem[_8404]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositTime() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8607 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 192] = mem[_8607]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x4b6a8ec8 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8800 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 224] = mem[_8800]
                mem[_1910 + 256] = _1514
                mem[_1910 + 288] = 0 / sub_5a8c5d60
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x56fe8cf7 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8992 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                mem[_1910 + 320] = mem[_8992]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getDepositorAddress() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9184 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9184] == mem[_9184 + 12 len 20]
                mem[_1910 + 352] = mem[_9184 + 12 len 20]
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).0x910afbe9 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9376 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9376] == mem[_9376 + 12 len 20]
                mem[_1910 + 384] = mem[_9376 + 12 len 20]
                mem[_1910 + 416] = uint8(_853)
                require ext_code.size(address(cd[4]))
                staticcall address(cd[4]).getStatus() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9568 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_9568] == bool(mem[_9568])
                mem[_1910 + 448] = bool(mem[_9568])
            mem[0] = address(cd[4])
            mem[32] = sha3(msg.sender, 2)
            mem[_1910 + 480] = bool(stor2[msg.sender][address(cd[4])])
            mem[mem[64]] = 32
            mem[mem[64] + 32] = 512
            mem[mem[64] + 544] = _2124
            mem[mem[64] + 576 len ceil32(_2124)] = mem[_1980 + ceil32(return_data.size) + 32 len ceil32(_2124)]
            if ceil32(_2124) > _2124:
                mem[_2124 + mem[64] + 576] = 0
            mem[mem[64] + 64] = mem[_1910 + 32]
            mem[mem[64] + 96] = mem[_1910 + 64]
            mem[mem[64] + 128] = mem[_1910 + 96]
            mem[mem[64] + 160] = mem[_1910 + 128]
            mem[mem[64] + 192] = mem[_1910 + 160]
            mem[mem[64] + 224] = mem[_1910 + 192]
            mem[mem[64] + 256] = mem[_1910 + 224]
            mem[mem[64] + 288] = _1514
            mem[mem[64] + 320] = 0 / sub_5a8c5d60
            mem[mem[64] + 352] = mem[_1910 + 320]
            mem[mem[64] + 384] = mem[_1910 + 364 len 20]
            mem[mem[64] + 416] = mem[_1910 + 396 len 20]
            mem[mem[64] + 448] = 0
            mem[mem[64] + 480] = bool(mem[_1910 + 448])
            return 32, 512, 
                   mem[mem[64] + 64 len 224],
                   _1514,
                   0 / sub_5a8c5d60,
                   mem[mem[64] + 352 len 96],
                   0,
                   mem[mem[64] + 480],
                   bool(stor2[msg.sender][address(cd[4])]),
                   _2124,
                   mem[mem[64] + 576 len ceil32(_2124)]
        if mem[_1467] and 0 / sub_5d98fc27 > -1 / mem[_1467]:
            revert with 0, 17
        if not mem[_1467]:
            revert with 0, 18
        if mem[_1467] * 0 / sub_5d98fc27 / mem[_1467] != 0 / sub_5d98fc27:
            revert with 0, 'SafeMath: multiplication overflow'
        _1880 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1880] = 26
        mem[_1880 + 32] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        _2120 = mem[64]
        mem[64] = mem[64] + 512
        mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2194 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2259 = mem[_2194]
        require mem[_2194] <= test266151307()
        require _2194 + mem[_2194] + 31 < _2194 + return_data.size
        _2344 = mem[_2194 + mem[_2194]]
        if mem[_2194 + mem[_2194]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_2194 + mem[_2194]])) + 1 < 0 or _2194 + ceil32(return_data.size) + ceil32(ceil32(mem[_2194 + mem[_2194]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _2194 + ceil32(return_data.size) + ceil32(ceil32(mem[_2194 + mem[_2194]])) + 1
        mem[_2194 + ceil32(return_data.size)] = _2344
        require _2259 + _2344 + 32 <= return_data.size
        mem[_2194 + ceil32(return_data.size) + 32 len ceil32(_2344)] = mem[_2194 + _2259 + 32 len ceil32(_2344)]
        if ceil32(_2344) <= _2344:
            mem[_2120] = _2194 + ceil32(return_data.size)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7158 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 32] = mem[_7158]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7634 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 64] = mem[_7634]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7967 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 96] = mem[_7967]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8197 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 128] = mem[_8197]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8401 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 160] = mem[_8401]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8604 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 192] = mem[_8604]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8797 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 224] = mem[_8797]
            mem[_2120 + 256] = _1514
            mem[_2120 + 288] = _1514 * 0 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8989 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 320] = mem[_8989]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9181 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9181] == mem[_9181 + 12 len 20]
            mem[_2120 + 352] = mem[_9181 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9373 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9373] == mem[_9373 + 12 len 20]
            mem[_2120 + 384] = mem[_9373 + 12 len 20]
            mem[_2120 + 416] = uint8(_853)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9565 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9565] == bool(mem[_9565])
            mem[_2120 + 448] = bool(mem[_9565])
        else:
            mem[_2344 + _2194 + ceil32(return_data.size) + 32] = 0
            mem[_2120] = _2194 + ceil32(return_data.size)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7159 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 32] = mem[_7159]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7635 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 64] = mem[_7635]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7968 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 96] = mem[_7968]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8198 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 128] = mem[_8198]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8402 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 160] = mem[_8402]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8605 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 192] = mem[_8605]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8798 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 224] = mem[_8798]
            mem[_2120 + 256] = _1514
            mem[_2120 + 288] = _1514 * 0 / sub_5d98fc27 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8990 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2120 + 320] = mem[_8990]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9182 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9182] == mem[_9182 + 12 len 20]
            mem[_2120 + 352] = mem[_9182 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9374 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9374] == mem[_9374 + 12 len 20]
            mem[_2120 + 384] = mem[_9374 + 12 len 20]
            mem[_2120 + 416] = uint8(_853)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9566 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9566] == bool(mem[_9566])
            mem[_2120 + 448] = bool(mem[_9566])
        mem[0] = address(cd[4])
        mem[32] = sha3(msg.sender, 2)
        mem[_2120 + 480] = bool(stor2[msg.sender][address(cd[4])])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        mem[mem[64] + 544] = _2344
        mem[mem[64] + 576 len ceil32(_2344)] = mem[_2194 + ceil32(return_data.size) + 32 len ceil32(_2344)]
        if ceil32(_2344) > _2344:
            mem[_2344 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[_2120 + 32]
        mem[mem[64] + 96] = mem[_2120 + 64]
        mem[mem[64] + 128] = mem[_2120 + 96]
        mem[mem[64] + 160] = mem[_2120 + 128]
        mem[mem[64] + 192] = mem[_2120 + 160]
        mem[mem[64] + 224] = mem[_2120 + 192]
        mem[mem[64] + 256] = mem[_2120 + 224]
        mem[mem[64] + 288] = _1514
        mem[mem[64] + 320] = _1514 * 0 / sub_5d98fc27 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[_2120 + 320]
        mem[mem[64] + 384] = mem[_2120 + 364 len 20]
        mem[mem[64] + 416] = mem[_2120 + 396 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[_2120 + 448])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               _1514,
               _1514 * 0 / sub_5d98fc27 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(cd[4])]),
               _2344,
               mem[mem[64] + 576 len ceil32(_2344)]
    if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] and _566 * sub_5d98fc27 / _511 > -1 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
        revert with 0, 17
    if not ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0]:
        revert with 0, 18
    if ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] != _566 * sub_5d98fc27 / _511:
        revert with 0, 'SafeMath: multiplication overflow'
    _1393 = mem[64]
    mem[64] = mem[64] + 64
    mem[_1393] = 26
    mem[_1393 + 32] = 'SafeMath: division by zero'
    if not sub_5d98fc27:
        revert with 0, 'SafeMath: division by zero', 0
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).getCurrentBalance() with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _1604 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _1674 = mem[_1604]
    if not mem[_1604]:
        _1879 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1879] = 26
        mem[_1879 + 32] = 'SafeMath: division by zero'
        if not sub_5a8c5d60:
            revert with 0, 'SafeMath: division by zero', 0
        _2116 = mem[64]
        mem[64] = mem[64] + 512
        mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0xfd306c4e with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2193 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2256 = mem[_2193]
        require mem[_2193] <= test266151307()
        require _2193 + mem[_2193] + 31 < _2193 + return_data.size
        _2343 = mem[_2193 + mem[_2193]]
        if mem[_2193 + mem[_2193]] > test266151307():
            revert with 0, 65
        if ceil32(ceil32(mem[_2193 + mem[_2193]])) + 1 < 0 or _2193 + ceil32(return_data.size) + ceil32(ceil32(mem[_2193 + mem[_2193]])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _2193 + ceil32(return_data.size) + ceil32(ceil32(mem[_2193 + mem[_2193]])) + 1
        mem[_2193 + ceil32(return_data.size)] = _2343
        require _2256 + _2343 + 32 <= return_data.size
        mem[_2193 + ceil32(return_data.size) + 32 len ceil32(_2343)] = mem[_2193 + _2256 + 32 len ceil32(_2343)]
        if ceil32(_2343) <= _2343:
            mem[_2116] = _2193 + ceil32(return_data.size)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7156 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 32] = mem[_7156]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7632 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 64] = mem[_7632]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7965 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 96] = mem[_7965]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8195 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 128] = mem[_8195]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8399 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 160] = mem[_8399]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8602 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 192] = mem[_8602]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8795 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 224] = mem[_8795]
            mem[_2116 + 256] = _1674
            mem[_2116 + 288] = 0 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8987 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 320] = mem[_8987]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9179 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9179] == mem[_9179 + 12 len 20]
            mem[_2116 + 352] = mem[_9179 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9371 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9371] == mem[_9371 + 12 len 20]
            mem[_2116 + 384] = mem[_9371 + 12 len 20]
            mem[_2116 + 416] = uint8(_853)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9563 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9563] == bool(mem[_9563])
            mem[_2116 + 448] = bool(mem[_9563])
        else:
            mem[_2343 + _2193 + ceil32(return_data.size) + 32] = 0
            mem[_2116] = _2193 + ceil32(return_data.size)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x194ba6a with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7157 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 32] = mem[_7157]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x27932f9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7633 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 64] = mem[_7633]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0xaa8d8fdd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7966 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 96] = mem[_7966]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTokens() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8196 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 128] = mem[_8196]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getLockTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8400 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 160] = mem[_8400]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositTime() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8603 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 192] = mem[_8603]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x4b6a8ec8 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8796 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 224] = mem[_8796]
            mem[_2116 + 256] = _1674
            mem[_2116 + 288] = 0 / sub_5a8c5d60
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x56fe8cf7 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8988 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2116 + 320] = mem[_8988]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getDepositorAddress() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9180 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9180] == mem[_9180 + 12 len 20]
            mem[_2116 + 352] = mem[_9180 + 12 len 20]
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).0x910afbe9 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9372 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9372] == mem[_9372 + 12 len 20]
            mem[_2116 + 384] = mem[_9372 + 12 len 20]
            mem[_2116 + 416] = uint8(_853)
            require ext_code.size(address(cd[4]))
            staticcall address(cd[4]).getStatus() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9564 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_9564] == bool(mem[_9564])
            mem[_2116 + 448] = bool(mem[_9564])
        mem[0] = address(cd[4])
        mem[32] = sha3(msg.sender, 2)
        mem[_2116 + 480] = bool(stor2[msg.sender][address(cd[4])])
        mem[mem[64]] = 32
        mem[mem[64] + 32] = 512
        mem[mem[64] + 544] = _2343
        mem[mem[64] + 576 len ceil32(_2343)] = mem[_2193 + ceil32(return_data.size) + 32 len ceil32(_2343)]
        if ceil32(_2343) > _2343:
            mem[_2343 + mem[64] + 576] = 0
        mem[mem[64] + 64] = mem[_2116 + 32]
        mem[mem[64] + 96] = mem[_2116 + 64]
        mem[mem[64] + 128] = mem[_2116 + 96]
        mem[mem[64] + 160] = mem[_2116 + 128]
        mem[mem[64] + 192] = mem[_2116 + 160]
        mem[mem[64] + 224] = mem[_2116 + 192]
        mem[mem[64] + 256] = mem[_2116 + 224]
        mem[mem[64] + 288] = _1674
        mem[mem[64] + 320] = 0 / sub_5a8c5d60
        mem[mem[64] + 352] = mem[_2116 + 320]
        mem[mem[64] + 384] = mem[_2116 + 364 len 20]
        mem[mem[64] + 416] = mem[_2116 + 396 len 20]
        mem[mem[64] + 448] = 0
        mem[mem[64] + 480] = bool(mem[_2116 + 448])
        return 32, 512, 
               mem[mem[64] + 64 len 224],
               _1674,
               0 / sub_5a8c5d60,
               mem[mem[64] + 352 len 96],
               0,
               mem[mem[64] + 480],
               bool(stor2[msg.sender][address(cd[4])]),
               _2343,
               mem[mem[64] + 576 len ceil32(_2343)]
    if mem[_1604] and ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 > -1 / mem[_1604]:
        revert with 0, 17
    if not mem[_1604]:
        revert with 0, 18
    if mem[_1604] * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / mem[_1604] != ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27:
        revert with 0, 'SafeMath: multiplication overflow'
    _2090 = mem[64]
    mem[64] = mem[64] + 64
    mem[_2090] = 26
    mem[_2090 + 32] = 'SafeMath: division by zero'
    if not sub_5a8c5d60:
        revert with 0, 'SafeMath: division by zero', 0
    _2339 = mem[64]
    mem[64] = mem[64] + 512
    mem[mem[64]] = 0xfd306c4e00000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(cd[4]))
    staticcall address(cd[4]).0xfd306c4e with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _2415 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _2495 = mem[_2415]
    require mem[_2415] <= test266151307()
    require _2415 + mem[_2415] + 31 < _2415 + return_data.size
    _2614 = mem[_2415 + mem[_2415]]
    if mem[_2415 + mem[_2415]] > test266151307():
        revert with 0, 65
    if ceil32(ceil32(mem[_2415 + mem[_2415]])) + 1 < 0 or _2415 + ceil32(return_data.size) + ceil32(ceil32(mem[_2415 + mem[_2415]])) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _2415 + ceil32(return_data.size) + ceil32(ceil32(mem[_2415 + mem[_2415]])) + 1
    mem[_2415 + ceil32(return_data.size)] = _2614
    require _2495 + _2614 + 32 <= return_data.size
    mem[_2415 + ceil32(return_data.size) + 32 len ceil32(_2614)] = mem[_2415 + _2495 + 32 len ceil32(_2614)]
    if ceil32(_2614) <= _2614:
        mem[_2339] = _2415 + ceil32(return_data.size)
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x194ba6a with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7154 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 32] = mem[_7154]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x27932f9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7630 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 64] = mem[_7630]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0xaa8d8fdd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7963 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 96] = mem[_7963]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getDepositTokens() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8193 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 128] = mem[_8193]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getLockTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8397 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 160] = mem[_8397]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getDepositTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8600 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 192] = mem[_8600]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x4b6a8ec8 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8793 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 224] = mem[_8793]
        mem[_2339 + 256] = _1674
        mem[_2339 + 288] = _1674 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / sub_5a8c5d60
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x56fe8cf7 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8985 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 320] = mem[_8985]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getDepositorAddress() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9177 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_9177] == mem[_9177 + 12 len 20]
        mem[_2339 + 352] = mem[_9177 + 12 len 20]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x910afbe9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9369 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_9369] == mem[_9369 + 12 len 20]
        mem[_2339 + 384] = mem[_9369 + 12 len 20]
        mem[_2339 + 416] = uint8(_853)
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getStatus() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9561 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_9561] == bool(mem[_9561])
        mem[_2339 + 448] = bool(mem[_9561])
    else:
        mem[_2614 + _2415 + ceil32(return_data.size) + 32] = 0
        mem[_2339] = _2415 + ceil32(return_data.size)
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x194ba6a with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7155 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 32] = mem[_7155]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x27932f9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7631 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 64] = mem[_7631]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0xaa8d8fdd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7964 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 96] = mem[_7964]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getDepositTokens() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8194 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 128] = mem[_8194]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getLockTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8398 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 160] = mem[_8398]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getDepositTime() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8601 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 192] = mem[_8601]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x4b6a8ec8 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8794 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 224] = mem[_8794]
        mem[_2339 + 256] = _1674
        mem[_2339 + 288] = _1674 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / sub_5a8c5d60
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x56fe8cf7 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8986 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        mem[_2339 + 320] = mem[_8986]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getDepositorAddress() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9178 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_9178] == mem[_9178 + 12 len 20]
        mem[_2339 + 352] = mem[_9178 + 12 len 20]
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).0x910afbe9 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9370 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_9370] == mem[_9370 + 12 len 20]
        mem[_2339 + 384] = mem[_9370 + 12 len 20]
        mem[_2339 + 416] = uint8(_853)
        require ext_code.size(address(cd[4]))
        staticcall address(cd[4]).getStatus() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9562 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require mem[_9562] == bool(mem[_9562])
        mem[_2339 + 448] = bool(mem[_9562])
    mem[0] = address(cd[4])
    mem[32] = sha3(msg.sender, 2)
    mem[_2339 + 480] = bool(stor2[msg.sender][address(cd[4])])
    mem[mem[64]] = 32
    mem[mem[64] + 32] = 512
    mem[mem[64] + 544] = _2614
    mem[mem[64] + 576 len ceil32(_2614)] = mem[_2415 + ceil32(return_data.size) + 32 len ceil32(_2614)]
    if ceil32(_2614) > _2614:
        mem[_2614 + mem[64] + 576] = 0
    mem[mem[64] + 64] = mem[_2339 + 32]
    mem[mem[64] + 96] = mem[_2339 + 64]
    mem[mem[64] + 128] = mem[_2339 + 96]
    mem[mem[64] + 160] = mem[_2339 + 128]
    mem[mem[64] + 192] = mem[_2339 + 160]
    mem[mem[64] + 224] = mem[_2339 + 192]
    mem[mem[64] + 256] = mem[_2339 + 224]
    mem[mem[64] + 288] = _1674
    mem[mem[64] + 320] = _1674 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / sub_5a8c5d60
    mem[mem[64] + 352] = mem[_2339 + 320]
    mem[mem[64] + 384] = mem[_2339 + 364 len 20]
    mem[mem[64] + 416] = mem[_2339 + 396 len 20]
    mem[mem[64] + 448] = 0
    mem[mem[64] + 480] = bool(mem[_2339 + 448])
    return 32, 512, 
           mem[mem[64] + 64 len 224],
           _1674,
           _1674 * ext_call.return_data[0] * sub_5a8c5d60 / ext_call.return_data[0] * _566 * sub_5d98fc27 / _511 / sub_5d98fc27 / sub_5a8c5d60,
           mem[mem[64] + 352 len 96],
           0,
           mem[mem[64] + 480],
           bool(stor2[msg.sender][address(cd[4])]),
           _2614,
           mem[mem[64] + 576 len ceil32(_2614)]
}



}
