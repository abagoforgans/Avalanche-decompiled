contract main {




// =====================  Runtime code  =====================


#
#  - getPricePerFullShare(bool arg1)
#  - sub_936ffc23(?)
#  - _fallback()
#
const decimals = 18


mapping of uint256 balanceOf;
mapping of uint256 allowance;
uint256 totalSupply;
array of struct stor54;
array of struct stor55;
uint256 stor101;
address owner;
uint8 paused;
address routerAddress;
address masterChefAddress;
address stakingRewardAddress;
uint256 poolId;
uint8 sub_abddf82e;
address lpTokenAddress; offset 8
address token0Address;
address token1Address;
uint256 stor258;
uint256 stor259;
address rewardTokenAddress;
address treasuryWalletAddress;
address communityWalletAddress;
address adminAddress;
uint256 sub_b1a41085;
uint256 sub_cac7b495;
mapping of uint8 stor266;

function stakingReward() {
    return stakingRewardAddress
}

function token0() {
    return token0Address
}

function totalSupply() {
    return totalSupply
}

function isWhitelisted(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor266[arg1])
}

function poolId() {
    return poolId
}

function treasuryWallet() {
    return treasuryWalletAddress
}

function masterChef() {
    return masterChefAddress
}

function paused() {
    return bool(paused)
}

function lpToken() {
    return lpTokenAddress
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function owner() {
    return owner
}

function sub_abddf82e(?) {
    return bool(sub_abddf82e)
}

function sub_b1a41085(?) {
    return sub_b1a41085
}

function communityWallet() {
    return communityWalletAddress
}

function sub_cac7b495(?) {
    return sub_cac7b495
}

function token1() {
    return token1Address
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)]
}

function rewardToken() {
    return rewardTokenAddress
}

function admin() {
    return adminAddress
}

function router() {
    return routerAddress
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function setAdmin(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    adminAddress = arg1
    emit SetAdmin(arg1);
}

function setFee(uint256 arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_b1a41085 = arg1
    sub_cac7b495 = arg2
    emit SetFee(arg1, arg2);
}

function setTreasuryWallet(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    treasuryWalletAddress = arg1
    emit SetTreasuryWallet(arg1);
}

function setCommunityWallet(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    communityWalletAddress = arg1
    emit SetCommunityWallet(arg1);
}

function setWhitelistAddress(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    stor266[address(arg1)] = uint8(arg2)
    emit SetWhitelistAddress(address(arg1), arg2);
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)] > !arg2:
        revert with 0, 17
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = allowance[msg.sender][address(arg1)] + arg2
    emit Approval((allowance[msg.sender][address(arg1)] + arg2), msg.sender, arg1);
    return 1
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if balanceOf[address(msg.sender)] < arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
    balanceOf[address(msg.sender)] -= arg2
    if balanceOf[arg1] > !arg2:
        revert with 0, 17
    balanceOf[arg1] += arg2
    emit Transfer(arg2, msg.sender, arg1);
    return 1
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)] < arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: decreased allowance below zero'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = allowance[msg.sender][address(arg1)] - arg2
    emit Approval((allowance[msg.sender][address(arg1)] - arg2), msg.sender, arg1);
    return 1
}

function emergencyWithdraw() {
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    if paused:
        revert with 0, 'Pausable: paused'
    paused = 1
    emit Paused(msg.sender);
    require ext_code.size(masterChefAddress)
    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
            gas gas_remaining wei
           args poolId, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    if ext_call.return_data[0]:
        require ext_code.size(masterChefAddress)
        call masterChefAddress.withdraw(uint256 rg1, uint256 rg2) with:
             gas gas_remaining wei
            args poolId, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
    emit EmergencyWithdraw(ext_call.return_data[0]);
}

function invest() {
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    if paused:
        revert with 0, 'Pausable: paused'
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        call masterChefAddress.deposit(uint256 rg1, uint256 rg2) with:
             gas gas_remaining wei
            args poolId, ext_call.return_data[0]
    else:
        require ext_code.size(stakingRewardAddress)
        call stakingRewardAddress.stake(uint256 rg1) with:
             gas gas_remaining wei
            args ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getAllPool() {
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                gas gas_remaining wei
               args poolId, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
    else:
        require ext_code.size(stakingRewardAddress)
        staticcall stakingRewardAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !ext_call.return_data[0]:
        revert with 0, 17
    return (2 * ext_call.return_data[0])
}

function reinvest() {
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    if not paused:
        revert with 0, 'Pausable: not paused'
    paused = 0
    emit Unpaused(msg.sender);
    if owner != msg.sender:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
    if paused:
        revert with 0, 'Pausable: paused'
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not sub_abddf82e:
        require ext_code.size(masterChefAddress)
        call masterChefAddress.deposit(uint256 rg1, uint256 rg2) with:
             gas gas_remaining wei
            args poolId, ext_call.return_data[0]
    else:
        require ext_code.size(stakingRewardAddress)
        call stakingRewardAddress.stake(uint256 rg1) with:
             gas gas_remaining wei
            args ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getPendingRewards() {
    if sub_abddf82e:
        require ext_code.size(stakingRewardAddress)
        staticcall stakingRewardAddress.earned(address rg1) with:
                gas gas_remaining wei
               args this.address
    else:
        require ext_code.size(masterChefAddress)
        if rewardTokenAddress != 0x4c9b4e1ac6f24cde3660d5e4ef1ebf77c710c084:
            staticcall masterChefAddress.pendingTokens(uint256 rg1, address rg2) with:
                    gas gas_remaining wei
                   args poolId, this.address
        else:
            staticcall masterChefAddress.pendingLyd(uint256 rg1, address rg2) with:
                    gas gas_remaining wei
                   args poolId, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(rewardTokenAddress)
    staticcall rewardTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !ext_call.return_data[0]:
        revert with 0, 17
    return (2 * ext_call.return_data[0])
}

function transferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if balanceOf[address(arg1)] < arg3:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
    balanceOf[address(arg1)] -= arg3
    if balanceOf[arg2] > !arg3:
        revert with 0, 17
    balanceOf[arg2] += arg3
    emit Transfer(arg3, arg1, arg2);
    if allowance[address(arg1)][msg.sender] < arg3:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds allowance'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(arg1)][address(msg.sender)] = allowance[address(arg1)][msg.sender] - arg3
    emit Approval((allowance[address(arg1)][msg.sender] - arg3), arg1, msg.sender);
    return 1
}

function name() {
    if bool(stor54.length):
        if bool(stor54.length) == uint255(stor54.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor54.length):
            if bool(stor54.length) == uint255(stor54.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor54.length):
                if 31 < uint255(stor54.length) * 0.5:
                    mem[128] = uint256(stor54.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor54.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor54[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor54.length), data=mem[128 len ceil32(uint255(stor54.length) * 0.5)])
                mem[128] = 256 * stor54.length.field_8
        else:
            if bool(stor54.length) == stor54.length.field_1 < 32:
                revert with 0, 34
            if stor54.length.field_1:
                if 31 < stor54.length.field_1:
                    mem[128] = uint256(stor54.field_0)
                    idx = 128
                    s = 0
                    while stor54.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor54[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor54.length), data=mem[128 len ceil32(uint255(stor54.length) * 0.5)])
                mem[128] = 256 * stor54.length.field_8
        mem[ceil32(uint255(stor54.length) * 0.5) + 192 len ceil32(uint255(stor54.length) * 0.5)] = mem[128 len ceil32(uint255(stor54.length) * 0.5)]
        if ceil32(uint255(stor54.length) * 0.5) > uint255(stor54.length) * 0.5:
            mem[(uint255(stor54.length) * 0.5) + ceil32(uint255(stor54.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor54.length), data=mem[128 len ceil32(uint255(stor54.length) * 0.5)], mem[(2 * ceil32(uint255(stor54.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor54.length) * 0.5)]), 
    if bool(stor54.length) == stor54.length.field_1 < 32:
        revert with 0, 34
    if bool(stor54.length):
        if bool(stor54.length) == uint255(stor54.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor54.length):
            if 31 < uint255(stor54.length) * 0.5:
                mem[128] = uint256(stor54.field_0)
                idx = 128
                s = 0
                while (uint255(stor54.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor54[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor54.length % 128, data=mem[128 len ceil32(stor54.length.field_1)])
            mem[128] = 256 * stor54.length.field_8
    else:
        if bool(stor54.length) == stor54.length.field_1 < 32:
            revert with 0, 34
        if stor54.length.field_1:
            if 31 < stor54.length.field_1:
                mem[128] = uint256(stor54.field_0)
                idx = 128
                s = 0
                while stor54.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor54[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor54.length % 128, data=mem[128 len ceil32(stor54.length.field_1)])
            mem[128] = 256 * stor54.length.field_8
    mem[ceil32(stor54.length.field_1) + 192 len ceil32(stor54.length.field_1)] = mem[128 len ceil32(stor54.length.field_1)]
    if ceil32(stor54.length.field_1) > stor54.length.field_1:
        mem[stor54.length.field_1 + ceil32(stor54.length.field_1) + 192] = 0
    return Array(len=stor54.length % 128, data=mem[128 len ceil32(stor54.length.field_1)], mem[(2 * ceil32(stor54.length.field_1)) + 192 len 2 * ceil32(stor54.length.field_1)]), 
}

function symbol() {
    if bool(stor55.length):
        if bool(stor55.length) == uint255(stor55.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor55.length):
            if bool(stor55.length) == uint255(stor55.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor55.length):
                if 31 < uint255(stor55.length) * 0.5:
                    mem[128] = uint256(stor55.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor55.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor55[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor55.length), data=mem[128 len ceil32(uint255(stor55.length) * 0.5)])
                mem[128] = 256 * stor55.length.field_8
        else:
            if bool(stor55.length) == stor55.length.field_1 < 32:
                revert with 0, 34
            if stor55.length.field_1:
                if 31 < stor55.length.field_1:
                    mem[128] = uint256(stor55.field_0)
                    idx = 128
                    s = 0
                    while stor55.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor55[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor55.length), data=mem[128 len ceil32(uint255(stor55.length) * 0.5)])
                mem[128] = 256 * stor55.length.field_8
        mem[ceil32(uint255(stor55.length) * 0.5) + 192 len ceil32(uint255(stor55.length) * 0.5)] = mem[128 len ceil32(uint255(stor55.length) * 0.5)]
        if ceil32(uint255(stor55.length) * 0.5) > uint255(stor55.length) * 0.5:
            mem[(uint255(stor55.length) * 0.5) + ceil32(uint255(stor55.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor55.length), data=mem[128 len ceil32(uint255(stor55.length) * 0.5)], mem[(2 * ceil32(uint255(stor55.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor55.length) * 0.5)]), 
    if bool(stor55.length) == stor55.length.field_1 < 32:
        revert with 0, 34
    if bool(stor55.length):
        if bool(stor55.length) == uint255(stor55.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor55.length):
            if 31 < uint255(stor55.length) * 0.5:
                mem[128] = uint256(stor55.field_0)
                idx = 128
                s = 0
                while (uint255(stor55.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor55[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor55.length % 128, data=mem[128 len ceil32(stor55.length.field_1)])
            mem[128] = 256 * stor55.length.field_8
    else:
        if bool(stor55.length) == stor55.length.field_1 < 32:
            revert with 0, 34
        if stor55.length.field_1:
            if 31 < stor55.length.field_1:
                mem[128] = uint256(stor55.field_0)
                idx = 128
                s = 0
                while stor55.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor55[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor55.length % 128, data=mem[128 len ceil32(stor55.length.field_1)])
            mem[128] = 256 * stor55.length.field_8
    mem[ceil32(stor55.length.field_1) + 192 len ceil32(stor55.length.field_1)] = mem[128 len ceil32(stor55.length.field_1)]
    if ceil32(stor55.length.field_1) > stor55.length.field_1:
        mem[stor55.length.field_1 + ceil32(stor55.length.field_1) + 192] = 0
    return Array(len=stor55.length % 128, data=mem[128 len ceil32(stor55.length.field_1)], mem[(2 * ceil32(stor55.length.field_1)) + 192 len 2 * ceil32(stor55.length.field_1)]), 
}

function withdraw(uint256 arg1) {
    require calldata.size - 4 >= 32
    if stor101 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor101 = 2
    if not arg1:
        revert with 0, 'Share must > 0'
    if arg1 > balanceOf[msg.sender]:
        revert with 0, 'Not enough shares to withdraw'
    mem[100] = this.address
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not sub_abddf82e:
        mem[ceil32(return_data.size) + 132] = this.address
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                gas gas_remaining wei
               args poolId, this.address
        mem[ceil32(return_data.size) + 96 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
    else:
        mem[ceil32(return_data.size) + 100] = this.address
        require ext_code.size(stakingRewardAddress)
        staticcall stakingRewardAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
    if ext_call.return_data[0] > !ext_call.return_data[0]:
        revert with 0, 17
    if uint255(ext_call.return_data[0]) and arg1 > -1 / 2 * ext_call.return_data[0]:
        revert with 0, 17
    if not totalSupply:
        revert with 0, 18
    if not msg.sender:
        revert with 0, 'ERC20: burn from the zero address'
    if balanceOf[address(msg.sender)] < arg1:
        revert with 0, 'ERC20: burn amount exceeds balance'
    balanceOf[address(msg.sender)] -= arg1
    if totalSupply < arg1:
        revert with 0, 17
    totalSupply -= arg1
    emit Transfer(arg1, msg.sender, 0);
    if (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply > ext_call.return_data[0]:
        if (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply < ext_call.return_data[0]:
            revert with 0, 17
        if not sub_abddf82e:
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 rg1, uint256 rg2) with:
                 gas gas_remaining wei
                args poolId, ((ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply) - ext_call.return_data[0]
        else:
            require ext_code.size(stakingRewardAddress)
            call stakingRewardAddress.0x2e1a7d4d with:
                 gas gas_remaining wei
                args (((ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply) - ext_call.return_data[0])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 132] = msg.sender
    mem[(2 * ceil32(return_data.size)) + 164] = (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply
    mem[(2 * ceil32(return_data.size)) + 96] = 68
    mem[(2 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
    mem[(2 * ceil32(return_data.size)) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[(2 * ceil32(return_data.size)) + 196] = 32
    mem[(2 * ceil32(return_data.size)) + 228] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 'Address: insufficient balance for call'
    if not ext_code.size(lpTokenAddress):
        revert with 0, 'Address: call to non-contract'
    mem[(2 * ceil32(return_data.size)) + 260 len 96] = unknown_0xa9059cbb(?????), msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, 0
    mem[(2 * ceil32(return_data.size)) + 328] = 0
    call lpTokenAddress with:
       funct Mask(32, 224, unknown_0xa9059cbb(?????), msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, unknown_0xa9059cbb(?????), msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
            if not uint32(this.address), mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[(2 * ceil32(return_data.size)) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[(2 * ceil32(return_data.size)) + 292] == bool(mem[(2 * ceil32(return_data.size)) + 292])
            if not mem[(2 * ceil32(return_data.size)) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    emit Withdraw(msg.sender, (ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply, arg1);
    stor101 = 1
    return ((ext_call.return_data[0] * arg1) + (ext_call.return_data[0] * arg1) / totalSupply)
}

function deposit(uint256 arg1) {
    require calldata.size - 4 >= 32
    if stor101 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor101 = 2
    if paused:
        revert with 0, 'Pausable: paused'
    if arg1 <= 0:
        revert with 0, 'Amount must > 0'
    if not stor266[msg.sender]:
        revert with 0, 'Not whitelisted'
    if not sub_abddf82e:
        mem[132] = this.address
        require ext_code.size(masterChefAddress)
        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                gas gas_remaining wei
               args poolId, this.address
        mem[96 len 64] = ext_call.return_data[0 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 64
        mem[ceil32(return_data.size) + 100] = this.address
        require ext_code.size(lpTokenAddress)
        staticcall lpTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] > !ext_call.return_data[0]:
            revert with 0, 17
        mem[(2 * ceil32(return_data.size)) + 132] = msg.sender
        mem[(2 * ceil32(return_data.size)) + 164] = this.address
        mem[(2 * ceil32(return_data.size)) + 196] = arg1
        mem[(2 * ceil32(return_data.size)) + 96] = 100
        mem[(2 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
        mem[(2 * ceil32(return_data.size)) + 128 len 4] = unknown_0x23b872dd(?????)
        mem[(2 * ceil32(return_data.size)) + 228] = 32
        mem[(2 * ceil32(return_data.size)) + 260] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 'Address: insufficient balance for call'
        if not ext_code.size(lpTokenAddress):
            revert with 0, 'Address: call to non-contract'
        mem[(2 * ceil32(return_data.size)) + 292 len 128] = unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0
        mem[(2 * ceil32(return_data.size)) + 392] = 0
        call lpTokenAddress with:
           funct Mask(32, 224, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) >> 224
             gas gas_remaining wei
            args (Mask(768, -544, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) << 544)
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if ext_call.return_data[0]:
                require ext_call.return_data[0] >= 32
                require ext_call.return_data[32] == bool(ext_call.return_data[32])
                if not ext_call.return_data[32]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        else:
            mem[(2 * ceil32(return_data.size)) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                require mem[(2 * ceil32(return_data.size)) + 324] == bool(mem[(2 * ceil32(return_data.size)) + 324])
                if not mem[(2 * ceil32(return_data.size)) + 324]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[100] = this.address
        require ext_code.size(stakingRewardAddress)
        staticcall stakingRewardAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        mem[ceil32(return_data.size) + 100] = this.address
        require ext_code.size(lpTokenAddress)
        staticcall lpTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] > !ext_call.return_data[0]:
            revert with 0, 17
        mem[(2 * ceil32(return_data.size)) + 132] = msg.sender
        mem[(2 * ceil32(return_data.size)) + 164] = this.address
        mem[(2 * ceil32(return_data.size)) + 196] = arg1
        mem[(2 * ceil32(return_data.size)) + 96] = 100
        mem[(2 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
        mem[(2 * ceil32(return_data.size)) + 128 len 4] = unknown_0x23b872dd(?????)
        mem[(2 * ceil32(return_data.size)) + 228] = 32
        mem[(2 * ceil32(return_data.size)) + 260] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 'Address: insufficient balance for call'
        if not ext_code.size(lpTokenAddress):
            revert with 0, 'Address: call to non-contract'
        mem[(2 * ceil32(return_data.size)) + 292 len 128] = unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0
        mem[(2 * ceil32(return_data.size)) + 392] = 0
        call lpTokenAddress with:
           funct Mask(32, 224, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) >> 224
             gas gas_remaining wei
            args (Mask(768, -544, unknown_0x23b872dd(?????), msg.sender, address(this.address), arg1, 0) << 544)
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if ext_call.return_data[0]:
                require ext_call.return_data[0] >= 32
                require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
                if not uint32(this.address), mem[132 len 28]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        else:
            mem[(2 * ceil32(return_data.size)) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                require mem[(2 * ceil32(return_data.size)) + 324] == bool(mem[(2 * ceil32(return_data.size)) + 324])
                if not mem[(2 * ceil32(return_data.size)) + 324]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    if not totalSupply:
        if not msg.sender:
            revert with 0, 'ERC20: mint to the zero address'
        if totalSupply > !arg1:
            revert with 0, 17
        totalSupply += arg1
        if balanceOf[address(msg.sender)] > !arg1:
            revert with 0, 17
        balanceOf[address(msg.sender)] += arg1
        emit Transfer(arg1, 0, msg.sender);
        emit Deposit(msg.sender, arg1, arg1);
    else:
        if arg1 and totalSupply > -1 / arg1:
            revert with 0, 17
        if not 2 * ext_call.return_data[0]:
            revert with 0, 18
        if not msg.sender:
            revert with 0, 'ERC20: mint to the zero address'
        if totalSupply > !(arg1 * totalSupply / 2 * ext_call.return_data[0]):
            revert with 0, 17
        totalSupply += arg1 * totalSupply / 2 * ext_call.return_data[0]
        if balanceOf[address(msg.sender)] > !(arg1 * totalSupply / 2 * ext_call.return_data[0]):
            revert with 0, 17
        balanceOf[address(msg.sender)] += arg1 * totalSupply / 2 * ext_call.return_data[0]
        emit Transfer((arg1 * totalSupply / 2 * ext_call.return_data[0]), 0, msg.sender);
        emit Deposit(msg.sender, arg1, arg1 * totalSupply / 2 * ext_call.return_data[0]);
    stor101 = 1
}

function yield() {
    if msg.sender == owner:
        if paused:
            revert with 0, 'Pausable: paused'
        if sub_abddf82e:
            require ext_code.size(stakingRewardAddress)
            call stakingRewardAddress.getReward() with:
                 gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 96] = 2
            mem[ceil32(return_data.size) + 128] = rewardTokenAddress
            mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 196] = ext_call.return_data[0]
            mem[ceil32(return_data.size) + 228] = 0
            mem[ceil32(return_data.size) + 260] = 160
            mem[ceil32(return_data.size) + 356] = 2
            idx = 0
            s = ceil32(return_data.size) + 128
            t = ceil32(return_data.size) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[ceil32(return_data.size) + 292] = this.address
            mem[ceil32(return_data.size) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1668 = mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 223 < ceil32(return_data.size) + return_data.size + 192
            _1672 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require (32 * _1672) + _1668 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _1672)] = mem[ceil32(return_data.size) + _1668 + 224 len ceil32(32 * _1672)]
            if 1 >= _1672:
                revert with 0, 50
            _3260 = mem[(2 * ceil32(return_data.size)) + 256]
            if mem[(2 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / mem[(2 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64]] = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _3260 * sub_b1a41085 / 10000
            _3268 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args (_3260 * sub_b1a41085 / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if _3260 < _3260 * sub_b1a41085 / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3519 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3519]:
                            revert with 0, 50
                        mem[_3519 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3519]:
                            revert with 0, 50
                        mem[_3519 + 64] = token1Address
                        mem[_3519 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3519 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                        mem[_3519 + 132] = 0
                        mem[_3519 + 164] = 160
                        mem[_3519 + 260] = mem[_3519]
                        idx = 0
                        s = _3519 + 32
                        t = _3519 + 292
                        while idx < mem[_3519]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3519 + 196] = this.address
                        mem[_3519 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3519 + (32 * mem[_3519]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4933 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4981 = mem[_4933]
                        require mem[_4933] <= test266151307()
                        require _4933 + mem[_4933] + 31 < _4933 + return_data.size
                        _5029 = mem[_4933 + mem[_4933]]
                        if mem[_4933 + mem[_4933]] > test266151307():
                            revert with 0, 65
                        if _4933 + ceil32(return_data.size) + ceil32(32 * mem[_4933 + mem[_4933]]) + 1 > test266151307() or ceil32(32 * mem[_4933 + mem[_4933]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4933 + ceil32(return_data.size) + ceil32(32 * mem[_4933 + mem[_4933]]) + 1
                        mem[_4933 + ceil32(return_data.size)] = _5029
                        require (32 * _5029) + _4981 + 32 <= return_data.size
                        mem[_4933 + ceil32(return_data.size) + 32 len ceil32(32 * _5029)] = mem[_4933 + _4981 + 32 len ceil32(32 * _5029)]
                        if 1 >= _5029:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3260 - (_3260 * sub_b1a41085 / 10000)), mem[_4933 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3565 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3565]:
                                revert with 0, 50
                            mem[_3565 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3565]:
                                revert with 0, 50
                            mem[_3565 + 64] = token0Address
                            mem[_3565 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3565 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_3565 + 132] = 0
                            mem[_3565 + 164] = 160
                            mem[_3565 + 260] = mem[_3565]
                            idx = 0
                            s = _3565 + 32
                            t = _3565 + 292
                            while idx < mem[_3565]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3565 + 196] = this.address
                            mem[_3565 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3565 + (32 * mem[_3565]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4932 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4980 = mem[_4932]
                            require mem[_4932] <= test266151307()
                            require _4932 + mem[_4932] + 31 < _4932 + return_data.size
                            _5028 = mem[_4932 + mem[_4932]]
                            if mem[_4932 + mem[_4932]] > test266151307():
                                revert with 0, 65
                            if _4932 + ceil32(return_data.size) + ceil32(32 * mem[_4932 + mem[_4932]]) + 1 > test266151307() or ceil32(32 * mem[_4932 + mem[_4932]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4932 + ceil32(return_data.size) + ceil32(32 * mem[_4932 + mem[_4932]]) + 1
                            mem[_4932 + ceil32(return_data.size)] = _5028
                            require (32 * _5028) + _4980 + 32 <= return_data.size
                            mem[_4932 + ceil32(return_data.size) + 32 len ceil32(32 * _5028)] = mem[_4932 + _4980 + 32 len ceil32(32 * _5028)]
                            if 1 >= _5028:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4932 + ceil32(return_data.size) + 64], Mask(255, 1, _3260 - (_3260 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3563 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3563]:
                                revert with 0, 50
                            mem[_3563 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3563]:
                                revert with 0, 50
                            mem[_3563 + 64] = token0Address
                            mem[_3563 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3563 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_3563 + 132] = 0
                            mem[_3563 + 164] = 160
                            mem[_3563 + 260] = mem[_3563]
                            idx = 0
                            s = _3563 + 32
                            t = _3563 + 292
                            while idx < mem[_3563]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3563 + 196] = this.address
                            mem[_3563 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3563 + (32 * mem[_3563]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4931 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4979 = mem[_4931]
                            require mem[_4931] <= test266151307()
                            require _4931 + mem[_4931] + 31 < _4931 + return_data.size
                            _5027 = mem[_4931 + mem[_4931]]
                            if mem[_4931 + mem[_4931]] > test266151307():
                                revert with 0, 65
                            if _4931 + ceil32(return_data.size) + ceil32(32 * mem[_4931 + mem[_4931]]) + 1 > test266151307() or ceil32(32 * mem[_4931 + mem[_4931]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4931 + ceil32(return_data.size) + ceil32(32 * mem[_4931 + mem[_4931]]) + 1
                            mem[_4931 + ceil32(return_data.size)] = _5027
                            require (32 * _5027) + _4979 + 32 <= return_data.size
                            mem[_4931 + ceil32(return_data.size) + 32 len ceil32(32 * _5027)] = mem[_4931 + _4979 + 32 len ceil32(32 * _5027)]
                            if 1 >= _5027:
                                revert with 0, 50
                            _6003 = mem[_4931 + ceil32(return_data.size) + 64]
                            _6143 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6143]:
                                revert with 0, 50
                            mem[_6143 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6143]:
                                revert with 0, 50
                            mem[_6143 + 64] = token1Address
                            mem[_6143 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6143 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_6143 + 132] = 0
                            mem[_6143 + 164] = 160
                            mem[_6143 + 260] = mem[_6143]
                            idx = 0
                            s = _6143 + 32
                            t = _6143 + 292
                            while idx < mem[_6143]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6143 + 196] = this.address
                            mem[_6143 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6143 + (32 * mem[_6143]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6715 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6731 = mem[_6715]
                            require mem[_6715] <= test266151307()
                            require _6715 + mem[_6715] + 31 < _6715 + return_data.size
                            _6747 = mem[_6715 + mem[_6715]]
                            if mem[_6715 + mem[_6715]] > test266151307():
                                revert with 0, 65
                            if _6715 + ceil32(return_data.size) + ceil32(32 * mem[_6715 + mem[_6715]]) + 1 > test266151307() or ceil32(32 * mem[_6715 + mem[_6715]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6715 + ceil32(return_data.size) + ceil32(32 * mem[_6715 + mem[_6715]]) + 1
                            mem[_6715 + ceil32(return_data.size)] = _6747
                            require (32 * _6747) + _6731 + 32 <= return_data.size
                            mem[_6715 + ceil32(return_data.size) + 32 len ceil32(32 * _6747)] = mem[_6715 + _6731 + 32 len ceil32(32 * _6747)]
                            if 1 >= _6747:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6003, mem[_6715 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3307 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3307] = return_data.size
                    mem[_3307 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3268
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3521 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3521]:
                            revert with 0, 50
                        mem[_3521 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3521]:
                            revert with 0, 50
                        mem[_3521 + 64] = token1Address
                        mem[_3521 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3521 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                        mem[_3521 + 132] = 0
                        mem[_3521 + 164] = 160
                        mem[_3521 + 260] = mem[_3521]
                        idx = 0
                        s = _3521 + 32
                        t = _3521 + 292
                        while idx < mem[_3521]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3521 + 196] = this.address
                        mem[_3521 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3521 + (32 * mem[_3521]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4936 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4984 = mem[_4936]
                        require mem[_4936] <= test266151307()
                        require _4936 + mem[_4936] + 31 < _4936 + return_data.size
                        _5032 = mem[_4936 + mem[_4936]]
                        if mem[_4936 + mem[_4936]] > test266151307():
                            revert with 0, 65
                        if _4936 + ceil32(return_data.size) + ceil32(32 * mem[_4936 + mem[_4936]]) + 1 > test266151307() or ceil32(32 * mem[_4936 + mem[_4936]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4936 + ceil32(return_data.size) + ceil32(32 * mem[_4936 + mem[_4936]]) + 1
                        mem[_4936 + ceil32(return_data.size)] = _5032
                        require (32 * _5032) + _4984 + 32 <= return_data.size
                        mem[_4936 + ceil32(return_data.size) + 32 len ceil32(32 * _5032)] = mem[_4936 + _4984 + 32 len ceil32(32 * _5032)]
                        if 1 >= _5032:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3260 - (_3260 * sub_b1a41085 / 10000)), mem[_4936 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3570 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3570]:
                                revert with 0, 50
                            mem[_3570 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3570]:
                                revert with 0, 50
                            mem[_3570 + 64] = token0Address
                            mem[_3570 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3570 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_3570 + 132] = 0
                            mem[_3570 + 164] = 160
                            mem[_3570 + 260] = mem[_3570]
                            idx = 0
                            s = _3570 + 32
                            t = _3570 + 292
                            while idx < mem[_3570]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3570 + 196] = this.address
                            mem[_3570 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3570 + (32 * mem[_3570]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4935 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4983 = mem[_4935]
                            require mem[_4935] <= test266151307()
                            require _4935 + mem[_4935] + 31 < _4935 + return_data.size
                            _5031 = mem[_4935 + mem[_4935]]
                            if mem[_4935 + mem[_4935]] > test266151307():
                                revert with 0, 65
                            if _4935 + ceil32(return_data.size) + ceil32(32 * mem[_4935 + mem[_4935]]) + 1 > test266151307() or ceil32(32 * mem[_4935 + mem[_4935]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4935 + ceil32(return_data.size) + ceil32(32 * mem[_4935 + mem[_4935]]) + 1
                            mem[_4935 + ceil32(return_data.size)] = _5031
                            require (32 * _5031) + _4983 + 32 <= return_data.size
                            mem[_4935 + ceil32(return_data.size) + 32 len ceil32(32 * _5031)] = mem[_4935 + _4983 + 32 len ceil32(32 * _5031)]
                            if 1 >= _5031:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4935 + ceil32(return_data.size) + 64], Mask(255, 1, _3260 - (_3260 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3568 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3568]:
                                revert with 0, 50
                            mem[_3568 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3568]:
                                revert with 0, 50
                            mem[_3568 + 64] = token0Address
                            mem[_3568 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3568 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_3568 + 132] = 0
                            mem[_3568 + 164] = 160
                            mem[_3568 + 260] = mem[_3568]
                            idx = 0
                            s = _3568 + 32
                            t = _3568 + 292
                            while idx < mem[_3568]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3568 + 196] = this.address
                            mem[_3568 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3568 + (32 * mem[_3568]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4934 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4982 = mem[_4934]
                            require mem[_4934] <= test266151307()
                            require _4934 + mem[_4934] + 31 < _4934 + return_data.size
                            _5030 = mem[_4934 + mem[_4934]]
                            if mem[_4934 + mem[_4934]] > test266151307():
                                revert with 0, 65
                            if _4934 + ceil32(return_data.size) + ceil32(32 * mem[_4934 + mem[_4934]]) + 1 > test266151307() or ceil32(32 * mem[_4934 + mem[_4934]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4934 + ceil32(return_data.size) + ceil32(32 * mem[_4934 + mem[_4934]]) + 1
                            mem[_4934 + ceil32(return_data.size)] = _5030
                            require (32 * _5030) + _4982 + 32 <= return_data.size
                            mem[_4934 + ceil32(return_data.size) + 32 len ceil32(32 * _5030)] = mem[_4934 + _4982 + 32 len ceil32(32 * _5030)]
                            if 1 >= _5030:
                                revert with 0, 50
                            _6006 = mem[_4934 + ceil32(return_data.size) + 64]
                            _6145 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6145]:
                                revert with 0, 50
                            mem[_6145 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6145]:
                                revert with 0, 50
                            mem[_6145 + 64] = token1Address
                            mem[_6145 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6145 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_6145 + 132] = 0
                            mem[_6145 + 164] = 160
                            mem[_6145 + 260] = mem[_6145]
                            idx = 0
                            s = _6145 + 32
                            t = _6145 + 292
                            while idx < mem[_6145]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6145 + 196] = this.address
                            mem[_6145 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6145 + (32 * mem[_6145]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6716 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6732 = mem[_6716]
                            require mem[_6716] <= test266151307()
                            require _6716 + mem[_6716] + 31 < _6716 + return_data.size
                            _6748 = mem[_6716 + mem[_6716]]
                            if mem[_6716 + mem[_6716]] > test266151307():
                                revert with 0, 65
                            if _6716 + ceil32(return_data.size) + ceil32(32 * mem[_6716 + mem[_6716]]) + 1 > test266151307() or ceil32(32 * mem[_6716 + mem[_6716]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6716 + ceil32(return_data.size) + ceil32(32 * mem[_6716 + mem[_6716]]) + 1
                            mem[_6716 + ceil32(return_data.size)] = _6748
                            require (32 * _6748) + _6732 + 32 <= return_data.size
                            mem[_6716 + ceil32(return_data.size) + 32 len ceil32(32 * _6748)] = mem[_6716 + _6732 + 32 len ceil32(32 * _6748)]
                            if 1 >= _6748:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6006, mem[_6716 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3284 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3284] = return_data.size
                mem[_3284 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3268
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3523 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3523]:
                            revert with 0, 50
                        mem[_3523 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3523]:
                            revert with 0, 50
                        mem[_3523 + 64] = token1Address
                        mem[_3523 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3523 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                        mem[_3523 + 132] = 0
                        mem[_3523 + 164] = 160
                        mem[_3523 + 260] = mem[_3523]
                        idx = 0
                        s = _3523 + 32
                        t = _3523 + 292
                        while idx < mem[_3523]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3523 + 196] = this.address
                        mem[_3523 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3523 + (32 * mem[_3523]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4939 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4987 = mem[_4939]
                        require mem[_4939] <= test266151307()
                        require _4939 + mem[_4939] + 31 < _4939 + return_data.size
                        _5035 = mem[_4939 + mem[_4939]]
                        if mem[_4939 + mem[_4939]] > test266151307():
                            revert with 0, 65
                        if _4939 + ceil32(return_data.size) + ceil32(32 * mem[_4939 + mem[_4939]]) + 1 > test266151307() or ceil32(32 * mem[_4939 + mem[_4939]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4939 + ceil32(return_data.size) + ceil32(32 * mem[_4939 + mem[_4939]]) + 1
                        mem[_4939 + ceil32(return_data.size)] = _5035
                        require (32 * _5035) + _4987 + 32 <= return_data.size
                        mem[_4939 + ceil32(return_data.size) + 32 len ceil32(32 * _5035)] = mem[_4939 + _4987 + 32 len ceil32(32 * _5035)]
                        if 1 >= _5035:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3260 - (_3260 * sub_b1a41085 / 10000)), mem[_4939 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3575 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3575]:
                                revert with 0, 50
                            mem[_3575 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3575]:
                                revert with 0, 50
                            mem[_3575 + 64] = token0Address
                            mem[_3575 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3575 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_3575 + 132] = 0
                            mem[_3575 + 164] = 160
                            mem[_3575 + 260] = mem[_3575]
                            idx = 0
                            s = _3575 + 32
                            t = _3575 + 292
                            while idx < mem[_3575]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3575 + 196] = this.address
                            mem[_3575 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3575 + (32 * mem[_3575]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4938 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4986 = mem[_4938]
                            require mem[_4938] <= test266151307()
                            require _4938 + mem[_4938] + 31 < _4938 + return_data.size
                            _5034 = mem[_4938 + mem[_4938]]
                            if mem[_4938 + mem[_4938]] > test266151307():
                                revert with 0, 65
                            if _4938 + ceil32(return_data.size) + ceil32(32 * mem[_4938 + mem[_4938]]) + 1 > test266151307() or ceil32(32 * mem[_4938 + mem[_4938]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4938 + ceil32(return_data.size) + ceil32(32 * mem[_4938 + mem[_4938]]) + 1
                            mem[_4938 + ceil32(return_data.size)] = _5034
                            require (32 * _5034) + _4986 + 32 <= return_data.size
                            mem[_4938 + ceil32(return_data.size) + 32 len ceil32(32 * _5034)] = mem[_4938 + _4986 + 32 len ceil32(32 * _5034)]
                            if 1 >= _5034:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4938 + ceil32(return_data.size) + 64], Mask(255, 1, _3260 - (_3260 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3573 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3573]:
                                revert with 0, 50
                            mem[_3573 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3573]:
                                revert with 0, 50
                            mem[_3573 + 64] = token0Address
                            mem[_3573 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3573 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_3573 + 132] = 0
                            mem[_3573 + 164] = 160
                            mem[_3573 + 260] = mem[_3573]
                            idx = 0
                            s = _3573 + 32
                            t = _3573 + 292
                            while idx < mem[_3573]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3573 + 196] = this.address
                            mem[_3573 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3573 + (32 * mem[_3573]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4937 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4985 = mem[_4937]
                            require mem[_4937] <= test266151307()
                            require _4937 + mem[_4937] + 31 < _4937 + return_data.size
                            _5033 = mem[_4937 + mem[_4937]]
                            if mem[_4937 + mem[_4937]] > test266151307():
                                revert with 0, 65
                            if _4937 + ceil32(return_data.size) + ceil32(32 * mem[_4937 + mem[_4937]]) + 1 > test266151307() or ceil32(32 * mem[_4937 + mem[_4937]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4937 + ceil32(return_data.size) + ceil32(32 * mem[_4937 + mem[_4937]]) + 1
                            mem[_4937 + ceil32(return_data.size)] = _5033
                            require (32 * _5033) + _4985 + 32 <= return_data.size
                            mem[_4937 + ceil32(return_data.size) + 32 len ceil32(32 * _5033)] = mem[_4937 + _4985 + 32 len ceil32(32 * _5033)]
                            if 1 >= _5033:
                                revert with 0, 50
                            _6009 = mem[_4937 + ceil32(return_data.size) + 64]
                            _6147 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6147]:
                                revert with 0, 50
                            mem[_6147 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6147]:
                                revert with 0, 50
                            mem[_6147 + 64] = token1Address
                            mem[_6147 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6147 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_6147 + 132] = 0
                            mem[_6147 + 164] = 160
                            mem[_6147 + 260] = mem[_6147]
                            idx = 0
                            s = _6147 + 32
                            t = _6147 + 292
                            while idx < mem[_6147]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6147 + 196] = this.address
                            mem[_6147 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6147 + (32 * mem[_6147]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6717 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6733 = mem[_6717]
                            require mem[_6717] <= test266151307()
                            require _6717 + mem[_6717] + 31 < _6717 + return_data.size
                            _6749 = mem[_6717 + mem[_6717]]
                            if mem[_6717 + mem[_6717]] > test266151307():
                                revert with 0, 65
                            if _6717 + ceil32(return_data.size) + ceil32(32 * mem[_6717 + mem[_6717]]) + 1 > test266151307() or ceil32(32 * mem[_6717 + mem[_6717]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6717 + ceil32(return_data.size) + ceil32(32 * mem[_6717 + mem[_6717]]) + 1
                            mem[_6717 + ceil32(return_data.size)] = _6749
                            require (32 * _6749) + _6733 + 32 <= return_data.size
                            mem[_6717 + ceil32(return_data.size) + 32 len ceil32(32 * _6749)] = mem[_6717 + _6733 + 32 len ceil32(32 * _6749)]
                            if 1 >= _6749:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6009, mem[_6717 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3309 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3309] = return_data.size
                    mem[_3309 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3268
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3525 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3525]:
                            revert with 0, 50
                        mem[_3525 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3525]:
                            revert with 0, 50
                        mem[_3525 + 64] = token1Address
                        mem[_3525 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3525 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                        mem[_3525 + 132] = 0
                        mem[_3525 + 164] = 160
                        mem[_3525 + 260] = mem[_3525]
                        idx = 0
                        s = _3525 + 32
                        t = _3525 + 292
                        while idx < mem[_3525]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3525 + 196] = this.address
                        mem[_3525 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3525 + (32 * mem[_3525]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4942 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4990 = mem[_4942]
                        require mem[_4942] <= test266151307()
                        require _4942 + mem[_4942] + 31 < _4942 + return_data.size
                        _5038 = mem[_4942 + mem[_4942]]
                        if mem[_4942 + mem[_4942]] > test266151307():
                            revert with 0, 65
                        if _4942 + ceil32(return_data.size) + ceil32(32 * mem[_4942 + mem[_4942]]) + 1 > test266151307() or ceil32(32 * mem[_4942 + mem[_4942]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4942 + ceil32(return_data.size) + ceil32(32 * mem[_4942 + mem[_4942]]) + 1
                        mem[_4942 + ceil32(return_data.size)] = _5038
                        require (32 * _5038) + _4990 + 32 <= return_data.size
                        mem[_4942 + ceil32(return_data.size) + 32 len ceil32(32 * _5038)] = mem[_4942 + _4990 + 32 len ceil32(32 * _5038)]
                        if 1 >= _5038:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3260 - (_3260 * sub_b1a41085 / 10000)), mem[_4942 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3580 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3580]:
                                revert with 0, 50
                            mem[_3580 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3580]:
                                revert with 0, 50
                            mem[_3580 + 64] = token0Address
                            mem[_3580 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3580 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_3580 + 132] = 0
                            mem[_3580 + 164] = 160
                            mem[_3580 + 260] = mem[_3580]
                            idx = 0
                            s = _3580 + 32
                            t = _3580 + 292
                            while idx < mem[_3580]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3580 + 196] = this.address
                            mem[_3580 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3580 + (32 * mem[_3580]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4941 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4989 = mem[_4941]
                            require mem[_4941] <= test266151307()
                            require _4941 + mem[_4941] + 31 < _4941 + return_data.size
                            _5037 = mem[_4941 + mem[_4941]]
                            if mem[_4941 + mem[_4941]] > test266151307():
                                revert with 0, 65
                            if _4941 + ceil32(return_data.size) + ceil32(32 * mem[_4941 + mem[_4941]]) + 1 > test266151307() or ceil32(32 * mem[_4941 + mem[_4941]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4941 + ceil32(return_data.size) + ceil32(32 * mem[_4941 + mem[_4941]]) + 1
                            mem[_4941 + ceil32(return_data.size)] = _5037
                            require (32 * _5037) + _4989 + 32 <= return_data.size
                            mem[_4941 + ceil32(return_data.size) + 32 len ceil32(32 * _5037)] = mem[_4941 + _4989 + 32 len ceil32(32 * _5037)]
                            if 1 >= _5037:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4941 + ceil32(return_data.size) + 64], Mask(255, 1, _3260 - (_3260 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3578 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3578]:
                                revert with 0, 50
                            mem[_3578 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3578]:
                                revert with 0, 50
                            mem[_3578 + 64] = token0Address
                            mem[_3578 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3578 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_3578 + 132] = 0
                            mem[_3578 + 164] = 160
                            mem[_3578 + 260] = mem[_3578]
                            idx = 0
                            s = _3578 + 32
                            t = _3578 + 292
                            while idx < mem[_3578]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3578 + 196] = this.address
                            mem[_3578 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3578 + (32 * mem[_3578]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4940 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4988 = mem[_4940]
                            require mem[_4940] <= test266151307()
                            require _4940 + mem[_4940] + 31 < _4940 + return_data.size
                            _5036 = mem[_4940 + mem[_4940]]
                            if mem[_4940 + mem[_4940]] > test266151307():
                                revert with 0, 65
                            if _4940 + ceil32(return_data.size) + ceil32(32 * mem[_4940 + mem[_4940]]) + 1 > test266151307() or ceil32(32 * mem[_4940 + mem[_4940]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4940 + ceil32(return_data.size) + ceil32(32 * mem[_4940 + mem[_4940]]) + 1
                            mem[_4940 + ceil32(return_data.size)] = _5036
                            require (32 * _5036) + _4988 + 32 <= return_data.size
                            mem[_4940 + ceil32(return_data.size) + 32 len ceil32(32 * _5036)] = mem[_4940 + _4988 + 32 len ceil32(32 * _5036)]
                            if 1 >= _5036:
                                revert with 0, 50
                            _6012 = mem[_4940 + ceil32(return_data.size) + 64]
                            _6149 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6149]:
                                revert with 0, 50
                            mem[_6149 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6149]:
                                revert with 0, 50
                            mem[_6149 + 64] = token1Address
                            mem[_6149 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6149 + 100] = _3260 - (_3260 * sub_b1a41085 / 10000) / 2
                            mem[_6149 + 132] = 0
                            mem[_6149 + 164] = 160
                            mem[_6149 + 260] = mem[_6149]
                            idx = 0
                            s = _6149 + 32
                            t = _6149 + 292
                            while idx < mem[_6149]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6149 + 196] = this.address
                            mem[_6149 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6149 + (32 * mem[_6149]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6718 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6734 = mem[_6718]
                            require mem[_6718] <= test266151307()
                            require _6718 + mem[_6718] + 31 < _6718 + return_data.size
                            _6750 = mem[_6718 + mem[_6718]]
                            if mem[_6718 + mem[_6718]] > test266151307():
                                revert with 0, 65
                            if _6718 + ceil32(return_data.size) + ceil32(32 * mem[_6718 + mem[_6718]]) + 1 > test266151307() or ceil32(32 * mem[_6718 + mem[_6718]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6718 + ceil32(return_data.size) + ceil32(32 * mem[_6718 + mem[_6718]]) + 1
                            mem[_6718 + ceil32(return_data.size)] = _6750
                            require (32 * _6750) + _6734 + 32 <= return_data.size
                            mem[_6718 + ceil32(return_data.size) + 32 len ceil32(32 * _6750)] = mem[_6718 + _6734 + 32 len ceil32(32 * _6750)]
                            if 1 >= _6750:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6012, mem[_6718 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield((_3260 - (_3260 * sub_b1a41085 / 10000)));
        else:
            mem[132] = 0
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 rg1, uint256 rg2) with:
                 gas gas_remaining wei
                args poolId, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 96] = 2
            mem[ceil32(return_data.size) + 128] = rewardTokenAddress
            mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 196] = ext_call.return_data[0]
            mem[ceil32(return_data.size) + 228] = 0
            mem[ceil32(return_data.size) + 260] = 160
            mem[ceil32(return_data.size) + 356] = 2
            idx = 0
            s = ceil32(return_data.size) + 128
            t = ceil32(return_data.size) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[ceil32(return_data.size) + 292] = this.address
            mem[ceil32(return_data.size) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1667 = mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 223 < ceil32(return_data.size) + return_data.size + 192
            _1671 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require (32 * _1671) + _1667 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _1671)] = mem[ceil32(return_data.size) + _1667 + 224 len ceil32(32 * _1671)]
            if 1 >= _1671:
                revert with 0, 50
            _3259 = mem[(2 * ceil32(return_data.size)) + 256]
            if mem[(2 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / mem[(2 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64]] = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _3259 * sub_b1a41085 / 10000
            _3264 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args (_3259 * sub_b1a41085 / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if _3259 < _3259 * sub_b1a41085 / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3511 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3511]:
                            revert with 0, 50
                        mem[_3511 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3511]:
                            revert with 0, 50
                        mem[_3511 + 64] = token1Address
                        mem[_3511 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3511 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                        mem[_3511 + 132] = 0
                        mem[_3511 + 164] = 160
                        mem[_3511 + 260] = mem[_3511]
                        idx = 0
                        s = _3511 + 32
                        t = _3511 + 292
                        while idx < mem[_3511]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3511 + 196] = this.address
                        mem[_3511 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3511 + (32 * mem[_3511]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4921 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4969 = mem[_4921]
                        require mem[_4921] <= test266151307()
                        require _4921 + mem[_4921] + 31 < _4921 + return_data.size
                        _5017 = mem[_4921 + mem[_4921]]
                        if mem[_4921 + mem[_4921]] > test266151307():
                            revert with 0, 65
                        if _4921 + ceil32(return_data.size) + ceil32(32 * mem[_4921 + mem[_4921]]) + 1 > test266151307() or ceil32(32 * mem[_4921 + mem[_4921]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4921 + ceil32(return_data.size) + ceil32(32 * mem[_4921 + mem[_4921]]) + 1
                        mem[_4921 + ceil32(return_data.size)] = _5017
                        require (32 * _5017) + _4969 + 32 <= return_data.size
                        mem[_4921 + ceil32(return_data.size) + 32 len ceil32(32 * _5017)] = mem[_4921 + _4969 + 32 len ceil32(32 * _5017)]
                        if 1 >= _5017:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3259 - (_3259 * sub_b1a41085 / 10000)), mem[_4921 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3545 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3545]:
                                revert with 0, 50
                            mem[_3545 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3545]:
                                revert with 0, 50
                            mem[_3545 + 64] = token0Address
                            mem[_3545 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3545 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_3545 + 132] = 0
                            mem[_3545 + 164] = 160
                            mem[_3545 + 260] = mem[_3545]
                            idx = 0
                            s = _3545 + 32
                            t = _3545 + 292
                            while idx < mem[_3545]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3545 + 196] = this.address
                            mem[_3545 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3545 + (32 * mem[_3545]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4920 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4968 = mem[_4920]
                            require mem[_4920] <= test266151307()
                            require _4920 + mem[_4920] + 31 < _4920 + return_data.size
                            _5016 = mem[_4920 + mem[_4920]]
                            if mem[_4920 + mem[_4920]] > test266151307():
                                revert with 0, 65
                            if _4920 + ceil32(return_data.size) + ceil32(32 * mem[_4920 + mem[_4920]]) + 1 > test266151307() or ceil32(32 * mem[_4920 + mem[_4920]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4920 + ceil32(return_data.size) + ceil32(32 * mem[_4920 + mem[_4920]]) + 1
                            mem[_4920 + ceil32(return_data.size)] = _5016
                            require (32 * _5016) + _4968 + 32 <= return_data.size
                            mem[_4920 + ceil32(return_data.size) + 32 len ceil32(32 * _5016)] = mem[_4920 + _4968 + 32 len ceil32(32 * _5016)]
                            if 1 >= _5016:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4920 + ceil32(return_data.size) + 64], Mask(255, 1, _3259 - (_3259 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3543 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3543]:
                                revert with 0, 50
                            mem[_3543 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3543]:
                                revert with 0, 50
                            mem[_3543 + 64] = token0Address
                            mem[_3543 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3543 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_3543 + 132] = 0
                            mem[_3543 + 164] = 160
                            mem[_3543 + 260] = mem[_3543]
                            idx = 0
                            s = _3543 + 32
                            t = _3543 + 292
                            while idx < mem[_3543]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3543 + 196] = this.address
                            mem[_3543 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3543 + (32 * mem[_3543]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4919 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4967 = mem[_4919]
                            require mem[_4919] <= test266151307()
                            require _4919 + mem[_4919] + 31 < _4919 + return_data.size
                            _5015 = mem[_4919 + mem[_4919]]
                            if mem[_4919 + mem[_4919]] > test266151307():
                                revert with 0, 65
                            if _4919 + ceil32(return_data.size) + ceil32(32 * mem[_4919 + mem[_4919]]) + 1 > test266151307() or ceil32(32 * mem[_4919 + mem[_4919]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4919 + ceil32(return_data.size) + ceil32(32 * mem[_4919 + mem[_4919]]) + 1
                            mem[_4919 + ceil32(return_data.size)] = _5015
                            require (32 * _5015) + _4967 + 32 <= return_data.size
                            mem[_4919 + ceil32(return_data.size) + 32 len ceil32(32 * _5015)] = mem[_4919 + _4967 + 32 len ceil32(32 * _5015)]
                            if 1 >= _5015:
                                revert with 0, 50
                            _5991 = mem[_4919 + ceil32(return_data.size) + 64]
                            _6135 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6135]:
                                revert with 0, 50
                            mem[_6135 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6135]:
                                revert with 0, 50
                            mem[_6135 + 64] = token1Address
                            mem[_6135 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6135 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_6135 + 132] = 0
                            mem[_6135 + 164] = 160
                            mem[_6135 + 260] = mem[_6135]
                            idx = 0
                            s = _6135 + 32
                            t = _6135 + 292
                            while idx < mem[_6135]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6135 + 196] = this.address
                            mem[_6135 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6135 + (32 * mem[_6135]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6711 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6727 = mem[_6711]
                            require mem[_6711] <= test266151307()
                            require _6711 + mem[_6711] + 31 < _6711 + return_data.size
                            _6743 = mem[_6711 + mem[_6711]]
                            if mem[_6711 + mem[_6711]] > test266151307():
                                revert with 0, 65
                            if _6711 + ceil32(return_data.size) + ceil32(32 * mem[_6711 + mem[_6711]]) + 1 > test266151307() or ceil32(32 * mem[_6711 + mem[_6711]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6711 + ceil32(return_data.size) + ceil32(32 * mem[_6711 + mem[_6711]]) + 1
                            mem[_6711 + ceil32(return_data.size)] = _6743
                            require (32 * _6743) + _6727 + 32 <= return_data.size
                            mem[_6711 + ceil32(return_data.size) + 32 len ceil32(32 * _6743)] = mem[_6711 + _6727 + 32 len ceil32(32 * _6743)]
                            if 1 >= _6743:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _5991, mem[_6711 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3303 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3303] = return_data.size
                    mem[_3303 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3264
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3513 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3513]:
                            revert with 0, 50
                        mem[_3513 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3513]:
                            revert with 0, 50
                        mem[_3513 + 64] = token1Address
                        mem[_3513 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3513 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                        mem[_3513 + 132] = 0
                        mem[_3513 + 164] = 160
                        mem[_3513 + 260] = mem[_3513]
                        idx = 0
                        s = _3513 + 32
                        t = _3513 + 292
                        while idx < mem[_3513]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3513 + 196] = this.address
                        mem[_3513 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3513 + (32 * mem[_3513]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4924 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4972 = mem[_4924]
                        require mem[_4924] <= test266151307()
                        require _4924 + mem[_4924] + 31 < _4924 + return_data.size
                        _5020 = mem[_4924 + mem[_4924]]
                        if mem[_4924 + mem[_4924]] > test266151307():
                            revert with 0, 65
                        if _4924 + ceil32(return_data.size) + ceil32(32 * mem[_4924 + mem[_4924]]) + 1 > test266151307() or ceil32(32 * mem[_4924 + mem[_4924]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4924 + ceil32(return_data.size) + ceil32(32 * mem[_4924 + mem[_4924]]) + 1
                        mem[_4924 + ceil32(return_data.size)] = _5020
                        require (32 * _5020) + _4972 + 32 <= return_data.size
                        mem[_4924 + ceil32(return_data.size) + 32 len ceil32(32 * _5020)] = mem[_4924 + _4972 + 32 len ceil32(32 * _5020)]
                        if 1 >= _5020:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3259 - (_3259 * sub_b1a41085 / 10000)), mem[_4924 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3550 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3550]:
                                revert with 0, 50
                            mem[_3550 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3550]:
                                revert with 0, 50
                            mem[_3550 + 64] = token0Address
                            mem[_3550 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3550 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_3550 + 132] = 0
                            mem[_3550 + 164] = 160
                            mem[_3550 + 260] = mem[_3550]
                            idx = 0
                            s = _3550 + 32
                            t = _3550 + 292
                            while idx < mem[_3550]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3550 + 196] = this.address
                            mem[_3550 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3550 + (32 * mem[_3550]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4923 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4971 = mem[_4923]
                            require mem[_4923] <= test266151307()
                            require _4923 + mem[_4923] + 31 < _4923 + return_data.size
                            _5019 = mem[_4923 + mem[_4923]]
                            if mem[_4923 + mem[_4923]] > test266151307():
                                revert with 0, 65
                            if _4923 + ceil32(return_data.size) + ceil32(32 * mem[_4923 + mem[_4923]]) + 1 > test266151307() or ceil32(32 * mem[_4923 + mem[_4923]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4923 + ceil32(return_data.size) + ceil32(32 * mem[_4923 + mem[_4923]]) + 1
                            mem[_4923 + ceil32(return_data.size)] = _5019
                            require (32 * _5019) + _4971 + 32 <= return_data.size
                            mem[_4923 + ceil32(return_data.size) + 32 len ceil32(32 * _5019)] = mem[_4923 + _4971 + 32 len ceil32(32 * _5019)]
                            if 1 >= _5019:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4923 + ceil32(return_data.size) + 64], Mask(255, 1, _3259 - (_3259 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3548 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3548]:
                                revert with 0, 50
                            mem[_3548 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3548]:
                                revert with 0, 50
                            mem[_3548 + 64] = token0Address
                            mem[_3548 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3548 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_3548 + 132] = 0
                            mem[_3548 + 164] = 160
                            mem[_3548 + 260] = mem[_3548]
                            idx = 0
                            s = _3548 + 32
                            t = _3548 + 292
                            while idx < mem[_3548]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3548 + 196] = this.address
                            mem[_3548 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3548 + (32 * mem[_3548]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4922 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4970 = mem[_4922]
                            require mem[_4922] <= test266151307()
                            require _4922 + mem[_4922] + 31 < _4922 + return_data.size
                            _5018 = mem[_4922 + mem[_4922]]
                            if mem[_4922 + mem[_4922]] > test266151307():
                                revert with 0, 65
                            if _4922 + ceil32(return_data.size) + ceil32(32 * mem[_4922 + mem[_4922]]) + 1 > test266151307() or ceil32(32 * mem[_4922 + mem[_4922]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4922 + ceil32(return_data.size) + ceil32(32 * mem[_4922 + mem[_4922]]) + 1
                            mem[_4922 + ceil32(return_data.size)] = _5018
                            require (32 * _5018) + _4970 + 32 <= return_data.size
                            mem[_4922 + ceil32(return_data.size) + 32 len ceil32(32 * _5018)] = mem[_4922 + _4970 + 32 len ceil32(32 * _5018)]
                            if 1 >= _5018:
                                revert with 0, 50
                            _5994 = mem[_4922 + ceil32(return_data.size) + 64]
                            _6137 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6137]:
                                revert with 0, 50
                            mem[_6137 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6137]:
                                revert with 0, 50
                            mem[_6137 + 64] = token1Address
                            mem[_6137 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6137 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_6137 + 132] = 0
                            mem[_6137 + 164] = 160
                            mem[_6137 + 260] = mem[_6137]
                            idx = 0
                            s = _6137 + 32
                            t = _6137 + 292
                            while idx < mem[_6137]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6137 + 196] = this.address
                            mem[_6137 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6137 + (32 * mem[_6137]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6712 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6728 = mem[_6712]
                            require mem[_6712] <= test266151307()
                            require _6712 + mem[_6712] + 31 < _6712 + return_data.size
                            _6744 = mem[_6712 + mem[_6712]]
                            if mem[_6712 + mem[_6712]] > test266151307():
                                revert with 0, 65
                            if _6712 + ceil32(return_data.size) + ceil32(32 * mem[_6712 + mem[_6712]]) + 1 > test266151307() or ceil32(32 * mem[_6712 + mem[_6712]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6712 + ceil32(return_data.size) + ceil32(32 * mem[_6712 + mem[_6712]]) + 1
                            mem[_6712 + ceil32(return_data.size)] = _6744
                            require (32 * _6744) + _6728 + 32 <= return_data.size
                            mem[_6712 + ceil32(return_data.size) + 32 len ceil32(32 * _6744)] = mem[_6712 + _6728 + 32 len ceil32(32 * _6744)]
                            if 1 >= _6744:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _5994, mem[_6712 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3283 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3283] = return_data.size
                mem[_3283 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3264
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3515 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3515]:
                            revert with 0, 50
                        mem[_3515 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3515]:
                            revert with 0, 50
                        mem[_3515 + 64] = token1Address
                        mem[_3515 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3515 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                        mem[_3515 + 132] = 0
                        mem[_3515 + 164] = 160
                        mem[_3515 + 260] = mem[_3515]
                        idx = 0
                        s = _3515 + 32
                        t = _3515 + 292
                        while idx < mem[_3515]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3515 + 196] = this.address
                        mem[_3515 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3515 + (32 * mem[_3515]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4927 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4975 = mem[_4927]
                        require mem[_4927] <= test266151307()
                        require _4927 + mem[_4927] + 31 < _4927 + return_data.size
                        _5023 = mem[_4927 + mem[_4927]]
                        if mem[_4927 + mem[_4927]] > test266151307():
                            revert with 0, 65
                        if _4927 + ceil32(return_data.size) + ceil32(32 * mem[_4927 + mem[_4927]]) + 1 > test266151307() or ceil32(32 * mem[_4927 + mem[_4927]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4927 + ceil32(return_data.size) + ceil32(32 * mem[_4927 + mem[_4927]]) + 1
                        mem[_4927 + ceil32(return_data.size)] = _5023
                        require (32 * _5023) + _4975 + 32 <= return_data.size
                        mem[_4927 + ceil32(return_data.size) + 32 len ceil32(32 * _5023)] = mem[_4927 + _4975 + 32 len ceil32(32 * _5023)]
                        if 1 >= _5023:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3259 - (_3259 * sub_b1a41085 / 10000)), mem[_4927 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3555 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3555]:
                                revert with 0, 50
                            mem[_3555 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3555]:
                                revert with 0, 50
                            mem[_3555 + 64] = token0Address
                            mem[_3555 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3555 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_3555 + 132] = 0
                            mem[_3555 + 164] = 160
                            mem[_3555 + 260] = mem[_3555]
                            idx = 0
                            s = _3555 + 32
                            t = _3555 + 292
                            while idx < mem[_3555]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3555 + 196] = this.address
                            mem[_3555 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3555 + (32 * mem[_3555]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4926 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4974 = mem[_4926]
                            require mem[_4926] <= test266151307()
                            require _4926 + mem[_4926] + 31 < _4926 + return_data.size
                            _5022 = mem[_4926 + mem[_4926]]
                            if mem[_4926 + mem[_4926]] > test266151307():
                                revert with 0, 65
                            if _4926 + ceil32(return_data.size) + ceil32(32 * mem[_4926 + mem[_4926]]) + 1 > test266151307() or ceil32(32 * mem[_4926 + mem[_4926]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4926 + ceil32(return_data.size) + ceil32(32 * mem[_4926 + mem[_4926]]) + 1
                            mem[_4926 + ceil32(return_data.size)] = _5022
                            require (32 * _5022) + _4974 + 32 <= return_data.size
                            mem[_4926 + ceil32(return_data.size) + 32 len ceil32(32 * _5022)] = mem[_4926 + _4974 + 32 len ceil32(32 * _5022)]
                            if 1 >= _5022:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4926 + ceil32(return_data.size) + 64], Mask(255, 1, _3259 - (_3259 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3553 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3553]:
                                revert with 0, 50
                            mem[_3553 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3553]:
                                revert with 0, 50
                            mem[_3553 + 64] = token0Address
                            mem[_3553 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3553 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_3553 + 132] = 0
                            mem[_3553 + 164] = 160
                            mem[_3553 + 260] = mem[_3553]
                            idx = 0
                            s = _3553 + 32
                            t = _3553 + 292
                            while idx < mem[_3553]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3553 + 196] = this.address
                            mem[_3553 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3553 + (32 * mem[_3553]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4925 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4973 = mem[_4925]
                            require mem[_4925] <= test266151307()
                            require _4925 + mem[_4925] + 31 < _4925 + return_data.size
                            _5021 = mem[_4925 + mem[_4925]]
                            if mem[_4925 + mem[_4925]] > test266151307():
                                revert with 0, 65
                            if _4925 + ceil32(return_data.size) + ceil32(32 * mem[_4925 + mem[_4925]]) + 1 > test266151307() or ceil32(32 * mem[_4925 + mem[_4925]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4925 + ceil32(return_data.size) + ceil32(32 * mem[_4925 + mem[_4925]]) + 1
                            mem[_4925 + ceil32(return_data.size)] = _5021
                            require (32 * _5021) + _4973 + 32 <= return_data.size
                            mem[_4925 + ceil32(return_data.size) + 32 len ceil32(32 * _5021)] = mem[_4925 + _4973 + 32 len ceil32(32 * _5021)]
                            if 1 >= _5021:
                                revert with 0, 50
                            _5997 = mem[_4925 + ceil32(return_data.size) + 64]
                            _6139 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6139]:
                                revert with 0, 50
                            mem[_6139 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6139]:
                                revert with 0, 50
                            mem[_6139 + 64] = token1Address
                            mem[_6139 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6139 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_6139 + 132] = 0
                            mem[_6139 + 164] = 160
                            mem[_6139 + 260] = mem[_6139]
                            idx = 0
                            s = _6139 + 32
                            t = _6139 + 292
                            while idx < mem[_6139]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6139 + 196] = this.address
                            mem[_6139 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6139 + (32 * mem[_6139]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6713 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6729 = mem[_6713]
                            require mem[_6713] <= test266151307()
                            require _6713 + mem[_6713] + 31 < _6713 + return_data.size
                            _6745 = mem[_6713 + mem[_6713]]
                            if mem[_6713 + mem[_6713]] > test266151307():
                                revert with 0, 65
                            if _6713 + ceil32(return_data.size) + ceil32(32 * mem[_6713 + mem[_6713]]) + 1 > test266151307() or ceil32(32 * mem[_6713 + mem[_6713]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6713 + ceil32(return_data.size) + ceil32(32 * mem[_6713 + mem[_6713]]) + 1
                            mem[_6713 + ceil32(return_data.size)] = _6745
                            require (32 * _6745) + _6729 + 32 <= return_data.size
                            mem[_6713 + ceil32(return_data.size) + 32 len ceil32(32 * _6745)] = mem[_6713 + _6729 + 32 len ceil32(32 * _6745)]
                            if 1 >= _6745:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _5997, mem[_6713 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3305 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3305] = return_data.size
                    mem[_3305 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3264
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3517 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3517]:
                            revert with 0, 50
                        mem[_3517 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3517]:
                            revert with 0, 50
                        mem[_3517 + 64] = token1Address
                        mem[_3517 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3517 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                        mem[_3517 + 132] = 0
                        mem[_3517 + 164] = 160
                        mem[_3517 + 260] = mem[_3517]
                        idx = 0
                        s = _3517 + 32
                        t = _3517 + 292
                        while idx < mem[_3517]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3517 + 196] = this.address
                        mem[_3517 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3517 + (32 * mem[_3517]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4930 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4978 = mem[_4930]
                        require mem[_4930] <= test266151307()
                        require _4930 + mem[_4930] + 31 < _4930 + return_data.size
                        _5026 = mem[_4930 + mem[_4930]]
                        if mem[_4930 + mem[_4930]] > test266151307():
                            revert with 0, 65
                        if _4930 + ceil32(return_data.size) + ceil32(32 * mem[_4930 + mem[_4930]]) + 1 > test266151307() or ceil32(32 * mem[_4930 + mem[_4930]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4930 + ceil32(return_data.size) + ceil32(32 * mem[_4930 + mem[_4930]]) + 1
                        mem[_4930 + ceil32(return_data.size)] = _5026
                        require (32 * _5026) + _4978 + 32 <= return_data.size
                        mem[_4930 + ceil32(return_data.size) + 32 len ceil32(32 * _5026)] = mem[_4930 + _4978 + 32 len ceil32(32 * _5026)]
                        if 1 >= _5026:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3259 - (_3259 * sub_b1a41085 / 10000)), mem[_4930 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3560 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3560]:
                                revert with 0, 50
                            mem[_3560 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3560]:
                                revert with 0, 50
                            mem[_3560 + 64] = token0Address
                            mem[_3560 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3560 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_3560 + 132] = 0
                            mem[_3560 + 164] = 160
                            mem[_3560 + 260] = mem[_3560]
                            idx = 0
                            s = _3560 + 32
                            t = _3560 + 292
                            while idx < mem[_3560]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3560 + 196] = this.address
                            mem[_3560 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3560 + (32 * mem[_3560]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4929 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4977 = mem[_4929]
                            require mem[_4929] <= test266151307()
                            require _4929 + mem[_4929] + 31 < _4929 + return_data.size
                            _5025 = mem[_4929 + mem[_4929]]
                            if mem[_4929 + mem[_4929]] > test266151307():
                                revert with 0, 65
                            if _4929 + ceil32(return_data.size) + ceil32(32 * mem[_4929 + mem[_4929]]) + 1 > test266151307() or ceil32(32 * mem[_4929 + mem[_4929]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4929 + ceil32(return_data.size) + ceil32(32 * mem[_4929 + mem[_4929]]) + 1
                            mem[_4929 + ceil32(return_data.size)] = _5025
                            require (32 * _5025) + _4977 + 32 <= return_data.size
                            mem[_4929 + ceil32(return_data.size) + 32 len ceil32(32 * _5025)] = mem[_4929 + _4977 + 32 len ceil32(32 * _5025)]
                            if 1 >= _5025:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4929 + ceil32(return_data.size) + 64], Mask(255, 1, _3259 - (_3259 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3558 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3558]:
                                revert with 0, 50
                            mem[_3558 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3558]:
                                revert with 0, 50
                            mem[_3558 + 64] = token0Address
                            mem[_3558 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3558 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_3558 + 132] = 0
                            mem[_3558 + 164] = 160
                            mem[_3558 + 260] = mem[_3558]
                            idx = 0
                            s = _3558 + 32
                            t = _3558 + 292
                            while idx < mem[_3558]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3558 + 196] = this.address
                            mem[_3558 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3558 + (32 * mem[_3558]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4928 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4976 = mem[_4928]
                            require mem[_4928] <= test266151307()
                            require _4928 + mem[_4928] + 31 < _4928 + return_data.size
                            _5024 = mem[_4928 + mem[_4928]]
                            if mem[_4928 + mem[_4928]] > test266151307():
                                revert with 0, 65
                            if _4928 + ceil32(return_data.size) + ceil32(32 * mem[_4928 + mem[_4928]]) + 1 > test266151307() or ceil32(32 * mem[_4928 + mem[_4928]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4928 + ceil32(return_data.size) + ceil32(32 * mem[_4928 + mem[_4928]]) + 1
                            mem[_4928 + ceil32(return_data.size)] = _5024
                            require (32 * _5024) + _4976 + 32 <= return_data.size
                            mem[_4928 + ceil32(return_data.size) + 32 len ceil32(32 * _5024)] = mem[_4928 + _4976 + 32 len ceil32(32 * _5024)]
                            if 1 >= _5024:
                                revert with 0, 50
                            _6000 = mem[_4928 + ceil32(return_data.size) + 64]
                            _6141 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6141]:
                                revert with 0, 50
                            mem[_6141 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6141]:
                                revert with 0, 50
                            mem[_6141 + 64] = token1Address
                            mem[_6141 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6141 + 100] = _3259 - (_3259 * sub_b1a41085 / 10000) / 2
                            mem[_6141 + 132] = 0
                            mem[_6141 + 164] = 160
                            mem[_6141 + 260] = mem[_6141]
                            idx = 0
                            s = _6141 + 32
                            t = _6141 + 292
                            while idx < mem[_6141]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6141 + 196] = this.address
                            mem[_6141 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6141 + (32 * mem[_6141]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6714 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6730 = mem[_6714]
                            require mem[_6714] <= test266151307()
                            require _6714 + mem[_6714] + 31 < _6714 + return_data.size
                            _6746 = mem[_6714 + mem[_6714]]
                            if mem[_6714 + mem[_6714]] > test266151307():
                                revert with 0, 65
                            if _6714 + ceil32(return_data.size) + ceil32(32 * mem[_6714 + mem[_6714]]) + 1 > test266151307() or ceil32(32 * mem[_6714 + mem[_6714]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6714 + ceil32(return_data.size) + ceil32(32 * mem[_6714 + mem[_6714]]) + 1
                            mem[_6714 + ceil32(return_data.size)] = _6746
                            require (32 * _6746) + _6730 + 32 <= return_data.size
                            mem[_6714 + ceil32(return_data.size) + 32 len ceil32(32 * _6746)] = mem[_6714 + _6730 + 32 len ceil32(32 * _6746)]
                            if 1 >= _6746:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6000, mem[_6714 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield((_3259 - (_3259 * sub_b1a41085 / 10000)));
    else:
        if adminAddress != msg.sender:
            revert with 0, 'Only owner or admin'
        if paused:
            revert with 0, 'Pausable: paused'
        if sub_abddf82e:
            require ext_code.size(stakingRewardAddress)
            call stakingRewardAddress.getReward() with:
                 gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 96] = 2
            mem[ceil32(return_data.size) + 128] = rewardTokenAddress
            mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 196] = ext_call.return_data[0]
            mem[ceil32(return_data.size) + 228] = 0
            mem[ceil32(return_data.size) + 260] = 160
            mem[ceil32(return_data.size) + 356] = 2
            idx = 0
            s = ceil32(return_data.size) + 128
            t = ceil32(return_data.size) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[ceil32(return_data.size) + 292] = this.address
            mem[ceil32(return_data.size) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1670 = mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 223 < ceil32(return_data.size) + return_data.size + 192
            _1674 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require (32 * _1674) + _1670 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _1674)] = mem[ceil32(return_data.size) + _1670 + 224 len ceil32(32 * _1674)]
            if 1 >= _1674:
                revert with 0, 50
            _3262 = mem[(2 * ceil32(return_data.size)) + 256]
            if mem[(2 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / mem[(2 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64]] = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _3262 * sub_b1a41085 / 10000
            _3276 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args (_3262 * sub_b1a41085 / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if _3262 < _3262 * sub_b1a41085 / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3535 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3535]:
                            revert with 0, 50
                        mem[_3535 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3535]:
                            revert with 0, 50
                        mem[_3535 + 64] = token1Address
                        mem[_3535 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3535 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                        mem[_3535 + 132] = 0
                        mem[_3535 + 164] = 160
                        mem[_3535 + 260] = mem[_3535]
                        idx = 0
                        s = _3535 + 32
                        t = _3535 + 292
                        while idx < mem[_3535]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3535 + 196] = this.address
                        mem[_3535 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3535 + (32 * mem[_3535]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4957 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5005 = mem[_4957]
                        require mem[_4957] <= test266151307()
                        require _4957 + mem[_4957] + 31 < _4957 + return_data.size
                        _5053 = mem[_4957 + mem[_4957]]
                        if mem[_4957 + mem[_4957]] > test266151307():
                            revert with 0, 65
                        if _4957 + ceil32(return_data.size) + ceil32(32 * mem[_4957 + mem[_4957]]) + 1 > test266151307() or ceil32(32 * mem[_4957 + mem[_4957]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4957 + ceil32(return_data.size) + ceil32(32 * mem[_4957 + mem[_4957]]) + 1
                        mem[_4957 + ceil32(return_data.size)] = _5053
                        require (32 * _5053) + _5005 + 32 <= return_data.size
                        mem[_4957 + ceil32(return_data.size) + 32 len ceil32(32 * _5053)] = mem[_4957 + _5005 + 32 len ceil32(32 * _5053)]
                        if 1 >= _5053:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3262 - (_3262 * sub_b1a41085 / 10000)), mem[_4957 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3605 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3605]:
                                revert with 0, 50
                            mem[_3605 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3605]:
                                revert with 0, 50
                            mem[_3605 + 64] = token0Address
                            mem[_3605 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3605 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_3605 + 132] = 0
                            mem[_3605 + 164] = 160
                            mem[_3605 + 260] = mem[_3605]
                            idx = 0
                            s = _3605 + 32
                            t = _3605 + 292
                            while idx < mem[_3605]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3605 + 196] = this.address
                            mem[_3605 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3605 + (32 * mem[_3605]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4956 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5004 = mem[_4956]
                            require mem[_4956] <= test266151307()
                            require _4956 + mem[_4956] + 31 < _4956 + return_data.size
                            _5052 = mem[_4956 + mem[_4956]]
                            if mem[_4956 + mem[_4956]] > test266151307():
                                revert with 0, 65
                            if _4956 + ceil32(return_data.size) + ceil32(32 * mem[_4956 + mem[_4956]]) + 1 > test266151307() or ceil32(32 * mem[_4956 + mem[_4956]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4956 + ceil32(return_data.size) + ceil32(32 * mem[_4956 + mem[_4956]]) + 1
                            mem[_4956 + ceil32(return_data.size)] = _5052
                            require (32 * _5052) + _5004 + 32 <= return_data.size
                            mem[_4956 + ceil32(return_data.size) + 32 len ceil32(32 * _5052)] = mem[_4956 + _5004 + 32 len ceil32(32 * _5052)]
                            if 1 >= _5052:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4956 + ceil32(return_data.size) + 64], Mask(255, 1, _3262 - (_3262 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3603 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3603]:
                                revert with 0, 50
                            mem[_3603 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3603]:
                                revert with 0, 50
                            mem[_3603 + 64] = token0Address
                            mem[_3603 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3603 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_3603 + 132] = 0
                            mem[_3603 + 164] = 160
                            mem[_3603 + 260] = mem[_3603]
                            idx = 0
                            s = _3603 + 32
                            t = _3603 + 292
                            while idx < mem[_3603]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3603 + 196] = this.address
                            mem[_3603 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3603 + (32 * mem[_3603]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4955 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5003 = mem[_4955]
                            require mem[_4955] <= test266151307()
                            require _4955 + mem[_4955] + 31 < _4955 + return_data.size
                            _5051 = mem[_4955 + mem[_4955]]
                            if mem[_4955 + mem[_4955]] > test266151307():
                                revert with 0, 65
                            if _4955 + ceil32(return_data.size) + ceil32(32 * mem[_4955 + mem[_4955]]) + 1 > test266151307() or ceil32(32 * mem[_4955 + mem[_4955]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4955 + ceil32(return_data.size) + ceil32(32 * mem[_4955 + mem[_4955]]) + 1
                            mem[_4955 + ceil32(return_data.size)] = _5051
                            require (32 * _5051) + _5003 + 32 <= return_data.size
                            mem[_4955 + ceil32(return_data.size) + 32 len ceil32(32 * _5051)] = mem[_4955 + _5003 + 32 len ceil32(32 * _5051)]
                            if 1 >= _5051:
                                revert with 0, 50
                            _6027 = mem[_4955 + ceil32(return_data.size) + 64]
                            _6159 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6159]:
                                revert with 0, 50
                            mem[_6159 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6159]:
                                revert with 0, 50
                            mem[_6159 + 64] = token1Address
                            mem[_6159 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6159 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_6159 + 132] = 0
                            mem[_6159 + 164] = 160
                            mem[_6159 + 260] = mem[_6159]
                            idx = 0
                            s = _6159 + 32
                            t = _6159 + 292
                            while idx < mem[_6159]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6159 + 196] = this.address
                            mem[_6159 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6159 + (32 * mem[_6159]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6723 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6739 = mem[_6723]
                            require mem[_6723] <= test266151307()
                            require _6723 + mem[_6723] + 31 < _6723 + return_data.size
                            _6755 = mem[_6723 + mem[_6723]]
                            if mem[_6723 + mem[_6723]] > test266151307():
                                revert with 0, 65
                            if _6723 + ceil32(return_data.size) + ceil32(32 * mem[_6723 + mem[_6723]]) + 1 > test266151307() or ceil32(32 * mem[_6723 + mem[_6723]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6723 + ceil32(return_data.size) + ceil32(32 * mem[_6723 + mem[_6723]]) + 1
                            mem[_6723 + ceil32(return_data.size)] = _6755
                            require (32 * _6755) + _6739 + 32 <= return_data.size
                            mem[_6723 + ceil32(return_data.size) + 32 len ceil32(32 * _6755)] = mem[_6723 + _6739 + 32 len ceil32(32 * _6755)]
                            if 1 >= _6755:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6027, mem[_6723 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3315 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3315] = return_data.size
                    mem[_3315 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3276
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3537 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3537]:
                            revert with 0, 50
                        mem[_3537 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3537]:
                            revert with 0, 50
                        mem[_3537 + 64] = token1Address
                        mem[_3537 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3537 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                        mem[_3537 + 132] = 0
                        mem[_3537 + 164] = 160
                        mem[_3537 + 260] = mem[_3537]
                        idx = 0
                        s = _3537 + 32
                        t = _3537 + 292
                        while idx < mem[_3537]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3537 + 196] = this.address
                        mem[_3537 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3537 + (32 * mem[_3537]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4960 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5008 = mem[_4960]
                        require mem[_4960] <= test266151307()
                        require _4960 + mem[_4960] + 31 < _4960 + return_data.size
                        _5056 = mem[_4960 + mem[_4960]]
                        if mem[_4960 + mem[_4960]] > test266151307():
                            revert with 0, 65
                        if _4960 + ceil32(return_data.size) + ceil32(32 * mem[_4960 + mem[_4960]]) + 1 > test266151307() or ceil32(32 * mem[_4960 + mem[_4960]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4960 + ceil32(return_data.size) + ceil32(32 * mem[_4960 + mem[_4960]]) + 1
                        mem[_4960 + ceil32(return_data.size)] = _5056
                        require (32 * _5056) + _5008 + 32 <= return_data.size
                        mem[_4960 + ceil32(return_data.size) + 32 len ceil32(32 * _5056)] = mem[_4960 + _5008 + 32 len ceil32(32 * _5056)]
                        if 1 >= _5056:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3262 - (_3262 * sub_b1a41085 / 10000)), mem[_4960 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3610 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3610]:
                                revert with 0, 50
                            mem[_3610 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3610]:
                                revert with 0, 50
                            mem[_3610 + 64] = token0Address
                            mem[_3610 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3610 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_3610 + 132] = 0
                            mem[_3610 + 164] = 160
                            mem[_3610 + 260] = mem[_3610]
                            idx = 0
                            s = _3610 + 32
                            t = _3610 + 292
                            while idx < mem[_3610]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3610 + 196] = this.address
                            mem[_3610 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3610 + (32 * mem[_3610]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4959 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5007 = mem[_4959]
                            require mem[_4959] <= test266151307()
                            require _4959 + mem[_4959] + 31 < _4959 + return_data.size
                            _5055 = mem[_4959 + mem[_4959]]
                            if mem[_4959 + mem[_4959]] > test266151307():
                                revert with 0, 65
                            if _4959 + ceil32(return_data.size) + ceil32(32 * mem[_4959 + mem[_4959]]) + 1 > test266151307() or ceil32(32 * mem[_4959 + mem[_4959]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4959 + ceil32(return_data.size) + ceil32(32 * mem[_4959 + mem[_4959]]) + 1
                            mem[_4959 + ceil32(return_data.size)] = _5055
                            require (32 * _5055) + _5007 + 32 <= return_data.size
                            mem[_4959 + ceil32(return_data.size) + 32 len ceil32(32 * _5055)] = mem[_4959 + _5007 + 32 len ceil32(32 * _5055)]
                            if 1 >= _5055:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4959 + ceil32(return_data.size) + 64], Mask(255, 1, _3262 - (_3262 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3608 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3608]:
                                revert with 0, 50
                            mem[_3608 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3608]:
                                revert with 0, 50
                            mem[_3608 + 64] = token0Address
                            mem[_3608 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3608 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_3608 + 132] = 0
                            mem[_3608 + 164] = 160
                            mem[_3608 + 260] = mem[_3608]
                            idx = 0
                            s = _3608 + 32
                            t = _3608 + 292
                            while idx < mem[_3608]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3608 + 196] = this.address
                            mem[_3608 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3608 + (32 * mem[_3608]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4958 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5006 = mem[_4958]
                            require mem[_4958] <= test266151307()
                            require _4958 + mem[_4958] + 31 < _4958 + return_data.size
                            _5054 = mem[_4958 + mem[_4958]]
                            if mem[_4958 + mem[_4958]] > test266151307():
                                revert with 0, 65
                            if _4958 + ceil32(return_data.size) + ceil32(32 * mem[_4958 + mem[_4958]]) + 1 > test266151307() or ceil32(32 * mem[_4958 + mem[_4958]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4958 + ceil32(return_data.size) + ceil32(32 * mem[_4958 + mem[_4958]]) + 1
                            mem[_4958 + ceil32(return_data.size)] = _5054
                            require (32 * _5054) + _5006 + 32 <= return_data.size
                            mem[_4958 + ceil32(return_data.size) + 32 len ceil32(32 * _5054)] = mem[_4958 + _5006 + 32 len ceil32(32 * _5054)]
                            if 1 >= _5054:
                                revert with 0, 50
                            _6030 = mem[_4958 + ceil32(return_data.size) + 64]
                            _6161 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6161]:
                                revert with 0, 50
                            mem[_6161 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6161]:
                                revert with 0, 50
                            mem[_6161 + 64] = token1Address
                            mem[_6161 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6161 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_6161 + 132] = 0
                            mem[_6161 + 164] = 160
                            mem[_6161 + 260] = mem[_6161]
                            idx = 0
                            s = _6161 + 32
                            t = _6161 + 292
                            while idx < mem[_6161]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6161 + 196] = this.address
                            mem[_6161 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6161 + (32 * mem[_6161]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6724 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6740 = mem[_6724]
                            require mem[_6724] <= test266151307()
                            require _6724 + mem[_6724] + 31 < _6724 + return_data.size
                            _6756 = mem[_6724 + mem[_6724]]
                            if mem[_6724 + mem[_6724]] > test266151307():
                                revert with 0, 65
                            if _6724 + ceil32(return_data.size) + ceil32(32 * mem[_6724 + mem[_6724]]) + 1 > test266151307() or ceil32(32 * mem[_6724 + mem[_6724]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6724 + ceil32(return_data.size) + ceil32(32 * mem[_6724 + mem[_6724]]) + 1
                            mem[_6724 + ceil32(return_data.size)] = _6756
                            require (32 * _6756) + _6740 + 32 <= return_data.size
                            mem[_6724 + ceil32(return_data.size) + 32 len ceil32(32 * _6756)] = mem[_6724 + _6740 + 32 len ceil32(32 * _6756)]
                            if 1 >= _6756:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6030, mem[_6724 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3286 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3286] = return_data.size
                mem[_3286 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3276
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3539 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3539]:
                            revert with 0, 50
                        mem[_3539 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3539]:
                            revert with 0, 50
                        mem[_3539 + 64] = token1Address
                        mem[_3539 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3539 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                        mem[_3539 + 132] = 0
                        mem[_3539 + 164] = 160
                        mem[_3539 + 260] = mem[_3539]
                        idx = 0
                        s = _3539 + 32
                        t = _3539 + 292
                        while idx < mem[_3539]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3539 + 196] = this.address
                        mem[_3539 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3539 + (32 * mem[_3539]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4963 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5011 = mem[_4963]
                        require mem[_4963] <= test266151307()
                        require _4963 + mem[_4963] + 31 < _4963 + return_data.size
                        _5059 = mem[_4963 + mem[_4963]]
                        if mem[_4963 + mem[_4963]] > test266151307():
                            revert with 0, 65
                        if _4963 + ceil32(return_data.size) + ceil32(32 * mem[_4963 + mem[_4963]]) + 1 > test266151307() or ceil32(32 * mem[_4963 + mem[_4963]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4963 + ceil32(return_data.size) + ceil32(32 * mem[_4963 + mem[_4963]]) + 1
                        mem[_4963 + ceil32(return_data.size)] = _5059
                        require (32 * _5059) + _5011 + 32 <= return_data.size
                        mem[_4963 + ceil32(return_data.size) + 32 len ceil32(32 * _5059)] = mem[_4963 + _5011 + 32 len ceil32(32 * _5059)]
                        if 1 >= _5059:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3262 - (_3262 * sub_b1a41085 / 10000)), mem[_4963 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3615 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3615]:
                                revert with 0, 50
                            mem[_3615 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3615]:
                                revert with 0, 50
                            mem[_3615 + 64] = token0Address
                            mem[_3615 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3615 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_3615 + 132] = 0
                            mem[_3615 + 164] = 160
                            mem[_3615 + 260] = mem[_3615]
                            idx = 0
                            s = _3615 + 32
                            t = _3615 + 292
                            while idx < mem[_3615]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3615 + 196] = this.address
                            mem[_3615 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3615 + (32 * mem[_3615]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4962 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5010 = mem[_4962]
                            require mem[_4962] <= test266151307()
                            require _4962 + mem[_4962] + 31 < _4962 + return_data.size
                            _5058 = mem[_4962 + mem[_4962]]
                            if mem[_4962 + mem[_4962]] > test266151307():
                                revert with 0, 65
                            if _4962 + ceil32(return_data.size) + ceil32(32 * mem[_4962 + mem[_4962]]) + 1 > test266151307() or ceil32(32 * mem[_4962 + mem[_4962]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4962 + ceil32(return_data.size) + ceil32(32 * mem[_4962 + mem[_4962]]) + 1
                            mem[_4962 + ceil32(return_data.size)] = _5058
                            require (32 * _5058) + _5010 + 32 <= return_data.size
                            mem[_4962 + ceil32(return_data.size) + 32 len ceil32(32 * _5058)] = mem[_4962 + _5010 + 32 len ceil32(32 * _5058)]
                            if 1 >= _5058:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4962 + ceil32(return_data.size) + 64], Mask(255, 1, _3262 - (_3262 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3613 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3613]:
                                revert with 0, 50
                            mem[_3613 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3613]:
                                revert with 0, 50
                            mem[_3613 + 64] = token0Address
                            mem[_3613 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3613 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_3613 + 132] = 0
                            mem[_3613 + 164] = 160
                            mem[_3613 + 260] = mem[_3613]
                            idx = 0
                            s = _3613 + 32
                            t = _3613 + 292
                            while idx < mem[_3613]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3613 + 196] = this.address
                            mem[_3613 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3613 + (32 * mem[_3613]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4961 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5009 = mem[_4961]
                            require mem[_4961] <= test266151307()
                            require _4961 + mem[_4961] + 31 < _4961 + return_data.size
                            _5057 = mem[_4961 + mem[_4961]]
                            if mem[_4961 + mem[_4961]] > test266151307():
                                revert with 0, 65
                            if _4961 + ceil32(return_data.size) + ceil32(32 * mem[_4961 + mem[_4961]]) + 1 > test266151307() or ceil32(32 * mem[_4961 + mem[_4961]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4961 + ceil32(return_data.size) + ceil32(32 * mem[_4961 + mem[_4961]]) + 1
                            mem[_4961 + ceil32(return_data.size)] = _5057
                            require (32 * _5057) + _5009 + 32 <= return_data.size
                            mem[_4961 + ceil32(return_data.size) + 32 len ceil32(32 * _5057)] = mem[_4961 + _5009 + 32 len ceil32(32 * _5057)]
                            if 1 >= _5057:
                                revert with 0, 50
                            _6033 = mem[_4961 + ceil32(return_data.size) + 64]
                            _6163 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6163]:
                                revert with 0, 50
                            mem[_6163 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6163]:
                                revert with 0, 50
                            mem[_6163 + 64] = token1Address
                            mem[_6163 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6163 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_6163 + 132] = 0
                            mem[_6163 + 164] = 160
                            mem[_6163 + 260] = mem[_6163]
                            idx = 0
                            s = _6163 + 32
                            t = _6163 + 292
                            while idx < mem[_6163]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6163 + 196] = this.address
                            mem[_6163 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6163 + (32 * mem[_6163]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6725 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6741 = mem[_6725]
                            require mem[_6725] <= test266151307()
                            require _6725 + mem[_6725] + 31 < _6725 + return_data.size
                            _6757 = mem[_6725 + mem[_6725]]
                            if mem[_6725 + mem[_6725]] > test266151307():
                                revert with 0, 65
                            if _6725 + ceil32(return_data.size) + ceil32(32 * mem[_6725 + mem[_6725]]) + 1 > test266151307() or ceil32(32 * mem[_6725 + mem[_6725]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6725 + ceil32(return_data.size) + ceil32(32 * mem[_6725 + mem[_6725]]) + 1
                            mem[_6725 + ceil32(return_data.size)] = _6757
                            require (32 * _6757) + _6741 + 32 <= return_data.size
                            mem[_6725 + ceil32(return_data.size) + 32 len ceil32(32 * _6757)] = mem[_6725 + _6741 + 32 len ceil32(32 * _6757)]
                            if 1 >= _6757:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6033, mem[_6725 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3317 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3317] = return_data.size
                    mem[_3317 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3276
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3541 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3541]:
                            revert with 0, 50
                        mem[_3541 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3541]:
                            revert with 0, 50
                        mem[_3541 + 64] = token1Address
                        mem[_3541 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3541 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                        mem[_3541 + 132] = 0
                        mem[_3541 + 164] = 160
                        mem[_3541 + 260] = mem[_3541]
                        idx = 0
                        s = _3541 + 32
                        t = _3541 + 292
                        while idx < mem[_3541]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3541 + 196] = this.address
                        mem[_3541 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3541 + (32 * mem[_3541]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4966 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5014 = mem[_4966]
                        require mem[_4966] <= test266151307()
                        require _4966 + mem[_4966] + 31 < _4966 + return_data.size
                        _5062 = mem[_4966 + mem[_4966]]
                        if mem[_4966 + mem[_4966]] > test266151307():
                            revert with 0, 65
                        if _4966 + ceil32(return_data.size) + ceil32(32 * mem[_4966 + mem[_4966]]) + 1 > test266151307() or ceil32(32 * mem[_4966 + mem[_4966]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4966 + ceil32(return_data.size) + ceil32(32 * mem[_4966 + mem[_4966]]) + 1
                        mem[_4966 + ceil32(return_data.size)] = _5062
                        require (32 * _5062) + _5014 + 32 <= return_data.size
                        mem[_4966 + ceil32(return_data.size) + 32 len ceil32(32 * _5062)] = mem[_4966 + _5014 + 32 len ceil32(32 * _5062)]
                        if 1 >= _5062:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3262 - (_3262 * sub_b1a41085 / 10000)), mem[_4966 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3620 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3620]:
                                revert with 0, 50
                            mem[_3620 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3620]:
                                revert with 0, 50
                            mem[_3620 + 64] = token0Address
                            mem[_3620 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3620 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_3620 + 132] = 0
                            mem[_3620 + 164] = 160
                            mem[_3620 + 260] = mem[_3620]
                            idx = 0
                            s = _3620 + 32
                            t = _3620 + 292
                            while idx < mem[_3620]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3620 + 196] = this.address
                            mem[_3620 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3620 + (32 * mem[_3620]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4965 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5013 = mem[_4965]
                            require mem[_4965] <= test266151307()
                            require _4965 + mem[_4965] + 31 < _4965 + return_data.size
                            _5061 = mem[_4965 + mem[_4965]]
                            if mem[_4965 + mem[_4965]] > test266151307():
                                revert with 0, 65
                            if _4965 + ceil32(return_data.size) + ceil32(32 * mem[_4965 + mem[_4965]]) + 1 > test266151307() or ceil32(32 * mem[_4965 + mem[_4965]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4965 + ceil32(return_data.size) + ceil32(32 * mem[_4965 + mem[_4965]]) + 1
                            mem[_4965 + ceil32(return_data.size)] = _5061
                            require (32 * _5061) + _5013 + 32 <= return_data.size
                            mem[_4965 + ceil32(return_data.size) + 32 len ceil32(32 * _5061)] = mem[_4965 + _5013 + 32 len ceil32(32 * _5061)]
                            if 1 >= _5061:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4965 + ceil32(return_data.size) + 64], Mask(255, 1, _3262 - (_3262 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3618 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3618]:
                                revert with 0, 50
                            mem[_3618 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3618]:
                                revert with 0, 50
                            mem[_3618 + 64] = token0Address
                            mem[_3618 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3618 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_3618 + 132] = 0
                            mem[_3618 + 164] = 160
                            mem[_3618 + 260] = mem[_3618]
                            idx = 0
                            s = _3618 + 32
                            t = _3618 + 292
                            while idx < mem[_3618]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3618 + 196] = this.address
                            mem[_3618 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3618 + (32 * mem[_3618]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4964 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5012 = mem[_4964]
                            require mem[_4964] <= test266151307()
                            require _4964 + mem[_4964] + 31 < _4964 + return_data.size
                            _5060 = mem[_4964 + mem[_4964]]
                            if mem[_4964 + mem[_4964]] > test266151307():
                                revert with 0, 65
                            if _4964 + ceil32(return_data.size) + ceil32(32 * mem[_4964 + mem[_4964]]) + 1 > test266151307() or ceil32(32 * mem[_4964 + mem[_4964]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4964 + ceil32(return_data.size) + ceil32(32 * mem[_4964 + mem[_4964]]) + 1
                            mem[_4964 + ceil32(return_data.size)] = _5060
                            require (32 * _5060) + _5012 + 32 <= return_data.size
                            mem[_4964 + ceil32(return_data.size) + 32 len ceil32(32 * _5060)] = mem[_4964 + _5012 + 32 len ceil32(32 * _5060)]
                            if 1 >= _5060:
                                revert with 0, 50
                            _6036 = mem[_4964 + ceil32(return_data.size) + 64]
                            _6165 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6165]:
                                revert with 0, 50
                            mem[_6165 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6165]:
                                revert with 0, 50
                            mem[_6165 + 64] = token1Address
                            mem[_6165 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6165 + 100] = _3262 - (_3262 * sub_b1a41085 / 10000) / 2
                            mem[_6165 + 132] = 0
                            mem[_6165 + 164] = 160
                            mem[_6165 + 260] = mem[_6165]
                            idx = 0
                            s = _6165 + 32
                            t = _6165 + 292
                            while idx < mem[_6165]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6165 + 196] = this.address
                            mem[_6165 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6165 + (32 * mem[_6165]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6726 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6742 = mem[_6726]
                            require mem[_6726] <= test266151307()
                            require _6726 + mem[_6726] + 31 < _6726 + return_data.size
                            _6758 = mem[_6726 + mem[_6726]]
                            if mem[_6726 + mem[_6726]] > test266151307():
                                revert with 0, 65
                            if _6726 + ceil32(return_data.size) + ceil32(32 * mem[_6726 + mem[_6726]]) + 1 > test266151307() or ceil32(32 * mem[_6726 + mem[_6726]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6726 + ceil32(return_data.size) + ceil32(32 * mem[_6726 + mem[_6726]]) + 1
                            mem[_6726 + ceil32(return_data.size)] = _6758
                            require (32 * _6758) + _6742 + 32 <= return_data.size
                            mem[_6726 + ceil32(return_data.size) + 32 len ceil32(32 * _6758)] = mem[_6726 + _6742 + 32 len ceil32(32 * _6758)]
                            if 1 >= _6758:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6036, mem[_6726 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield((_3262 - (_3262 * sub_b1a41085 / 10000)));
        else:
            mem[132] = 0
            require ext_code.size(masterChefAddress)
            call masterChefAddress.withdraw(uint256 rg1, uint256 rg2) with:
                 gas gas_remaining wei
                args poolId, 0
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[100] = this.address
            require ext_code.size(rewardTokenAddress)
            staticcall rewardTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[ceil32(return_data.size) + 96] = 2
            mem[ceil32(return_data.size) + 128] = rewardTokenAddress
            mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[ceil32(return_data.size) + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 196] = ext_call.return_data[0]
            mem[ceil32(return_data.size) + 228] = 0
            mem[ceil32(return_data.size) + 260] = 160
            mem[ceil32(return_data.size) + 356] = 2
            idx = 0
            s = ceil32(return_data.size) + 128
            t = ceil32(return_data.size) + 388
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[ceil32(return_data.size) + 292] = this.address
            mem[ceil32(return_data.size) + 324] = block.timestamp
            require ext_code.size(routerAddress)
            call routerAddress.swapExactTokensForTokens(uint256 rg1, uint256 rg2, address[] rg3, address rg4, uint256 rg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _1669 = mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28]
            require mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
            require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 223 < ceil32(return_data.size) + return_data.size + 192
            _1673 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
                revert with 0, 65
            if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
            mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], ext_call.return_data[0 len 28] + 192]
            require (32 * _1673) + _1669 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _1673)] = mem[ceil32(return_data.size) + _1669 + 224 len ceil32(32 * _1673)]
            if 1 >= _1673:
                revert with 0, 50
            _3261 = mem[(2 * ceil32(return_data.size)) + 256]
            if mem[(2 * ceil32(return_data.size)) + 256] and sub_b1a41085 > -1 / mem[(2 * ceil32(return_data.size)) + 256]:
                revert with 0, 17
            mem[mem[64]] = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _3261 * sub_b1a41085 / 10000
            _3272 = mem[0]
            require ext_code.size(0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66)
            call ????????????????????????????????????????.0x2e1a7d4d with:
                 gas gas_remaining wei
                args (_3261 * sub_b1a41085 / 10000)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if _3261 < _3261 * sub_b1a41085 / 10000:
                revert with 0, 17
            call adminAddress with:
               value eth.balance(this.address) / 2 wei
                 gas gas_remaining wei
            if not return_data.size:
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3527 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3527]:
                            revert with 0, 50
                        mem[_3527 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3527]:
                            revert with 0, 50
                        mem[_3527 + 64] = token1Address
                        mem[_3527 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3527 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                        mem[_3527 + 132] = 0
                        mem[_3527 + 164] = 160
                        mem[_3527 + 260] = mem[_3527]
                        idx = 0
                        s = _3527 + 32
                        t = _3527 + 292
                        while idx < mem[_3527]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3527 + 196] = this.address
                        mem[_3527 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3527 + (32 * mem[_3527]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4945 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4993 = mem[_4945]
                        require mem[_4945] <= test266151307()
                        require _4945 + mem[_4945] + 31 < _4945 + return_data.size
                        _5041 = mem[_4945 + mem[_4945]]
                        if mem[_4945 + mem[_4945]] > test266151307():
                            revert with 0, 65
                        if _4945 + ceil32(return_data.size) + ceil32(32 * mem[_4945 + mem[_4945]]) + 1 > test266151307() or ceil32(32 * mem[_4945 + mem[_4945]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4945 + ceil32(return_data.size) + ceil32(32 * mem[_4945 + mem[_4945]]) + 1
                        mem[_4945 + ceil32(return_data.size)] = _5041
                        require (32 * _5041) + _4993 + 32 <= return_data.size
                        mem[_4945 + ceil32(return_data.size) + 32 len ceil32(32 * _5041)] = mem[_4945 + _4993 + 32 len ceil32(32 * _5041)]
                        if 1 >= _5041:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3261 - (_3261 * sub_b1a41085 / 10000)), mem[_4945 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3585 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3585]:
                                revert with 0, 50
                            mem[_3585 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3585]:
                                revert with 0, 50
                            mem[_3585 + 64] = token0Address
                            mem[_3585 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3585 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_3585 + 132] = 0
                            mem[_3585 + 164] = 160
                            mem[_3585 + 260] = mem[_3585]
                            idx = 0
                            s = _3585 + 32
                            t = _3585 + 292
                            while idx < mem[_3585]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3585 + 196] = this.address
                            mem[_3585 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3585 + (32 * mem[_3585]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4944 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4992 = mem[_4944]
                            require mem[_4944] <= test266151307()
                            require _4944 + mem[_4944] + 31 < _4944 + return_data.size
                            _5040 = mem[_4944 + mem[_4944]]
                            if mem[_4944 + mem[_4944]] > test266151307():
                                revert with 0, 65
                            if _4944 + ceil32(return_data.size) + ceil32(32 * mem[_4944 + mem[_4944]]) + 1 > test266151307() or ceil32(32 * mem[_4944 + mem[_4944]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4944 + ceil32(return_data.size) + ceil32(32 * mem[_4944 + mem[_4944]]) + 1
                            mem[_4944 + ceil32(return_data.size)] = _5040
                            require (32 * _5040) + _4992 + 32 <= return_data.size
                            mem[_4944 + ceil32(return_data.size) + 32 len ceil32(32 * _5040)] = mem[_4944 + _4992 + 32 len ceil32(32 * _5040)]
                            if 1 >= _5040:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4944 + ceil32(return_data.size) + 64], Mask(255, 1, _3261 - (_3261 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3583 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3583]:
                                revert with 0, 50
                            mem[_3583 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3583]:
                                revert with 0, 50
                            mem[_3583 + 64] = token0Address
                            mem[_3583 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3583 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_3583 + 132] = 0
                            mem[_3583 + 164] = 160
                            mem[_3583 + 260] = mem[_3583]
                            idx = 0
                            s = _3583 + 32
                            t = _3583 + 292
                            while idx < mem[_3583]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3583 + 196] = this.address
                            mem[_3583 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3583 + (32 * mem[_3583]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4943 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4991 = mem[_4943]
                            require mem[_4943] <= test266151307()
                            require _4943 + mem[_4943] + 31 < _4943 + return_data.size
                            _5039 = mem[_4943 + mem[_4943]]
                            if mem[_4943 + mem[_4943]] > test266151307():
                                revert with 0, 65
                            if _4943 + ceil32(return_data.size) + ceil32(32 * mem[_4943 + mem[_4943]]) + 1 > test266151307() or ceil32(32 * mem[_4943 + mem[_4943]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4943 + ceil32(return_data.size) + ceil32(32 * mem[_4943 + mem[_4943]]) + 1
                            mem[_4943 + ceil32(return_data.size)] = _5039
                            require (32 * _5039) + _4991 + 32 <= return_data.size
                            mem[_4943 + ceil32(return_data.size) + 32 len ceil32(32 * _5039)] = mem[_4943 + _4991 + 32 len ceil32(32 * _5039)]
                            if 1 >= _5039:
                                revert with 0, 50
                            _6015 = mem[_4943 + ceil32(return_data.size) + 64]
                            _6151 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6151]:
                                revert with 0, 50
                            mem[_6151 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6151]:
                                revert with 0, 50
                            mem[_6151 + 64] = token1Address
                            mem[_6151 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6151 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_6151 + 132] = 0
                            mem[_6151 + 164] = 160
                            mem[_6151 + 260] = mem[_6151]
                            idx = 0
                            s = _6151 + 32
                            t = _6151 + 292
                            while idx < mem[_6151]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6151 + 196] = this.address
                            mem[_6151 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6151 + (32 * mem[_6151]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6719 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6735 = mem[_6719]
                            require mem[_6719] <= test266151307()
                            require _6719 + mem[_6719] + 31 < _6719 + return_data.size
                            _6751 = mem[_6719 + mem[_6719]]
                            if mem[_6719 + mem[_6719]] > test266151307():
                                revert with 0, 65
                            if _6719 + ceil32(return_data.size) + ceil32(32 * mem[_6719 + mem[_6719]]) + 1 > test266151307() or ceil32(32 * mem[_6719 + mem[_6719]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6719 + ceil32(return_data.size) + ceil32(32 * mem[_6719 + mem[_6719]]) + 1
                            mem[_6719 + ceil32(return_data.size)] = _6751
                            require (32 * _6751) + _6735 + 32 <= return_data.size
                            mem[_6719 + ceil32(return_data.size) + 32 len ceil32(32 * _6751)] = mem[_6719 + _6735 + 32 len ceil32(32 * _6751)]
                            if 1 >= _6751:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6015, mem[_6719 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3311 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3311] = return_data.size
                    mem[_3311 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3272
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3529 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3529]:
                            revert with 0, 50
                        mem[_3529 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3529]:
                            revert with 0, 50
                        mem[_3529 + 64] = token1Address
                        mem[_3529 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3529 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                        mem[_3529 + 132] = 0
                        mem[_3529 + 164] = 160
                        mem[_3529 + 260] = mem[_3529]
                        idx = 0
                        s = _3529 + 32
                        t = _3529 + 292
                        while idx < mem[_3529]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3529 + 196] = this.address
                        mem[_3529 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3529 + (32 * mem[_3529]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4948 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4996 = mem[_4948]
                        require mem[_4948] <= test266151307()
                        require _4948 + mem[_4948] + 31 < _4948 + return_data.size
                        _5044 = mem[_4948 + mem[_4948]]
                        if mem[_4948 + mem[_4948]] > test266151307():
                            revert with 0, 65
                        if _4948 + ceil32(return_data.size) + ceil32(32 * mem[_4948 + mem[_4948]]) + 1 > test266151307() or ceil32(32 * mem[_4948 + mem[_4948]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4948 + ceil32(return_data.size) + ceil32(32 * mem[_4948 + mem[_4948]]) + 1
                        mem[_4948 + ceil32(return_data.size)] = _5044
                        require (32 * _5044) + _4996 + 32 <= return_data.size
                        mem[_4948 + ceil32(return_data.size) + 32 len ceil32(32 * _5044)] = mem[_4948 + _4996 + 32 len ceil32(32 * _5044)]
                        if 1 >= _5044:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3261 - (_3261 * sub_b1a41085 / 10000)), mem[_4948 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3590 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3590]:
                                revert with 0, 50
                            mem[_3590 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3590]:
                                revert with 0, 50
                            mem[_3590 + 64] = token0Address
                            mem[_3590 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3590 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_3590 + 132] = 0
                            mem[_3590 + 164] = 160
                            mem[_3590 + 260] = mem[_3590]
                            idx = 0
                            s = _3590 + 32
                            t = _3590 + 292
                            while idx < mem[_3590]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3590 + 196] = this.address
                            mem[_3590 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3590 + (32 * mem[_3590]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4947 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4995 = mem[_4947]
                            require mem[_4947] <= test266151307()
                            require _4947 + mem[_4947] + 31 < _4947 + return_data.size
                            _5043 = mem[_4947 + mem[_4947]]
                            if mem[_4947 + mem[_4947]] > test266151307():
                                revert with 0, 65
                            if _4947 + ceil32(return_data.size) + ceil32(32 * mem[_4947 + mem[_4947]]) + 1 > test266151307() or ceil32(32 * mem[_4947 + mem[_4947]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4947 + ceil32(return_data.size) + ceil32(32 * mem[_4947 + mem[_4947]]) + 1
                            mem[_4947 + ceil32(return_data.size)] = _5043
                            require (32 * _5043) + _4995 + 32 <= return_data.size
                            mem[_4947 + ceil32(return_data.size) + 32 len ceil32(32 * _5043)] = mem[_4947 + _4995 + 32 len ceil32(32 * _5043)]
                            if 1 >= _5043:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4947 + ceil32(return_data.size) + 64], Mask(255, 1, _3261 - (_3261 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3588 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3588]:
                                revert with 0, 50
                            mem[_3588 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3588]:
                                revert with 0, 50
                            mem[_3588 + 64] = token0Address
                            mem[_3588 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3588 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_3588 + 132] = 0
                            mem[_3588 + 164] = 160
                            mem[_3588 + 260] = mem[_3588]
                            idx = 0
                            s = _3588 + 32
                            t = _3588 + 292
                            while idx < mem[_3588]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3588 + 196] = this.address
                            mem[_3588 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3588 + (32 * mem[_3588]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4946 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4994 = mem[_4946]
                            require mem[_4946] <= test266151307()
                            require _4946 + mem[_4946] + 31 < _4946 + return_data.size
                            _5042 = mem[_4946 + mem[_4946]]
                            if mem[_4946 + mem[_4946]] > test266151307():
                                revert with 0, 65
                            if _4946 + ceil32(return_data.size) + ceil32(32 * mem[_4946 + mem[_4946]]) + 1 > test266151307() or ceil32(32 * mem[_4946 + mem[_4946]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4946 + ceil32(return_data.size) + ceil32(32 * mem[_4946 + mem[_4946]]) + 1
                            mem[_4946 + ceil32(return_data.size)] = _5042
                            require (32 * _5042) + _4994 + 32 <= return_data.size
                            mem[_4946 + ceil32(return_data.size) + 32 len ceil32(32 * _5042)] = mem[_4946 + _4994 + 32 len ceil32(32 * _5042)]
                            if 1 >= _5042:
                                revert with 0, 50
                            _6018 = mem[_4946 + ceil32(return_data.size) + 64]
                            _6153 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6153]:
                                revert with 0, 50
                            mem[_6153 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6153]:
                                revert with 0, 50
                            mem[_6153 + 64] = token1Address
                            mem[_6153 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6153 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_6153 + 132] = 0
                            mem[_6153 + 164] = 160
                            mem[_6153 + 260] = mem[_6153]
                            idx = 0
                            s = _6153 + 32
                            t = _6153 + 292
                            while idx < mem[_6153]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6153 + 196] = this.address
                            mem[_6153 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6153 + (32 * mem[_6153]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6720 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6736 = mem[_6720]
                            require mem[_6720] <= test266151307()
                            require _6720 + mem[_6720] + 31 < _6720 + return_data.size
                            _6752 = mem[_6720 + mem[_6720]]
                            if mem[_6720 + mem[_6720]] > test266151307():
                                revert with 0, 65
                            if _6720 + ceil32(return_data.size) + ceil32(32 * mem[_6720 + mem[_6720]]) + 1 > test266151307() or ceil32(32 * mem[_6720 + mem[_6720]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6720 + ceil32(return_data.size) + ceil32(32 * mem[_6720 + mem[_6720]]) + 1
                            mem[_6720 + ceil32(return_data.size)] = _6752
                            require (32 * _6752) + _6736 + 32 <= return_data.size
                            mem[_6720 + ceil32(return_data.size) + 32 len ceil32(32 * _6752)] = mem[_6720 + _6736 + 32 len ceil32(32 * _6752)]
                            if 1 >= _6752:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6018, mem[_6720 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            else:
                _3285 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size) + 1
                mem[_3285] = return_data.size
                mem[_3285 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    revert with 0, 'Fee transfer failed'
                call communityWalletAddress with:
                   value eth.balance(this.address) / 2 wei
                     gas gas_remaining wei
                if not return_data.size:
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3272
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3531 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3531]:
                            revert with 0, 50
                        mem[_3531 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3531]:
                            revert with 0, 50
                        mem[_3531 + 64] = token1Address
                        mem[_3531 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3531 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                        mem[_3531 + 132] = 0
                        mem[_3531 + 164] = 160
                        mem[_3531 + 260] = mem[_3531]
                        idx = 0
                        s = _3531 + 32
                        t = _3531 + 292
                        while idx < mem[_3531]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3531 + 196] = this.address
                        mem[_3531 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3531 + (32 * mem[_3531]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4951 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _4999 = mem[_4951]
                        require mem[_4951] <= test266151307()
                        require _4951 + mem[_4951] + 31 < _4951 + return_data.size
                        _5047 = mem[_4951 + mem[_4951]]
                        if mem[_4951 + mem[_4951]] > test266151307():
                            revert with 0, 65
                        if _4951 + ceil32(return_data.size) + ceil32(32 * mem[_4951 + mem[_4951]]) + 1 > test266151307() or ceil32(32 * mem[_4951 + mem[_4951]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4951 + ceil32(return_data.size) + ceil32(32 * mem[_4951 + mem[_4951]]) + 1
                        mem[_4951 + ceil32(return_data.size)] = _5047
                        require (32 * _5047) + _4999 + 32 <= return_data.size
                        mem[_4951 + ceil32(return_data.size) + 32 len ceil32(32 * _5047)] = mem[_4951 + _4999 + 32 len ceil32(32 * _5047)]
                        if 1 >= _5047:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3261 - (_3261 * sub_b1a41085 / 10000)), mem[_4951 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3595 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3595]:
                                revert with 0, 50
                            mem[_3595 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3595]:
                                revert with 0, 50
                            mem[_3595 + 64] = token0Address
                            mem[_3595 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3595 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_3595 + 132] = 0
                            mem[_3595 + 164] = 160
                            mem[_3595 + 260] = mem[_3595]
                            idx = 0
                            s = _3595 + 32
                            t = _3595 + 292
                            while idx < mem[_3595]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3595 + 196] = this.address
                            mem[_3595 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3595 + (32 * mem[_3595]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4950 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4998 = mem[_4950]
                            require mem[_4950] <= test266151307()
                            require _4950 + mem[_4950] + 31 < _4950 + return_data.size
                            _5046 = mem[_4950 + mem[_4950]]
                            if mem[_4950 + mem[_4950]] > test266151307():
                                revert with 0, 65
                            if _4950 + ceil32(return_data.size) + ceil32(32 * mem[_4950 + mem[_4950]]) + 1 > test266151307() or ceil32(32 * mem[_4950 + mem[_4950]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4950 + ceil32(return_data.size) + ceil32(32 * mem[_4950 + mem[_4950]]) + 1
                            mem[_4950 + ceil32(return_data.size)] = _5046
                            require (32 * _5046) + _4998 + 32 <= return_data.size
                            mem[_4950 + ceil32(return_data.size) + 32 len ceil32(32 * _5046)] = mem[_4950 + _4998 + 32 len ceil32(32 * _5046)]
                            if 1 >= _5046:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4950 + ceil32(return_data.size) + 64], Mask(255, 1, _3261 - (_3261 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3593 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3593]:
                                revert with 0, 50
                            mem[_3593 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3593]:
                                revert with 0, 50
                            mem[_3593 + 64] = token0Address
                            mem[_3593 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3593 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_3593 + 132] = 0
                            mem[_3593 + 164] = 160
                            mem[_3593 + 260] = mem[_3593]
                            idx = 0
                            s = _3593 + 32
                            t = _3593 + 292
                            while idx < mem[_3593]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3593 + 196] = this.address
                            mem[_3593 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3593 + (32 * mem[_3593]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4949 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _4997 = mem[_4949]
                            require mem[_4949] <= test266151307()
                            require _4949 + mem[_4949] + 31 < _4949 + return_data.size
                            _5045 = mem[_4949 + mem[_4949]]
                            if mem[_4949 + mem[_4949]] > test266151307():
                                revert with 0, 65
                            if _4949 + ceil32(return_data.size) + ceil32(32 * mem[_4949 + mem[_4949]]) + 1 > test266151307() or ceil32(32 * mem[_4949 + mem[_4949]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4949 + ceil32(return_data.size) + ceil32(32 * mem[_4949 + mem[_4949]]) + 1
                            mem[_4949 + ceil32(return_data.size)] = _5045
                            require (32 * _5045) + _4997 + 32 <= return_data.size
                            mem[_4949 + ceil32(return_data.size) + 32 len ceil32(32 * _5045)] = mem[_4949 + _4997 + 32 len ceil32(32 * _5045)]
                            if 1 >= _5045:
                                revert with 0, 50
                            _6021 = mem[_4949 + ceil32(return_data.size) + 64]
                            _6155 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6155]:
                                revert with 0, 50
                            mem[_6155 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6155]:
                                revert with 0, 50
                            mem[_6155 + 64] = token1Address
                            mem[_6155 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6155 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_6155 + 132] = 0
                            mem[_6155 + 164] = 160
                            mem[_6155 + 260] = mem[_6155]
                            idx = 0
                            s = _6155 + 32
                            t = _6155 + 292
                            while idx < mem[_6155]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6155 + 196] = this.address
                            mem[_6155 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6155 + (32 * mem[_6155]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6721 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6737 = mem[_6721]
                            require mem[_6721] <= test266151307()
                            require _6721 + mem[_6721] + 31 < _6721 + return_data.size
                            _6753 = mem[_6721 + mem[_6721]]
                            if mem[_6721 + mem[_6721]] > test266151307():
                                revert with 0, 65
                            if _6721 + ceil32(return_data.size) + ceil32(32 * mem[_6721 + mem[_6721]]) + 1 > test266151307() or ceil32(32 * mem[_6721 + mem[_6721]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6721 + ceil32(return_data.size) + ceil32(32 * mem[_6721 + mem[_6721]]) + 1
                            mem[_6721 + ceil32(return_data.size)] = _6753
                            require (32 * _6753) + _6737 + 32 <= return_data.size
                            mem[_6721 + ceil32(return_data.size) + 32 len ceil32(32 * _6753)] = mem[_6721 + _6737 + 32 len ceil32(32 * _6753)]
                            if 1 >= _6753:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6021, mem[_6721 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                else:
                    _3313 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                    mem[_3313] = return_data.size
                    mem[_3313 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    if not ext_call.success:
                        revert with 0, 'Fee transfer failed'
                    mem[0] = _3272
                    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
                        _3533 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_3533]:
                            revert with 0, 50
                        mem[_3533 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        if 1 >= mem[_3533]:
                            revert with 0, 50
                        mem[_3533 + 64] = token1Address
                        mem[_3533 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                        mem[_3533 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                        mem[_3533 + 132] = 0
                        mem[_3533 + 164] = 160
                        mem[_3533 + 260] = mem[_3533]
                        idx = 0
                        s = _3533 + 32
                        t = _3533 + 292
                        while idx < mem[_3533]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_3533 + 196] = this.address
                        mem[_3533 + 228] = block.timestamp
                        require ext_code.size(routerAddress)
                        call routerAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _3533 + (32 * mem[_3533]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _4954 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5002 = mem[_4954]
                        require mem[_4954] <= test266151307()
                        require _4954 + mem[_4954] + 31 < _4954 + return_data.size
                        _5050 = mem[_4954 + mem[_4954]]
                        if mem[_4954 + mem[_4954]] > test266151307():
                            revert with 0, 65
                        if _4954 + ceil32(return_data.size) + ceil32(32 * mem[_4954 + mem[_4954]]) + 1 > test266151307() or ceil32(32 * mem[_4954 + mem[_4954]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _4954 + ceil32(return_data.size) + ceil32(32 * mem[_4954 + mem[_4954]]) + 1
                        mem[_4954 + ceil32(return_data.size)] = _5050
                        require (32 * _5050) + _5002 + 32 <= return_data.size
                        mem[_4954 + ceil32(return_data.size) + 32 len ceil32(32 * _5050)] = mem[_4954 + _5002 + 32 len ceil32(32 * _5050)]
                        if 1 >= _5050:
                            revert with 0, 50
                        require ext_code.size(routerAddress)
                        call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                             gas gas_remaining wei
                            args token0Address, token1Address, Mask(255, 1, _3261 - (_3261 * sub_b1a41085 / 10000)), mem[_4954 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
                    else:
                        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
                            _3600 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3600]:
                                revert with 0, 50
                            mem[_3600 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3600]:
                                revert with 0, 50
                            mem[_3600 + 64] = token0Address
                            mem[_3600 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3600 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_3600 + 132] = 0
                            mem[_3600 + 164] = 160
                            mem[_3600 + 260] = mem[_3600]
                            idx = 0
                            s = _3600 + 32
                            t = _3600 + 292
                            while idx < mem[_3600]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3600 + 196] = this.address
                            mem[_3600 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3600 + (32 * mem[_3600]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4953 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5001 = mem[_4953]
                            require mem[_4953] <= test266151307()
                            require _4953 + mem[_4953] + 31 < _4953 + return_data.size
                            _5049 = mem[_4953 + mem[_4953]]
                            if mem[_4953 + mem[_4953]] > test266151307():
                                revert with 0, 65
                            if _4953 + ceil32(return_data.size) + ceil32(32 * mem[_4953 + mem[_4953]]) + 1 > test266151307() or ceil32(32 * mem[_4953 + mem[_4953]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4953 + ceil32(return_data.size) + ceil32(32 * mem[_4953 + mem[_4953]]) + 1
                            mem[_4953 + ceil32(return_data.size)] = _5049
                            require (32 * _5049) + _5001 + 32 <= return_data.size
                            mem[_4953 + ceil32(return_data.size) + 32 len ceil32(32 * _5049)] = mem[_4953 + _5001 + 32 len ceil32(32 * _5049)]
                            if 1 >= _5049:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, mem[_4953 + ceil32(return_data.size) + 64], Mask(255, 1, _3261 - (_3261 * sub_b1a41085 / 10000)), 0, 0, this.address, block.timestamp
                        else:
                            _3598 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_3598]:
                                revert with 0, 50
                            mem[_3598 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_3598]:
                                revert with 0, 50
                            mem[_3598 + 64] = token0Address
                            mem[_3598 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_3598 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_3598 + 132] = 0
                            mem[_3598 + 164] = 160
                            mem[_3598 + 260] = mem[_3598]
                            idx = 0
                            s = _3598 + 32
                            t = _3598 + 292
                            while idx < mem[_3598]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_3598 + 196] = this.address
                            mem[_3598 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _3598 + (32 * mem[_3598]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _4952 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5000 = mem[_4952]
                            require mem[_4952] <= test266151307()
                            require _4952 + mem[_4952] + 31 < _4952 + return_data.size
                            _5048 = mem[_4952 + mem[_4952]]
                            if mem[_4952 + mem[_4952]] > test266151307():
                                revert with 0, 65
                            if _4952 + ceil32(return_data.size) + ceil32(32 * mem[_4952 + mem[_4952]]) + 1 > test266151307() or ceil32(32 * mem[_4952 + mem[_4952]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _4952 + ceil32(return_data.size) + ceil32(32 * mem[_4952 + mem[_4952]]) + 1
                            mem[_4952 + ceil32(return_data.size)] = _5048
                            require (32 * _5048) + _5000 + 32 <= return_data.size
                            mem[_4952 + ceil32(return_data.size) + 32 len ceil32(32 * _5048)] = mem[_4952 + _5000 + 32 len ceil32(32 * _5048)]
                            if 1 >= _5048:
                                revert with 0, 50
                            _6024 = mem[_4952 + ceil32(return_data.size) + 64]
                            _6157 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_6157]:
                                revert with 0, 50
                            mem[_6157 + 32] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            if 1 >= mem[_6157]:
                                revert with 0, 50
                            mem[_6157 + 64] = token1Address
                            mem[_6157 + 96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                            mem[_6157 + 100] = _3261 - (_3261 * sub_b1a41085 / 10000) / 2
                            mem[_6157 + 132] = 0
                            mem[_6157 + 164] = 160
                            mem[_6157 + 260] = mem[_6157]
                            idx = 0
                            s = _6157 + 32
                            t = _6157 + 292
                            while idx < mem[_6157]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            mem[_6157 + 196] = this.address
                            mem[_6157 + 228] = block.timestamp
                            require ext_code.size(routerAddress)
                            call routerAddress.mem[mem[64] len 4] with:
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _6157 + (32 * mem[_6157]) + -mem[64] + 288]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6722 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6738 = mem[_6722]
                            require mem[_6722] <= test266151307()
                            require _6722 + mem[_6722] + 31 < _6722 + return_data.size
                            _6754 = mem[_6722 + mem[_6722]]
                            if mem[_6722 + mem[_6722]] > test266151307():
                                revert with 0, 65
                            if _6722 + ceil32(return_data.size) + ceil32(32 * mem[_6722 + mem[_6722]]) + 1 > test266151307() or ceil32(32 * mem[_6722 + mem[_6722]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6722 + ceil32(return_data.size) + ceil32(32 * mem[_6722 + mem[_6722]]) + 1
                            mem[_6722 + ceil32(return_data.size)] = _6754
                            require (32 * _6754) + _6738 + 32 <= return_data.size
                            mem[_6722 + ceil32(return_data.size) + 32 len ceil32(32 * _6754)] = mem[_6722 + _6738 + 32 len ceil32(32 * _6754)]
                            if 1 >= _6754:
                                revert with 0, 50
                            require ext_code.size(routerAddress)
                            call routerAddress.addLiquidity(address rg1, address rg2, uint256 rg3, uint256 rg4, uint256 rg5, uint256 rg6, address rg7, uint256 rg8) with:
                                 gas gas_remaining wei
                                args token0Address, token1Address, _6024, mem[_6722 + ceil32(return_data.size) + 64], 0, 0, this.address, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            emit Yield((_3261 - (_3261 * sub_b1a41085 / 10000)));
}

function sub_cd5b5616(?) {
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
        if not stor259:
            mem[ceil32(return_data.size) + 96] = 2
            mem[ceil32(return_data.size) + 128] = token1Address
            mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 196] = 1
            mem[ceil32(return_data.size) + 228] = 64
            mem[ceil32(return_data.size) + 260] = 2
            idx = 0
            s = ceil32(return_data.size) + 128
            t = ceil32(return_data.size) + 292
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(routerAddress)
            staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                    gas gas_remaining wei
                   args 1, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _4045 = mem[ceil32(return_data.size) + 192 len 4], 0
            require mem[ceil32(return_data.size) + 192 len 4], 0 <= test266151307()
            require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 223 < ceil32(return_data.size) + return_data.size + 192
            _4054 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
            if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192] > test266151307():
                revert with 0, 65
            if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193
            mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
            require (32 * _4054) + _4045 + 32 <= return_data.size
            mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4054)] = mem[ceil32(return_data.size) + _4045 + 224 len ceil32(32 * _4054)]
            if 1 >= _4054:
                revert with 0, 50
            _7984 = mem[(2 * ceil32(return_data.size)) + 256]
            if not stor259:
                if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256]):
                    revert with 0, 17
                require ext_code.size(lpTokenAddress)
                staticcall lpTokenAddress.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8025 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8045 = mem[_8025]
                if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7984) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not mem[_8025]:
                    revert with 0, 18
                if not sub_abddf82e:
                    mem[mem[64] + 36] = this.address
                    require ext_code.size(masterChefAddress)
                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                            gas gas_remaining wei
                           args poolId, this.address
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8231 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8287 = mem[_8231]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8421 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8421] > !_8287:
                        revert with 0, 17
                    if mem[_8421] + _8287 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045 > -1 / mem[_8421] + _8287:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8421] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045) + (_8287 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045) / 10^18
                else:
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stakingRewardAddress)
                    staticcall stakingRewardAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8232 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8289 = mem[_8232]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8422 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8422] > !_8289:
                        revert with 0, 17
                    if mem[_8422] + _8289 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045 > -1 / mem[_8422] + _8289:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8422] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045) + (_8289 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984) / _8045) / 10^18
            else:
                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not 10^stor259:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor259):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8071 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8107 = mem[_8071]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8071]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8385 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8464 = mem[_8385]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8614 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8614] > !_8464:
                            revert with 0, 17
                        if mem[_8614] + _8464 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107 > -1 / mem[_8614] + _8464:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8614] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107) + (_8464 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8386 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8466 = mem[_8386]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8615 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8615] > !_8466:
                            revert with 0, 17
                        if mem[_8615] + _8466 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107 > -1 / mem[_8615] + _8466:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8615] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107) + (_8466 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / 10^stor259) / _8107) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor259
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not s * t:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12052 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12079 = mem[_12052]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12052]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12258 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12328 = mem[_12258]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12434 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12434] > !_12328:
                            revert with 0, 17
                        if mem[_12434] + _12328 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12079 > -1 / mem[_12434] + _12328:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12434] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12079) + (_12328 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12079) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12259 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12330 = mem[_12259]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12435 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12435] > !_12330:
                            revert with 0, 17
                        if mem[_12435] + _12330 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12079 > -1 / mem[_12435] + _12330:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12435] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12079) + (_12330 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7984 / s * t) / _12079) / 10^18
        else:
            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token1Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = 10^stor259
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                s = ceil32(return_data.size) + 128
                t = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                        gas gas_remaining wei
                       args 10^stor259, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4044 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32
                require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                _4053 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                require (32 * _4053) + _4044 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4053)] = mem[ceil32(return_data.size) + _4044 + 224 len ceil32(32 * _4053)]
                if 1 >= _4053:
                    revert with 0, 50
                _7983 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8024 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8044 = mem[_8024]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7983) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8024]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8229 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8284 = mem[_8229]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8419 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8419] > !_8284:
                            revert with 0, 17
                        if mem[_8419] + _8284 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044 > -1 / mem[_8419] + _8284:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8419] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044) + (_8284 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8230 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8286 = mem[_8230]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8420 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8420] > !_8286:
                            revert with 0, 17
                        if mem[_8420] + _8286 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044 > -1 / mem[_8420] + _8286:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8420] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044) + (_8286 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983) / _8044) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8070 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8104 = mem[_8070]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8070]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8383 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8457 = mem[_8383]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8609 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8609] > !_8457:
                                revert with 0, 17
                            if mem[_8609] + _8457 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104 > -1 / mem[_8609] + _8457:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8609] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104) + (_8457 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8384 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8459 = mem[_8384]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8610 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8610] > !_8459:
                                revert with 0, 17
                            if mem[_8610] + _8459 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104 > -1 / mem[_8610] + _8459:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8610] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104) + (_8459 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / 10^stor259) / _8104) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12051 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12078 = mem[_12051]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12051]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12256 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12325 = mem[_12256]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12432 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12432] > !_12325:
                                revert with 0, 17
                            if mem[_12432] + _12325 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12078 > -1 / mem[_12432] + _12325:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12432] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12078) + (_12325 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12078) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12257 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12327 = mem[_12257]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12433 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12433] > !_12327:
                                revert with 0, 17
                            if mem[_12433] + _12327 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12078 > -1 / mem[_12433] + _12327:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12433] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12078) + (_12327 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7983 / s * t) / _12078) / 10^18
            else:
                s = 10
                t = 1
                idx = stor259
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token1Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = s * t
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                u = ceil32(return_data.size) + 128
                v = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[v] = mem[u + 12 len 20]
                    idx = idx + 1
                    u = u + 32
                    v = v + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                        gas gas_remaining wei
                       args s * t, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _7990 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32
                require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                _7993 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                require (32 * _7993) + _7990 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _7993)] = mem[ceil32(return_data.size) + _7990 + 224 len ceil32(32 * _7993)]
                if 1 >= _7993:
                    revert with 0, 50
                _11890 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12094 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12120 = mem[_12094]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11890) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12094]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12373 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12429 = mem[_12373]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12546 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12546] > !_12429:
                            revert with 0, 17
                        if mem[_12546] + _12429 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12120 > -1 / mem[_12546] + _12429:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12546] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12120) + (_12429 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12120) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12374 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12431 = mem[_12374]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12547 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12547] > !_12431:
                            revert with 0, 17
                        if mem[_12547] + _12431 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12120 > -1 / mem[_12547] + _12431:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12547] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12120) + (_12431 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890) / _12120) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12159 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12203 = mem[_12159]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12159]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12528 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12589 = mem[_12528]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12683 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12683] > !_12589:
                                revert with 0, 17
                            if mem[_12683] + _12589 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12203 > -1 / mem[_12683] + _12589:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12683] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12203) + (_12589 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12203) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12529 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12591 = mem[_12529]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12684 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12684] > !_12591:
                                revert with 0, 17
                            if mem[_12684] + _12591 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12203 > -1 / mem[_12684] + _12591:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12684] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12203) + (_12591 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / 10^stor259) / _12203) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15732 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _15751 = mem[_15732]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_15732]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15936 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _15985 = mem[_15936]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16087 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16087] > !_15985:
                                revert with 0, 17
                            if mem[_16087] + _15985 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15751 > -1 / mem[_16087] + _15985:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16087] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15751) + (_15985 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15751) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15937 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15987 = mem[_15937]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16088 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16088] > !_15987:
                                revert with 0, 17
                            if mem[_16088] + _15987 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15751 > -1 / mem[_16088] + _15987:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16088] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15751) + (_15987 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11890 / s * t) / _15751) / 10^18
    else:
        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
            if not stor258:
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token0Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = 1
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                s = ceil32(return_data.size) + 128
                t = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4042 = mem[ceil32(return_data.size) + 192 len 4], 0
                require mem[ceil32(return_data.size) + 192 len 4], 0 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 223 < ceil32(return_data.size) + return_data.size + 192
                _4051 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                require (32 * _4051) + _4042 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4051)] = mem[ceil32(return_data.size) + _4042 + 224 len ceil32(32 * _4051)]
                if 1 >= _4051:
                    revert with 0, 50
                _7981 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8023 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8043 = mem[_8023]
                    if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7981) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8023]:
                        revert with 0, 18
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8227 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8279 = mem[_8227]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8414 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8414] > !_8279:
                            revert with 0, 17
                        if mem[_8414] + _8279 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043 > -1 / mem[_8414] + _8279:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8414] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043) + (_8279 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8228 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8281 = mem[_8228]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8415 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8415] > !_8281:
                            revert with 0, 17
                        if mem[_8415] + _8281 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043 > -1 / mem[_8415] + _8281:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8415] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043) + (_8281 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) / _8043) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor258):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8069 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8101 = mem[_8069]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8069]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8381 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8450 = mem[_8381]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8600 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8600] > !_8450:
                                revert with 0, 17
                            if mem[_8600] + _8450 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101 > -1 / mem[_8600] + _8450:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8600] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101) + (_8450 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8382 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8452 = mem[_8382]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8601 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8601] > !_8452:
                                revert with 0, 17
                            if mem[_8601] + _8452 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101 > -1 / mem[_8601] + _8452:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8601] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101) + (_8452 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) / _8101) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12050 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12075 = mem[_12050]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12050]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12254 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12318 = mem[_12254]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12427 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12427] > !_12318:
                                revert with 0, 17
                            if mem[_12427] + _12318 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12075 > -1 / mem[_12427] + _12318:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12427] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12075) + (_12318 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12075) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12255 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12320 = mem[_12255]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12428 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12428] > !_12320:
                                revert with 0, 17
                            if mem[_12428] + _12320 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12075 > -1 / mem[_12428] + _12320:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12428] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12075) + (_12320 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) / _12075) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = 10^stor258
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    s = ceil32(return_data.size) + 128
                    t = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4041 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _4050 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require (32 * _4050) + _4041 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4050)] = mem[ceil32(return_data.size) + _4041 + 224 len ceil32(32 * _4050)]
                    if 1 >= _4050:
                        revert with 0, 50
                    _7980 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8022 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8042 = mem[_8022]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7980) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8022]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8225 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8276 = mem[_8225]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8412 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8412] > !_8276:
                                revert with 0, 17
                            if mem[_8412] + _8276 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042 > -1 / mem[_8412] + _8276:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8412] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042) + (_8276 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8226 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8278 = mem[_8226]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8413 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8413] > !_8278:
                                revert with 0, 17
                            if mem[_8413] + _8278 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042 > -1 / mem[_8413] + _8278:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8413] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042) + (_8278 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980) / _8042) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8068 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8098 = mem[_8068]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_8068]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8379 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _8443 = mem[_8379]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8595 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8595] > !_8443:
                                    revert with 0, 17
                                if mem[_8595] + _8443 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098 > -1 / mem[_8595] + _8443:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8595] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098) + (_8443 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8380 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _8445 = mem[_8380]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8596 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8596] > !_8445:
                                    revert with 0, 17
                                if mem[_8596] + _8445 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098 > -1 / mem[_8596] + _8445:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8596] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098) + (_8445 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / 10^stor258) / _8098) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12049 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12074 = mem[_12049]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12049]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12252 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12315 = mem[_12252]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12425 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12425] > !_12315:
                                    revert with 0, 17
                                if mem[_12425] + _12315 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12074 > -1 / mem[_12425] + _12315:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12425] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12074) + (_12315 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12074) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12253 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12317 = mem[_12253]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12426 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12426] > !_12317:
                                    revert with 0, 17
                                if mem[_12426] + _12317 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12074 > -1 / mem[_12426] + _12317:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12426] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12074) + (_12317 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7980 / s * t) / _12074) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = s * t
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    u = ceil32(return_data.size) + 128
                    v = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _7989 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _7992 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require (32 * _7992) + _7989 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _7992)] = mem[ceil32(return_data.size) + _7989 + 224 len ceil32(32 * _7992)]
                    if 1 >= _7992:
                        revert with 0, 50
                    _11889 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12093 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12119 = mem[_12093]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11889) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12093]:
                            revert with 0, 18
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12363 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12422 = mem[_12363]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12544 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12544] > !_12422:
                                revert with 0, 17
                            if mem[_12544] + _12422 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12119 > -1 / mem[_12544] + _12422:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12544] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12119) + (_12422 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12119) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12364 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12424 = mem[_12364]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12545 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12545] > !_12424:
                                revert with 0, 17
                            if mem[_12545] + _12424 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12119 > -1 / mem[_12545] + _12424:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12545] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12119) + (_12424 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889) / _12119) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12158 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12200 = mem[_12158]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12158]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12526 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12582 = mem[_12526]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12678 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12678] > !_12582:
                                    revert with 0, 17
                                if mem[_12678] + _12582 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12200 > -1 / mem[_12678] + _12582:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12678] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12200) + (_12582 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12200) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12527 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12584 = mem[_12527]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12679 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12679] > !_12584:
                                    revert with 0, 17
                                if mem[_12679] + _12584 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12200 > -1 / mem[_12679] + _12584:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12679] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12200) + (_12584 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / 10^stor258) / _12200) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(2 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15731 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15750 = mem[_15731]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_15731]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15934 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _15982 = mem[_15934]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16085 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16085] > !_15982:
                                    revert with 0, 17
                                if mem[_16085] + _15982 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15750 > -1 / mem[_16085] + _15982:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16085] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15750) + (_15982 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15750) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15935 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15984 = mem[_15935]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16086 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16086] > !_15984:
                                    revert with 0, 17
                                if mem[_16086] + _15984 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15750 > -1 / mem[_16086] + _15984:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16086] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15750) + (_15984 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11889 / s * t) / _15750) / 10^18
        else:
            if not stor258:
                mem[ceil32(return_data.size) + 96] = 2
                mem[ceil32(return_data.size) + 128] = token0Address
                mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[ceil32(return_data.size) + 196] = 1
                mem[ceil32(return_data.size) + 228] = 64
                mem[ceil32(return_data.size) + 260] = 2
                idx = 0
                s = ceil32(return_data.size) + 128
                t = ceil32(return_data.size) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (2 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4039 = mem[ceil32(return_data.size) + 192 len 4], 0
                require mem[ceil32(return_data.size) + 192 len 4], 0 <= test266151307()
                require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 223 < ceil32(return_data.size) + return_data.size + 192
                _4048 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]) + 193
                mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], 0 + 192]
                require (32 * _4048) + _4039 + 32 <= return_data.size
                mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4048)] = mem[ceil32(return_data.size) + _4039 + 224 len ceil32(32 * _4048)]
                if 1 >= _4048:
                    revert with 0, 50
                _7978 = mem[(2 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                        if not stor259:
                            _8040 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8040]:
                                revert with 0, 50
                            mem[_8040 + 32] = token1Address
                            if 1 >= mem[_8040]:
                                revert with 0, 50
                            mem[_8040 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_8040 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8040 + 100] = 1
                            mem[_8040 + 132] = 64
                            mem[_8040 + 164] = mem[_8040]
                            idx = 0
                            s = _8040 + 32
                            t = _8040 + 196
                            while idx < mem[_8040]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8040 + (32 * mem[_8040]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11909 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11933 = mem[_11909]
                            require mem[_11909] <= test266151307()
                            require _11909 + mem[_11909] + 31 < _11909 + return_data.size
                            _11949 = mem[_11909 + mem[_11909]]
                            if mem[_11909 + mem[_11909]] > test266151307():
                                revert with 0, 65
                            if _11909 + ceil32(return_data.size) + ceil32(32 * mem[_11909 + mem[_11909]]) + 1 > test266151307() or ceil32(32 * mem[_11909 + mem[_11909]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _11909 + ceil32(return_data.size) + ceil32(32 * mem[_11909 + mem[_11909]]) + 1
                            mem[_11909 + ceil32(return_data.size)] = _11949
                            require (32 * _11949) + _11933 + 32 <= return_data.size
                            mem[_11909 + ceil32(return_data.size) + 32 len ceil32(32 * _11949)] = mem[_11909 + _11933 + 32 len ceil32(32 * _11949)]
                            if 1 >= _11949:
                                revert with 0, 50
                            _15515 = mem[_11909 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11909 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11909 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15799 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15820 = mem[_15799]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15515) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_15799]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16064 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _16138 = mem[_16064]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16300 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16300] > !_16138:
                                        revert with 0, 17
                                    if mem[_16300] + _16138 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15820 > -1 / mem[_16300] + _16138:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16300] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15820) + (_16138 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15820) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16065 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16140 = mem[_16065]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16301 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16301] > !_16140:
                                        revert with 0, 17
                                    if mem[_16301] + _16140 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15820 > -1 / mem[_16301] + _16140:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16301] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15820) + (_16140 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515) / _15820) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11909 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11909 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15871 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15910 = mem[_15871]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15871]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16248 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16363 = mem[_16248]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16567 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16567] > !_16363:
                                            revert with 0, 17
                                        if mem[_16567] + _16363 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15910 > -1 / mem[_16567] + _16363:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16567] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15910) + (_16363 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15910) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16249 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16365 = mem[_16249]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16568 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16568] > !_16365:
                                            revert with 0, 17
                                        if mem[_16568] + _16365 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15910 > -1 / mem[_16568] + _16365:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16568] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15910) + (_16365 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / 10^stor259) / _15910) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11909 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11909 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18871 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18885 = mem[_18871]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18871]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19091 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19146 = mem[_19091]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19289 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19289] > !_19146:
                                            revert with 0, 17
                                        if mem[_19289] + _19146 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18885 > -1 / mem[_19289] + _19146:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19289] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18885) + (_19146 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18885) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19092 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19148 = mem[_19092]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19290 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19290] > !_19148:
                                            revert with 0, 17
                                        if mem[_19290] + _19148 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18885 > -1 / mem[_19290] + _19148:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19290] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18885) + (_19148 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15515 / s * t) / _18885) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                _8092 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8092]:
                                    revert with 0, 50
                                mem[_8092 + 32] = token1Address
                                if 1 >= mem[_8092]:
                                    revert with 0, 50
                                mem[_8092 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8092 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8092 + 100] = 10^stor259
                                mem[_8092 + 132] = 64
                                mem[_8092 + 164] = mem[_8092]
                                idx = 0
                                s = _8092 + 32
                                t = _8092 + 196
                                while idx < mem[_8092]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8092 + (32 * mem[_8092]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11908 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11932 = mem[_11908]
                                require mem[_11908] <= test266151307()
                                require _11908 + mem[_11908] + 31 < _11908 + return_data.size
                                _11948 = mem[_11908 + mem[_11908]]
                                if mem[_11908 + mem[_11908]] > test266151307():
                                    revert with 0, 65
                                if _11908 + ceil32(return_data.size) + ceil32(32 * mem[_11908 + mem[_11908]]) + 1 > test266151307() or ceil32(32 * mem[_11908 + mem[_11908]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _11908 + ceil32(return_data.size) + ceil32(32 * mem[_11908 + mem[_11908]]) + 1
                                mem[_11908 + ceil32(return_data.size)] = _11948
                                require (32 * _11948) + _11932 + 32 <= return_data.size
                                mem[_11908 + ceil32(return_data.size) + 32 len ceil32(32 * _11948)] = mem[_11908 + _11932 + 32 len ceil32(32 * _11948)]
                                if 1 >= _11948:
                                    revert with 0, 50
                                _15514 = mem[_11908 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11908 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11908 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15798 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15819 = mem[_15798]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15514) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15798]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16062 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16135 = mem[_16062]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16298 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16298] > !_16135:
                                            revert with 0, 17
                                        if mem[_16298] + _16135 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15819 > -1 / mem[_16298] + _16135:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16298] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15819) + (_16135 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15819) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16063 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16137 = mem[_16063]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16299 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16299] > !_16137:
                                            revert with 0, 17
                                        if mem[_16299] + _16137 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15819 > -1 / mem[_16299] + _16137:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16299] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15819) + (_16137 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514) / _15819) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11908 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11908 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15870 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15907 = mem[_15870]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15870]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16246 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16356 = mem[_16246]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16562 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16562] > !_16356:
                                                revert with 0, 17
                                            if mem[_16562] + _16356 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15907 > -1 / mem[_16562] + _16356:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16562] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15907) + (_16356 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15907) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16247 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16358 = mem[_16247]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16563 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16563] > !_16358:
                                                revert with 0, 17
                                            if mem[_16563] + _16358 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15907 > -1 / mem[_16563] + _16358:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16563] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15907) + (_16358 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / 10^stor259) / _15907) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11908 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11908 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18870 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18884 = mem[_18870]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18870]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19089 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19143 = mem[_19089]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19287 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19287] > !_19143:
                                                revert with 0, 17
                                            if mem[_19287] + _19143 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18884 > -1 / mem[_19287] + _19143:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19287] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18884) + (_19143 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18884) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19090 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19145 = mem[_19090]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19288 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19288] > !_19145:
                                                revert with 0, 17
                                            if mem[_19288] + _19145 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18884 > -1 / mem[_19288] + _19145:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19288] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18884) + (_19145 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15514 / s * t) / _18884) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                _11917 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_11917]:
                                    revert with 0, 50
                                mem[_11917 + 32] = token1Address
                                if 1 >= mem[_11917]:
                                    revert with 0, 50
                                mem[_11917 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_11917 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_11917 + 100] = s * t
                                mem[_11917 + 132] = 64
                                mem[_11917 + 164] = mem[_11917]
                                idx = 0
                                s = _11917 + 32
                                t = _11917 + 196
                                while idx < mem[_11917]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _11917 + (32 * mem[_11917]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15553 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15585 = mem[_15553]
                                require mem[_15553] <= test266151307()
                                require _15553 + mem[_15553] + 31 < _15553 + return_data.size
                                _15609 = mem[_15553 + mem[_15553]]
                                if mem[_15553 + mem[_15553]] > test266151307():
                                    revert with 0, 65
                                if _15553 + ceil32(return_data.size) + ceil32(32 * mem[_15553 + mem[_15553]]) + 1 > test266151307() or ceil32(32 * mem[_15553 + mem[_15553]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15553 + ceil32(return_data.size) + ceil32(32 * mem[_15553 + mem[_15553]]) + 1
                                mem[_15553 + ceil32(return_data.size)] = _15609
                                require (32 * _15609) + _15585 + 32 <= return_data.size
                                mem[_15553 + ceil32(return_data.size) + 32 len ceil32(32 * _15609)] = mem[_15553 + _15585 + 32 len ceil32(32 * _15609)]
                                if 1 >= _15609:
                                    revert with 0, 50
                                _18719 = mem[_15553 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15553 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15553 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18929 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18946 = mem[_18929]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _18719) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18929]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19263 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19344 = mem[_19263]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19545 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19545] > !_19344:
                                            revert with 0, 17
                                        if mem[_19545] + _19344 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18946 > -1 / mem[_19545] + _19344:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19545] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18946) + (_19344 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18946) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19264 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19346 = mem[_19264]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19546 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19546] > !_19346:
                                            revert with 0, 17
                                        if mem[_19546] + _19346 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18946 > -1 / mem[_19546] + _19346:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19546] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18946) + (_19346 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719) / _18946) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15553 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15553 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18993 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19055 = mem[_18993]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18993]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19494 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19639 = mem[_19494]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19863 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19863] > !_19639:
                                                revert with 0, 17
                                            if mem[_19863] + _19639 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19055 > -1 / mem[_19863] + _19639:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19863] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19055) + (_19639 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19055) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19495 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19641 = mem[_19495]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19864 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19864] > !_19641:
                                                revert with 0, 17
                                            if mem[_19864] + _19641 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19055 > -1 / mem[_19864] + _19641:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19864] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19055) + (_19641 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / 10^stor259) / _19055) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15553 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15553 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21310 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21323 = mem[_21310]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21310]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21507 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21562 = mem[_21507]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21706 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21706] > !_21562:
                                                revert with 0, 17
                                            if mem[_21706] + _21562 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323 > -1 / mem[_21706] + _21562:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21706] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323) + (_21562 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21508 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21564 = mem[_21508]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21707 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21707] > !_21564:
                                                revert with 0, 17
                                            if mem[_21707] + _21564 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323 > -1 / mem[_21707] + _21564:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21707] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323) + (_21564 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18719 / s * t) / _21323) / 10^18
                    else:
                        _8008 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_8008]:
                            revert with 0, 50
                        mem[_8008 + 32] = token1Address
                        if 1 >= mem[_8008]:
                            revert with 0, 50
                        mem[_8008 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        mem[_8008 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_8008 + 100] = 10^18
                        mem[_8008 + 132] = 64
                        mem[_8008 + 164] = mem[_8008]
                        idx = 0
                        s = _8008 + 32
                        t = _8008 + 196
                        while idx < mem[_8008]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _8008 + (32 * mem[_8008]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11910 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11934 = mem[_11910]
                        require mem[_11910] <= test266151307()
                        require _11910 + mem[_11910] + 31 < _11910 + return_data.size
                        _11950 = mem[_11910 + mem[_11910]]
                        if mem[_11910 + mem[_11910]] > test266151307():
                            revert with 0, 65
                        if _11910 + ceil32(return_data.size) + ceil32(32 * mem[_11910 + mem[_11910]]) + 1 > test266151307() or ceil32(32 * mem[_11910 + mem[_11910]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _11910 + ceil32(return_data.size) + ceil32(32 * mem[_11910 + mem[_11910]]) + 1
                        mem[_11910 + ceil32(return_data.size)] = _11950
                        require (32 * _11950) + _11934 + 32 <= return_data.size
                        mem[_11910 + ceil32(return_data.size) + 32 len ceil32(32 * _11950)] = mem[_11910 + _11934 + 32 len ceil32(32 * _11950)]
                        if 1 >= _11950:
                            revert with 0, 50
                        _15516 = mem[_11910 + ceil32(return_data.size) + 64]
                        _15525 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_15525]:
                            revert with 0, 50
                        mem[_15525 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        if 1 >= mem[_15525]:
                            revert with 0, 50
                        mem[_15525 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        mem[_15525 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_15525 + 100] = _15516
                        mem[_15525 + 132] = 64
                        mem[_15525 + 164] = mem[_15525]
                        idx = 0
                        s = _15525 + 32
                        t = _15525 + 196
                        while idx < mem[_15525]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _15525 + (32 * mem[_15525]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _18745 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _18763 = mem[_18745]
                        require mem[_18745] <= test266151307()
                        require _18745 + mem[_18745] + 31 < _18745 + return_data.size
                        _18779 = mem[_18745 + mem[_18745]]
                        if mem[_18745 + mem[_18745]] > test266151307():
                            revert with 0, 65
                        if _18745 + ceil32(return_data.size) + ceil32(32 * mem[_18745 + mem[_18745]]) + 1 > test266151307() or ceil32(32 * mem[_18745 + mem[_18745]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _18745 + ceil32(return_data.size) + ceil32(32 * mem[_18745 + mem[_18745]]) + 1
                        mem[_18745 + ceil32(return_data.size)] = _18779
                        require (32 * _18779) + _18763 + 32 <= return_data.size
                        mem[_18745 + ceil32(return_data.size) + 32 len ceil32(32 * _18779)] = mem[_18745 + _18763 + 32 len ceil32(32 * _18779)]
                        if 1 >= _18779:
                            revert with 0, 50
                        _21230 = mem[_18745 + ceil32(return_data.size) + 64]
                        if not stor259:
                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18745 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18745 + ceil32(return_data.size) + 64]):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21354 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21365 = mem[_21354]
                            if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _21230) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_21354]:
                                revert with 0, 18
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21677 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _21745 = mem[_21677]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21910 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_21910] > !_21745:
                                    revert with 0, 17
                                if mem[_21910] + _21745 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21365 > -1 / mem[_21910] + _21745:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_21910] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21365) + (_21745 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21365) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21678 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21747 = mem[_21678]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21911 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_21911] > !_21747:
                                    revert with 0, 17
                                if mem[_21911] + _21747 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21365 > -1 / mem[_21911] + _21747:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_21911] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21365) + (_21747 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21365) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18745 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not 10^stor259:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18745 + ceil32(return_data.size) + 64] / 10^stor259):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21397 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21475 = mem[_21397]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21397]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21875 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21981 = mem[_21875]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22144 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22144] > !_21981:
                                        revert with 0, 17
                                    if mem[_22144] + _21981 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475 > -1 / mem[_22144] + _21981:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22144] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475) + (_21981 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21876 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21983 = mem[_21876]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22145 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22145] > !_21983:
                                        revert with 0, 17
                                    if mem[_22145] + _21983 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475 > -1 / mem[_22145] + _21983:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22145] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475) + (_21983 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21475) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18745 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not s * t:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18745 + ceil32(return_data.size) + 64] / s * t):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22833 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22843 = mem[_22833]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978) + (Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22833]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22957 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22993 = mem[_22957]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23086 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23086] > !_22993:
                                        revert with 0, 17
                                    if mem[_23086] + _22993 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843 > -1 / mem[_23086] + _22993:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23086] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843) + (_22993 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22958 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22995 = mem[_22958]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23087 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23087] > !_22995:
                                        revert with 0, 17
                                    if mem[_23087] + _22995 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843 > -1 / mem[_23087] + _22995:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23087] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843) + (_22995 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22843) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8090 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8090]:
                                    revert with 0, 50
                                mem[_8090 + 32] = token1Address
                                if 1 >= mem[_8090]:
                                    revert with 0, 50
                                mem[_8090 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8090 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8090 + 100] = 1
                                mem[_8090 + 132] = 64
                                mem[_8090 + 164] = mem[_8090]
                                idx = 0
                                s = _8090 + 32
                                t = _8090 + 196
                                while idx < mem[_8090]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8090 + (32 * mem[_8090]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11904 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11929 = mem[_11904]
                                require mem[_11904] <= test266151307()
                                require _11904 + mem[_11904] + 31 < _11904 + return_data.size
                                _11945 = mem[_11904 + mem[_11904]]
                                if mem[_11904 + mem[_11904]] > test266151307():
                                    revert with 0, 65
                                if _11904 + ceil32(return_data.size) + ceil32(32 * mem[_11904 + mem[_11904]]) + 1 > test266151307() or ceil32(32 * mem[_11904 + mem[_11904]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _11904 + ceil32(return_data.size) + ceil32(32 * mem[_11904 + mem[_11904]]) + 1
                                mem[_11904 + ceil32(return_data.size)] = _11945
                                require (32 * _11945) + _11929 + 32 <= return_data.size
                                mem[_11904 + ceil32(return_data.size) + 32 len ceil32(32 * _11945)] = mem[_11904 + _11929 + 32 len ceil32(32 * _11945)]
                                if 1 >= _11945:
                                    revert with 0, 50
                                _15509 = mem[_11904 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11904 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11904 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15797 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15817 = mem[_15797]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15509) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15797]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16060 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16130 = mem[_16060]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16293 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16293] > !_16130:
                                            revert with 0, 17
                                        if mem[_16293] + _16130 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15817 > -1 / mem[_16293] + _16130:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16293] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15817) + (_16130 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15817) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16061 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16132 = mem[_16061]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16294 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16294] > !_16132:
                                            revert with 0, 17
                                        if mem[_16294] + _16132 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15817 > -1 / mem[_16294] + _16132:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16294] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15817) + (_16132 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509) / _15817) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11904 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11904 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15869 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15904 = mem[_15869]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15869]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16244 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16347 = mem[_16244]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16552 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16552] > !_16347:
                                                revert with 0, 17
                                            if mem[_16552] + _16347 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15904 > -1 / mem[_16552] + _16347:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16552] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15904) + (_16347 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15904) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16245 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16349 = mem[_16245]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16553 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16553] > !_16349:
                                                revert with 0, 17
                                            if mem[_16553] + _16349 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15904 > -1 / mem[_16553] + _16349:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16553] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15904) + (_16349 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / 10^stor259) / _15904) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11904 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11904 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18869 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18883 = mem[_18869]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18869]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19086 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19137 = mem[_19086]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19284 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19284] > !_19137:
                                                revert with 0, 17
                                            if mem[_19284] + _19137 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18883 > -1 / mem[_19284] + _19137:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19284] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18883) + (_19137 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18883) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19087 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19139 = mem[_19087]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19285 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19285] > !_19139:
                                                revert with 0, 17
                                            if mem[_19285] + _19139 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18883 > -1 / mem[_19285] + _19139:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19285] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18883) + (_19139 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15509 / s * t) / _18883) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8179 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8179]:
                                        revert with 0, 50
                                    mem[_8179 + 32] = token1Address
                                    if 1 >= mem[_8179]:
                                        revert with 0, 50
                                    mem[_8179 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8179 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8179 + 100] = 10^stor259
                                    mem[_8179 + 132] = 64
                                    mem[_8179 + 164] = mem[_8179]
                                    idx = 0
                                    s = _8179 + 32
                                    t = _8179 + 196
                                    while idx < mem[_8179]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8179 + (32 * mem[_8179]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11903 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11928 = mem[_11903]
                                    require mem[_11903] <= test266151307()
                                    require _11903 + mem[_11903] + 31 < _11903 + return_data.size
                                    _11944 = mem[_11903 + mem[_11903]]
                                    if mem[_11903 + mem[_11903]] > test266151307():
                                        revert with 0, 65
                                    if _11903 + ceil32(return_data.size) + ceil32(32 * mem[_11903 + mem[_11903]]) + 1 > test266151307() or ceil32(32 * mem[_11903 + mem[_11903]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _11903 + ceil32(return_data.size) + ceil32(32 * mem[_11903 + mem[_11903]]) + 1
                                    mem[_11903 + ceil32(return_data.size)] = _11944
                                    require (32 * _11944) + _11928 + 32 <= return_data.size
                                    mem[_11903 + ceil32(return_data.size) + 32 len ceil32(32 * _11944)] = mem[_11903 + _11928 + 32 len ceil32(32 * _11944)]
                                    if 1 >= _11944:
                                        revert with 0, 50
                                    _15508 = mem[_11903 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11903 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11903 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15796 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15816 = mem[_15796]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15508) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15796]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16058 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16127 = mem[_16058]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16291 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16291] > !_16127:
                                                revert with 0, 17
                                            if mem[_16291] + _16127 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15816 > -1 / mem[_16291] + _16127:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16291] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15816) + (_16127 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15816) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16059 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16129 = mem[_16059]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16292 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16292] > !_16129:
                                                revert with 0, 17
                                            if mem[_16292] + _16129 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15816 > -1 / mem[_16292] + _16129:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16292] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15816) + (_16129 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508) / _15816) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11903 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11903 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15868 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15901 = mem[_15868]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15868]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16242 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16340 = mem[_16242]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16547 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16547] > !_16340:
                                                    revert with 0, 17
                                                if mem[_16547] + _16340 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15901 > -1 / mem[_16547] + _16340:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16547] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15901) + (_16340 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15901) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16243 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16342 = mem[_16243]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16548 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16548] > !_16342:
                                                    revert with 0, 17
                                                if mem[_16548] + _16342 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15901 > -1 / mem[_16548] + _16342:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16548] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15901) + (_16342 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / 10^stor259) / _15901) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11903 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11903 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18868 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18882 = mem[_18868]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18868]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19084 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19134 = mem[_19084]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19282 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19282] > !_19134:
                                                    revert with 0, 17
                                                if mem[_19282] + _19134 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18882 > -1 / mem[_19282] + _19134:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19282] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18882) + (_19134 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18882) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19085 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19136 = mem[_19085]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19283 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19283] > !_19136:
                                                    revert with 0, 17
                                                if mem[_19283] + _19136 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18882 > -1 / mem[_19283] + _19136:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19283] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18882) + (_19136 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15508 / s * t) / _18882) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _11915 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_11915]:
                                        revert with 0, 50
                                    mem[_11915 + 32] = token1Address
                                    if 1 >= mem[_11915]:
                                        revert with 0, 50
                                    mem[_11915 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_11915 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_11915 + 100] = s * t
                                    mem[_11915 + 132] = 64
                                    mem[_11915 + 164] = mem[_11915]
                                    idx = 0
                                    s = _11915 + 32
                                    t = _11915 + 196
                                    while idx < mem[_11915]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _11915 + (32 * mem[_11915]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15551 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15583 = mem[_15551]
                                    require mem[_15551] <= test266151307()
                                    require _15551 + mem[_15551] + 31 < _15551 + return_data.size
                                    _15607 = mem[_15551 + mem[_15551]]
                                    if mem[_15551 + mem[_15551]] > test266151307():
                                        revert with 0, 65
                                    if _15551 + ceil32(return_data.size) + ceil32(32 * mem[_15551 + mem[_15551]]) + 1 > test266151307() or ceil32(32 * mem[_15551 + mem[_15551]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15551 + ceil32(return_data.size) + ceil32(32 * mem[_15551 + mem[_15551]]) + 1
                                    mem[_15551 + ceil32(return_data.size)] = _15607
                                    require (32 * _15607) + _15583 + 32 <= return_data.size
                                    mem[_15551 + ceil32(return_data.size) + 32 len ceil32(32 * _15607)] = mem[_15551 + _15583 + 32 len ceil32(32 * _15607)]
                                    if 1 >= _15607:
                                        revert with 0, 50
                                    _18717 = mem[_15551 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15551 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15551 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18928 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18945 = mem[_18928]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18717) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18928]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19261 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19339 = mem[_19261]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19540 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19540] > !_19339:
                                                revert with 0, 17
                                            if mem[_19540] + _19339 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18945 > -1 / mem[_19540] + _19339:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19540] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18945) + (_19339 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18945) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19262 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19341 = mem[_19262]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19541 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19541] > !_19341:
                                                revert with 0, 17
                                            if mem[_19541] + _19341 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18945 > -1 / mem[_19541] + _19341:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19541] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18945) + (_19341 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18945) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15551 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15551 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18992 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19044 = mem[_18992]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18992]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19492 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19632 = mem[_19492]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19854 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19854] > !_19632:
                                                    revert with 0, 17
                                                if mem[_19854] + _19632 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19044 > -1 / mem[_19854] + _19632:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19854] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19044) + (_19632 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19044) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19493 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19634 = mem[_19493]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19855 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19855] > !_19634:
                                                    revert with 0, 17
                                                if mem[_19855] + _19634 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19044 > -1 / mem[_19855] + _19634:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19855] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19044) + (_19634 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19044) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15551 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15551 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21309 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21322 = mem[_21309]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21309]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21504 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21558 = mem[_21504]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21704 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21704] > !_21558:
                                                    revert with 0, 17
                                                if mem[_21704] + _21558 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322 > -1 / mem[_21704] + _21558:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21704] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322) + (_21558 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21505 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21560 = mem[_21505]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21705 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21705] > !_21560:
                                                    revert with 0, 17
                                                if mem[_21705] + _21560 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322 > -1 / mem[_21705] + _21560:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21705] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322) + (_21560 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / s * t) / _21322) / 10^18
                        else:
                            _8031 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8031]:
                                revert with 0, 50
                            mem[_8031 + 32] = token1Address
                            if 1 >= mem[_8031]:
                                revert with 0, 50
                            mem[_8031 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8031 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8031 + 100] = 10^18
                            mem[_8031 + 132] = 64
                            mem[_8031 + 164] = mem[_8031]
                            idx = 0
                            s = _8031 + 32
                            t = _8031 + 196
                            while idx < mem[_8031]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8031 + (32 * mem[_8031]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11905 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11930 = mem[_11905]
                            require mem[_11905] <= test266151307()
                            require _11905 + mem[_11905] + 31 < _11905 + return_data.size
                            _11946 = mem[_11905 + mem[_11905]]
                            if mem[_11905 + mem[_11905]] > test266151307():
                                revert with 0, 65
                            if _11905 + ceil32(return_data.size) + ceil32(32 * mem[_11905 + mem[_11905]]) + 1 > test266151307() or ceil32(32 * mem[_11905 + mem[_11905]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _11905 + ceil32(return_data.size) + ceil32(32 * mem[_11905 + mem[_11905]]) + 1
                            mem[_11905 + ceil32(return_data.size)] = _11946
                            require (32 * _11946) + _11930 + 32 <= return_data.size
                            mem[_11905 + ceil32(return_data.size) + 32 len ceil32(32 * _11946)] = mem[_11905 + _11930 + 32 len ceil32(32 * _11946)]
                            if 1 >= _11946:
                                revert with 0, 50
                            _15510 = mem[_11905 + ceil32(return_data.size) + 64]
                            _15523 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_15523]:
                                revert with 0, 50
                            mem[_15523 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_15523]:
                                revert with 0, 50
                            mem[_15523 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_15523 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_15523 + 100] = _15510
                            mem[_15523 + 132] = 64
                            mem[_15523 + 164] = mem[_15523]
                            idx = 0
                            s = _15523 + 32
                            t = _15523 + 196
                            while idx < mem[_15523]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _15523 + (32 * mem[_15523]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _18744 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _18762 = mem[_18744]
                            require mem[_18744] <= test266151307()
                            require _18744 + mem[_18744] + 31 < _18744 + return_data.size
                            _18778 = mem[_18744 + mem[_18744]]
                            if mem[_18744 + mem[_18744]] > test266151307():
                                revert with 0, 65
                            if _18744 + ceil32(return_data.size) + ceil32(32 * mem[_18744 + mem[_18744]]) + 1 > test266151307() or ceil32(32 * mem[_18744 + mem[_18744]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _18744 + ceil32(return_data.size) + ceil32(32 * mem[_18744 + mem[_18744]]) + 1
                            mem[_18744 + ceil32(return_data.size)] = _18778
                            require (32 * _18778) + _18762 + 32 <= return_data.size
                            mem[_18744 + ceil32(return_data.size) + 32 len ceil32(32 * _18778)] = mem[_18744 + _18762 + 32 len ceil32(32 * _18778)]
                            if 1 >= _18778:
                                revert with 0, 50
                            _21229 = mem[_18744 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18744 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18744 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21353 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21364 = mem[_21353]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21229) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21353]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21675 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21742 = mem[_21675]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21908 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21908] > !_21742:
                                        revert with 0, 17
                                    if mem[_21908] + _21742 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21364 > -1 / mem[_21908] + _21742:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21908] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21364) + (_21742 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21364) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21676 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21744 = mem[_21676]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21909 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21909] > !_21744:
                                        revert with 0, 17
                                    if mem[_21909] + _21744 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21364 > -1 / mem[_21909] + _21744:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21909] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21364) + (_21744 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21364) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18744 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18744 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21396 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21468 = mem[_21396]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21396]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21873 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21974 = mem[_21873]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22139 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22139] > !_21974:
                                            revert with 0, 17
                                        if mem[_22139] + _21974 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468 > -1 / mem[_22139] + _21974:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22139] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468) + (_21974 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21874 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21976 = mem[_21874]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22140 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22140] > !_21976:
                                            revert with 0, 17
                                        if mem[_22140] + _21976 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468 > -1 / mem[_22140] + _21976:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22140] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468) + (_21976 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21468) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18744 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18744 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22832 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22842 = mem[_22832]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22832]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22955 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22990 = mem[_22955]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23084 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23084] > !_22990:
                                            revert with 0, 17
                                        if mem[_23084] + _22990 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842 > -1 / mem[_23084] + _22990:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23084] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842) + (_22990 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22956 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22992 = mem[_22956]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23085 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23085] > !_22992:
                                            revert with 0, 17
                                        if mem[_23085] + _22992 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842 > -1 / mem[_23085] + _22992:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23085] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842) + (_22992 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22842) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12068 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12068]:
                                    revert with 0, 50
                                mem[_12068 + 32] = token1Address
                                if 1 >= mem[_12068]:
                                    revert with 0, 50
                                mem[_12068 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12068 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12068 + 100] = 1
                                mem[_12068 + 132] = 64
                                mem[_12068 + 164] = mem[_12068]
                                idx = 0
                                u = _12068 + 32
                                v = _12068 + 196
                                while idx < mem[_12068]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12068 + (32 * mem[_12068]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15549 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15581 = mem[_15549]
                                require mem[_15549] <= test266151307()
                                require _15549 + mem[_15549] + 31 < _15549 + return_data.size
                                _15605 = mem[_15549 + mem[_15549]]
                                if mem[_15549 + mem[_15549]] > test266151307():
                                    revert with 0, 65
                                if _15549 + ceil32(return_data.size) + ceil32(32 * mem[_15549 + mem[_15549]]) + 1 > test266151307() or ceil32(32 * mem[_15549 + mem[_15549]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15549 + ceil32(return_data.size) + ceil32(32 * mem[_15549 + mem[_15549]]) + 1
                                mem[_15549 + ceil32(return_data.size)] = _15605
                                require (32 * _15605) + _15581 + 32 <= return_data.size
                                mem[_15549 + ceil32(return_data.size) + 32 len ceil32(32 * _15605)] = mem[_15549 + _15581 + 32 len ceil32(32 * _15605)]
                                if 1 >= _15605:
                                    revert with 0, 50
                                _18713 = mem[_15549 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15549 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15549 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18927 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18943 = mem[_18927]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18713) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18927]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19259 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19336 = mem[_19259]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19538 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19538] > !_19336:
                                            revert with 0, 17
                                        if mem[_19538] + _19336 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18943 > -1 / mem[_19538] + _19336:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19538] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18943) + (_19336 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18943) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19260 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19338 = mem[_19260]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19539 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19539] > !_19338:
                                            revert with 0, 17
                                        if mem[_19539] + _19338 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18943 > -1 / mem[_19539] + _19338:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19539] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18943) + (_19338 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18943) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15549 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15549 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18991 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19041 = mem[_18991]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18991]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19490 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19623 = mem[_19490]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19848 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19848] > !_19623:
                                                revert with 0, 17
                                            if mem[_19848] + _19623 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19041 > -1 / mem[_19848] + _19623:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19848] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19041) + (_19623 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19041) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19491 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19625 = mem[_19491]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19849 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19849] > !_19625:
                                                revert with 0, 17
                                            if mem[_19849] + _19625 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19041 > -1 / mem[_19849] + _19625:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19849] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19041) + (_19625 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19041) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15549 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15549 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21308 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21321 = mem[_21308]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21308]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21502 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21553 = mem[_21502]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21701 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21701] > !_21553:
                                                revert with 0, 17
                                            if mem[_21701] + _21553 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321 > -1 / mem[_21701] + _21553:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21701] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321) + (_21553 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21503 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21555 = mem[_21503]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21702 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21702] > !_21555:
                                                revert with 0, 17
                                            if mem[_21702] + _21555 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321 > -1 / mem[_21702] + _21555:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21702] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321) + (_21555 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / u * v) / _21321) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12129 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12129]:
                                        revert with 0, 50
                                    mem[_12129 + 32] = token1Address
                                    if 1 >= mem[_12129]:
                                        revert with 0, 50
                                    mem[_12129 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12129 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12129 + 100] = 10^stor259
                                    mem[_12129 + 132] = 64
                                    mem[_12129 + 164] = mem[_12129]
                                    idx = 0
                                    u = _12129 + 32
                                    v = _12129 + 196
                                    while idx < mem[_12129]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12129 + (32 * mem[_12129]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15548 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15580 = mem[_15548]
                                    require mem[_15548] <= test266151307()
                                    require _15548 + mem[_15548] + 31 < _15548 + return_data.size
                                    _15604 = mem[_15548 + mem[_15548]]
                                    if mem[_15548 + mem[_15548]] > test266151307():
                                        revert with 0, 65
                                    if _15548 + ceil32(return_data.size) + ceil32(32 * mem[_15548 + mem[_15548]]) + 1 > test266151307() or ceil32(32 * mem[_15548 + mem[_15548]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15548 + ceil32(return_data.size) + ceil32(32 * mem[_15548 + mem[_15548]]) + 1
                                    mem[_15548 + ceil32(return_data.size)] = _15604
                                    require (32 * _15604) + _15580 + 32 <= return_data.size
                                    mem[_15548 + ceil32(return_data.size) + 32 len ceil32(32 * _15604)] = mem[_15548 + _15580 + 32 len ceil32(32 * _15604)]
                                    if 1 >= _15604:
                                        revert with 0, 50
                                    _18712 = mem[_15548 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15548 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15548 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18926 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18942 = mem[_18926]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18712) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18926]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19257 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19333 = mem[_19257]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19536 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19536] > !_19333:
                                                revert with 0, 17
                                            if mem[_19536] + _19333 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18942 > -1 / mem[_19536] + _19333:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19536] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18942) + (_19333 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18942) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19258 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19335 = mem[_19258]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19537 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19537] > !_19335:
                                                revert with 0, 17
                                            if mem[_19537] + _19335 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18942 > -1 / mem[_19537] + _19335:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19537] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18942) + (_19335 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712) / _18942) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15548 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15548 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18990 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19038 = mem[_18990]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18990]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19488 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19616 = mem[_19488]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19843 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19843] > !_19616:
                                                    revert with 0, 17
                                                if mem[_19843] + _19616 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19038 > -1 / mem[_19843] + _19616:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19843] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19038) + (_19616 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19038) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19489 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19618 = mem[_19489]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19844 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19844] > !_19618:
                                                    revert with 0, 17
                                                if mem[_19844] + _19618 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19038 > -1 / mem[_19844] + _19618:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19844] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19038) + (_19618 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / 10^stor259) / _19038) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15548 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15548 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21307 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21320 = mem[_21307]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21307]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21500 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21550 = mem[_21500]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21699 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21699] > !_21550:
                                                    revert with 0, 17
                                                if mem[_21699] + _21550 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320 > -1 / mem[_21699] + _21550:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21699] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320) + (_21550 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21501 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21552 = mem[_21501]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21700 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21700] > !_21552:
                                                    revert with 0, 17
                                                if mem[_21700] + _21552 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320 > -1 / mem[_21700] + _21552:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21700] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320) + (_21552 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18712 / u * v) / _21320) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    _15561 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15561]:
                                        revert with 0, 50
                                    mem[_15561 + 32] = token1Address
                                    if 1 >= mem[_15561]:
                                        revert with 0, 50
                                    mem[_15561 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15561 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15561 + 100] = u * v
                                    mem[_15561 + 132] = 64
                                    mem[_15561 + 164] = mem[_15561]
                                    idx = 0
                                    u = _15561 + 32
                                    v = _15561 + 196
                                    while idx < mem[_15561]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15561 + (32 * mem[_15561]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18742 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18760 = mem[_18742]
                                    require mem[_18742] <= test266151307()
                                    require _18742 + mem[_18742] + 31 < _18742 + return_data.size
                                    _18776 = mem[_18742 + mem[_18742]]
                                    if mem[_18742 + mem[_18742]] > test266151307():
                                        revert with 0, 65
                                    if _18742 + ceil32(return_data.size) + ceil32(32 * mem[_18742 + mem[_18742]]) + 1 > test266151307() or ceil32(32 * mem[_18742 + mem[_18742]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _18742 + ceil32(return_data.size) + ceil32(32 * mem[_18742 + mem[_18742]]) + 1
                                    mem[_18742 + ceil32(return_data.size)] = _18776
                                    require (32 * _18776) + _18760 + 32 <= return_data.size
                                    mem[_18742 + ceil32(return_data.size) + 32 len ceil32(32 * _18776)] = mem[_18742 + _18760 + 32 len ceil32(32 * _18776)]
                                    if 1 >= _18776:
                                        revert with 0, 50
                                    _21227 = mem[_18742 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18742 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18742 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21352 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21363 = mem[_21352]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21227) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21352]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21673 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21737 = mem[_21673]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21903 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21903] > !_21737:
                                                revert with 0, 17
                                            if mem[_21903] + _21737 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21363 > -1 / mem[_21903] + _21737:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21903] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21363) + (_21737 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21363) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21674 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21739 = mem[_21674]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21904 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21904] > !_21739:
                                                revert with 0, 17
                                            if mem[_21904] + _21739 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21363 > -1 / mem[_21904] + _21739:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21904] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21363) + (_21739 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21363) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18742 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18742 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21395 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21453 = mem[_21395]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21395]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21871 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21967 = mem[_21871]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22130 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22130] > !_21967:
                                                    revert with 0, 17
                                                if mem[_22130] + _21967 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453 > -1 / mem[_22130] + _21967:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22130] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453) + (_21967 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21872 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21969 = mem[_21872]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22131 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22131] > !_21969:
                                                    revert with 0, 17
                                                if mem[_22131] + _21969 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453 > -1 / mem[_22131] + _21969:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22131] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453) + (_21969 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21453) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18742 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18742 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22831 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22841 = mem[_22831]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22831]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22952 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22986 = mem[_22952]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23082 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23082] > !_22986:
                                                    revert with 0, 17
                                                if mem[_23082] + _22986 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841 > -1 / mem[_23082] + _22986:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23082] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841) + (_22986 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22953 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22988 = mem[_22953]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23083 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23083] > !_22988:
                                                    revert with 0, 17
                                                if mem[_23083] + _22988 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841 > -1 / mem[_23083] + _22988:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23083] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841) + (_22988 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22841) / 10^18
                        else:
                            _11971 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_11971]:
                                revert with 0, 50
                            mem[_11971 + 32] = token1Address
                            if 1 >= mem[_11971]:
                                revert with 0, 50
                            mem[_11971 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_11971 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_11971 + 100] = 10^18
                            mem[_11971 + 132] = 64
                            mem[_11971 + 164] = mem[_11971]
                            idx = 0
                            u = _11971 + 32
                            v = _11971 + 196
                            while idx < mem[_11971]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _11971 + (32 * mem[_11971]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15550 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15582 = mem[_15550]
                            require mem[_15550] <= test266151307()
                            require _15550 + mem[_15550] + 31 < _15550 + return_data.size
                            _15606 = mem[_15550 + mem[_15550]]
                            if mem[_15550 + mem[_15550]] > test266151307():
                                revert with 0, 65
                            if _15550 + ceil32(return_data.size) + ceil32(32 * mem[_15550 + mem[_15550]]) + 1 > test266151307() or ceil32(32 * mem[_15550 + mem[_15550]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _15550 + ceil32(return_data.size) + ceil32(32 * mem[_15550 + mem[_15550]]) + 1
                            mem[_15550 + ceil32(return_data.size)] = _15606
                            require (32 * _15606) + _15582 + 32 <= return_data.size
                            mem[_15550 + ceil32(return_data.size) + 32 len ceil32(32 * _15606)] = mem[_15550 + _15582 + 32 len ceil32(32 * _15606)]
                            if 1 >= _15606:
                                revert with 0, 50
                            _18714 = mem[_15550 + ceil32(return_data.size) + 64]
                            _18727 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_18727]:
                                revert with 0, 50
                            mem[_18727 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_18727]:
                                revert with 0, 50
                            mem[_18727 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_18727 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_18727 + 100] = _18714
                            mem[_18727 + 132] = 64
                            mem[_18727 + 164] = mem[_18727]
                            idx = 0
                            u = _18727 + 32
                            v = _18727 + 196
                            while idx < mem[_18727]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _18727 + (32 * mem[_18727]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21238 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21244 = mem[_21238]
                            require mem[_21238] <= test266151307()
                            require _21238 + mem[_21238] + 31 < _21238 + return_data.size
                            _21250 = mem[_21238 + mem[_21238]]
                            if mem[_21238 + mem[_21238]] > test266151307():
                                revert with 0, 65
                            if _21238 + ceil32(return_data.size) + ceil32(32 * mem[_21238 + mem[_21238]]) + 1 > test266151307() or ceil32(32 * mem[_21238 + mem[_21238]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _21238 + ceil32(return_data.size) + ceil32(32 * mem[_21238 + mem[_21238]]) + 1
                            mem[_21238 + ceil32(return_data.size)] = _21250
                            require (32 * _21250) + _21244 + 32 <= return_data.size
                            mem[_21238 + ceil32(return_data.size) + 32 len ceil32(32 * _21250)] = mem[_21238 + _21244 + 32 len ceil32(32 * _21250)]
                            if 1 >= _21250:
                                revert with 0, 50
                            _22796 = mem[_21238 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21238 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21238 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22858 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22863 = mem[_22858]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22796) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22858]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23065 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23102 = mem[_23065]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23187 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23187] > !_23102:
                                        revert with 0, 17
                                    if mem[_23187] + _23102 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863 > -1 / mem[_23187] + _23102:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23187] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863) + (_23102 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23066 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23104 = mem[_23066]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23188 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23188] > !_23104:
                                        revert with 0, 17
                                    if mem[_23188] + _23104 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863 > -1 / mem[_23188] + _23104:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23188] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863) + (_23104 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796) / _22863) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21238 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21238 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22878 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22925 = mem[_22878]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22878]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23174 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23221 = mem[_23174]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23293 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23293] > !_23221:
                                            revert with 0, 17
                                        if mem[_23293] + _23221 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925 > -1 / mem[_23293] + _23221:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23293] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925) + (_23221 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23175 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23223 = mem[_23175]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23294 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23294] > !_23223:
                                            revert with 0, 17
                                        if mem[_23294] + _23223 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925 > -1 / mem[_23294] + _23223:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23294] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925) + (_23223 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / 10^stor259) / _22925) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21238 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not u * v:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21238 + ceil32(return_data.size) + 64] / u * v):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23521 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23526 = mem[_23521]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23521]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23566 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23581 = mem[_23566]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23618 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23618] > !_23581:
                                            revert with 0, 17
                                        if mem[_23618] + _23581 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526 > -1 / mem[_23618] + _23581:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23618] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526) + (_23581 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23567 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23583 = mem[_23567]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23619 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23619] > !_23583:
                                            revert with 0, 17
                                        if mem[_23619] + _23583 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526 > -1 / mem[_23619] + _23583:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23619] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526) + (_23583 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7978 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22796 / u * v) / _23526) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = 10^stor258
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    s = ceil32(return_data.size) + 128
                    t = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4038 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _4047 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require (32 * _4047) + _4038 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _4047)] = mem[ceil32(return_data.size) + _4038 + 224 len ceil32(32 * _4047)]
                    if 1 >= _4047:
                        revert with 0, 50
                    _7977 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8037 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8037]:
                                    revert with 0, 50
                                mem[_8037 + 32] = token1Address
                                if 1 >= mem[_8037]:
                                    revert with 0, 50
                                mem[_8037 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8037 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8037 + 100] = 1
                                mem[_8037 + 132] = 64
                                mem[_8037 + 164] = mem[_8037]
                                idx = 0
                                s = _8037 + 32
                                t = _8037 + 196
                                while idx < mem[_8037]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8037 + (32 * mem[_8037]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11899 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11925 = mem[_11899]
                                require mem[_11899] <= test266151307()
                                require _11899 + mem[_11899] + 31 < _11899 + return_data.size
                                _11941 = mem[_11899 + mem[_11899]]
                                if mem[_11899 + mem[_11899]] > test266151307():
                                    revert with 0, 65
                                if _11899 + ceil32(return_data.size) + ceil32(32 * mem[_11899 + mem[_11899]]) + 1 > test266151307() or ceil32(32 * mem[_11899 + mem[_11899]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _11899 + ceil32(return_data.size) + ceil32(32 * mem[_11899 + mem[_11899]]) + 1
                                mem[_11899 + ceil32(return_data.size)] = _11941
                                require (32 * _11941) + _11925 + 32 <= return_data.size
                                mem[_11899 + ceil32(return_data.size) + 32 len ceil32(32 * _11941)] = mem[_11899 + _11925 + 32 len ceil32(32 * _11941)]
                                if 1 >= _11941:
                                    revert with 0, 50
                                _15500 = mem[_11899 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11899 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11899 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15793 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15813 = mem[_15793]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15500) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15793]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16056 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16117 = mem[_16056]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16280 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16280] > !_16117:
                                            revert with 0, 17
                                        if mem[_16280] + _16117 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15813 > -1 / mem[_16280] + _16117:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16280] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15813) + (_16117 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15813) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16057 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16119 = mem[_16057]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16281 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16281] > !_16119:
                                            revert with 0, 17
                                        if mem[_16281] + _16119 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15813 > -1 / mem[_16281] + _16119:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16281] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15813) + (_16119 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500) / _15813) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11899 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11899 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15866 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15898 = mem[_15866]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15866]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16240 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16331 = mem[_16240]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16528 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16528] > !_16331:
                                                revert with 0, 17
                                            if mem[_16528] + _16331 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15898 > -1 / mem[_16528] + _16331:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16528] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15898) + (_16331 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15898) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16241 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16333 = mem[_16241]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16529 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16529] > !_16333:
                                                revert with 0, 17
                                            if mem[_16529] + _16333 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15898 > -1 / mem[_16529] + _16333:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16529] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15898) + (_16333 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / 10^stor259) / _15898) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11899 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11899 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18866 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18880 = mem[_18866]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18866]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19079 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19124 = mem[_19079]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19278 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19278] > !_19124:
                                                revert with 0, 17
                                            if mem[_19278] + _19124 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18880 > -1 / mem[_19278] + _19124:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19278] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18880) + (_19124 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18880) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19080 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19126 = mem[_19080]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19279 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19279] > !_19126:
                                                revert with 0, 17
                                            if mem[_19279] + _19126 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18880 > -1 / mem[_19279] + _19126:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19279] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18880) + (_19126 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15500 / s * t) / _18880) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8086 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8086]:
                                        revert with 0, 50
                                    mem[_8086 + 32] = token1Address
                                    if 1 >= mem[_8086]:
                                        revert with 0, 50
                                    mem[_8086 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8086 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8086 + 100] = 10^stor259
                                    mem[_8086 + 132] = 64
                                    mem[_8086 + 164] = mem[_8086]
                                    idx = 0
                                    s = _8086 + 32
                                    t = _8086 + 196
                                    while idx < mem[_8086]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8086 + (32 * mem[_8086]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11898 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11924 = mem[_11898]
                                    require mem[_11898] <= test266151307()
                                    require _11898 + mem[_11898] + 31 < _11898 + return_data.size
                                    _11940 = mem[_11898 + mem[_11898]]
                                    if mem[_11898 + mem[_11898]] > test266151307():
                                        revert with 0, 65
                                    if _11898 + ceil32(return_data.size) + ceil32(32 * mem[_11898 + mem[_11898]]) + 1 > test266151307() or ceil32(32 * mem[_11898 + mem[_11898]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _11898 + ceil32(return_data.size) + ceil32(32 * mem[_11898 + mem[_11898]]) + 1
                                    mem[_11898 + ceil32(return_data.size)] = _11940
                                    require (32 * _11940) + _11924 + 32 <= return_data.size
                                    mem[_11898 + ceil32(return_data.size) + 32 len ceil32(32 * _11940)] = mem[_11898 + _11924 + 32 len ceil32(32 * _11940)]
                                    if 1 >= _11940:
                                        revert with 0, 50
                                    _15499 = mem[_11898 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15792 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15812 = mem[_15792]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15499) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15792]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16054 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16114 = mem[_16054]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16278 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16278] > !_16114:
                                                revert with 0, 17
                                            if mem[_16278] + _16114 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15812 > -1 / mem[_16278] + _16114:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16278] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15812) + (_16114 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15812) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16055 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16116 = mem[_16055]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16279 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16279] > !_16116:
                                                revert with 0, 17
                                            if mem[_16279] + _16116 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15812 > -1 / mem[_16279] + _16116:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16279] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15812) + (_16116 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499) / _15812) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15865 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15895 = mem[_15865]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15865]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16238 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16324 = mem[_16238]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16523 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16523] > !_16324:
                                                    revert with 0, 17
                                                if mem[_16523] + _16324 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15895 > -1 / mem[_16523] + _16324:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16523] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15895) + (_16324 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15895) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16239 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16326 = mem[_16239]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16524 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16524] > !_16326:
                                                    revert with 0, 17
                                                if mem[_16524] + _16326 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15895 > -1 / mem[_16524] + _16326:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16524] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15895) + (_16326 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / 10^stor259) / _15895) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18865 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18879 = mem[_18865]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18865]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19077 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19121 = mem[_19077]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19276 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19276] > !_19121:
                                                    revert with 0, 17
                                                if mem[_19276] + _19121 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18879 > -1 / mem[_19276] + _19121:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19276] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18879) + (_19121 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18879) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19078 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19123 = mem[_19078]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19277 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19277] > !_19123:
                                                    revert with 0, 17
                                                if mem[_19277] + _19123 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18879 > -1 / mem[_19277] + _19123:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19277] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18879) + (_19123 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15499 / s * t) / _18879) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _11913 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_11913]:
                                        revert with 0, 50
                                    mem[_11913 + 32] = token1Address
                                    if 1 >= mem[_11913]:
                                        revert with 0, 50
                                    mem[_11913 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_11913 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_11913 + 100] = s * t
                                    mem[_11913 + 132] = 64
                                    mem[_11913 + 164] = mem[_11913]
                                    idx = 0
                                    s = _11913 + 32
                                    t = _11913 + 196
                                    while idx < mem[_11913]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _11913 + (32 * mem[_11913]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15544 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15577 = mem[_15544]
                                    require mem[_15544] <= test266151307()
                                    require _15544 + mem[_15544] + 31 < _15544 + return_data.size
                                    _15601 = mem[_15544 + mem[_15544]]
                                    if mem[_15544 + mem[_15544]] > test266151307():
                                        revert with 0, 65
                                    if _15544 + ceil32(return_data.size) + ceil32(32 * mem[_15544 + mem[_15544]]) + 1 > test266151307() or ceil32(32 * mem[_15544 + mem[_15544]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15544 + ceil32(return_data.size) + ceil32(32 * mem[_15544 + mem[_15544]]) + 1
                                    mem[_15544 + ceil32(return_data.size)] = _15601
                                    require (32 * _15601) + _15577 + 32 <= return_data.size
                                    mem[_15544 + ceil32(return_data.size) + 32 len ceil32(32 * _15601)] = mem[_15544 + _15577 + 32 len ceil32(32 * _15601)]
                                    if 1 >= _15601:
                                        revert with 0, 50
                                    _18709 = mem[_15544 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15544 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15544 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18925 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18941 = mem[_18925]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _18709) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18925]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19255 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19326 = mem[_19255]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19528 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19528] > !_19326:
                                                revert with 0, 17
                                            if mem[_19528] + _19326 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18941 > -1 / mem[_19528] + _19326:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19528] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18941) + (_19326 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18941) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19256 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19328 = mem[_19256]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19529 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19529] > !_19328:
                                                revert with 0, 17
                                            if mem[_19529] + _19328 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18941 > -1 / mem[_19529] + _19328:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19529] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18941) + (_19328 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709) / _18941) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15544 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15544 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18989 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19027 = mem[_18989]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18989]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19486 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19609 = mem[_19486]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19830 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19830] > !_19609:
                                                    revert with 0, 17
                                                if mem[_19830] + _19609 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19027 > -1 / mem[_19830] + _19609:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19830] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19027) + (_19609 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19027) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19487 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19611 = mem[_19487]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19831 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19831] > !_19611:
                                                    revert with 0, 17
                                                if mem[_19831] + _19611 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19027 > -1 / mem[_19831] + _19611:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19831] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19027) + (_19611 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / 10^stor259) / _19027) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15544 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15544 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21306 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21319 = mem[_21306]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21306]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21496 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21545 = mem[_21496]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21697 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21697] > !_21545:
                                                    revert with 0, 17
                                                if mem[_21697] + _21545 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319 > -1 / mem[_21697] + _21545:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21697] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319) + (_21545 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21497 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21547 = mem[_21497]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21698 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21698] > !_21547:
                                                    revert with 0, 17
                                                if mem[_21698] + _21547 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319 > -1 / mem[_21698] + _21547:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21698] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319) + (_21547 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18709 / s * t) / _21319) / 10^18
                        else:
                            _8006 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8006]:
                                revert with 0, 50
                            mem[_8006 + 32] = token1Address
                            if 1 >= mem[_8006]:
                                revert with 0, 50
                            mem[_8006 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8006 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8006 + 100] = 10^18
                            mem[_8006 + 132] = 64
                            mem[_8006 + 164] = mem[_8006]
                            idx = 0
                            s = _8006 + 32
                            t = _8006 + 196
                            while idx < mem[_8006]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8006 + (32 * mem[_8006]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11900 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11926 = mem[_11900]
                            require mem[_11900] <= test266151307()
                            require _11900 + mem[_11900] + 31 < _11900 + return_data.size
                            _11942 = mem[_11900 + mem[_11900]]
                            if mem[_11900 + mem[_11900]] > test266151307():
                                revert with 0, 65
                            if _11900 + ceil32(return_data.size) + ceil32(32 * mem[_11900 + mem[_11900]]) + 1 > test266151307() or ceil32(32 * mem[_11900 + mem[_11900]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _11900 + ceil32(return_data.size) + ceil32(32 * mem[_11900 + mem[_11900]]) + 1
                            mem[_11900 + ceil32(return_data.size)] = _11942
                            require (32 * _11942) + _11926 + 32 <= return_data.size
                            mem[_11900 + ceil32(return_data.size) + 32 len ceil32(32 * _11942)] = mem[_11900 + _11926 + 32 len ceil32(32 * _11942)]
                            if 1 >= _11942:
                                revert with 0, 50
                            _15501 = mem[_11900 + ceil32(return_data.size) + 64]
                            _15521 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_15521]:
                                revert with 0, 50
                            mem[_15521 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_15521]:
                                revert with 0, 50
                            mem[_15521 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_15521 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_15521 + 100] = _15501
                            mem[_15521 + 132] = 64
                            mem[_15521 + 164] = mem[_15521]
                            idx = 0
                            s = _15521 + 32
                            t = _15521 + 196
                            while idx < mem[_15521]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _15521 + (32 * mem[_15521]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _18741 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _18759 = mem[_18741]
                            require mem[_18741] <= test266151307()
                            require _18741 + mem[_18741] + 31 < _18741 + return_data.size
                            _18775 = mem[_18741 + mem[_18741]]
                            if mem[_18741 + mem[_18741]] > test266151307():
                                revert with 0, 65
                            if _18741 + ceil32(return_data.size) + ceil32(32 * mem[_18741 + mem[_18741]]) + 1 > test266151307() or ceil32(32 * mem[_18741 + mem[_18741]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _18741 + ceil32(return_data.size) + ceil32(32 * mem[_18741 + mem[_18741]]) + 1
                            mem[_18741 + ceil32(return_data.size)] = _18775
                            require (32 * _18775) + _18759 + 32 <= return_data.size
                            mem[_18741 + ceil32(return_data.size) + 32 len ceil32(32 * _18775)] = mem[_18741 + _18759 + 32 len ceil32(32 * _18775)]
                            if 1 >= _18775:
                                revert with 0, 50
                            _21226 = mem[_18741 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18741 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18741 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21351 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21362 = mem[_21351]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _21226) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21351]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21671 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21734 = mem[_21671]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21901 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21901] > !_21734:
                                        revert with 0, 17
                                    if mem[_21901] + _21734 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21362 > -1 / mem[_21901] + _21734:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21901] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21362) + (_21734 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21362) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21672 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21736 = mem[_21672]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21902 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21902] > !_21736:
                                        revert with 0, 17
                                    if mem[_21902] + _21736 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21362 > -1 / mem[_21902] + _21736:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21902] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21362) + (_21736 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226) / _21362) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18741 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18741 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21394 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21450 = mem[_21394]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21394]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21869 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21960 = mem[_21869]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22125 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22125] > !_21960:
                                            revert with 0, 17
                                        if mem[_22125] + _21960 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450 > -1 / mem[_22125] + _21960:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22125] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450) + (_21960 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21870 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21962 = mem[_21870]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22126 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22126] > !_21962:
                                            revert with 0, 17
                                        if mem[_22126] + _21962 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450 > -1 / mem[_22126] + _21962:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22126] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450) + (_21962 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / 10^stor259) / _21450) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18741 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18741 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22830 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22840 = mem[_22830]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977) + (Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22830]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22950 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22983 = mem[_22950]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23080 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23080] > !_22983:
                                            revert with 0, 17
                                        if mem[_23080] + _22983 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840 > -1 / mem[_23080] + _22983:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23080] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840) + (_22983 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22951 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22985 = mem[_22951]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23081 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23081] > !_22985:
                                            revert with 0, 17
                                        if mem[_23081] + _22985 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840 > -1 / mem[_23081] + _22985:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23081] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840) + (_22985 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21226 / s * t) / _22840) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _8084 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8084]:
                                        revert with 0, 50
                                    mem[_8084 + 32] = token1Address
                                    if 1 >= mem[_8084]:
                                        revert with 0, 50
                                    mem[_8084 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8084 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8084 + 100] = 1
                                    mem[_8084 + 132] = 64
                                    mem[_8084 + 164] = mem[_8084]
                                    idx = 0
                                    s = _8084 + 32
                                    t = _8084 + 196
                                    while idx < mem[_8084]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8084 + (32 * mem[_8084]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11894 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11921 = mem[_11894]
                                    require mem[_11894] <= test266151307()
                                    require _11894 + mem[_11894] + 31 < _11894 + return_data.size
                                    _11937 = mem[_11894 + mem[_11894]]
                                    if mem[_11894 + mem[_11894]] > test266151307():
                                        revert with 0, 65
                                    if _11894 + ceil32(return_data.size) + ceil32(32 * mem[_11894 + mem[_11894]]) + 1 > test266151307() or ceil32(32 * mem[_11894 + mem[_11894]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _11894 + ceil32(return_data.size) + ceil32(32 * mem[_11894 + mem[_11894]]) + 1
                                    mem[_11894 + ceil32(return_data.size)] = _11937
                                    require (32 * _11937) + _11921 + 32 <= return_data.size
                                    mem[_11894 + ceil32(return_data.size) + 32 len ceil32(32 * _11937)] = mem[_11894 + _11921 + 32 len ceil32(32 * _11937)]
                                    if 1 >= _11937:
                                        revert with 0, 50
                                    _15494 = mem[_11894 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11894 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11894 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15791 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15810 = mem[_15791]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15494) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15791]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16052 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16109 = mem[_16052]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16273 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16273] > !_16109:
                                                revert with 0, 17
                                            if mem[_16273] + _16109 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15810 > -1 / mem[_16273] + _16109:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16273] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15810) + (_16109 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15810) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16053 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16111 = mem[_16053]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16274 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16274] > !_16111:
                                                revert with 0, 17
                                            if mem[_16274] + _16111 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15810 > -1 / mem[_16274] + _16111:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16274] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15810) + (_16111 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494) / _15810) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11894 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11894 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15864 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15892 = mem[_15864]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15864]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16236 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16315 = mem[_16236]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16513 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16513] > !_16315:
                                                    revert with 0, 17
                                                if mem[_16513] + _16315 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15892 > -1 / mem[_16513] + _16315:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16513] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15892) + (_16315 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15892) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16237 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16317 = mem[_16237]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16514 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16514] > !_16317:
                                                    revert with 0, 17
                                                if mem[_16514] + _16317 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15892 > -1 / mem[_16514] + _16317:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16514] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15892) + (_16317 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / 10^stor259) / _15892) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11894 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11894 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18864 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18878 = mem[_18864]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18864]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19074 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19115 = mem[_19074]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19273 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19273] > !_19115:
                                                    revert with 0, 17
                                                if mem[_19273] + _19115 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18878 > -1 / mem[_19273] + _19115:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19273] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18878) + (_19115 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18878) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19075 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19117 = mem[_19075]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19274 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19274] > !_19117:
                                                    revert with 0, 17
                                                if mem[_19274] + _19117 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18878 > -1 / mem[_19274] + _19117:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19274] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18878) + (_19117 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15494 / s * t) / _18878) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _8170 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_8170]:
                                            revert with 0, 50
                                        mem[_8170 + 32] = token1Address
                                        if 1 >= mem[_8170]:
                                            revert with 0, 50
                                        mem[_8170 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_8170 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_8170 + 100] = 10^stor259
                                        mem[_8170 + 132] = 64
                                        mem[_8170 + 164] = mem[_8170]
                                        idx = 0
                                        s = _8170 + 32
                                        t = _8170 + 196
                                        while idx < mem[_8170]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _8170 + (32 * mem[_8170]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11893 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _11920 = mem[_11893]
                                        require mem[_11893] <= test266151307()
                                        require _11893 + mem[_11893] + 31 < _11893 + return_data.size
                                        _11936 = mem[_11893 + mem[_11893]]
                                        if mem[_11893 + mem[_11893]] > test266151307():
                                            revert with 0, 65
                                        if _11893 + ceil32(return_data.size) + ceil32(32 * mem[_11893 + mem[_11893]]) + 1 > test266151307() or ceil32(32 * mem[_11893 + mem[_11893]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _11893 + ceil32(return_data.size) + ceil32(32 * mem[_11893 + mem[_11893]]) + 1
                                        mem[_11893 + ceil32(return_data.size)] = _11936
                                        require (32 * _11936) + _11920 + 32 <= return_data.size
                                        mem[_11893 + ceil32(return_data.size) + 32 len ceil32(32 * _11936)] = mem[_11893 + _11920 + 32 len ceil32(32 * _11936)]
                                        if 1 >= _11936:
                                            revert with 0, 50
                                        _15493 = mem[_11893 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11893 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11893 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15790 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15809 = mem[_15790]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15493) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15790]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16050 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16106 = mem[_16050]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16271 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16271] > !_16106:
                                                    revert with 0, 17
                                                if mem[_16271] + _16106 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15809 > -1 / mem[_16271] + _16106:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16271] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15809) + (_16106 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15809) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16051 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16108 = mem[_16051]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16272 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16272] > !_16108:
                                                    revert with 0, 17
                                                if mem[_16272] + _16108 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15809 > -1 / mem[_16272] + _16108:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16272] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15809) + (_16108 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493) / _15809) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11893 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11893 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15863 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _15889 = mem[_15863]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_15863]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16234 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _16308 = mem[_16234]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16508 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16508] > !_16308:
                                                        revert with 0, 17
                                                    if mem[_16508] + _16308 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15889 > -1 / mem[_16508] + _16308:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16508] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15889) + (_16308 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15889) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16235 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _16310 = mem[_16235]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16509 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16509] > !_16310:
                                                        revert with 0, 17
                                                    if mem[_16509] + _16310 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15889 > -1 / mem[_16509] + _16310:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16509] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15889) + (_16310 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / 10^stor259) / _15889) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11893 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11893 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18863 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _18877 = mem[_18863]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18863]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19072 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19112 = mem[_19072]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19271 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19271] > !_19112:
                                                        revert with 0, 17
                                                    if mem[_19271] + _19112 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18877 > -1 / mem[_19271] + _19112:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19271] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18877) + (_19112 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18877) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19073 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19114 = mem[_19073]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19272 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19272] > !_19114:
                                                        revert with 0, 17
                                                    if mem[_19272] + _19114 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18877 > -1 / mem[_19272] + _19114:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19272] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18877) + (_19114 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15493 / s * t) / _18877) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _11911 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_11911]:
                                            revert with 0, 50
                                        mem[_11911 + 32] = token1Address
                                        if 1 >= mem[_11911]:
                                            revert with 0, 50
                                        mem[_11911 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_11911 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_11911 + 100] = s * t
                                        mem[_11911 + 132] = 64
                                        mem[_11911 + 164] = mem[_11911]
                                        idx = 0
                                        s = _11911 + 32
                                        t = _11911 + 196
                                        while idx < mem[_11911]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _11911 + (32 * mem[_11911]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15542 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15575 = mem[_15542]
                                        require mem[_15542] <= test266151307()
                                        require _15542 + mem[_15542] + 31 < _15542 + return_data.size
                                        _15599 = mem[_15542 + mem[_15542]]
                                        if mem[_15542 + mem[_15542]] > test266151307():
                                            revert with 0, 65
                                        if _15542 + ceil32(return_data.size) + ceil32(32 * mem[_15542 + mem[_15542]]) + 1 > test266151307() or ceil32(32 * mem[_15542 + mem[_15542]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _15542 + ceil32(return_data.size) + ceil32(32 * mem[_15542 + mem[_15542]]) + 1
                                        mem[_15542 + ceil32(return_data.size)] = _15599
                                        require (32 * _15599) + _15575 + 32 <= return_data.size
                                        mem[_15542 + ceil32(return_data.size) + 32 len ceil32(32 * _15599)] = mem[_15542 + _15575 + 32 len ceil32(32 * _15599)]
                                        if 1 >= _15599:
                                            revert with 0, 50
                                        _18707 = mem[_15542 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15542 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15542 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18924 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18940 = mem[_18924]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18707) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18924]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19253 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19321 = mem[_19253]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19523 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19523] > !_19321:
                                                    revert with 0, 17
                                                if mem[_19523] + _19321 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18940 > -1 / mem[_19523] + _19321:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19523] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18940) + (_19321 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18940) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19254 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19323 = mem[_19254]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19524 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19524] > !_19323:
                                                    revert with 0, 17
                                                if mem[_19524] + _19323 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18940 > -1 / mem[_19524] + _19323:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19524] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18940) + (_19323 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18940) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15542 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15542 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18988 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19016 = mem[_18988]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18988]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19484 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19602 = mem[_19484]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19821 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19821] > !_19602:
                                                        revert with 0, 17
                                                    if mem[_19821] + _19602 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016 > -1 / mem[_19821] + _19602:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19821] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016) + (_19602 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19485 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19604 = mem[_19485]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19822 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19822] > !_19604:
                                                        revert with 0, 17
                                                    if mem[_19822] + _19604 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016 > -1 / mem[_19822] + _19604:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19822] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016) + (_19604 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19016) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15542 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15542 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21305 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21318 = mem[_21305]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21305]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21493 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21541 = mem[_21493]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21695 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21695] > !_21541:
                                                        revert with 0, 17
                                                    if mem[_21695] + _21541 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318 > -1 / mem[_21695] + _21541:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21695] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318) + (_21541 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21494 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21543 = mem[_21494]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21696 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21696] > !_21543:
                                                        revert with 0, 17
                                                    if mem[_21696] + _21543 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318 > -1 / mem[_21696] + _21543:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21696] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318) + (_21543 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / s * t) / _21318) / 10^18
                            else:
                                _8026 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8026]:
                                    revert with 0, 50
                                mem[_8026 + 32] = token1Address
                                if 1 >= mem[_8026]:
                                    revert with 0, 50
                                mem[_8026 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_8026 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8026 + 100] = 10^18
                                mem[_8026 + 132] = 64
                                mem[_8026 + 164] = mem[_8026]
                                idx = 0
                                s = _8026 + 32
                                t = _8026 + 196
                                while idx < mem[_8026]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8026 + (32 * mem[_8026]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11895 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11922 = mem[_11895]
                                require mem[_11895] <= test266151307()
                                require _11895 + mem[_11895] + 31 < _11895 + return_data.size
                                _11938 = mem[_11895 + mem[_11895]]
                                if mem[_11895 + mem[_11895]] > test266151307():
                                    revert with 0, 65
                                if _11895 + ceil32(return_data.size) + ceil32(32 * mem[_11895 + mem[_11895]]) + 1 > test266151307() or ceil32(32 * mem[_11895 + mem[_11895]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _11895 + ceil32(return_data.size) + ceil32(32 * mem[_11895 + mem[_11895]]) + 1
                                mem[_11895 + ceil32(return_data.size)] = _11938
                                require (32 * _11938) + _11922 + 32 <= return_data.size
                                mem[_11895 + ceil32(return_data.size) + 32 len ceil32(32 * _11938)] = mem[_11895 + _11922 + 32 len ceil32(32 * _11938)]
                                if 1 >= _11938:
                                    revert with 0, 50
                                _15495 = mem[_11895 + ceil32(return_data.size) + 64]
                                _15519 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_15519]:
                                    revert with 0, 50
                                mem[_15519 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_15519]:
                                    revert with 0, 50
                                mem[_15519 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_15519 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_15519 + 100] = _15495
                                mem[_15519 + 132] = 64
                                mem[_15519 + 164] = mem[_15519]
                                idx = 0
                                s = _15519 + 32
                                t = _15519 + 196
                                while idx < mem[_15519]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _15519 + (32 * mem[_15519]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _18740 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _18758 = mem[_18740]
                                require mem[_18740] <= test266151307()
                                require _18740 + mem[_18740] + 31 < _18740 + return_data.size
                                _18774 = mem[_18740 + mem[_18740]]
                                if mem[_18740 + mem[_18740]] > test266151307():
                                    revert with 0, 65
                                if _18740 + ceil32(return_data.size) + ceil32(32 * mem[_18740 + mem[_18740]]) + 1 > test266151307() or ceil32(32 * mem[_18740 + mem[_18740]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _18740 + ceil32(return_data.size) + ceil32(32 * mem[_18740 + mem[_18740]]) + 1
                                mem[_18740 + ceil32(return_data.size)] = _18774
                                require (32 * _18774) + _18758 + 32 <= return_data.size
                                mem[_18740 + ceil32(return_data.size) + 32 len ceil32(32 * _18774)] = mem[_18740 + _18758 + 32 len ceil32(32 * _18774)]
                                if 1 >= _18774:
                                    revert with 0, 50
                                _21225 = mem[_18740 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18740 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18740 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21350 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21361 = mem[_21350]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21225) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21350]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21669 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21731 = mem[_21669]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21899 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_21899] > !_21731:
                                            revert with 0, 17
                                        if mem[_21899] + _21731 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21361 > -1 / mem[_21899] + _21731:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_21899] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21361) + (_21731 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21361) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21670 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21733 = mem[_21670]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21900 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_21900] > !_21733:
                                            revert with 0, 17
                                        if mem[_21900] + _21733 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21361 > -1 / mem[_21900] + _21733:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_21900] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21361) + (_21733 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21361) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18740 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18740 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21393 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21443 = mem[_21393]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21393]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21867 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21953 = mem[_21867]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22120 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22120] > !_21953:
                                                revert with 0, 17
                                            if mem[_22120] + _21953 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443 > -1 / mem[_22120] + _21953:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22120] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443) + (_21953 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21868 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21955 = mem[_21868]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22121 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22121] > !_21955:
                                                revert with 0, 17
                                            if mem[_22121] + _21955 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443 > -1 / mem[_22121] + _21955:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22121] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443) + (_21955 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21443) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18740 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18740 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22829 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22839 = mem[_22829]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22829]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22948 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22980 = mem[_22948]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23078 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23078] > !_22980:
                                                revert with 0, 17
                                            if mem[_23078] + _22980 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839 > -1 / mem[_23078] + _22980:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23078] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839) + (_22980 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22949 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22982 = mem[_22949]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23079 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23079] > !_22982:
                                                revert with 0, 17
                                            if mem[_23079] + _22982 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839 > -1 / mem[_23079] + _22982:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23079] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839) + (_22982 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22839) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12064 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12064]:
                                        revert with 0, 50
                                    mem[_12064 + 32] = token1Address
                                    if 1 >= mem[_12064]:
                                        revert with 0, 50
                                    mem[_12064 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12064 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12064 + 100] = 1
                                    mem[_12064 + 132] = 64
                                    mem[_12064 + 164] = mem[_12064]
                                    idx = 0
                                    u = _12064 + 32
                                    v = _12064 + 196
                                    while idx < mem[_12064]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12064 + (32 * mem[_12064]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15540 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15573 = mem[_15540]
                                    require mem[_15540] <= test266151307()
                                    require _15540 + mem[_15540] + 31 < _15540 + return_data.size
                                    _15597 = mem[_15540 + mem[_15540]]
                                    if mem[_15540 + mem[_15540]] > test266151307():
                                        revert with 0, 65
                                    if _15540 + ceil32(return_data.size) + ceil32(32 * mem[_15540 + mem[_15540]]) + 1 > test266151307() or ceil32(32 * mem[_15540 + mem[_15540]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15540 + ceil32(return_data.size) + ceil32(32 * mem[_15540 + mem[_15540]]) + 1
                                    mem[_15540 + ceil32(return_data.size)] = _15597
                                    require (32 * _15597) + _15573 + 32 <= return_data.size
                                    mem[_15540 + ceil32(return_data.size) + 32 len ceil32(32 * _15597)] = mem[_15540 + _15573 + 32 len ceil32(32 * _15597)]
                                    if 1 >= _15597:
                                        revert with 0, 50
                                    _18703 = mem[_15540 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15540 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15540 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18923 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18938 = mem[_18923]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18703) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18923]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19251 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19318 = mem[_19251]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19521 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19521] > !_19318:
                                                revert with 0, 17
                                            if mem[_19521] + _19318 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18938 > -1 / mem[_19521] + _19318:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19521] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18938) + (_19318 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18938) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19252 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19320 = mem[_19252]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19522 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19522] > !_19320:
                                                revert with 0, 17
                                            if mem[_19522] + _19320 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18938 > -1 / mem[_19522] + _19320:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19522] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18938) + (_19320 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703) / _18938) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15540 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15540 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18987 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19013 = mem[_18987]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18987]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19482 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19593 = mem[_19482]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19815 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19815] > !_19593:
                                                    revert with 0, 17
                                                if mem[_19815] + _19593 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013 > -1 / mem[_19815] + _19593:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19815] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013) + (_19593 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19483 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19595 = mem[_19483]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19816 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19816] > !_19595:
                                                    revert with 0, 17
                                                if mem[_19816] + _19595 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013 > -1 / mem[_19816] + _19595:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19816] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013) + (_19595 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / 10^stor259) / _19013) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15540 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15540 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21304 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21317 = mem[_21304]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21304]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21491 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21536 = mem[_21491]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21692 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21692] > !_21536:
                                                    revert with 0, 17
                                                if mem[_21692] + _21536 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317 > -1 / mem[_21692] + _21536:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21692] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317) + (_21536 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21492 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21538 = mem[_21492]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21693 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21693] > !_21538:
                                                    revert with 0, 17
                                                if mem[_21693] + _21538 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317 > -1 / mem[_21693] + _21538:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21693] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317) + (_21538 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18703 / u * v) / _21317) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12123 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12123]:
                                            revert with 0, 50
                                        mem[_12123 + 32] = token1Address
                                        if 1 >= mem[_12123]:
                                            revert with 0, 50
                                        mem[_12123 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12123 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12123 + 100] = 10^stor259
                                        mem[_12123 + 132] = 64
                                        mem[_12123 + 164] = mem[_12123]
                                        idx = 0
                                        u = _12123 + 32
                                        v = _12123 + 196
                                        while idx < mem[_12123]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12123 + (32 * mem[_12123]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15539 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15572 = mem[_15539]
                                        require mem[_15539] <= test266151307()
                                        require _15539 + mem[_15539] + 31 < _15539 + return_data.size
                                        _15596 = mem[_15539 + mem[_15539]]
                                        if mem[_15539 + mem[_15539]] > test266151307():
                                            revert with 0, 65
                                        if _15539 + ceil32(return_data.size) + ceil32(32 * mem[_15539 + mem[_15539]]) + 1 > test266151307() or ceil32(32 * mem[_15539 + mem[_15539]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _15539 + ceil32(return_data.size) + ceil32(32 * mem[_15539 + mem[_15539]]) + 1
                                        mem[_15539 + ceil32(return_data.size)] = _15596
                                        require (32 * _15596) + _15572 + 32 <= return_data.size
                                        mem[_15539 + ceil32(return_data.size) + 32 len ceil32(32 * _15596)] = mem[_15539 + _15572 + 32 len ceil32(32 * _15596)]
                                        if 1 >= _15596:
                                            revert with 0, 50
                                        _18702 = mem[_15539 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18922 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18937 = mem[_18922]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18702) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18922]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19249 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19315 = mem[_19249]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19519 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19519] > !_19315:
                                                    revert with 0, 17
                                                if mem[_19519] + _19315 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18937 > -1 / mem[_19519] + _19315:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19519] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18937) + (_19315 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18937) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19250 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19317 = mem[_19250]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19520 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19520] > !_19317:
                                                    revert with 0, 17
                                                if mem[_19520] + _19317 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18937 > -1 / mem[_19520] + _19317:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19520] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18937) + (_19317 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702) / _18937) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18986 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19010 = mem[_18986]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18986]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19480 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19586 = mem[_19480]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19810 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19810] > !_19586:
                                                        revert with 0, 17
                                                    if mem[_19810] + _19586 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010 > -1 / mem[_19810] + _19586:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19810] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010) + (_19586 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19481 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19588 = mem[_19481]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19811 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19811] > !_19588:
                                                        revert with 0, 17
                                                    if mem[_19811] + _19588 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010 > -1 / mem[_19811] + _19588:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19811] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010) + (_19588 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / 10^stor259) / _19010) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21303 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21316 = mem[_21303]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21303]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21489 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21533 = mem[_21489]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21690 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21690] > !_21533:
                                                        revert with 0, 17
                                                    if mem[_21690] + _21533 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316 > -1 / mem[_21690] + _21533:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21690] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316) + (_21533 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21490 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21535 = mem[_21490]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21691 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21691] > !_21535:
                                                        revert with 0, 17
                                                    if mem[_21691] + _21535 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316 > -1 / mem[_21691] + _21535:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21691] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316) + (_21535 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18702 / u * v) / _21316) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _15559 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15559]:
                                            revert with 0, 50
                                        mem[_15559 + 32] = token1Address
                                        if 1 >= mem[_15559]:
                                            revert with 0, 50
                                        mem[_15559 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15559 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15559 + 100] = u * v
                                        mem[_15559 + 132] = 64
                                        mem[_15559 + 164] = mem[_15559]
                                        idx = 0
                                        u = _15559 + 32
                                        v = _15559 + 196
                                        while idx < mem[_15559]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15559 + (32 * mem[_15559]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18738 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18756 = mem[_18738]
                                        require mem[_18738] <= test266151307()
                                        require _18738 + mem[_18738] + 31 < _18738 + return_data.size
                                        _18772 = mem[_18738 + mem[_18738]]
                                        if mem[_18738 + mem[_18738]] > test266151307():
                                            revert with 0, 65
                                        if _18738 + ceil32(return_data.size) + ceil32(32 * mem[_18738 + mem[_18738]]) + 1 > test266151307() or ceil32(32 * mem[_18738 + mem[_18738]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _18738 + ceil32(return_data.size) + ceil32(32 * mem[_18738 + mem[_18738]]) + 1
                                        mem[_18738 + ceil32(return_data.size)] = _18772
                                        require (32 * _18772) + _18756 + 32 <= return_data.size
                                        mem[_18738 + ceil32(return_data.size) + 32 len ceil32(32 * _18772)] = mem[_18738 + _18756 + 32 len ceil32(32 * _18772)]
                                        if 1 >= _18772:
                                            revert with 0, 50
                                        _21223 = mem[_18738 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18738 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18738 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21349 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21360 = mem[_21349]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21223) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21349]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21667 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21726 = mem[_21667]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21894 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21894] > !_21726:
                                                    revert with 0, 17
                                                if mem[_21894] + _21726 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21360 > -1 / mem[_21894] + _21726:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21894] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21360) + (_21726 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21360) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21668 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21728 = mem[_21668]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21895 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21895] > !_21728:
                                                    revert with 0, 17
                                                if mem[_21895] + _21728 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21360 > -1 / mem[_21895] + _21728:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21895] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21360) + (_21728 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21360) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18738 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18738 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21392 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21428 = mem[_21392]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21392]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21865 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21946 = mem[_21865]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22111 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22111] > !_21946:
                                                        revert with 0, 17
                                                    if mem[_22111] + _21946 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428 > -1 / mem[_22111] + _21946:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22111] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428) + (_21946 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21866 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21948 = mem[_21866]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22112 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22112] > !_21948:
                                                        revert with 0, 17
                                                    if mem[_22112] + _21948 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428 > -1 / mem[_22112] + _21948:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22112] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428) + (_21948 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21428) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18738 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18738 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22828 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22838 = mem[_22828]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22828]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22945 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22976 = mem[_22945]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23076 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23076] > !_22976:
                                                        revert with 0, 17
                                                    if mem[_23076] + _22976 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838 > -1 / mem[_23076] + _22976:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23076] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838) + (_22976 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22946 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22978 = mem[_22946]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23077 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23077] > !_22978:
                                                        revert with 0, 17
                                                    if mem[_23077] + _22978 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838 > -1 / mem[_23077] + _22978:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23077] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838) + (_22978 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / u * v) / _22838) / 10^18
                            else:
                                _11967 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_11967]:
                                    revert with 0, 50
                                mem[_11967 + 32] = token1Address
                                if 1 >= mem[_11967]:
                                    revert with 0, 50
                                mem[_11967 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_11967 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_11967 + 100] = 10^18
                                mem[_11967 + 132] = 64
                                mem[_11967 + 164] = mem[_11967]
                                idx = 0
                                u = _11967 + 32
                                v = _11967 + 196
                                while idx < mem[_11967]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _11967 + (32 * mem[_11967]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15541 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15574 = mem[_15541]
                                require mem[_15541] <= test266151307()
                                require _15541 + mem[_15541] + 31 < _15541 + return_data.size
                                _15598 = mem[_15541 + mem[_15541]]
                                if mem[_15541 + mem[_15541]] > test266151307():
                                    revert with 0, 65
                                if _15541 + ceil32(return_data.size) + ceil32(32 * mem[_15541 + mem[_15541]]) + 1 > test266151307() or ceil32(32 * mem[_15541 + mem[_15541]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15541 + ceil32(return_data.size) + ceil32(32 * mem[_15541 + mem[_15541]]) + 1
                                mem[_15541 + ceil32(return_data.size)] = _15598
                                require (32 * _15598) + _15574 + 32 <= return_data.size
                                mem[_15541 + ceil32(return_data.size) + 32 len ceil32(32 * _15598)] = mem[_15541 + _15574 + 32 len ceil32(32 * _15598)]
                                if 1 >= _15598:
                                    revert with 0, 50
                                _18704 = mem[_15541 + ceil32(return_data.size) + 64]
                                _18725 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_18725]:
                                    revert with 0, 50
                                mem[_18725 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_18725]:
                                    revert with 0, 50
                                mem[_18725 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_18725 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_18725 + 100] = _18704
                                mem[_18725 + 132] = 64
                                mem[_18725 + 164] = mem[_18725]
                                idx = 0
                                u = _18725 + 32
                                v = _18725 + 196
                                while idx < mem[_18725]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _18725 + (32 * mem[_18725]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21237 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21243 = mem[_21237]
                                require mem[_21237] <= test266151307()
                                require _21237 + mem[_21237] + 31 < _21237 + return_data.size
                                _21249 = mem[_21237 + mem[_21237]]
                                if mem[_21237 + mem[_21237]] > test266151307():
                                    revert with 0, 65
                                if _21237 + ceil32(return_data.size) + ceil32(32 * mem[_21237 + mem[_21237]]) + 1 > test266151307() or ceil32(32 * mem[_21237 + mem[_21237]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _21237 + ceil32(return_data.size) + ceil32(32 * mem[_21237 + mem[_21237]]) + 1
                                mem[_21237 + ceil32(return_data.size)] = _21249
                                require (32 * _21249) + _21243 + 32 <= return_data.size
                                mem[_21237 + ceil32(return_data.size) + 32 len ceil32(32 * _21249)] = mem[_21237 + _21243 + 32 len ceil32(32 * _21249)]
                                if 1 >= _21249:
                                    revert with 0, 50
                                _22795 = mem[_21237 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21237 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21237 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22857 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22862 = mem[_22857]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22795) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22857]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23063 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23099 = mem[_23063]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23185 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23185] > !_23099:
                                            revert with 0, 17
                                        if mem[_23185] + _23099 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862 > -1 / mem[_23185] + _23099:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23185] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862) + (_23099 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23064 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23101 = mem[_23064]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23186 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23186] > !_23101:
                                            revert with 0, 17
                                        if mem[_23186] + _23101 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862 > -1 / mem[_23186] + _23101:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23186] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862) + (_23101 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22862) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21237 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21237 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22877 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22910 = mem[_22877]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22877]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23172 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23214 = mem[_23172]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23288 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23288] > !_23214:
                                                revert with 0, 17
                                            if mem[_23288] + _23214 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910 > -1 / mem[_23288] + _23214:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23288] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910) + (_23214 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23173 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23216 = mem[_23173]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23289 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23289] > !_23216:
                                                revert with 0, 17
                                            if mem[_23289] + _23216 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910 > -1 / mem[_23289] + _23216:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23289] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910) + (_23216 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22910) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21237 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21237 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23520 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23525 = mem[_23520]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23520]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23564 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23578 = mem[_23564]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23616 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23616] > !_23578:
                                                revert with 0, 17
                                            if mem[_23616] + _23578 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525 > -1 / mem[_23616] + _23578:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23616] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525) + (_23578 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23565 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23580 = mem[_23565]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23617 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23617] > !_23580:
                                                revert with 0, 17
                                            if mem[_23617] + _23580 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525 > -1 / mem[_23617] + _23580:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23617] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525) + (_23580 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7977 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23525) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[ceil32(return_data.size) + 96] = 2
                    mem[ceil32(return_data.size) + 128] = token0Address
                    mem[ceil32(return_data.size) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[ceil32(return_data.size) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(return_data.size) + 196] = s * t
                    mem[ceil32(return_data.size) + 228] = 64
                    mem[ceil32(return_data.size) + 260] = 2
                    idx = 0
                    u = ceil32(return_data.size) + 128
                    v = ceil32(return_data.size) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[ceil32(return_data.size) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (2 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _7988 = mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < ceil32(return_data.size) + return_data.size + 192
                    _7991 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(2 * ceil32(return_data.size)) + 192] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require (32 * _7991) + _7988 + 32 <= return_data.size
                    mem[(2 * ceil32(return_data.size)) + 224 len ceil32(32 * _7991)] = mem[ceil32(return_data.size) + _7988 + 224 len ceil32(32 * _7991)]
                    if 1 >= _7991:
                        revert with 0, 50
                    _11876 = mem[(2 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12113 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12113]:
                                    revert with 0, 50
                                mem[_12113 + 32] = token1Address
                                if 1 >= mem[_12113]:
                                    revert with 0, 50
                                mem[_12113 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12113 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12113 + 100] = 1
                                mem[_12113 + 132] = 64
                                mem[_12113 + 164] = mem[_12113]
                                idx = 0
                                s = _12113 + 32
                                t = _12113 + 196
                                while idx < mem[_12113]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12113 + (32 * mem[_12113]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15535 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15569 = mem[_15535]
                                require mem[_15535] <= test266151307()
                                require _15535 + mem[_15535] + 31 < _15535 + return_data.size
                                _15593 = mem[_15535 + mem[_15535]]
                                if mem[_15535 + mem[_15535]] > test266151307():
                                    revert with 0, 65
                                if _15535 + ceil32(return_data.size) + ceil32(32 * mem[_15535 + mem[_15535]]) + 1 > test266151307() or ceil32(32 * mem[_15535 + mem[_15535]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15535 + ceil32(return_data.size) + ceil32(32 * mem[_15535 + mem[_15535]]) + 1
                                mem[_15535 + ceil32(return_data.size)] = _15593
                                require (32 * _15593) + _15569 + 32 <= return_data.size
                                mem[_15535 + ceil32(return_data.size) + 32 len ceil32(32 * _15593)] = mem[_15535 + _15569 + 32 len ceil32(32 * _15593)]
                                if 1 >= _15593:
                                    revert with 0, 50
                                _18697 = mem[_15535 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15535 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15535 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18921 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18935 = mem[_18921]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18697) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18921]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19247 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19310 = mem[_19247]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19514 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19514] > !_19310:
                                            revert with 0, 17
                                        if mem[_19514] + _19310 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18935 > -1 / mem[_19514] + _19310:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19514] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18935) + (_19310 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18935) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19248 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19312 = mem[_19248]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19515 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19515] > !_19312:
                                            revert with 0, 17
                                        if mem[_19515] + _19312 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18935 > -1 / mem[_19515] + _19312:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19515] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18935) + (_19312 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697) / _18935) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15535 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15535 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18985 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19007 = mem[_18985]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18985]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19478 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19577 = mem[_19478]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19800 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19800] > !_19577:
                                                revert with 0, 17
                                            if mem[_19800] + _19577 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19007 > -1 / mem[_19800] + _19577:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19800] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19007) + (_19577 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19007) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19479 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19579 = mem[_19479]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19801 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19801] > !_19579:
                                                revert with 0, 17
                                            if mem[_19801] + _19579 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19007 > -1 / mem[_19801] + _19579:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19801] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19007) + (_19579 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / 10^stor259) / _19007) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15535 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15535 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21302 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21315 = mem[_21302]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21302]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21486 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21527 = mem[_21486]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21687 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21687] > !_21527:
                                                revert with 0, 17
                                            if mem[_21687] + _21527 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315 > -1 / mem[_21687] + _21527:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21687] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315) + (_21527 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21487 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21529 = mem[_21487]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21688 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21688] > !_21529:
                                                revert with 0, 17
                                            if mem[_21688] + _21529 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315 > -1 / mem[_21688] + _21529:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21688] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315) + (_21529 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18697 / s * t) / _21315) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12178 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12178]:
                                        revert with 0, 50
                                    mem[_12178 + 32] = token1Address
                                    if 1 >= mem[_12178]:
                                        revert with 0, 50
                                    mem[_12178 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12178 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12178 + 100] = 10^stor259
                                    mem[_12178 + 132] = 64
                                    mem[_12178 + 164] = mem[_12178]
                                    idx = 0
                                    s = _12178 + 32
                                    t = _12178 + 196
                                    while idx < mem[_12178]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12178 + (32 * mem[_12178]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15534 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15568 = mem[_15534]
                                    require mem[_15534] <= test266151307()
                                    require _15534 + mem[_15534] + 31 < _15534 + return_data.size
                                    _15592 = mem[_15534 + mem[_15534]]
                                    if mem[_15534 + mem[_15534]] > test266151307():
                                        revert with 0, 65
                                    if _15534 + ceil32(return_data.size) + ceil32(32 * mem[_15534 + mem[_15534]]) + 1 > test266151307() or ceil32(32 * mem[_15534 + mem[_15534]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15534 + ceil32(return_data.size) + ceil32(32 * mem[_15534 + mem[_15534]]) + 1
                                    mem[_15534 + ceil32(return_data.size)] = _15592
                                    require (32 * _15592) + _15568 + 32 <= return_data.size
                                    mem[_15534 + ceil32(return_data.size) + 32 len ceil32(32 * _15592)] = mem[_15534 + _15568 + 32 len ceil32(32 * _15592)]
                                    if 1 >= _15592:
                                        revert with 0, 50
                                    _18696 = mem[_15534 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18920 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18934 = mem[_18920]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18696) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18920]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19245 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19307 = mem[_19245]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19512 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19512] > !_19307:
                                                revert with 0, 17
                                            if mem[_19512] + _19307 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18934 > -1 / mem[_19512] + _19307:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19512] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18934) + (_19307 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18934) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19246 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19309 = mem[_19246]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19513 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19513] > !_19309:
                                                revert with 0, 17
                                            if mem[_19513] + _19309 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18934 > -1 / mem[_19513] + _19309:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19513] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18934) + (_19309 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696) / _18934) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18984 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19004 = mem[_18984]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18984]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19476 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19570 = mem[_19476]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19795 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19795] > !_19570:
                                                    revert with 0, 17
                                                if mem[_19795] + _19570 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19004 > -1 / mem[_19795] + _19570:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19795] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19004) + (_19570 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19004) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19477 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19572 = mem[_19477]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19796 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19796] > !_19572:
                                                    revert with 0, 17
                                                if mem[_19796] + _19572 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19004 > -1 / mem[_19796] + _19572:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19796] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19004) + (_19572 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / 10^stor259) / _19004) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21301 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21314 = mem[_21301]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21301]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21484 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21524 = mem[_21484]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21685 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21685] > !_21524:
                                                    revert with 0, 17
                                                if mem[_21685] + _21524 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314 > -1 / mem[_21685] + _21524:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21685] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314) + (_21524 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21485 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21526 = mem[_21485]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21686 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21686] > !_21526:
                                                    revert with 0, 17
                                                if mem[_21686] + _21526 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314 > -1 / mem[_21686] + _21526:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21686] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314) + (_21526 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18696 / s * t) / _21314) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _15557 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15557]:
                                        revert with 0, 50
                                    mem[_15557 + 32] = token1Address
                                    if 1 >= mem[_15557]:
                                        revert with 0, 50
                                    mem[_15557 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15557 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15557 + 100] = s * t
                                    mem[_15557 + 132] = 64
                                    mem[_15557 + 164] = mem[_15557]
                                    idx = 0
                                    s = _15557 + 32
                                    t = _15557 + 196
                                    while idx < mem[_15557]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15557 + (32 * mem[_15557]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18736 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18754 = mem[_18736]
                                    require mem[_18736] <= test266151307()
                                    require _18736 + mem[_18736] + 31 < _18736 + return_data.size
                                    _18770 = mem[_18736 + mem[_18736]]
                                    if mem[_18736 + mem[_18736]] > test266151307():
                                        revert with 0, 65
                                    if _18736 + ceil32(return_data.size) + ceil32(32 * mem[_18736 + mem[_18736]]) + 1 > test266151307() or ceil32(32 * mem[_18736 + mem[_18736]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _18736 + ceil32(return_data.size) + ceil32(32 * mem[_18736 + mem[_18736]]) + 1
                                    mem[_18736 + ceil32(return_data.size)] = _18770
                                    require (32 * _18770) + _18754 + 32 <= return_data.size
                                    mem[_18736 + ceil32(return_data.size) + 32 len ceil32(32 * _18770)] = mem[_18736 + _18754 + 32 len ceil32(32 * _18770)]
                                    if 1 >= _18770:
                                        revert with 0, 50
                                    _21221 = mem[_18736 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18736 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18736 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21348 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21359 = mem[_21348]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _21221) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21348]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21665 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21721 = mem[_21665]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21889 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21889] > !_21721:
                                                revert with 0, 17
                                            if mem[_21889] + _21721 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21359 > -1 / mem[_21889] + _21721:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21889] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21359) + (_21721 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21359) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21666 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21723 = mem[_21666]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21890 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21890] > !_21723:
                                                revert with 0, 17
                                            if mem[_21890] + _21723 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21359 > -1 / mem[_21890] + _21723:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21890] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21359) + (_21723 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221) / _21359) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18736 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18736 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21391 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21417 = mem[_21391]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21391]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21863 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21939 = mem[_21863]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22102 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22102] > !_21939:
                                                    revert with 0, 17
                                                if mem[_22102] + _21939 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417 > -1 / mem[_22102] + _21939:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22102] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417) + (_21939 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21864 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21941 = mem[_21864]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22103 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22103] > !_21941:
                                                    revert with 0, 17
                                                if mem[_22103] + _21941 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417 > -1 / mem[_22103] + _21941:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22103] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417) + (_21941 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / 10^stor259) / _21417) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18736 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18736 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22827 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22837 = mem[_22827]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22827]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22942 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22972 = mem[_22942]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23074 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23074] > !_22972:
                                                    revert with 0, 17
                                                if mem[_23074] + _22972 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837 > -1 / mem[_23074] + _22972:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23074] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837) + (_22972 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22943 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22974 = mem[_22943]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23075 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23075] > !_22974:
                                                    revert with 0, 17
                                                if mem[_23075] + _22974 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837 > -1 / mem[_23075] + _22974:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23075] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837) + (_22974 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21221 / s * t) / _22837) / 10^18
                        else:
                            _12035 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_12035]:
                                revert with 0, 50
                            mem[_12035 + 32] = token1Address
                            if 1 >= mem[_12035]:
                                revert with 0, 50
                            mem[_12035 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_12035 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_12035 + 100] = 10^18
                            mem[_12035 + 132] = 64
                            mem[_12035 + 164] = mem[_12035]
                            idx = 0
                            s = _12035 + 32
                            t = _12035 + 196
                            while idx < mem[_12035]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _12035 + (32 * mem[_12035]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15536 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15570 = mem[_15536]
                            require mem[_15536] <= test266151307()
                            require _15536 + mem[_15536] + 31 < _15536 + return_data.size
                            _15594 = mem[_15536 + mem[_15536]]
                            if mem[_15536 + mem[_15536]] > test266151307():
                                revert with 0, 65
                            if _15536 + ceil32(return_data.size) + ceil32(32 * mem[_15536 + mem[_15536]]) + 1 > test266151307() or ceil32(32 * mem[_15536 + mem[_15536]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _15536 + ceil32(return_data.size) + ceil32(32 * mem[_15536 + mem[_15536]]) + 1
                            mem[_15536 + ceil32(return_data.size)] = _15594
                            require (32 * _15594) + _15570 + 32 <= return_data.size
                            mem[_15536 + ceil32(return_data.size) + 32 len ceil32(32 * _15594)] = mem[_15536 + _15570 + 32 len ceil32(32 * _15594)]
                            if 1 >= _15594:
                                revert with 0, 50
                            _18698 = mem[_15536 + ceil32(return_data.size) + 64]
                            _18723 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_18723]:
                                revert with 0, 50
                            mem[_18723 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_18723]:
                                revert with 0, 50
                            mem[_18723 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_18723 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_18723 + 100] = _18698
                            mem[_18723 + 132] = 64
                            mem[_18723 + 164] = mem[_18723]
                            idx = 0
                            s = _18723 + 32
                            t = _18723 + 196
                            while idx < mem[_18723]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _18723 + (32 * mem[_18723]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21236 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21242 = mem[_21236]
                            require mem[_21236] <= test266151307()
                            require _21236 + mem[_21236] + 31 < _21236 + return_data.size
                            _21248 = mem[_21236 + mem[_21236]]
                            if mem[_21236 + mem[_21236]] > test266151307():
                                revert with 0, 65
                            if _21236 + ceil32(return_data.size) + ceil32(32 * mem[_21236 + mem[_21236]]) + 1 > test266151307() or ceil32(32 * mem[_21236 + mem[_21236]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _21236 + ceil32(return_data.size) + ceil32(32 * mem[_21236 + mem[_21236]]) + 1
                            mem[_21236 + ceil32(return_data.size)] = _21248
                            require (32 * _21248) + _21242 + 32 <= return_data.size
                            mem[_21236 + ceil32(return_data.size) + 32 len ceil32(32 * _21248)] = mem[_21236 + _21242 + 32 len ceil32(32 * _21248)]
                            if 1 >= _21248:
                                revert with 0, 50
                            _22794 = mem[_21236 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21236 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21236 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22856 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22861 = mem[_22856]
                                if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _22794) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22856]:
                                    revert with 0, 18
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23061 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23096 = mem[_23061]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23183 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23183] > !_23096:
                                        revert with 0, 17
                                    if mem[_23183] + _23096 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861 > -1 / mem[_23183] + _23096:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23183] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861) + (_23096 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23062 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23098 = mem[_23062]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23184 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23184] > !_23098:
                                        revert with 0, 17
                                    if mem[_23184] + _23098 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861 > -1 / mem[_23184] + _23098:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23184] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861) + (_23098 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794) / _22861) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21236 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21236 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22876 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22903 = mem[_22876]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22876]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23170 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23207 = mem[_23170]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23283 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23283] > !_23207:
                                            revert with 0, 17
                                        if mem[_23283] + _23207 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903 > -1 / mem[_23283] + _23207:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23283] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903) + (_23207 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23171 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23209 = mem[_23171]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23284 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23284] > !_23209:
                                            revert with 0, 17
                                        if mem[_23284] + _23209 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903 > -1 / mem[_23284] + _23209:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23284] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903) + (_23209 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / 10^stor259) / _22903) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21236 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21236 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23519 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23524 = mem[_23519]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876) + (Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23519]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23562 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23575 = mem[_23562]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23614 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23614] > !_23575:
                                            revert with 0, 17
                                        if mem[_23614] + _23575 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524 > -1 / mem[_23614] + _23575:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23614] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524) + (_23575 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23563 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23577 = mem[_23563]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23615 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23615] > !_23577:
                                            revert with 0, 17
                                        if mem[_23615] + _23577 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524 > -1 / mem[_23615] + _23577:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23615] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524) + (_23577 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22794 / s * t) / _23524) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12176 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12176]:
                                        revert with 0, 50
                                    mem[_12176 + 32] = token1Address
                                    if 1 >= mem[_12176]:
                                        revert with 0, 50
                                    mem[_12176 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12176 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12176 + 100] = 1
                                    mem[_12176 + 132] = 64
                                    mem[_12176 + 164] = mem[_12176]
                                    idx = 0
                                    s = _12176 + 32
                                    t = _12176 + 196
                                    while idx < mem[_12176]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12176 + (32 * mem[_12176]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15530 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15565 = mem[_15530]
                                    require mem[_15530] <= test266151307()
                                    require _15530 + mem[_15530] + 31 < _15530 + return_data.size
                                    _15589 = mem[_15530 + mem[_15530]]
                                    if mem[_15530 + mem[_15530]] > test266151307():
                                        revert with 0, 65
                                    if _15530 + ceil32(return_data.size) + ceil32(32 * mem[_15530 + mem[_15530]]) + 1 > test266151307() or ceil32(32 * mem[_15530 + mem[_15530]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15530 + ceil32(return_data.size) + ceil32(32 * mem[_15530 + mem[_15530]]) + 1
                                    mem[_15530 + ceil32(return_data.size)] = _15589
                                    require (32 * _15589) + _15565 + 32 <= return_data.size
                                    mem[_15530 + ceil32(return_data.size) + 32 len ceil32(32 * _15589)] = mem[_15530 + _15565 + 32 len ceil32(32 * _15589)]
                                    if 1 >= _15589:
                                        revert with 0, 50
                                    _18691 = mem[_15530 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15530 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15530 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18919 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18932 = mem[_18919]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18691) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18919]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19243 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19302 = mem[_19243]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19507 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19507] > !_19302:
                                                revert with 0, 17
                                            if mem[_19507] + _19302 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18932 > -1 / mem[_19507] + _19302:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19507] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18932) + (_19302 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18932) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19244 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19304 = mem[_19244]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19508 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19508] > !_19304:
                                                revert with 0, 17
                                            if mem[_19508] + _19304 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18932 > -1 / mem[_19508] + _19304:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19508] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18932) + (_19304 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691) / _18932) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15530 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15530 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18983 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19001 = mem[_18983]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18983]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19474 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19561 = mem[_19474]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19785 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19785] > !_19561:
                                                    revert with 0, 17
                                                if mem[_19785] + _19561 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _19001 > -1 / mem[_19785] + _19561:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19785] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _19001) + (_19561 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _19001) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19475 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19563 = mem[_19475]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19786 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19786] > !_19563:
                                                    revert with 0, 17
                                                if mem[_19786] + _19563 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _19001 > -1 / mem[_19786] + _19563:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19786] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _19001) + (_19563 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / 10^stor259) / _19001) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15530 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15530 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21300 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21313 = mem[_21300]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21300]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21481 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21518 = mem[_21481]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21682 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21682] > !_21518:
                                                    revert with 0, 17
                                                if mem[_21682] + _21518 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313 > -1 / mem[_21682] + _21518:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21682] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313) + (_21518 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21482 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21520 = mem[_21482]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21683 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21683] > !_21520:
                                                    revert with 0, 17
                                                if mem[_21683] + _21520 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313 > -1 / mem[_21683] + _21520:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21683] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313) + (_21520 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18691 / s * t) / _21313) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12278 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12278]:
                                            revert with 0, 50
                                        mem[_12278 + 32] = token1Address
                                        if 1 >= mem[_12278]:
                                            revert with 0, 50
                                        mem[_12278 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12278 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12278 + 100] = 10^stor259
                                        mem[_12278 + 132] = 64
                                        mem[_12278 + 164] = mem[_12278]
                                        idx = 0
                                        s = _12278 + 32
                                        t = _12278 + 196
                                        while idx < mem[_12278]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12278 + (32 * mem[_12278]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15529 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15564 = mem[_15529]
                                        require mem[_15529] <= test266151307()
                                        require _15529 + mem[_15529] + 31 < _15529 + return_data.size
                                        _15588 = mem[_15529 + mem[_15529]]
                                        if mem[_15529 + mem[_15529]] > test266151307():
                                            revert with 0, 65
                                        if _15529 + ceil32(return_data.size) + ceil32(32 * mem[_15529 + mem[_15529]]) + 1 > test266151307() or ceil32(32 * mem[_15529 + mem[_15529]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _15529 + ceil32(return_data.size) + ceil32(32 * mem[_15529 + mem[_15529]]) + 1
                                        mem[_15529 + ceil32(return_data.size)] = _15588
                                        require (32 * _15588) + _15564 + 32 <= return_data.size
                                        mem[_15529 + ceil32(return_data.size) + 32 len ceil32(32 * _15588)] = mem[_15529 + _15564 + 32 len ceil32(32 * _15588)]
                                        if 1 >= _15588:
                                            revert with 0, 50
                                        _18690 = mem[_15529 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15529 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15529 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18918 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18931 = mem[_18918]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18690) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18918]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19241 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19299 = mem[_19241]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19505 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19505] > !_19299:
                                                    revert with 0, 17
                                                if mem[_19505] + _19299 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18931 > -1 / mem[_19505] + _19299:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19505] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18931) + (_19299 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18931) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19242 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19301 = mem[_19242]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19506 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19506] > !_19301:
                                                    revert with 0, 17
                                                if mem[_19506] + _19301 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18931 > -1 / mem[_19506] + _19301:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19506] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18931) + (_19301 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690) / _18931) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15529 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15529 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18982 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _18998 = mem[_18982]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18982]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19472 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19554 = mem[_19472]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19780 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19780] > !_19554:
                                                        revert with 0, 17
                                                    if mem[_19780] + _19554 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18998 > -1 / mem[_19780] + _19554:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19780] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18998) + (_19554 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18998) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19473 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19556 = mem[_19473]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19781 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19781] > !_19556:
                                                        revert with 0, 17
                                                    if mem[_19781] + _19556 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18998 > -1 / mem[_19781] + _19556:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19781] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18998) + (_19556 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / 10^stor259) / _18998) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15529 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15529 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21299 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21312 = mem[_21299]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21299]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21479 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21515 = mem[_21479]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21680 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21680] > !_21515:
                                                        revert with 0, 17
                                                    if mem[_21680] + _21515 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312 > -1 / mem[_21680] + _21515:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21680] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312) + (_21515 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21480 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21517 = mem[_21480]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21681 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21681] > !_21517:
                                                        revert with 0, 17
                                                    if mem[_21681] + _21517 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312 > -1 / mem[_21681] + _21517:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21681] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312) + (_21517 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18690 / s * t) / _21312) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _15555 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15555]:
                                            revert with 0, 50
                                        mem[_15555 + 32] = token1Address
                                        if 1 >= mem[_15555]:
                                            revert with 0, 50
                                        mem[_15555 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15555 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15555 + 100] = s * t
                                        mem[_15555 + 132] = 64
                                        mem[_15555 + 164] = mem[_15555]
                                        idx = 0
                                        s = _15555 + 32
                                        t = _15555 + 196
                                        while idx < mem[_15555]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15555 + (32 * mem[_15555]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18734 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18752 = mem[_18734]
                                        require mem[_18734] <= test266151307()
                                        require _18734 + mem[_18734] + 31 < _18734 + return_data.size
                                        _18768 = mem[_18734 + mem[_18734]]
                                        if mem[_18734 + mem[_18734]] > test266151307():
                                            revert with 0, 65
                                        if _18734 + ceil32(return_data.size) + ceil32(32 * mem[_18734 + mem[_18734]]) + 1 > test266151307() or ceil32(32 * mem[_18734 + mem[_18734]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _18734 + ceil32(return_data.size) + ceil32(32 * mem[_18734 + mem[_18734]]) + 1
                                        mem[_18734 + ceil32(return_data.size)] = _18768
                                        require (32 * _18768) + _18752 + 32 <= return_data.size
                                        mem[_18734 + ceil32(return_data.size) + 32 len ceil32(32 * _18768)] = mem[_18734 + _18752 + 32 len ceil32(32 * _18768)]
                                        if 1 >= _18768:
                                            revert with 0, 50
                                        _21219 = mem[_18734 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18734 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18734 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21347 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21358 = mem[_21347]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21219) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21347]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21663 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21716 = mem[_21663]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21884 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21884] > !_21716:
                                                    revert with 0, 17
                                                if mem[_21884] + _21716 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21358 > -1 / mem[_21884] + _21716:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21884] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21358) + (_21716 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21358) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21664 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21718 = mem[_21664]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21885 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21885] > !_21718:
                                                    revert with 0, 17
                                                if mem[_21885] + _21718 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21358 > -1 / mem[_21885] + _21718:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21885] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21358) + (_21718 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21358) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18734 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18734 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21390 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21406 = mem[_21390]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21390]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21861 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21932 = mem[_21861]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22093 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22093] > !_21932:
                                                        revert with 0, 17
                                                    if mem[_22093] + _21932 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406 > -1 / mem[_22093] + _21932:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22093] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406) + (_21932 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21862 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21934 = mem[_21862]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22094 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22094] > !_21934:
                                                        revert with 0, 17
                                                    if mem[_22094] + _21934 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406 > -1 / mem[_22094] + _21934:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22094] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406) + (_21934 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21406) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18734 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18734 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22826 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22836 = mem[_22826]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22826]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22939 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22968 = mem[_22939]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23072 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23072] > !_22968:
                                                        revert with 0, 17
                                                    if mem[_23072] + _22968 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836 > -1 / mem[_23072] + _22968:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23072] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836) + (_22968 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22940 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22970 = mem[_22940]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23073 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23073] > !_22970:
                                                        revert with 0, 17
                                                    if mem[_23073] + _22970 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836 > -1 / mem[_23073] + _22970:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23073] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836) + (_22970 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / s * t) / _22836) / 10^18
                            else:
                                _12095 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12095]:
                                    revert with 0, 50
                                mem[_12095 + 32] = token1Address
                                if 1 >= mem[_12095]:
                                    revert with 0, 50
                                mem[_12095 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_12095 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12095 + 100] = 10^18
                                mem[_12095 + 132] = 64
                                mem[_12095 + 164] = mem[_12095]
                                idx = 0
                                s = _12095 + 32
                                t = _12095 + 196
                                while idx < mem[_12095]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12095 + (32 * mem[_12095]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15531 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15566 = mem[_15531]
                                require mem[_15531] <= test266151307()
                                require _15531 + mem[_15531] + 31 < _15531 + return_data.size
                                _15590 = mem[_15531 + mem[_15531]]
                                if mem[_15531 + mem[_15531]] > test266151307():
                                    revert with 0, 65
                                if _15531 + ceil32(return_data.size) + ceil32(32 * mem[_15531 + mem[_15531]]) + 1 > test266151307() or ceil32(32 * mem[_15531 + mem[_15531]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15531 + ceil32(return_data.size) + ceil32(32 * mem[_15531 + mem[_15531]]) + 1
                                mem[_15531 + ceil32(return_data.size)] = _15590
                                require (32 * _15590) + _15566 + 32 <= return_data.size
                                mem[_15531 + ceil32(return_data.size) + 32 len ceil32(32 * _15590)] = mem[_15531 + _15566 + 32 len ceil32(32 * _15590)]
                                if 1 >= _15590:
                                    revert with 0, 50
                                _18692 = mem[_15531 + ceil32(return_data.size) + 64]
                                _18721 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_18721]:
                                    revert with 0, 50
                                mem[_18721 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_18721]:
                                    revert with 0, 50
                                mem[_18721 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_18721 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_18721 + 100] = _18692
                                mem[_18721 + 132] = 64
                                mem[_18721 + 164] = mem[_18721]
                                idx = 0
                                s = _18721 + 32
                                t = _18721 + 196
                                while idx < mem[_18721]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _18721 + (32 * mem[_18721]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21235 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21241 = mem[_21235]
                                require mem[_21235] <= test266151307()
                                require _21235 + mem[_21235] + 31 < _21235 + return_data.size
                                _21247 = mem[_21235 + mem[_21235]]
                                if mem[_21235 + mem[_21235]] > test266151307():
                                    revert with 0, 65
                                if _21235 + ceil32(return_data.size) + ceil32(32 * mem[_21235 + mem[_21235]]) + 1 > test266151307() or ceil32(32 * mem[_21235 + mem[_21235]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _21235 + ceil32(return_data.size) + ceil32(32 * mem[_21235 + mem[_21235]]) + 1
                                mem[_21235 + ceil32(return_data.size)] = _21247
                                require (32 * _21247) + _21241 + 32 <= return_data.size
                                mem[_21235 + ceil32(return_data.size) + 32 len ceil32(32 * _21247)] = mem[_21235 + _21241 + 32 len ceil32(32 * _21247)]
                                if 1 >= _21247:
                                    revert with 0, 50
                                _22793 = mem[_21235 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21235 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21235 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22855 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22860 = mem[_22855]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22793) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22855]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23059 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23093 = mem[_23059]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23181 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23181] > !_23093:
                                            revert with 0, 17
                                        if mem[_23181] + _23093 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860 > -1 / mem[_23181] + _23093:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23181] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860) + (_23093 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23060 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23095 = mem[_23060]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23182 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23182] > !_23095:
                                            revert with 0, 17
                                        if mem[_23182] + _23095 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860 > -1 / mem[_23182] + _23095:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23182] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860) + (_23095 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793) / _22860) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21235 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21235 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22875 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22896 = mem[_22875]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22875]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23168 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23200 = mem[_23168]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23278 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23278] > !_23200:
                                                revert with 0, 17
                                            if mem[_23278] + _23200 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896 > -1 / mem[_23278] + _23200:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23278] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896) + (_23200 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23169 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23202 = mem[_23169]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23279 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23279] > !_23202:
                                                revert with 0, 17
                                            if mem[_23279] + _23202 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896 > -1 / mem[_23279] + _23202:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23279] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896) + (_23202 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / 10^stor259) / _22896) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21235 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21235 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23518 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23523 = mem[_23518]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23518]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23560 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23572 = mem[_23560]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23612 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23612] > !_23572:
                                                revert with 0, 17
                                            if mem[_23612] + _23572 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523 > -1 / mem[_23612] + _23572:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23612] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523) + (_23572 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23561 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23574 = mem[_23561]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23613 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23613] > !_23574:
                                                revert with 0, 17
                                            if mem[_23613] + _23574 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523 > -1 / mem[_23613] + _23574:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23613] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523) + (_23574 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22793 / s * t) / _23523) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(2 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _15740 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15740]:
                                        revert with 0, 50
                                    mem[_15740 + 32] = token1Address
                                    if 1 >= mem[_15740]:
                                        revert with 0, 50
                                    mem[_15740 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15740 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15740 + 100] = 1
                                    mem[_15740 + 132] = 64
                                    mem[_15740 + 164] = mem[_15740]
                                    idx = 0
                                    u = _15740 + 32
                                    v = _15740 + 196
                                    while idx < mem[_15740]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15740 + (32 * mem[_15740]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18732 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18750 = mem[_18732]
                                    require mem[_18732] <= test266151307()
                                    require _18732 + mem[_18732] + 31 < _18732 + return_data.size
                                    _18766 = mem[_18732 + mem[_18732]]
                                    if mem[_18732 + mem[_18732]] > test266151307():
                                        revert with 0, 65
                                    if _18732 + ceil32(return_data.size) + ceil32(32 * mem[_18732 + mem[_18732]]) + 1 > test266151307() or ceil32(32 * mem[_18732 + mem[_18732]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _18732 + ceil32(return_data.size) + ceil32(32 * mem[_18732 + mem[_18732]]) + 1
                                    mem[_18732 + ceil32(return_data.size)] = _18766
                                    require (32 * _18766) + _18750 + 32 <= return_data.size
                                    mem[_18732 + ceil32(return_data.size) + 32 len ceil32(32 * _18766)] = mem[_18732 + _18750 + 32 len ceil32(32 * _18766)]
                                    if 1 >= _18766:
                                        revert with 0, 50
                                    _21215 = mem[_18732 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18732 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18732 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21346 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21356 = mem[_21346]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21215) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21346]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21661 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21713 = mem[_21661]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21882 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21882] > !_21713:
                                                revert with 0, 17
                                            if mem[_21882] + _21713 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356 > -1 / mem[_21882] + _21713:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21882] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356) + (_21713 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21662 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21715 = mem[_21662]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21883 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21883] > !_21715:
                                                revert with 0, 17
                                            if mem[_21883] + _21715 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356 > -1 / mem[_21883] + _21715:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21883] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356) + (_21715 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215) / _21356) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18732 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18732 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21389 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21403 = mem[_21389]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21389]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21859 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21923 = mem[_21859]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22087 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22087] > !_21923:
                                                    revert with 0, 17
                                                if mem[_22087] + _21923 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403 > -1 / mem[_22087] + _21923:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22087] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403) + (_21923 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21860 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21925 = mem[_21860]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22088 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22088] > !_21925:
                                                    revert with 0, 17
                                                if mem[_22088] + _21925 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403 > -1 / mem[_22088] + _21925:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22088] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403) + (_21925 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / 10^stor259) / _21403) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18732 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18732 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22825 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22835 = mem[_22825]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22825]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22937 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22963 = mem[_22937]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23069 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23069] > !_22963:
                                                    revert with 0, 17
                                                if mem[_23069] + _22963 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835 > -1 / mem[_23069] + _22963:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23069] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835) + (_22963 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22938 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22965 = mem[_22938]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23070 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23070] > !_22965:
                                                    revert with 0, 17
                                                if mem[_23070] + _22965 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835 > -1 / mem[_23070] + _22965:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23070] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835) + (_22965 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21215 / u * v) / _22835) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _15802 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15802]:
                                            revert with 0, 50
                                        mem[_15802 + 32] = token1Address
                                        if 1 >= mem[_15802]:
                                            revert with 0, 50
                                        mem[_15802 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15802 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15802 + 100] = 10^stor259
                                        mem[_15802 + 132] = 64
                                        mem[_15802 + 164] = mem[_15802]
                                        idx = 0
                                        u = _15802 + 32
                                        v = _15802 + 196
                                        while idx < mem[_15802]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15802 + (32 * mem[_15802]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18731 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18749 = mem[_18731]
                                        require mem[_18731] <= test266151307()
                                        require _18731 + mem[_18731] + 31 < _18731 + return_data.size
                                        _18765 = mem[_18731 + mem[_18731]]
                                        if mem[_18731 + mem[_18731]] > test266151307():
                                            revert with 0, 65
                                        if _18731 + ceil32(return_data.size) + ceil32(32 * mem[_18731 + mem[_18731]]) + 1 > test266151307() or ceil32(32 * mem[_18731 + mem[_18731]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _18731 + ceil32(return_data.size) + ceil32(32 * mem[_18731 + mem[_18731]]) + 1
                                        mem[_18731 + ceil32(return_data.size)] = _18765
                                        require (32 * _18765) + _18749 + 32 <= return_data.size
                                        mem[_18731 + ceil32(return_data.size) + 32 len ceil32(32 * _18765)] = mem[_18731 + _18749 + 32 len ceil32(32 * _18765)]
                                        if 1 >= _18765:
                                            revert with 0, 50
                                        _21214 = mem[_18731 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18731 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18731 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21345 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21355 = mem[_21345]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21214) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21345]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21659 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21710 = mem[_21659]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21880 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21880] > !_21710:
                                                    revert with 0, 17
                                                if mem[_21880] + _21710 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355 > -1 / mem[_21880] + _21710:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21880] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355) + (_21710 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21660 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21712 = mem[_21660]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21881 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21881] > !_21712:
                                                    revert with 0, 17
                                                if mem[_21881] + _21712 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355 > -1 / mem[_21881] + _21712:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21881] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355) + (_21712 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214) / _21355) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18731 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18731 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21388 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21400 = mem[_21388]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21388]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21857 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21916 = mem[_21857]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22082 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22082] > !_21916:
                                                        revert with 0, 17
                                                    if mem[_22082] + _21916 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400 > -1 / mem[_22082] + _21916:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22082] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400) + (_21916 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21858 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21918 = mem[_21858]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22083 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22083] > !_21918:
                                                        revert with 0, 17
                                                    if mem[_22083] + _21918 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400 > -1 / mem[_22083] + _21918:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22083] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400) + (_21918 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / 10^stor259) / _21400) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18731 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18731 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22824 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22834 = mem[_22824]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22824]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22935 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22960 = mem[_22935]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23067 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23067] > !_22960:
                                                        revert with 0, 17
                                                    if mem[_23067] + _22960 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834 > -1 / mem[_23067] + _22960:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23067] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834) + (_22960 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22936 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22962 = mem[_22936]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23068 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23068] > !_22962:
                                                        revert with 0, 17
                                                    if mem[_23068] + _22962 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834 > -1 / mem[_23068] + _22962:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23068] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834) + (_22962 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21214 / u * v) / _22834) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _18746 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_18746]:
                                            revert with 0, 50
                                        mem[_18746 + 32] = token1Address
                                        if 1 >= mem[_18746]:
                                            revert with 0, 50
                                        mem[_18746 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_18746 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_18746 + 100] = u * v
                                        mem[_18746 + 132] = 64
                                        mem[_18746 + 164] = mem[_18746]
                                        idx = 0
                                        u = _18746 + 32
                                        v = _18746 + 196
                                        while idx < mem[_18746]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _18746 + (32 * mem[_18746]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21233 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21239 = mem[_21233]
                                        require mem[_21233] <= test266151307()
                                        require _21233 + mem[_21233] + 31 < _21233 + return_data.size
                                        _21245 = mem[_21233 + mem[_21233]]
                                        if mem[_21233 + mem[_21233]] > test266151307():
                                            revert with 0, 65
                                        if _21233 + ceil32(return_data.size) + ceil32(32 * mem[_21233 + mem[_21233]]) + 1 > test266151307() or ceil32(32 * mem[_21233 + mem[_21233]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _21233 + ceil32(return_data.size) + ceil32(32 * mem[_21233 + mem[_21233]]) + 1
                                        mem[_21233 + ceil32(return_data.size)] = _21245
                                        require (32 * _21245) + _21239 + 32 <= return_data.size
                                        mem[_21233 + ceil32(return_data.size) + 32 len ceil32(32 * _21245)] = mem[_21233 + _21239 + 32 len ceil32(32 * _21245)]
                                        if 1 >= _21245:
                                            revert with 0, 50
                                        _22791 = mem[_21233 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_21233 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21233 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22854 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22859 = mem[_22854]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22791) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22854]:
                                                revert with 0, 18
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23057 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23088 = mem[_23057]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23176 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23176] > !_23088:
                                                    revert with 0, 17
                                                if mem[_23176] + _23088 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859 > -1 / mem[_23176] + _23088:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23176] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859) + (_23088 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23058 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23090 = mem[_23058]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23177 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23177] > !_23090:
                                                    revert with 0, 17
                                                if mem[_23177] + _23090 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859 > -1 / mem[_23177] + _23090:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23177] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859) + (_23090 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791) / _22859) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21233 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21233 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22874 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22881 = mem[_22874]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22874]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23166 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23193 = mem[_23166]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23269 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23269] > !_23193:
                                                        revert with 0, 17
                                                    if mem[_23269] + _23193 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881 > -1 / mem[_23269] + _23193:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23269] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881) + (_23193 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23167 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _23195 = mem[_23167]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23270 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23270] > !_23195:
                                                        revert with 0, 17
                                                    if mem[_23270] + _23195 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881 > -1 / mem[_23270] + _23195:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23270] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881) + (_23195 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / 10^stor259) / _22881) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21233 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21233 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23517 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23522 = mem[_23517]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23517]:
                                                    revert with 0, 18
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23557 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23568 = mem[_23557]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23610 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23610] > !_23568:
                                                        revert with 0, 17
                                                    if mem[_23610] + _23568 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522 > -1 / mem[_23610] + _23568:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23610] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522) + (_23568 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23558 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _23570 = mem[_23558]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23611 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23611] > !_23570:
                                                        revert with 0, 17
                                                    if mem[_23611] + _23570 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522 > -1 / mem[_23611] + _23570:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23611] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522) + (_23570 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22791 / u * v) / _23522) / 10^18
                            else:
                                _15635 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_15635]:
                                    revert with 0, 50
                                mem[_15635 + 32] = token1Address
                                if 1 >= mem[_15635]:
                                    revert with 0, 50
                                mem[_15635 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_15635 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_15635 + 100] = 10^18
                                mem[_15635 + 132] = 64
                                mem[_15635 + 164] = mem[_15635]
                                idx = 0
                                u = _15635 + 32
                                v = _15635 + 196
                                while idx < mem[_15635]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _15635 + (32 * mem[_15635]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _18733 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _18751 = mem[_18733]
                                require mem[_18733] <= test266151307()
                                require _18733 + mem[_18733] + 31 < _18733 + return_data.size
                                _18767 = mem[_18733 + mem[_18733]]
                                if mem[_18733 + mem[_18733]] > test266151307():
                                    revert with 0, 65
                                if _18733 + ceil32(return_data.size) + ceil32(32 * mem[_18733 + mem[_18733]]) + 1 > test266151307() or ceil32(32 * mem[_18733 + mem[_18733]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _18733 + ceil32(return_data.size) + ceil32(32 * mem[_18733 + mem[_18733]]) + 1
                                mem[_18733 + ceil32(return_data.size)] = _18767
                                require (32 * _18767) + _18751 + 32 <= return_data.size
                                mem[_18733 + ceil32(return_data.size) + 32 len ceil32(32 * _18767)] = mem[_18733 + _18751 + 32 len ceil32(32 * _18767)]
                                if 1 >= _18767:
                                    revert with 0, 50
                                _21216 = mem[_18733 + ceil32(return_data.size) + 64]
                                _21231 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_21231]:
                                    revert with 0, 50
                                mem[_21231 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_21231]:
                                    revert with 0, 50
                                mem[_21231 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_21231 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_21231 + 100] = _21216
                                mem[_21231 + 132] = 64
                                mem[_21231 + 164] = mem[_21231]
                                idx = 0
                                u = _21231 + 32
                                v = _21231 + 196
                                while idx < mem[_21231]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _21231 + (32 * mem[_21231]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22797 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22798 = mem[_22797]
                                require mem[_22797] <= test266151307()
                                require _22797 + mem[_22797] + 31 < _22797 + return_data.size
                                _22799 = mem[_22797 + mem[_22797]]
                                if mem[_22797 + mem[_22797]] > test266151307():
                                    revert with 0, 65
                                if _22797 + ceil32(return_data.size) + ceil32(32 * mem[_22797 + mem[_22797]]) + 1 > test266151307() or ceil32(32 * mem[_22797 + mem[_22797]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _22797 + ceil32(return_data.size) + ceil32(32 * mem[_22797 + mem[_22797]]) + 1
                                mem[_22797 + ceil32(return_data.size)] = _22799
                                require (32 * _22799) + _22798 + 32 <= return_data.size
                                mem[_22797 + ceil32(return_data.size) + 32 len ceil32(32 * _22799)] = mem[_22797 + _22798 + 32 len ceil32(32 * _22799)]
                                if 1 >= _22799:
                                    revert with 0, 50
                                _23506 = mem[_22797 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_22797 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22797 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23529 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23530 = mem[_23529]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23506) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23529]:
                                        revert with 0, 18
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23608 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23620 = mem[_23608]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23643 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23643] > !_23620:
                                            revert with 0, 17
                                        if mem[_23643] + _23620 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530 > -1 / mem[_23643] + _23620:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23643] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530) + (_23620 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23609 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23622 = mem[_23609]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23644 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23644] > !_23622:
                                            revert with 0, 17
                                        if mem[_23644] + _23622 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530 > -1 / mem[_23644] + _23622:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23644] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530) + (_23622 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506) / _23530) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_22797 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22797 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23533 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23540 = mem[_23533]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23533]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23641 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23649 = mem[_23641]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23663 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23663] > !_23649:
                                                revert with 0, 17
                                            if mem[_23663] + _23649 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540 > -1 / mem[_23663] + _23649:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23663] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540) + (_23649 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23642 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23651 = mem[_23642]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23664 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23664] > !_23651:
                                                revert with 0, 17
                                            if mem[_23664] + _23651 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540 > -1 / mem[_23664] + _23651:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23664] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540) + (_23651 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / 10^stor259) / _23540) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_22797 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22797 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23709 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23710 = mem[_23709]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23709]:
                                            revert with 0, 18
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23715 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23717 = mem[_23715]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23724 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23724] > !_23717:
                                                revert with 0, 17
                                            if mem[_23724] + _23717 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710 > -1 / mem[_23724] + _23717:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23724] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710) + (_23717 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23716 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23719 = mem[_23716]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23725 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23725] > !_23719:
                                                revert with 0, 17
                                            if mem[_23725] + _23719 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710 > -1 / mem[_23725] + _23719:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23725] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710) + (_23719 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11876 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23506 / u * v) / _23710) / 10^18
    return memory
      from mem[64]
       len 32
}

function getAllPoolInUSD() {
    require ext_code.size(0xa77230d17318075983913bc2145db16c7366156)
    staticcall 0xa77230d17318075983913bc2145db16c7366156.latestAnswer() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        revert with 0, 'ChainLink error'
    require ext_code.size(lpTokenAddress)
    staticcall lpTokenAddress.getReserves() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token0Address:
        if not stor259:
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            mem[(2 * ceil32(return_data.size)) + 128] = token1Address
            mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
            mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 196] = 1
            mem[(2 * ceil32(return_data.size)) + 228] = 64
            mem[(2 * ceil32(return_data.size)) + 260] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (2 * ceil32(return_data.size)) + 292
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(routerAddress)
            staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                    gas gas_remaining wei
                   args 1, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _4049 = mem[(2 * ceil32(return_data.size)) + 192 len 4], 0
            require mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
            require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
            _4058 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
            if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                revert with 0, 65
            if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
            mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
            require (32 * _4058) + _4049 + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4058)] = mem[(2 * ceil32(return_data.size)) + _4049 + 224 len ceil32(32 * _4058)]
            if 1 >= _4058:
                revert with 0, 50
            _7988 = mem[(4 * ceil32(return_data.size)) + 256]
            if not stor259:
                if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256]):
                    revert with 0, 17
                require ext_code.size(lpTokenAddress)
                staticcall lpTokenAddress.0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8029 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8049 = mem[_8029]
                if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7988) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not mem[_8029]:
                    revert with 0, 18
                if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988) / mem[_8029] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988) / mem[_8029]:
                    revert with 0, 17
                if not sub_abddf82e:
                    mem[mem[64] + 36] = this.address
                    require ext_code.size(masterChefAddress)
                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                            gas gas_remaining wei
                           args poolId, this.address
                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8381 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 64
                    _8438 = mem[_8381]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8570 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8570] > !_8438:
                        revert with 0, 17
                    if mem[_8570] + _8438 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988) / _8049 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8570] + _8438:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8570] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988) / _8049 * ext_call.return_data[0] / 100 * 10^6) + (_8438 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988) / _8049 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stakingRewardAddress)
                    staticcall stakingRewardAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8382 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8440 = mem[_8382]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8571 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_8571] > !_8440:
                        revert with 0, 17
                    if mem[_8571] + _8440 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988) / _8049 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8571] + _8440:
                        revert with 0, 17
                    mem[mem[64]] = (mem[_8571] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988) / _8049 * ext_call.return_data[0] / 100 * 10^6) + (_8440 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988) / _8049 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not 10^stor259:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor259):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8075 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8111 = mem[_8075]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7988 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8075]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / 10^stor259) / mem[_8075] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / 10^stor259) / mem[_8075]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8532 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8615 = mem[_8532]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8751 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8751] > !_8615:
                            revert with 0, 17
                        if mem[_8751] + _8615 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / 10^stor259) / _8111 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8751] + _8615:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8751] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / 10^stor259) / _8111 * ext_call.return_data[0] / 100 * 10^6) + (_8615 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / 10^stor259) / _8111 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8533 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8617 = mem[_8533]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8752 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8752] > !_8617:
                            revert with 0, 17
                        if mem[_8752] + _8617 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / 10^stor259) / _8111 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8752] + _8617:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8752] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / 10^stor259) / _8111 * ext_call.return_data[0] / 100 * 10^6) + (_8617 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / 10^stor259) / _8111 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor259
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if not s * t:
                        revert with 0, 18
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12056 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12083 = mem[_12056]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7988 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12056]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / s * t) / mem[_12056] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / s * t) / mem[_12056]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12410 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12469 = mem[_12410]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12581 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12581] > !_12469:
                            revert with 0, 17
                        if mem[_12581] + _12469 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / s * t) / _12083 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12581] + _12469:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12581] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / s * t) / _12083 * ext_call.return_data[0] / 100 * 10^6) + (_12469 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / s * t) / _12083 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12411 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12471 = mem[_12411]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12582 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12582] > !_12471:
                            revert with 0, 17
                        if mem[_12582] + _12471 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / s * t) / _12083 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12582] + _12471:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12582] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / s * t) / _12083 * ext_call.return_data[0] / 100 * 10^6) + (_12471 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7988 / s * t) / _12083 * ext_call.return_data[0] / 100 * 10^6) / 10^18
        else:
            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token1Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = 10^stor259
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 128
                t = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                        gas gas_remaining wei
                       args 10^stor259, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4048 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _4057 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor259) >> 32 + 192]
                require (32 * _4057) + _4048 + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4057)] = mem[(2 * ceil32(return_data.size)) + _4048 + 224 len ceil32(32 * _4057)]
                if 1 >= _4057:
                    revert with 0, 50
                _7987 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8028 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8048 = mem[_8028]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7987) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8028]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987) / mem[_8028] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987) / mem[_8028]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8379 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8435 = mem[_8379]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8568 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8568] > !_8435:
                            revert with 0, 17
                        if mem[_8568] + _8435 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987) / _8048 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8568] + _8435:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8568] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987) / _8048 * ext_call.return_data[0] / 100 * 10^6) + (_8435 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987) / _8048 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8380 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8437 = mem[_8380]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8569 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8569] > !_8437:
                            revert with 0, 17
                        if mem[_8569] + _8437 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987) / _8048 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8569] + _8437:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8569] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987) / _8048 * ext_call.return_data[0] / 100 * 10^6) + (_8437 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987) / _8048 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8074 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8108 = mem[_8074]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7987 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8074]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / 10^stor259) / mem[_8074] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / 10^stor259) / mem[_8074]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8530 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8608 = mem[_8530]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8746 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8746] > !_8608:
                                revert with 0, 17
                            if mem[_8746] + _8608 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / 10^stor259) / _8108 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8746] + _8608:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8746] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / 10^stor259) / _8108 * ext_call.return_data[0] / 100 * 10^6) + (_8608 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / 10^stor259) / _8108 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8531 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8610 = mem[_8531]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8747 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8747] > !_8610:
                                revert with 0, 17
                            if mem[_8747] + _8610 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / 10^stor259) / _8108 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8747] + _8610:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8747] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / 10^stor259) / _8108 * ext_call.return_data[0] / 100 * 10^6) + (_8610 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / 10^stor259) / _8108 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12055 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12082 = mem[_12055]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _7987 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12055]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / s * t) / mem[_12055] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / s * t) / mem[_12055]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12408 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12466 = mem[_12408]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12579 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12579] > !_12466:
                                revert with 0, 17
                            if mem[_12579] + _12466 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / s * t) / _12082 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12579] + _12466:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12579] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / s * t) / _12082 * ext_call.return_data[0] / 100 * 10^6) + (_12466 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / s * t) / _12082 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12409 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12468 = mem[_12409]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12580 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12580] > !_12468:
                                revert with 0, 17
                            if mem[_12580] + _12468 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / s * t) / _12082 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12580] + _12468:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12580] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / s * t) / _12082 * ext_call.return_data[0] / 100 * 10^6) + (_12468 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _7987 / s * t) / _12082 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                s = 10
                t = 1
                idx = stor259
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token1Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = s * t
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                u = (2 * ceil32(return_data.size)) + 128
                v = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[v] = mem[u + 12 len 20]
                    idx = idx + 1
                    u = u + 32
                    v = v + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                        gas gas_remaining wei
                       args s * t, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _7994 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _7997 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                require (32 * _7997) + _7994 + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _7997)] = mem[(2 * ceil32(return_data.size)) + _7994 + 224 len ceil32(32 * _7997)]
                if 1 >= _7997:
                    revert with 0, 50
                _11894 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor259:
                    if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12098 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12124 = mem[_12098]
                    if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11894) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_12098]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894) / mem[_12098] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894) / mem[_12098]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12526 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _12576 = mem[_12526]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12671 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12671] > !_12576:
                            revert with 0, 17
                        if mem[_12671] + _12576 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894) / _12124 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12671] + _12576:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12671] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894) / _12124 * ext_call.return_data[0] / 100 * 10^6) + (_12576 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894) / _12124 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12527 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12578 = mem[_12527]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12672 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_12672] > !_12578:
                            revert with 0, 17
                        if mem[_12672] + _12578 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894) / _12124 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12672] + _12578:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_12672] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894) / _12124 * ext_call.return_data[0] / 100 * 10^6) + (_12578 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894) / _12124 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not 10^stor259:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor259):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12163 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12207 = mem[_12163]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11894 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12163]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / 10^stor259) / mem[_12163] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / 10^stor259) / mem[_12163]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12653 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12698 = mem[_12653]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12764 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12764] > !_12698:
                                revert with 0, 17
                            if mem[_12764] + _12698 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / 10^stor259) / _12207 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12764] + _12698:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12764] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / 10^stor259) / _12207 * ext_call.return_data[0] / 100 * 10^6) + (_12698 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / 10^stor259) / _12207 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12654 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12700 = mem[_12654]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12765 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12765] > !_12700:
                                revert with 0, 17
                            if mem[_12765] + _12700 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / 10^stor259) / _12207 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12765] + _12700:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12765] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / 10^stor259) / _12207 * ext_call.return_data[0] / 100 * 10^6) + (_12700 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / 10^stor259) / _12207 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor259
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[0]) > !(Mask(112, 0, ext_call.return_data[32]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15736 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _15755 = mem[_15736]
                        if Mask(112, 0, ext_call.return_data[0]) + (Mask(112, 0, ext_call.return_data[32]) * _11894 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_15736]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / s * t) / mem[_15736] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / s * t) / mem[_15736]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16053 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _16080 = mem[_16053]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16204 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16204] > !_16080:
                                revert with 0, 17
                            if mem[_16204] + _16080 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / s * t) / _15755 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16204] + _16080:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16204] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / s * t) / _15755 * ext_call.return_data[0] / 100 * 10^6) + (_16080 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / s * t) / _15755 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16054 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16082 = mem[_16054]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16205 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_16205] > !_16082:
                                revert with 0, 17
                            if mem[_16205] + _16082 and (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / s * t) / _15755 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16205] + _16082:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_16205] * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / s * t) / _15755 * ext_call.return_data[0] / 100 * 10^6) + (_16082 * (10^18 * Mask(112, 0, ext_call.return_data[0])) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _11894 / s * t) / _15755 * ext_call.return_data[0] / 100 * 10^6) / 10^18
    else:
        if 0xfe000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66 == token1Address:
            if not stor258:
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = 1
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 128
                t = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4046 = mem[(2 * ceil32(return_data.size)) + 192 len 4], 0
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _4055 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                require (32 * _4055) + _4046 + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4055)] = mem[(2 * ceil32(return_data.size)) + _4046 + 224 len ceil32(32 * _4055)]
                if 1 >= _4055:
                    revert with 0, 50
                _7985 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256]):
                        revert with 0, 17
                    require ext_code.size(lpTokenAddress)
                    staticcall lpTokenAddress.0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8027 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8047 = mem[_8027]
                    if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7985) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not mem[_8027]:
                        revert with 0, 18
                    if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985) / mem[_8027] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985) / mem[_8027]:
                        revert with 0, 17
                    if not sub_abddf82e:
                        mem[mem[64] + 36] = this.address
                        require ext_code.size(masterChefAddress)
                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                gas gas_remaining wei
                               args poolId, this.address
                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8377 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 64
                        _8432 = mem[_8377]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8566 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8566] > !_8432:
                            revert with 0, 17
                        if mem[_8566] + _8432 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985) / _8047 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8566] + _8432:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8566] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985) / _8047 * ext_call.return_data[0] / 100 * 10^6) + (_8432 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985) / _8047 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stakingRewardAddress)
                        staticcall stakingRewardAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8378 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8434 = mem[_8378]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8567 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        if mem[_8567] > !_8434:
                            revert with 0, 17
                        if mem[_8567] + _8434 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985) / _8047 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8567] + _8434:
                            revert with 0, 17
                        mem[mem[64]] = (mem[_8567] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985) / _8047 * ext_call.return_data[0] / 100 * 10^6) + (_8434 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985) / _8047 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor258):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8073 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8105 = mem[_8073]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7985 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8073]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / 10^stor258) / mem[_8073] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / 10^stor258) / mem[_8073]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8528 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8601 = mem[_8528]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8737 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8737] > !_8601:
                                revert with 0, 17
                            if mem[_8737] + _8601 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / 10^stor258) / _8105 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8737] + _8601:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8737] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / 10^stor258) / _8105 * ext_call.return_data[0] / 100 * 10^6) + (_8601 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / 10^stor258) / _8105 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8529 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8603 = mem[_8529]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8738 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8738] > !_8603:
                                revert with 0, 17
                            if mem[_8738] + _8603 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / 10^stor258) / _8105 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8738] + _8603:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8738] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / 10^stor258) / _8105 * ext_call.return_data[0] / 100 * 10^6) + (_8603 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / 10^stor258) / _8105 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12054 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12079 = mem[_12054]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7985 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12054]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / s * t) / mem[_12054] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / s * t) / mem[_12054]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12406 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12459 = mem[_12406]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12574 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12574] > !_12459:
                                revert with 0, 17
                            if mem[_12574] + _12459 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / s * t) / _12079 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12574] + _12459:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12574] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / s * t) / _12079 * ext_call.return_data[0] / 100 * 10^6) + (_12459 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / s * t) / _12079 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12407 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12461 = mem[_12407]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12575 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12575] > !_12461:
                                revert with 0, 17
                            if mem[_12575] + _12461 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / s * t) / _12079 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12575] + _12461:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12575] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / s * t) / _12079 * ext_call.return_data[0] / 100 * 10^6) + (_12461 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7985 / s * t) / _12079 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = 10^stor258
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (2 * ceil32(return_data.size)) + 128
                    t = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4045 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _4054 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require (32 * _4054) + _4045 + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4054)] = mem[(2 * ceil32(return_data.size)) + _4045 + 224 len ceil32(32 * _4054)]
                    if 1 >= _4054:
                        revert with 0, 50
                    _7984 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8026 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8046 = mem[_8026]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7984) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_8026]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984) / mem[_8026] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984) / mem[_8026]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8375 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _8429 = mem[_8375]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8564 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8564] > !_8429:
                                revert with 0, 17
                            if mem[_8564] + _8429 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984) / _8046 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8564] + _8429:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8564] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984) / _8046 * ext_call.return_data[0] / 100 * 10^6) + (_8429 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984) / _8046 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8376 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8431 = mem[_8376]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8565 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_8565] > !_8431:
                                revert with 0, 17
                            if mem[_8565] + _8431 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984) / _8046 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8565] + _8431:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_8565] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984) / _8046 * ext_call.return_data[0] / 100 * 10^6) + (_8431 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984) / _8046 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8072 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8102 = mem[_8072]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7984 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_8072]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / 10^stor258) / mem[_8072] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / 10^stor258) / mem[_8072]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8526 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _8594 = mem[_8526]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8732 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8732] > !_8594:
                                    revert with 0, 17
                                if mem[_8732] + _8594 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / 10^stor258) / _8102 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8732] + _8594:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8732] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / 10^stor258) / _8102 * ext_call.return_data[0] / 100 * 10^6) + (_8594 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / 10^stor258) / _8102 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8527 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _8596 = mem[_8527]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8733 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_8733] > !_8596:
                                    revert with 0, 17
                                if mem[_8733] + _8596 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / 10^stor258) / _8102 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_8733] + _8596:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_8733] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / 10^stor258) / _8102 * ext_call.return_data[0] / 100 * 10^6) + (_8596 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / 10^stor258) / _8102 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12053 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12078 = mem[_12053]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _7984 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12053]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / s * t) / mem[_12053] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / s * t) / mem[_12053]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12404 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12456 = mem[_12404]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12572 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12572] > !_12456:
                                    revert with 0, 17
                                if mem[_12572] + _12456 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / s * t) / _12078 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12572] + _12456:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12572] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / s * t) / _12078 * ext_call.return_data[0] / 100 * 10^6) + (_12456 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / s * t) / _12078 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12405 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12458 = mem[_12405]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12573 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12573] > !_12458:
                                    revert with 0, 17
                                if mem[_12573] + _12458 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / s * t) / _12078 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12573] + _12458:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12573] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / s * t) / _12078 * ext_call.return_data[0] / 100 * 10^6) + (_12458 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7984 / s * t) / _12078 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = s * t
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (2 * ceil32(return_data.size)) + 128
                    v = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _7993 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _7996 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require (32 * _7996) + _7993 + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _7996)] = mem[(2 * ceil32(return_data.size)) + _7993 + 224 len ceil32(32 * _7996)]
                    if 1 >= _7996:
                        revert with 0, 50
                    _11893 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256]):
                            revert with 0, 17
                        require ext_code.size(lpTokenAddress)
                        staticcall lpTokenAddress.0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12097 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12123 = mem[_12097]
                        if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11893) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not mem[_12097]:
                            revert with 0, 18
                        if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893) / mem[_12097] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893) / mem[_12097]:
                            revert with 0, 17
                        if not sub_abddf82e:
                            mem[mem[64] + 36] = this.address
                            require ext_code.size(masterChefAddress)
                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                    gas gas_remaining wei
                                   args poolId, this.address
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12516 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _12569 = mem[_12516]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12669 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12669] > !_12569:
                                revert with 0, 17
                            if mem[_12669] + _12569 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893) / _12123 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12669] + _12569:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12669] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893) / _12123 * ext_call.return_data[0] / 100 * 10^6) + (_12569 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893) / _12123 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stakingRewardAddress)
                            staticcall stakingRewardAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12517 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12571 = mem[_12517]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12670 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_12670] > !_12571:
                                revert with 0, 17
                            if mem[_12670] + _12571 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893) / _12123 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12670] + _12571:
                                revert with 0, 17
                            mem[mem[64]] = (mem[_12670] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893) / _12123 * ext_call.return_data[0] / 100 * 10^6) + (_12571 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893) / _12123 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / 10^stor258):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12162 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _12204 = mem[_12162]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11893 / 10^stor258) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_12162]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / 10^stor258) / mem[_12162] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / 10^stor258) / mem[_12162]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12651 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _12691 = mem[_12651]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12759 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12759] > !_12691:
                                    revert with 0, 17
                                if mem[_12759] + _12691 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / 10^stor258) / _12204 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12759] + _12691:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12759] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / 10^stor258) / _12204 * ext_call.return_data[0] / 100 * 10^6) + (_12691 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / 10^stor258) / _12204 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12652 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _12693 = mem[_12652]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _12760 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_12760] > !_12693:
                                    revert with 0, 17
                                if mem[_12760] + _12693 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / 10^stor258) / _12204 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_12760] + _12693:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_12760] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / 10^stor258) / _12204 * ext_call.return_data[0] / 100 * 10^6) + (_12693 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / 10^stor258) / _12204 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if Mask(112, 0, ext_call.return_data[32]) > !(Mask(112, 0, ext_call.return_data[0]) * mem[(4 * ceil32(return_data.size)) + 256] / s * t):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15735 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15754 = mem[_15735]
                            if Mask(112, 0, ext_call.return_data[32]) + (Mask(112, 0, ext_call.return_data[0]) * _11893 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_15735]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / s * t) / mem[_15735] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / s * t) / mem[_15735]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16051 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _16077 = mem[_16051]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16202 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16202] > !_16077:
                                    revert with 0, 17
                                if mem[_16202] + _16077 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / s * t) / _15754 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16202] + _16077:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16202] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / s * t) / _15754 * ext_call.return_data[0] / 100 * 10^6) + (_16077 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / s * t) / _15754 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16052 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _16079 = mem[_16052]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _16203 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_16203] > !_16079:
                                    revert with 0, 17
                                if mem[_16203] + _16079 and (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / s * t) / _15754 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16203] + _16079:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_16203] * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / s * t) / _15754 * ext_call.return_data[0] / 100 * 10^6) + (_16079 * (10^18 * Mask(112, 0, ext_call.return_data[32])) + (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11893 / s * t) / _15754 * ext_call.return_data[0] / 100 * 10^6) / 10^18
        else:
            if not stor258:
                mem[(2 * ceil32(return_data.size)) + 96] = 2
                mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[(2 * ceil32(return_data.size)) + 196] = 1
                mem[(2 * ceil32(return_data.size)) + 228] = 64
                mem[(2 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (2 * ceil32(return_data.size)) + 128
                t = (2 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(routerAddress)
                staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _4043 = mem[(2 * ceil32(return_data.size)) + 192 len 4], 0
                require mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
                require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                _4052 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
                mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                require (32 * _4052) + _4043 + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4052)] = mem[(2 * ceil32(return_data.size)) + _4043 + 224 len ceil32(32 * _4052)]
                if 1 >= _4052:
                    revert with 0, 50
                _7982 = mem[(4 * ceil32(return_data.size)) + 256]
                if not stor258:
                    if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 17
                    if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                        if not stor259:
                            _8044 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8044]:
                                revert with 0, 50
                            mem[_8044 + 32] = token1Address
                            if 1 >= mem[_8044]:
                                revert with 0, 50
                            mem[_8044 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_8044 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8044 + 100] = 1
                            mem[_8044 + 132] = 64
                            mem[_8044 + 164] = mem[_8044]
                            idx = 0
                            s = _8044 + 32
                            t = _8044 + 196
                            while idx < mem[_8044]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8044 + (32 * mem[_8044]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11913 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11937 = mem[_11913]
                            require mem[_11913] <= test266151307()
                            require _11913 + mem[_11913] + 31 < _11913 + return_data.size
                            _11953 = mem[_11913 + mem[_11913]]
                            if mem[_11913 + mem[_11913]] > test266151307():
                                revert with 0, 65
                            if _11913 + ceil32(return_data.size) + ceil32(32 * mem[_11913 + mem[_11913]]) + 1 > test266151307() or ceil32(32 * mem[_11913 + mem[_11913]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _11913 + ceil32(return_data.size) + ceil32(32 * mem[_11913 + mem[_11913]]) + 1
                            mem[_11913 + ceil32(return_data.size)] = _11953
                            require (32 * _11953) + _11937 + 32 <= return_data.size
                            mem[_11913 + ceil32(return_data.size) + 32 len ceil32(32 * _11953)] = mem[_11913 + _11937 + 32 len ceil32(32 * _11953)]
                            if 1 >= _11953:
                                revert with 0, 50
                            _15519 = mem[_11913 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11913 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11913 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15803 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15824 = mem[_15803]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _15519) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_15803]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519) / mem[_15803] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519) / mem[_15803]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16184 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _16240 = mem[_16184]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16379 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16379] > !_16240:
                                        revert with 0, 17
                                    if mem[_16379] + _16240 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519) / _15824 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16379] + _16240:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16379] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519) / _15824 * ext_call.return_data[0] / 100 * 10^6) + (_16240 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519) / _15824 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16185 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _16242 = mem[_16185]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _16380 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_16380] > !_16242:
                                        revert with 0, 17
                                    if mem[_16380] + _16242 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519) / _15824 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16380] + _16242:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_16380] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519) / _15824 * ext_call.return_data[0] / 100 * 10^6) + (_16242 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519) / _15824 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11913 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11913 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15875 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15914 = mem[_15875]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _15519 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15875]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / 10^stor259) / mem[_15875] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / 10^stor259) / mem[_15875]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16355 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16446 = mem[_16355]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16633 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16633] > !_16446:
                                            revert with 0, 17
                                        if mem[_16633] + _16446 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / 10^stor259) / _15914 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16633] + _16446:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16633] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / 10^stor259) / _15914 * ext_call.return_data[0] / 100 * 10^6) + (_16446 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / 10^stor259) / _15914 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16356 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16448 = mem[_16356]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16634 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16634] > !_16448:
                                            revert with 0, 17
                                        if mem[_16634] + _16448 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / 10^stor259) / _15914 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16634] + _16448:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16634] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / 10^stor259) / _15914 * ext_call.return_data[0] / 100 * 10^6) + (_16448 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / 10^stor259) / _15914 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11913 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11913 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18875 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18889 = mem[_18875]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _15519 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18875]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / s * t) / mem[_18875] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / s * t) / mem[_18875]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19169 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19204 = mem[_19169]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19373 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19373] > !_19204:
                                            revert with 0, 17
                                        if mem[_19373] + _19204 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / s * t) / _18889 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19373] + _19204:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19373] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / s * t) / _18889 * ext_call.return_data[0] / 100 * 10^6) + (_19204 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / s * t) / _18889 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19170 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19206 = mem[_19170]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19374 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19374] > !_19206:
                                            revert with 0, 17
                                        if mem[_19374] + _19206 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / s * t) / _18889 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19374] + _19206:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19374] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / s * t) / _18889 * ext_call.return_data[0] / 100 * 10^6) + (_19206 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15519 / s * t) / _18889 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                _8096 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8096]:
                                    revert with 0, 50
                                mem[_8096 + 32] = token1Address
                                if 1 >= mem[_8096]:
                                    revert with 0, 50
                                mem[_8096 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8096 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8096 + 100] = 10^stor259
                                mem[_8096 + 132] = 64
                                mem[_8096 + 164] = mem[_8096]
                                idx = 0
                                s = _8096 + 32
                                t = _8096 + 196
                                while idx < mem[_8096]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8096 + (32 * mem[_8096]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11912 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11936 = mem[_11912]
                                require mem[_11912] <= test266151307()
                                require _11912 + mem[_11912] + 31 < _11912 + return_data.size
                                _11952 = mem[_11912 + mem[_11912]]
                                if mem[_11912 + mem[_11912]] > test266151307():
                                    revert with 0, 65
                                if _11912 + ceil32(return_data.size) + ceil32(32 * mem[_11912 + mem[_11912]]) + 1 > test266151307() or ceil32(32 * mem[_11912 + mem[_11912]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _11912 + ceil32(return_data.size) + ceil32(32 * mem[_11912 + mem[_11912]]) + 1
                                mem[_11912 + ceil32(return_data.size)] = _11952
                                require (32 * _11952) + _11936 + 32 <= return_data.size
                                mem[_11912 + ceil32(return_data.size) + 32 len ceil32(32 * _11952)] = mem[_11912 + _11936 + 32 len ceil32(32 * _11952)]
                                if 1 >= _11952:
                                    revert with 0, 50
                                _15518 = mem[_11912 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11912 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11912 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15802 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15823 = mem[_15802]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _15518) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15802]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518) / mem[_15802] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518) / mem[_15802]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16182 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16237 = mem[_16182]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16377 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16377] > !_16237:
                                            revert with 0, 17
                                        if mem[_16377] + _16237 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518) / _15823 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16377] + _16237:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16377] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518) / _15823 * ext_call.return_data[0] / 100 * 10^6) + (_16237 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518) / _15823 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16183 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16239 = mem[_16183]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16378 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16378] > !_16239:
                                            revert with 0, 17
                                        if mem[_16378] + _16239 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518) / _15823 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16378] + _16239:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16378] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518) / _15823 * ext_call.return_data[0] / 100 * 10^6) + (_16239 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518) / _15823 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11912 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11912 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15874 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15911 = mem[_15874]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _15518 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15874]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / 10^stor259) / mem[_15874] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / 10^stor259) / mem[_15874]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16353 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16439 = mem[_16353]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16628 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16628] > !_16439:
                                                revert with 0, 17
                                            if mem[_16628] + _16439 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / 10^stor259) / _15911 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16628] + _16439:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16628] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / 10^stor259) / _15911 * ext_call.return_data[0] / 100 * 10^6) + (_16439 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / 10^stor259) / _15911 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16354 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16441 = mem[_16354]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16629 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16629] > !_16441:
                                                revert with 0, 17
                                            if mem[_16629] + _16441 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / 10^stor259) / _15911 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16629] + _16441:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16629] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / 10^stor259) / _15911 * ext_call.return_data[0] / 100 * 10^6) + (_16441 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / 10^stor259) / _15911 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11912 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11912 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18874 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18888 = mem[_18874]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _15518 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18874]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / s * t) / mem[_18874] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / s * t) / mem[_18874]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19167 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19201 = mem[_19167]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19371 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19371] > !_19201:
                                                revert with 0, 17
                                            if mem[_19371] + _19201 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / s * t) / _18888 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19371] + _19201:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19371] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / s * t) / _18888 * ext_call.return_data[0] / 100 * 10^6) + (_19201 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / s * t) / _18888 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19168 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19203 = mem[_19168]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19372 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19372] > !_19203:
                                                revert with 0, 17
                                            if mem[_19372] + _19203 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / s * t) / _18888 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19372] + _19203:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19372] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / s * t) / _18888 * ext_call.return_data[0] / 100 * 10^6) + (_19203 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15518 / s * t) / _18888 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                _11921 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_11921]:
                                    revert with 0, 50
                                mem[_11921 + 32] = token1Address
                                if 1 >= mem[_11921]:
                                    revert with 0, 50
                                mem[_11921 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_11921 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_11921 + 100] = s * t
                                mem[_11921 + 132] = 64
                                mem[_11921 + 164] = mem[_11921]
                                idx = 0
                                s = _11921 + 32
                                t = _11921 + 196
                                while idx < mem[_11921]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _11921 + (32 * mem[_11921]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15557 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15589 = mem[_15557]
                                require mem[_15557] <= test266151307()
                                require _15557 + mem[_15557] + 31 < _15557 + return_data.size
                                _15613 = mem[_15557 + mem[_15557]]
                                if mem[_15557 + mem[_15557]] > test266151307():
                                    revert with 0, 65
                                if _15557 + ceil32(return_data.size) + ceil32(32 * mem[_15557 + mem[_15557]]) + 1 > test266151307() or ceil32(32 * mem[_15557 + mem[_15557]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15557 + ceil32(return_data.size) + ceil32(32 * mem[_15557 + mem[_15557]]) + 1
                                mem[_15557 + ceil32(return_data.size)] = _15613
                                require (32 * _15613) + _15589 + 32 <= return_data.size
                                mem[_15557 + ceil32(return_data.size) + 32 len ceil32(32 * _15613)] = mem[_15557 + _15589 + 32 len ceil32(32 * _15613)]
                                if 1 >= _15613:
                                    revert with 0, 50
                                _18723 = mem[_15557 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15557 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15557 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18933 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18950 = mem[_18933]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _18723) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18933]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723) / mem[_18933] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723) / mem[_18933]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19348 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19415 = mem[_19348]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19600 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19600] > !_19415:
                                            revert with 0, 17
                                        if mem[_19600] + _19415 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723) / _18950 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19600] + _19415:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19600] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723) / _18950 * ext_call.return_data[0] / 100 * 10^6) + (_19415 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723) / _18950 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19349 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19417 = mem[_19349]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19601 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19601] > !_19417:
                                            revert with 0, 17
                                        if mem[_19601] + _19417 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723) / _18950 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19601] + _19417:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19601] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723) / _18950 * ext_call.return_data[0] / 100 * 10^6) + (_19417 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723) / _18950 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15557 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15557 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18997 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19035 = mem[_18997]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _18723 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18997]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / 10^stor259) / mem[_18997] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / 10^stor259) / mem[_18997]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19575 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19689 = mem[_19575]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19902 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19902] > !_19689:
                                                revert with 0, 17
                                            if mem[_19902] + _19689 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / 10^stor259) / _19035 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19902] + _19689:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19902] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / 10^stor259) / _19035 * ext_call.return_data[0] / 100 * 10^6) + (_19689 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / 10^stor259) / _19035 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19576 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19691 = mem[_19576]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19903 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19903] > !_19691:
                                                revert with 0, 17
                                            if mem[_19903] + _19691 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / 10^stor259) / _19035 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19903] + _19691:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19903] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / 10^stor259) / _19035 * ext_call.return_data[0] / 100 * 10^6) + (_19691 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / 10^stor259) / _19035 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15557 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15557 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21314 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21327 = mem[_21314]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _18723 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21314]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / s * t) / mem[_21314] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / s * t) / mem[_21314]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21552 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21592 = mem[_21552]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21747 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21747] > !_21592:
                                                revert with 0, 17
                                            if mem[_21747] + _21592 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / s * t) / _21327 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21747] + _21592:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21747] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / s * t) / _21327 * ext_call.return_data[0] / 100 * 10^6) + (_21592 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / s * t) / _21327 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21553 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21594 = mem[_21553]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21748 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21748] > !_21594:
                                                revert with 0, 17
                                            if mem[_21748] + _21594 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / s * t) / _21327 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21748] + _21594:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21748] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / s * t) / _21327 * ext_call.return_data[0] / 100 * 10^6) + (_21594 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18723 / s * t) / _21327 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        _8012 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_8012]:
                            revert with 0, 50
                        mem[_8012 + 32] = token1Address
                        if 1 >= mem[_8012]:
                            revert with 0, 50
                        mem[_8012 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        mem[_8012 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_8012 + 100] = 10^18
                        mem[_8012 + 132] = 64
                        mem[_8012 + 164] = mem[_8012]
                        idx = 0
                        s = _8012 + 32
                        t = _8012 + 196
                        while idx < mem[_8012]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _8012 + (32 * mem[_8012]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11914 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11938 = mem[_11914]
                        require mem[_11914] <= test266151307()
                        require _11914 + mem[_11914] + 31 < _11914 + return_data.size
                        _11954 = mem[_11914 + mem[_11914]]
                        if mem[_11914 + mem[_11914]] > test266151307():
                            revert with 0, 65
                        if _11914 + ceil32(return_data.size) + ceil32(32 * mem[_11914 + mem[_11914]]) + 1 > test266151307() or ceil32(32 * mem[_11914 + mem[_11914]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _11914 + ceil32(return_data.size) + ceil32(32 * mem[_11914 + mem[_11914]]) + 1
                        mem[_11914 + ceil32(return_data.size)] = _11954
                        require (32 * _11954) + _11938 + 32 <= return_data.size
                        mem[_11914 + ceil32(return_data.size) + 32 len ceil32(32 * _11954)] = mem[_11914 + _11938 + 32 len ceil32(32 * _11954)]
                        if 1 >= _11954:
                            revert with 0, 50
                        _15520 = mem[_11914 + ceil32(return_data.size) + 64]
                        _15529 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        if 0 >= mem[_15529]:
                            revert with 0, 50
                        mem[_15529 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                        if 1 >= mem[_15529]:
                            revert with 0, 50
                        mem[_15529 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                        mem[_15529 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_15529 + 100] = _15520
                        mem[_15529 + 132] = 64
                        mem[_15529 + 164] = mem[_15529]
                        idx = 0
                        s = _15529 + 32
                        t = _15529 + 196
                        while idx < mem[_15529]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(routerAddress)
                        staticcall routerAddress.mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _15529 + (32 * mem[_15529]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _18749 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _18767 = mem[_18749]
                        require mem[_18749] <= test266151307()
                        require _18749 + mem[_18749] + 31 < _18749 + return_data.size
                        _18783 = mem[_18749 + mem[_18749]]
                        if mem[_18749 + mem[_18749]] > test266151307():
                            revert with 0, 65
                        if _18749 + ceil32(return_data.size) + ceil32(32 * mem[_18749 + mem[_18749]]) + 1 > test266151307() or ceil32(32 * mem[_18749 + mem[_18749]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _18749 + ceil32(return_data.size) + ceil32(32 * mem[_18749 + mem[_18749]]) + 1
                        mem[_18749 + ceil32(return_data.size)] = _18783
                        require (32 * _18783) + _18767 + 32 <= return_data.size
                        mem[_18749 + ceil32(return_data.size) + 32 len ceil32(32 * _18783)] = mem[_18749 + _18767 + 32 len ceil32(32 * _18783)]
                        if 1 >= _18783:
                            revert with 0, 50
                        _21234 = mem[_18749 + ceil32(return_data.size) + 64]
                        if not stor259:
                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18749 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18749 + ceil32(return_data.size) + 64]):
                                revert with 0, 17
                            require ext_code.size(lpTokenAddress)
                            staticcall lpTokenAddress.0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21358 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21369 = mem[_21358]
                            if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _21234) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                revert with 0, 17
                            if not mem[_21358]:
                                revert with 0, 18
                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234) / mem[_21358] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234) / mem[_21358]:
                                revert with 0, 17
                            if not sub_abddf82e:
                                mem[mem[64] + 36] = this.address
                                require ext_code.size(masterChefAddress)
                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                        gas gas_remaining wei
                                       args poolId, this.address
                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21718 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 64
                                _21777 = mem[_21718]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21930 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_21930] > !_21777:
                                    revert with 0, 17
                                if mem[_21930] + _21777 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234) / _21369 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21930] + _21777:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_21930] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234) / _21369 * ext_call.return_data[0] / 100 * 10^6) + (_21777 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234) / _21369 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(stakingRewardAddress)
                                staticcall stakingRewardAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21719 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21779 = mem[_21719]
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21931 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if mem[_21931] > !_21779:
                                    revert with 0, 17
                                if mem[_21931] + _21779 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234) / _21369 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21931] + _21779:
                                    revert with 0, 17
                                mem[mem[64]] = (mem[_21931] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234) / _21369 * ext_call.return_data[0] / 100 * 10^6) + (_21779 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234) / _21369 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18749 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not 10^stor259:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18749 + ceil32(return_data.size) + 64] / 10^stor259):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21401 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21431 = mem[_21401]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _21234 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21401]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / 10^stor259) / mem[_21401] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / 10^stor259) / mem[_21401]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21910 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _22000 = mem[_21910]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22155 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22155] > !_22000:
                                        revert with 0, 17
                                    if mem[_22155] + _22000 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / 10^stor259) / _21431 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22155] + _22000:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22155] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / 10^stor259) / _21431 * ext_call.return_data[0] / 100 * 10^6) + (_22000 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / 10^stor259) / _21431 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21911 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22002 = mem[_21911]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22156 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_22156] > !_22002:
                                        revert with 0, 17
                                    if mem[_22156] + _22002 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / 10^stor259) / _21431 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22156] + _22002:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_22156] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / 10^stor259) / _21431 * ext_call.return_data[0] / 100 * 10^6) + (_22002 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / 10^stor259) / _21431 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                s = 10
                                t = 1
                                idx = stor259
                                while idx > 1:
                                    if s > -1 / s:
                                        revert with 0, 17
                                    if not bool(idx):
                                        s = s * s
                                        t = t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    s = s * s
                                    t = s * t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                if t > -1 / s:
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18749 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if not s * t:
                                    revert with 0, 18
                                if Mask(112, 0, ext_call.return_data[0]) * _7982 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18749 + ceil32(return_data.size) + 64] / s * t):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22837 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22847 = mem[_22837]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7982) + (Mask(112, 0, ext_call.return_data[32]) * _21234 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22837]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / s * t) / mem[_22837] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / s * t) / mem[_22837]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22972 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23002 = mem[_22972]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23097 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23097] > !_23002:
                                        revert with 0, 17
                                    if mem[_23097] + _23002 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / s * t) / _22847 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23097] + _23002:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23097] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / s * t) / _22847 * ext_call.return_data[0] / 100 * 10^6) + (_23002 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / s * t) / _22847 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22973 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23004 = mem[_22973]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23098 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23098] > !_23004:
                                        revert with 0, 17
                                    if mem[_23098] + _23004 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / s * t) / _22847 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23098] + _23004:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23098] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / s * t) / _22847 * ext_call.return_data[0] / 100 * 10^6) + (_23004 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21234 / s * t) / _22847 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not 10^stor258:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8094 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8094]:
                                    revert with 0, 50
                                mem[_8094 + 32] = token1Address
                                if 1 >= mem[_8094]:
                                    revert with 0, 50
                                mem[_8094 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8094 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8094 + 100] = 1
                                mem[_8094 + 132] = 64
                                mem[_8094 + 164] = mem[_8094]
                                idx = 0
                                s = _8094 + 32
                                t = _8094 + 196
                                while idx < mem[_8094]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8094 + (32 * mem[_8094]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11908 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11933 = mem[_11908]
                                require mem[_11908] <= test266151307()
                                require _11908 + mem[_11908] + 31 < _11908 + return_data.size
                                _11949 = mem[_11908 + mem[_11908]]
                                if mem[_11908 + mem[_11908]] > test266151307():
                                    revert with 0, 65
                                if _11908 + ceil32(return_data.size) + ceil32(32 * mem[_11908 + mem[_11908]]) + 1 > test266151307() or ceil32(32 * mem[_11908 + mem[_11908]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _11908 + ceil32(return_data.size) + ceil32(32 * mem[_11908 + mem[_11908]]) + 1
                                mem[_11908 + ceil32(return_data.size)] = _11949
                                require (32 * _11949) + _11933 + 32 <= return_data.size
                                mem[_11908 + ceil32(return_data.size) + 32 len ceil32(32 * _11949)] = mem[_11908 + _11933 + 32 len ceil32(32 * _11949)]
                                if 1 >= _11949:
                                    revert with 0, 50
                                _15513 = mem[_11908 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11908 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11908 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15801 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15821 = mem[_15801]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15513) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15801]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513) / mem[_15801] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513) / mem[_15801]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16178 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16233 = mem[_16178]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16375 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16375] > !_16233:
                                            revert with 0, 17
                                        if mem[_16375] + _16233 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513) / _15821 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16375] + _16233:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16375] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513) / _15821 * ext_call.return_data[0] / 100 * 10^6) + (_16233 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513) / _15821 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16179 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16235 = mem[_16179]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16376 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16376] > !_16235:
                                            revert with 0, 17
                                        if mem[_16376] + _16235 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513) / _15821 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16376] + _16235:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16376] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513) / _15821 * ext_call.return_data[0] / 100 * 10^6) + (_16235 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513) / _15821 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11908 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11908 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15873 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15908 = mem[_15873]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15513 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15873]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / 10^stor259) / mem[_15873] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / 10^stor259) / mem[_15873]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16349 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16431 = mem[_16349]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16618 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16618] > !_16431:
                                                revert with 0, 17
                                            if mem[_16618] + _16431 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / 10^stor259) / _15908 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16618] + _16431:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16618] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / 10^stor259) / _15908 * ext_call.return_data[0] / 100 * 10^6) + (_16431 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / 10^stor259) / _15908 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16350 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16433 = mem[_16350]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16619 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16619] > !_16433:
                                                revert with 0, 17
                                            if mem[_16619] + _16433 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / 10^stor259) / _15908 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16619] + _16433:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16619] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / 10^stor259) / _15908 * ext_call.return_data[0] / 100 * 10^6) + (_16433 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / 10^stor259) / _15908 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11908 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11908 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18873 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18887 = mem[_18873]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15513 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18873]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / s * t) / mem[_18873] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / s * t) / mem[_18873]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19163 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19197 = mem[_19163]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19368 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19368] > !_19197:
                                                revert with 0, 17
                                            if mem[_19368] + _19197 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / s * t) / _18887 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19368] + _19197:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19368] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / s * t) / _18887 * ext_call.return_data[0] / 100 * 10^6) + (_19197 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / s * t) / _18887 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19164 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19199 = mem[_19164]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19369 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19369] > !_19199:
                                                revert with 0, 17
                                            if mem[_19369] + _19199 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / s * t) / _18887 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19369] + _19199:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19369] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / s * t) / _18887 * ext_call.return_data[0] / 100 * 10^6) + (_19199 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15513 / s * t) / _18887 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8183 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8183]:
                                        revert with 0, 50
                                    mem[_8183 + 32] = token1Address
                                    if 1 >= mem[_8183]:
                                        revert with 0, 50
                                    mem[_8183 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8183 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8183 + 100] = 10^stor259
                                    mem[_8183 + 132] = 64
                                    mem[_8183 + 164] = mem[_8183]
                                    idx = 0
                                    s = _8183 + 32
                                    t = _8183 + 196
                                    while idx < mem[_8183]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8183 + (32 * mem[_8183]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11907 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11932 = mem[_11907]
                                    require mem[_11907] <= test266151307()
                                    require _11907 + mem[_11907] + 31 < _11907 + return_data.size
                                    _11948 = mem[_11907 + mem[_11907]]
                                    if mem[_11907 + mem[_11907]] > test266151307():
                                        revert with 0, 65
                                    if _11907 + ceil32(return_data.size) + ceil32(32 * mem[_11907 + mem[_11907]]) + 1 > test266151307() or ceil32(32 * mem[_11907 + mem[_11907]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _11907 + ceil32(return_data.size) + ceil32(32 * mem[_11907 + mem[_11907]]) + 1
                                    mem[_11907 + ceil32(return_data.size)] = _11948
                                    require (32 * _11948) + _11932 + 32 <= return_data.size
                                    mem[_11907 + ceil32(return_data.size) + 32 len ceil32(32 * _11948)] = mem[_11907 + _11932 + 32 len ceil32(32 * _11948)]
                                    if 1 >= _11948:
                                        revert with 0, 50
                                    _15512 = mem[_11907 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11907 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11907 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15800 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15820 = mem[_15800]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15512) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15800]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512) / mem[_15800] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512) / mem[_15800]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16176 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16230 = mem[_16176]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16373 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16373] > !_16230:
                                                revert with 0, 17
                                            if mem[_16373] + _16230 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512) / _15820 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16373] + _16230:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16373] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512) / _15820 * ext_call.return_data[0] / 100 * 10^6) + (_16230 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512) / _15820 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16177 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16232 = mem[_16177]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16374 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16374] > !_16232:
                                                revert with 0, 17
                                            if mem[_16374] + _16232 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512) / _15820 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16374] + _16232:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16374] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512) / _15820 * ext_call.return_data[0] / 100 * 10^6) + (_16232 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512) / _15820 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11907 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11907 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15872 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15905 = mem[_15872]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15512 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15872]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / 10^stor259) / mem[_15872] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / 10^stor259) / mem[_15872]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16347 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16424 = mem[_16347]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16613 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16613] > !_16424:
                                                    revert with 0, 17
                                                if mem[_16613] + _16424 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / 10^stor259) / _15905 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16613] + _16424:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16613] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / 10^stor259) / _15905 * ext_call.return_data[0] / 100 * 10^6) + (_16424 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / 10^stor259) / _15905 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16348 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16426 = mem[_16348]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16614 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16614] > !_16426:
                                                    revert with 0, 17
                                                if mem[_16614] + _16426 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / 10^stor259) / _15905 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16614] + _16426:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16614] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / 10^stor259) / _15905 * ext_call.return_data[0] / 100 * 10^6) + (_16426 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / 10^stor259) / _15905 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11907 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11907 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18872 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18886 = mem[_18872]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15512 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18872]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / s * t) / mem[_18872] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / s * t) / mem[_18872]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19161 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19194 = mem[_19161]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19366 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19366] > !_19194:
                                                    revert with 0, 17
                                                if mem[_19366] + _19194 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / s * t) / _18886 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19366] + _19194:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19366] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / s * t) / _18886 * ext_call.return_data[0] / 100 * 10^6) + (_19194 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / s * t) / _18886 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19162 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19196 = mem[_19162]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19367 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19367] > !_19196:
                                                    revert with 0, 17
                                                if mem[_19367] + _19196 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / s * t) / _18886 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19367] + _19196:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19367] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / s * t) / _18886 * ext_call.return_data[0] / 100 * 10^6) + (_19196 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15512 / s * t) / _18886 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _11919 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_11919]:
                                        revert with 0, 50
                                    mem[_11919 + 32] = token1Address
                                    if 1 >= mem[_11919]:
                                        revert with 0, 50
                                    mem[_11919 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_11919 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_11919 + 100] = s * t
                                    mem[_11919 + 132] = 64
                                    mem[_11919 + 164] = mem[_11919]
                                    idx = 0
                                    s = _11919 + 32
                                    t = _11919 + 196
                                    while idx < mem[_11919]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _11919 + (32 * mem[_11919]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15555 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15587 = mem[_15555]
                                    require mem[_15555] <= test266151307()
                                    require _15555 + mem[_15555] + 31 < _15555 + return_data.size
                                    _15611 = mem[_15555 + mem[_15555]]
                                    if mem[_15555 + mem[_15555]] > test266151307():
                                        revert with 0, 65
                                    if _15555 + ceil32(return_data.size) + ceil32(32 * mem[_15555 + mem[_15555]]) + 1 > test266151307() or ceil32(32 * mem[_15555 + mem[_15555]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15555 + ceil32(return_data.size) + ceil32(32 * mem[_15555 + mem[_15555]]) + 1
                                    mem[_15555 + ceil32(return_data.size)] = _15611
                                    require (32 * _15611) + _15587 + 32 <= return_data.size
                                    mem[_15555 + ceil32(return_data.size) + 32 len ceil32(32 * _15611)] = mem[_15555 + _15587 + 32 len ceil32(32 * _15611)]
                                    if 1 >= _15611:
                                        revert with 0, 50
                                    _18721 = mem[_15555 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15555 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15555 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18932 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18949 = mem[_18932]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18721) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18932]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721) / mem[_18932] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721) / mem[_18932]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19346 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19412 = mem[_19346]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19598 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19598] > !_19412:
                                                revert with 0, 17
                                            if mem[_19598] + _19412 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721) / _18949 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19598] + _19412:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19598] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721) / _18949 * ext_call.return_data[0] / 100 * 10^6) + (_19412 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721) / _18949 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19347 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19414 = mem[_19347]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19599 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19599] > !_19414:
                                                revert with 0, 17
                                            if mem[_19599] + _19414 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721) / _18949 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19599] + _19414:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19599] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721) / _18949 * ext_call.return_data[0] / 100 * 10^6) + (_19414 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721) / _18949 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15555 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15555 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18996 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19032 = mem[_18996]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18721 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18996]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / 10^stor259) / mem[_18996] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / 10^stor259) / mem[_18996]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19573 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19682 = mem[_19573]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19893 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19893] > !_19682:
                                                    revert with 0, 17
                                                if mem[_19893] + _19682 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / 10^stor259) / _19032 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19893] + _19682:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19893] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / 10^stor259) / _19032 * ext_call.return_data[0] / 100 * 10^6) + (_19682 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / 10^stor259) / _19032 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19574 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19684 = mem[_19574]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19894 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19894] > !_19684:
                                                    revert with 0, 17
                                                if mem[_19894] + _19684 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / 10^stor259) / _19032 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19894] + _19684:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19894] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / 10^stor259) / _19032 * ext_call.return_data[0] / 100 * 10^6) + (_19684 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / 10^stor259) / _19032 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15555 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15555 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21313 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21326 = mem[_21313]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18721 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21313]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / s * t) / mem[_21313] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / s * t) / mem[_21313]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21550 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21589 = mem[_21550]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21745 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21745] > !_21589:
                                                    revert with 0, 17
                                                if mem[_21745] + _21589 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / s * t) / _21326 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21745] + _21589:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21745] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / s * t) / _21326 * ext_call.return_data[0] / 100 * 10^6) + (_21589 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / s * t) / _21326 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21551 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21591 = mem[_21551]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21746 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21746] > !_21591:
                                                    revert with 0, 17
                                                if mem[_21746] + _21591 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / s * t) / _21326 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21746] + _21591:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21746] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / s * t) / _21326 * ext_call.return_data[0] / 100 * 10^6) + (_21591 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18721 / s * t) / _21326 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _8035 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8035]:
                                revert with 0, 50
                            mem[_8035 + 32] = token1Address
                            if 1 >= mem[_8035]:
                                revert with 0, 50
                            mem[_8035 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8035 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8035 + 100] = 10^18
                            mem[_8035 + 132] = 64
                            mem[_8035 + 164] = mem[_8035]
                            idx = 0
                            s = _8035 + 32
                            t = _8035 + 196
                            while idx < mem[_8035]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8035 + (32 * mem[_8035]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11909 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11934 = mem[_11909]
                            require mem[_11909] <= test266151307()
                            require _11909 + mem[_11909] + 31 < _11909 + return_data.size
                            _11950 = mem[_11909 + mem[_11909]]
                            if mem[_11909 + mem[_11909]] > test266151307():
                                revert with 0, 65
                            if _11909 + ceil32(return_data.size) + ceil32(32 * mem[_11909 + mem[_11909]]) + 1 > test266151307() or ceil32(32 * mem[_11909 + mem[_11909]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _11909 + ceil32(return_data.size) + ceil32(32 * mem[_11909 + mem[_11909]]) + 1
                            mem[_11909 + ceil32(return_data.size)] = _11950
                            require (32 * _11950) + _11934 + 32 <= return_data.size
                            mem[_11909 + ceil32(return_data.size) + 32 len ceil32(32 * _11950)] = mem[_11909 + _11934 + 32 len ceil32(32 * _11950)]
                            if 1 >= _11950:
                                revert with 0, 50
                            _15514 = mem[_11909 + ceil32(return_data.size) + 64]
                            _15527 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_15527]:
                                revert with 0, 50
                            mem[_15527 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_15527]:
                                revert with 0, 50
                            mem[_15527 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_15527 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_15527 + 100] = _15514
                            mem[_15527 + 132] = 64
                            mem[_15527 + 164] = mem[_15527]
                            idx = 0
                            s = _15527 + 32
                            t = _15527 + 196
                            while idx < mem[_15527]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _15527 + (32 * mem[_15527]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _18748 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _18766 = mem[_18748]
                            require mem[_18748] <= test266151307()
                            require _18748 + mem[_18748] + 31 < _18748 + return_data.size
                            _18782 = mem[_18748 + mem[_18748]]
                            if mem[_18748 + mem[_18748]] > test266151307():
                                revert with 0, 65
                            if _18748 + ceil32(return_data.size) + ceil32(32 * mem[_18748 + mem[_18748]]) + 1 > test266151307() or ceil32(32 * mem[_18748 + mem[_18748]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _18748 + ceil32(return_data.size) + ceil32(32 * mem[_18748 + mem[_18748]]) + 1
                            mem[_18748 + ceil32(return_data.size)] = _18782
                            require (32 * _18782) + _18766 + 32 <= return_data.size
                            mem[_18748 + ceil32(return_data.size) + 32 len ceil32(32 * _18782)] = mem[_18748 + _18766 + 32 len ceil32(32 * _18782)]
                            if 1 >= _18782:
                                revert with 0, 50
                            _21233 = mem[_18748 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18748 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18748 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21357 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21368 = mem[_21357]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21233) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21357]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233) / mem[_21357] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233) / mem[_21357]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21716 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21774 = mem[_21716]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21928 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21928] > !_21774:
                                        revert with 0, 17
                                    if mem[_21928] + _21774 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233) / _21368 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21928] + _21774:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21928] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233) / _21368 * ext_call.return_data[0] / 100 * 10^6) + (_21774 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233) / _21368 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21717 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21776 = mem[_21717]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21929 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21929] > !_21776:
                                        revert with 0, 17
                                    if mem[_21929] + _21776 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233) / _21368 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21929] + _21776:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21929] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233) / _21368 * ext_call.return_data[0] / 100 * 10^6) + (_21776 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233) / _21368 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18748 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18748 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21400 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21428 = mem[_21400]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21233 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21400]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / 10^stor259) / mem[_21400] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / 10^stor259) / mem[_21400]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21908 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21993 = mem[_21908]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22150 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22150] > !_21993:
                                            revert with 0, 17
                                        if mem[_22150] + _21993 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / 10^stor259) / _21428 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22150] + _21993:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22150] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / 10^stor259) / _21428 * ext_call.return_data[0] / 100 * 10^6) + (_21993 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / 10^stor259) / _21428 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21909 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21995 = mem[_21909]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22151 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22151] > !_21995:
                                            revert with 0, 17
                                        if mem[_22151] + _21995 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / 10^stor259) / _21428 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22151] + _21995:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22151] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / 10^stor259) / _21428 * ext_call.return_data[0] / 100 * 10^6) + (_21995 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / 10^stor259) / _21428 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18748 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18748 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22836 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22846 = mem[_22836]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21233 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22836]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / s * t) / mem[_22836] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / s * t) / mem[_22836]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22970 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22999 = mem[_22970]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23095 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23095] > !_22999:
                                            revert with 0, 17
                                        if mem[_23095] + _22999 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / s * t) / _22846 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23095] + _22999:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23095] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / s * t) / _22846 * ext_call.return_data[0] / 100 * 10^6) + (_22999 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / s * t) / _22846 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22971 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23001 = mem[_22971]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23096 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23096] > !_23001:
                                            revert with 0, 17
                                        if mem[_23096] + _23001 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / s * t) / _22846 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23096] + _23001:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23096] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / s * t) / _22846 * ext_call.return_data[0] / 100 * 10^6) + (_23001 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21233 / s * t) / _22846 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        s = 10
                        t = 1
                        idx = stor258
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if not s * t:
                            revert with 0, 18
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12072 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12072]:
                                    revert with 0, 50
                                mem[_12072 + 32] = token1Address
                                if 1 >= mem[_12072]:
                                    revert with 0, 50
                                mem[_12072 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12072 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12072 + 100] = 1
                                mem[_12072 + 132] = 64
                                mem[_12072 + 164] = mem[_12072]
                                idx = 0
                                u = _12072 + 32
                                v = _12072 + 196
                                while idx < mem[_12072]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12072 + (32 * mem[_12072]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15553 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15585 = mem[_15553]
                                require mem[_15553] <= test266151307()
                                require _15553 + mem[_15553] + 31 < _15553 + return_data.size
                                _15609 = mem[_15553 + mem[_15553]]
                                if mem[_15553 + mem[_15553]] > test266151307():
                                    revert with 0, 65
                                if _15553 + ceil32(return_data.size) + ceil32(32 * mem[_15553 + mem[_15553]]) + 1 > test266151307() or ceil32(32 * mem[_15553 + mem[_15553]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15553 + ceil32(return_data.size) + ceil32(32 * mem[_15553 + mem[_15553]]) + 1
                                mem[_15553 + ceil32(return_data.size)] = _15609
                                require (32 * _15609) + _15585 + 32 <= return_data.size
                                mem[_15553 + ceil32(return_data.size) + 32 len ceil32(32 * _15609)] = mem[_15553 + _15585 + 32 len ceil32(32 * _15609)]
                                if 1 >= _15609:
                                    revert with 0, 50
                                _18717 = mem[_15553 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15553 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15553 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18931 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18947 = mem[_18931]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18717) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18931]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / mem[_18931] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / mem[_18931]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19342 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19408 = mem[_19342]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19596 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19596] > !_19408:
                                            revert with 0, 17
                                        if mem[_19596] + _19408 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18947 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19596] + _19408:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19596] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18947 * ext_call.return_data[0] / 100 * 10^6) + (_19408 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18947 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19343 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19410 = mem[_19343]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19597 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19597] > !_19410:
                                            revert with 0, 17
                                        if mem[_19597] + _19410 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18947 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19597] + _19410:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19597] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18947 * ext_call.return_data[0] / 100 * 10^6) + (_19410 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717) / _18947 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15553 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15553 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18995 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19029 = mem[_18995]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18995]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / mem[_18995] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / mem[_18995]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19569 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19674 = mem[_19569]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19887 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19887] > !_19674:
                                                revert with 0, 17
                                            if mem[_19887] + _19674 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19029 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19887] + _19674:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19887] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19029 * ext_call.return_data[0] / 100 * 10^6) + (_19674 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19029 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19570 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19676 = mem[_19570]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19888 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19888] > !_19676:
                                                revert with 0, 17
                                            if mem[_19888] + _19676 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19029 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19888] + _19676:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19888] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19029 * ext_call.return_data[0] / 100 * 10^6) + (_19676 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / 10^stor259) / _19029 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15553 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15553 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21312 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21325 = mem[_21312]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18717 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21312]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / u * v) / mem[_21312] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / u * v) / mem[_21312]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21546 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21585 = mem[_21546]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21742 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21742] > !_21585:
                                                revert with 0, 17
                                            if mem[_21742] + _21585 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / u * v) / _21325 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21742] + _21585:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21742] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / u * v) / _21325 * ext_call.return_data[0] / 100 * 10^6) + (_21585 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / u * v) / _21325 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21547 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21587 = mem[_21547]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21743 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21743] > !_21587:
                                                revert with 0, 17
                                            if mem[_21743] + _21587 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / u * v) / _21325 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21743] + _21587:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21743] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / u * v) / _21325 * ext_call.return_data[0] / 100 * 10^6) + (_21587 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18717 / u * v) / _21325 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12133 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12133]:
                                        revert with 0, 50
                                    mem[_12133 + 32] = token1Address
                                    if 1 >= mem[_12133]:
                                        revert with 0, 50
                                    mem[_12133 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12133 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12133 + 100] = 10^stor259
                                    mem[_12133 + 132] = 64
                                    mem[_12133 + 164] = mem[_12133]
                                    idx = 0
                                    u = _12133 + 32
                                    v = _12133 + 196
                                    while idx < mem[_12133]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12133 + (32 * mem[_12133]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15552 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15584 = mem[_15552]
                                    require mem[_15552] <= test266151307()
                                    require _15552 + mem[_15552] + 31 < _15552 + return_data.size
                                    _15608 = mem[_15552 + mem[_15552]]
                                    if mem[_15552 + mem[_15552]] > test266151307():
                                        revert with 0, 65
                                    if _15552 + ceil32(return_data.size) + ceil32(32 * mem[_15552 + mem[_15552]]) + 1 > test266151307() or ceil32(32 * mem[_15552 + mem[_15552]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15552 + ceil32(return_data.size) + ceil32(32 * mem[_15552 + mem[_15552]]) + 1
                                    mem[_15552 + ceil32(return_data.size)] = _15608
                                    require (32 * _15608) + _15584 + 32 <= return_data.size
                                    mem[_15552 + ceil32(return_data.size) + 32 len ceil32(32 * _15608)] = mem[_15552 + _15584 + 32 len ceil32(32 * _15608)]
                                    if 1 >= _15608:
                                        revert with 0, 50
                                    _18716 = mem[_15552 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15552 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15552 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18930 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18946 = mem[_18930]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18716) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18930]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716) / mem[_18930] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716) / mem[_18930]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19340 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19405 = mem[_19340]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19594 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19594] > !_19405:
                                                revert with 0, 17
                                            if mem[_19594] + _19405 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716) / _18946 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19594] + _19405:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19594] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716) / _18946 * ext_call.return_data[0] / 100 * 10^6) + (_19405 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716) / _18946 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19341 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19407 = mem[_19341]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19595 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19595] > !_19407:
                                                revert with 0, 17
                                            if mem[_19595] + _19407 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716) / _18946 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19595] + _19407:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19595] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716) / _18946 * ext_call.return_data[0] / 100 * 10^6) + (_19407 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716) / _18946 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15552 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15552 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18994 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19026 = mem[_18994]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18716 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18994]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / 10^stor259) / mem[_18994] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / 10^stor259) / mem[_18994]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19567 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19667 = mem[_19567]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19882 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19882] > !_19667:
                                                    revert with 0, 17
                                                if mem[_19882] + _19667 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / 10^stor259) / _19026 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19882] + _19667:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19882] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / 10^stor259) / _19026 * ext_call.return_data[0] / 100 * 10^6) + (_19667 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / 10^stor259) / _19026 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19568 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19669 = mem[_19568]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19883 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19883] > !_19669:
                                                    revert with 0, 17
                                                if mem[_19883] + _19669 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / 10^stor259) / _19026 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19883] + _19669:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19883] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / 10^stor259) / _19026 * ext_call.return_data[0] / 100 * 10^6) + (_19669 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / 10^stor259) / _19026 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15552 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15552 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21311 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21324 = mem[_21311]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18716 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21311]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / u * v) / mem[_21311] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / u * v) / mem[_21311]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21544 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21582 = mem[_21544]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21740 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21740] > !_21582:
                                                    revert with 0, 17
                                                if mem[_21740] + _21582 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / u * v) / _21324 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21740] + _21582:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21740] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / u * v) / _21324 * ext_call.return_data[0] / 100 * 10^6) + (_21582 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / u * v) / _21324 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21545 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21584 = mem[_21545]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21741 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21741] > !_21584:
                                                    revert with 0, 17
                                                if mem[_21741] + _21584 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / u * v) / _21324 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21741] + _21584:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21741] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / u * v) / _21324 * ext_call.return_data[0] / 100 * 10^6) + (_21584 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18716 / u * v) / _21324 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    _15565 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15565]:
                                        revert with 0, 50
                                    mem[_15565 + 32] = token1Address
                                    if 1 >= mem[_15565]:
                                        revert with 0, 50
                                    mem[_15565 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15565 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15565 + 100] = u * v
                                    mem[_15565 + 132] = 64
                                    mem[_15565 + 164] = mem[_15565]
                                    idx = 0
                                    u = _15565 + 32
                                    v = _15565 + 196
                                    while idx < mem[_15565]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15565 + (32 * mem[_15565]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18746 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18764 = mem[_18746]
                                    require mem[_18746] <= test266151307()
                                    require _18746 + mem[_18746] + 31 < _18746 + return_data.size
                                    _18780 = mem[_18746 + mem[_18746]]
                                    if mem[_18746 + mem[_18746]] > test266151307():
                                        revert with 0, 65
                                    if _18746 + ceil32(return_data.size) + ceil32(32 * mem[_18746 + mem[_18746]]) + 1 > test266151307() or ceil32(32 * mem[_18746 + mem[_18746]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _18746 + ceil32(return_data.size) + ceil32(32 * mem[_18746 + mem[_18746]]) + 1
                                    mem[_18746 + ceil32(return_data.size)] = _18780
                                    require (32 * _18780) + _18764 + 32 <= return_data.size
                                    mem[_18746 + ceil32(return_data.size) + 32 len ceil32(32 * _18780)] = mem[_18746 + _18764 + 32 len ceil32(32 * _18780)]
                                    if 1 >= _18780:
                                        revert with 0, 50
                                    _21231 = mem[_18746 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18746 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18746 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21356 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21367 = mem[_21356]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21231) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21356]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231) / mem[_21356] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231) / mem[_21356]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21714 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21771 = mem[_21714]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21926 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21926] > !_21771:
                                                revert with 0, 17
                                            if mem[_21926] + _21771 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231) / _21367 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21926] + _21771:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21926] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231) / _21367 * ext_call.return_data[0] / 100 * 10^6) + (_21771 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231) / _21367 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21715 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21773 = mem[_21715]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21927 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21927] > !_21773:
                                                revert with 0, 17
                                            if mem[_21927] + _21773 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231) / _21367 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21927] + _21773:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21927] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231) / _21367 * ext_call.return_data[0] / 100 * 10^6) + (_21773 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231) / _21367 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18746 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18746 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21399 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21425 = mem[_21399]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21231 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21399]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / 10^stor259) / mem[_21399] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / 10^stor259) / mem[_21399]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21906 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21986 = mem[_21906]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22141 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22141] > !_21986:
                                                    revert with 0, 17
                                                if mem[_22141] + _21986 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / 10^stor259) / _21425 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22141] + _21986:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22141] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / 10^stor259) / _21425 * ext_call.return_data[0] / 100 * 10^6) + (_21986 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / 10^stor259) / _21425 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21907 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21988 = mem[_21907]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22142 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22142] > !_21988:
                                                    revert with 0, 17
                                                if mem[_22142] + _21988 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / 10^stor259) / _21425 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22142] + _21988:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22142] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / 10^stor259) / _21425 * ext_call.return_data[0] / 100 * 10^6) + (_21988 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / 10^stor259) / _21425 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18746 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18746 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22835 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22845 = mem[_22835]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21231 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22835]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / u * v) / mem[_22835] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / u * v) / mem[_22835]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22968 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22996 = mem[_22968]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23093 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23093] > !_22996:
                                                    revert with 0, 17
                                                if mem[_23093] + _22996 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / u * v) / _22845 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23093] + _22996:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23093] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / u * v) / _22845 * ext_call.return_data[0] / 100 * 10^6) + (_22996 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / u * v) / _22845 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22969 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22998 = mem[_22969]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23094 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23094] > !_22998:
                                                    revert with 0, 17
                                                if mem[_23094] + _22998 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / u * v) / _22845 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23094] + _22998:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23094] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / u * v) / _22845 * ext_call.return_data[0] / 100 * 10^6) + (_22998 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21231 / u * v) / _22845 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _11975 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_11975]:
                                revert with 0, 50
                            mem[_11975 + 32] = token1Address
                            if 1 >= mem[_11975]:
                                revert with 0, 50
                            mem[_11975 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_11975 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_11975 + 100] = 10^18
                            mem[_11975 + 132] = 64
                            mem[_11975 + 164] = mem[_11975]
                            idx = 0
                            u = _11975 + 32
                            v = _11975 + 196
                            while idx < mem[_11975]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _11975 + (32 * mem[_11975]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15554 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15586 = mem[_15554]
                            require mem[_15554] <= test266151307()
                            require _15554 + mem[_15554] + 31 < _15554 + return_data.size
                            _15610 = mem[_15554 + mem[_15554]]
                            if mem[_15554 + mem[_15554]] > test266151307():
                                revert with 0, 65
                            if _15554 + ceil32(return_data.size) + ceil32(32 * mem[_15554 + mem[_15554]]) + 1 > test266151307() or ceil32(32 * mem[_15554 + mem[_15554]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _15554 + ceil32(return_data.size) + ceil32(32 * mem[_15554 + mem[_15554]]) + 1
                            mem[_15554 + ceil32(return_data.size)] = _15610
                            require (32 * _15610) + _15586 + 32 <= return_data.size
                            mem[_15554 + ceil32(return_data.size) + 32 len ceil32(32 * _15610)] = mem[_15554 + _15586 + 32 len ceil32(32 * _15610)]
                            if 1 >= _15610:
                                revert with 0, 50
                            _18718 = mem[_15554 + ceil32(return_data.size) + 64]
                            _18731 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_18731]:
                                revert with 0, 50
                            mem[_18731 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_18731]:
                                revert with 0, 50
                            mem[_18731 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_18731 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_18731 + 100] = _18718
                            mem[_18731 + 132] = 64
                            mem[_18731 + 164] = mem[_18731]
                            idx = 0
                            u = _18731 + 32
                            v = _18731 + 196
                            while idx < mem[_18731]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _18731 + (32 * mem[_18731]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21242 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21248 = mem[_21242]
                            require mem[_21242] <= test266151307()
                            require _21242 + mem[_21242] + 31 < _21242 + return_data.size
                            _21254 = mem[_21242 + mem[_21242]]
                            if mem[_21242 + mem[_21242]] > test266151307():
                                revert with 0, 65
                            if _21242 + ceil32(return_data.size) + ceil32(32 * mem[_21242 + mem[_21242]]) + 1 > test266151307() or ceil32(32 * mem[_21242 + mem[_21242]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _21242 + ceil32(return_data.size) + ceil32(32 * mem[_21242 + mem[_21242]]) + 1
                            mem[_21242 + ceil32(return_data.size)] = _21254
                            require (32 * _21254) + _21248 + 32 <= return_data.size
                            mem[_21242 + ceil32(return_data.size) + 32 len ceil32(32 * _21254)] = mem[_21242 + _21248 + 32 len ceil32(32 * _21254)]
                            if 1 >= _21254:
                                revert with 0, 50
                            _22800 = mem[_21242 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21242 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21242 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22862 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22867 = mem[_22862]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22800) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22862]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800) / mem[_22862] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800) / mem[_22862]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23076 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23111 = mem[_23076]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23193 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23193] > !_23111:
                                        revert with 0, 17
                                    if mem[_23193] + _23111 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800) / _22867 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23193] + _23111:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23193] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800) / _22867 * ext_call.return_data[0] / 100 * 10^6) + (_23111 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800) / _22867 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23077 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23113 = mem[_23077]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23194 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23194] > !_23113:
                                        revert with 0, 17
                                    if mem[_23194] + _23113 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800) / _22867 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23194] + _23113:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23194] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800) / _22867 * ext_call.return_data[0] / 100 * 10^6) + (_23113 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800) / _22867 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21242 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21242 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22882 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22897 = mem[_22882]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22800 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22882]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / 10^stor259) / mem[_22882] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / 10^stor259) / mem[_22882]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23183 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23227 = mem[_23183]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23297 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23297] > !_23227:
                                            revert with 0, 17
                                        if mem[_23297] + _23227 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / 10^stor259) / _22897 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23297] + _23227:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23297] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / 10^stor259) / _22897 * ext_call.return_data[0] / 100 * 10^6) + (_23227 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / 10^stor259) / _22897 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23184 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23229 = mem[_23184]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23298 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23298] > !_23229:
                                            revert with 0, 17
                                        if mem[_23298] + _23229 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / 10^stor259) / _22897 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23298] + _23229:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23298] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / 10^stor259) / _22897 * ext_call.return_data[0] / 100 * 10^6) + (_23229 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / 10^stor259) / _22897 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    u = 10
                                    v = 1
                                    idx = stor259
                                    while idx > 1:
                                        if u > -1 / u:
                                            revert with 0, 17
                                        if not bool(idx):
                                            u = u * u
                                            v = v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        u = u * u
                                        v = u * v
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if v > -1 / u:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21242 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not u * v:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21242 + ceil32(return_data.size) + 64] / u * v):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23525 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23530 = mem[_23525]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22800 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23525]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / u * v) / mem[_23525] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / u * v) / mem[_23525]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23571 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23585 = mem[_23571]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23622 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23622] > !_23585:
                                            revert with 0, 17
                                        if mem[_23622] + _23585 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / u * v) / _23530 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23622] + _23585:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23622] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / u * v) / _23530 * ext_call.return_data[0] / 100 * 10^6) + (_23585 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / u * v) / _23530 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23572 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23587 = mem[_23572]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23623 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23623] > !_23587:
                                            revert with 0, 17
                                        if mem[_23623] + _23587 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / u * v) / _23530 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23623] + _23587:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23623] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / u * v) / _23530 * ext_call.return_data[0] / 100 * 10^6) + (_23587 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7982 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22800 / u * v) / _23530 * ext_call.return_data[0] / 100 * 10^6) / 10^18
            else:
                if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = 10^stor258
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (2 * ceil32(return_data.size)) + 128
                    t = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                            gas gas_remaining wei
                           args 10^stor258, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _4042 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _4051 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^stor258) >> 32 + 192]
                    require (32 * _4051) + _4042 + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _4051)] = mem[(2 * ceil32(return_data.size)) + _4042 + 224 len ceil32(32 * _4051)]
                    if 1 >= _4051:
                        revert with 0, 50
                    _7981 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _8041 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8041]:
                                    revert with 0, 50
                                mem[_8041 + 32] = token1Address
                                if 1 >= mem[_8041]:
                                    revert with 0, 50
                                mem[_8041 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_8041 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8041 + 100] = 1
                                mem[_8041 + 132] = 64
                                mem[_8041 + 164] = mem[_8041]
                                idx = 0
                                s = _8041 + 32
                                t = _8041 + 196
                                while idx < mem[_8041]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8041 + (32 * mem[_8041]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11903 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11929 = mem[_11903]
                                require mem[_11903] <= test266151307()
                                require _11903 + mem[_11903] + 31 < _11903 + return_data.size
                                _11945 = mem[_11903 + mem[_11903]]
                                if mem[_11903 + mem[_11903]] > test266151307():
                                    revert with 0, 65
                                if _11903 + ceil32(return_data.size) + ceil32(32 * mem[_11903 + mem[_11903]]) + 1 > test266151307() or ceil32(32 * mem[_11903 + mem[_11903]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _11903 + ceil32(return_data.size) + ceil32(32 * mem[_11903 + mem[_11903]]) + 1
                                mem[_11903 + ceil32(return_data.size)] = _11945
                                require (32 * _11945) + _11929 + 32 <= return_data.size
                                mem[_11903 + ceil32(return_data.size) + 32 len ceil32(32 * _11945)] = mem[_11903 + _11929 + 32 len ceil32(32 * _11945)]
                                if 1 >= _11945:
                                    revert with 0, 50
                                _15504 = mem[_11903 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_11903 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11903 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15797 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15817 = mem[_15797]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _15504) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_15797]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / mem[_15797] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / mem[_15797]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16172 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _16224 = mem[_16172]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16370 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16370] > !_16224:
                                            revert with 0, 17
                                        if mem[_16370] + _16224 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15817 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16370] + _16224:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16370] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15817 * ext_call.return_data[0] / 100 * 10^6) + (_16224 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15817 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16173 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _16226 = mem[_16173]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _16371 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_16371] > !_16226:
                                            revert with 0, 17
                                        if mem[_16371] + _16226 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15817 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16371] + _16226:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_16371] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15817 * ext_call.return_data[0] / 100 * 10^6) + (_16226 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504) / _15817 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11903 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11903 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15870 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15902 = mem[_15870]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15870]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / mem[_15870] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / mem[_15870]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16343 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16414 = mem[_16343]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16592 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16592] > !_16414:
                                                revert with 0, 17
                                            if mem[_16592] + _16414 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15902 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16592] + _16414:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16592] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15902 * ext_call.return_data[0] / 100 * 10^6) + (_16414 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15902 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16344 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16416 = mem[_16344]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16593 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16593] > !_16416:
                                                revert with 0, 17
                                            if mem[_16593] + _16416 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15902 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16593] + _16416:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16593] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15902 * ext_call.return_data[0] / 100 * 10^6) + (_16416 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / 10^stor259) / _15902 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11903 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11903 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18870 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18884 = mem[_18870]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18870]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / mem[_18870] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / mem[_18870]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19155 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19189 = mem[_19155]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19362 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19362] > !_19189:
                                                revert with 0, 17
                                            if mem[_19362] + _19189 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18884 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19362] + _19189:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19362] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18884 * ext_call.return_data[0] / 100 * 10^6) + (_19189 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18884 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19156 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19191 = mem[_19156]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19363 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19363] > !_19191:
                                                revert with 0, 17
                                            if mem[_19363] + _19191 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18884 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19363] + _19191:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19363] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18884 * ext_call.return_data[0] / 100 * 10^6) + (_19191 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15504 / s * t) / _18884 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _8090 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8090]:
                                        revert with 0, 50
                                    mem[_8090 + 32] = token1Address
                                    if 1 >= mem[_8090]:
                                        revert with 0, 50
                                    mem[_8090 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8090 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8090 + 100] = 10^stor259
                                    mem[_8090 + 132] = 64
                                    mem[_8090 + 164] = mem[_8090]
                                    idx = 0
                                    s = _8090 + 32
                                    t = _8090 + 196
                                    while idx < mem[_8090]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8090 + (32 * mem[_8090]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11902 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11928 = mem[_11902]
                                    require mem[_11902] <= test266151307()
                                    require _11902 + mem[_11902] + 31 < _11902 + return_data.size
                                    _11944 = mem[_11902 + mem[_11902]]
                                    if mem[_11902 + mem[_11902]] > test266151307():
                                        revert with 0, 65
                                    if _11902 + ceil32(return_data.size) + ceil32(32 * mem[_11902 + mem[_11902]]) + 1 > test266151307() or ceil32(32 * mem[_11902 + mem[_11902]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _11902 + ceil32(return_data.size) + ceil32(32 * mem[_11902 + mem[_11902]]) + 1
                                    mem[_11902 + ceil32(return_data.size)] = _11944
                                    require (32 * _11944) + _11928 + 32 <= return_data.size
                                    mem[_11902 + ceil32(return_data.size) + 32 len ceil32(32 * _11944)] = mem[_11902 + _11928 + 32 len ceil32(32 * _11944)]
                                    if 1 >= _11944:
                                        revert with 0, 50
                                    _15503 = mem[_11902 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11902 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11902 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15796 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15816 = mem[_15796]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _15503) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15796]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503) / mem[_15796] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503) / mem[_15796]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16170 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16221 = mem[_16170]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16368 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16368] > !_16221:
                                                revert with 0, 17
                                            if mem[_16368] + _16221 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503) / _15816 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16368] + _16221:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16368] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503) / _15816 * ext_call.return_data[0] / 100 * 10^6) + (_16221 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503) / _15816 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16171 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16223 = mem[_16171]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16369 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16369] > !_16223:
                                                revert with 0, 17
                                            if mem[_16369] + _16223 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503) / _15816 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16369] + _16223:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16369] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503) / _15816 * ext_call.return_data[0] / 100 * 10^6) + (_16223 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503) / _15816 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11902 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11902 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15869 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15899 = mem[_15869]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _15503 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15869]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / 10^stor259) / mem[_15869] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / 10^stor259) / mem[_15869]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16341 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16407 = mem[_16341]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16587 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16587] > !_16407:
                                                    revert with 0, 17
                                                if mem[_16587] + _16407 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / 10^stor259) / _15899 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16587] + _16407:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16587] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / 10^stor259) / _15899 * ext_call.return_data[0] / 100 * 10^6) + (_16407 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / 10^stor259) / _15899 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16342 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16409 = mem[_16342]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16588 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16588] > !_16409:
                                                    revert with 0, 17
                                                if mem[_16588] + _16409 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / 10^stor259) / _15899 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16588] + _16409:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16588] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / 10^stor259) / _15899 * ext_call.return_data[0] / 100 * 10^6) + (_16409 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / 10^stor259) / _15899 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11902 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11902 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18869 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18883 = mem[_18869]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _15503 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18869]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / s * t) / mem[_18869] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / s * t) / mem[_18869]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19153 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19186 = mem[_19153]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19360 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19360] > !_19186:
                                                    revert with 0, 17
                                                if mem[_19360] + _19186 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / s * t) / _18883 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19360] + _19186:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19360] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / s * t) / _18883 * ext_call.return_data[0] / 100 * 10^6) + (_19186 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / s * t) / _18883 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19154 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19188 = mem[_19154]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19361 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19361] > !_19188:
                                                    revert with 0, 17
                                                if mem[_19361] + _19188 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / s * t) / _18883 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19361] + _19188:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19361] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / s * t) / _18883 * ext_call.return_data[0] / 100 * 10^6) + (_19188 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15503 / s * t) / _18883 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _11917 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_11917]:
                                        revert with 0, 50
                                    mem[_11917 + 32] = token1Address
                                    if 1 >= mem[_11917]:
                                        revert with 0, 50
                                    mem[_11917 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_11917 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_11917 + 100] = s * t
                                    mem[_11917 + 132] = 64
                                    mem[_11917 + 164] = mem[_11917]
                                    idx = 0
                                    s = _11917 + 32
                                    t = _11917 + 196
                                    while idx < mem[_11917]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _11917 + (32 * mem[_11917]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15548 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15581 = mem[_15548]
                                    require mem[_15548] <= test266151307()
                                    require _15548 + mem[_15548] + 31 < _15548 + return_data.size
                                    _15605 = mem[_15548 + mem[_15548]]
                                    if mem[_15548 + mem[_15548]] > test266151307():
                                        revert with 0, 65
                                    if _15548 + ceil32(return_data.size) + ceil32(32 * mem[_15548 + mem[_15548]]) + 1 > test266151307() or ceil32(32 * mem[_15548 + mem[_15548]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15548 + ceil32(return_data.size) + ceil32(32 * mem[_15548 + mem[_15548]]) + 1
                                    mem[_15548 + ceil32(return_data.size)] = _15605
                                    require (32 * _15605) + _15581 + 32 <= return_data.size
                                    mem[_15548 + ceil32(return_data.size) + 32 len ceil32(32 * _15605)] = mem[_15548 + _15581 + 32 len ceil32(32 * _15605)]
                                    if 1 >= _15605:
                                        revert with 0, 50
                                    _18713 = mem[_15548 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15548 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15548 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18929 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18945 = mem[_18929]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _18713) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18929]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / mem[_18929] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / mem[_18929]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19338 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19402 = mem[_19338]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19592 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19592] > !_19402:
                                                revert with 0, 17
                                            if mem[_19592] + _19402 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18945 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19592] + _19402:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19592] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18945 * ext_call.return_data[0] / 100 * 10^6) + (_19402 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18945 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19339 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19404 = mem[_19339]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19593 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19593] > !_19404:
                                                revert with 0, 17
                                            if mem[_19593] + _19404 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18945 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19593] + _19404:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19593] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18945 * ext_call.return_data[0] / 100 * 10^6) + (_19404 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713) / _18945 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15548 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15548 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18993 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19023 = mem[_18993]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18993]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / mem[_18993] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / mem[_18993]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19565 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19660 = mem[_19565]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19869 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19869] > !_19660:
                                                    revert with 0, 17
                                                if mem[_19869] + _19660 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19023 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19869] + _19660:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19869] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19023 * ext_call.return_data[0] / 100 * 10^6) + (_19660 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19023 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19566 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19662 = mem[_19566]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19870 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19870] > !_19662:
                                                    revert with 0, 17
                                                if mem[_19870] + _19662 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19023 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19870] + _19662:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19870] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19023 * ext_call.return_data[0] / 100 * 10^6) + (_19662 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / 10^stor259) / _19023 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15548 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15548 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21310 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21323 = mem[_21310]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _18713 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21310]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / s * t) / mem[_21310] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / s * t) / mem[_21310]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21542 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21579 = mem[_21542]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21738 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21738] > !_21579:
                                                    revert with 0, 17
                                                if mem[_21738] + _21579 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / s * t) / _21323 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21738] + _21579:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21738] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / s * t) / _21323 * ext_call.return_data[0] / 100 * 10^6) + (_21579 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / s * t) / _21323 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21543 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21581 = mem[_21543]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21739 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21739] > !_21581:
                                                    revert with 0, 17
                                                if mem[_21739] + _21581 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / s * t) / _21323 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21739] + _21581:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21739] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / s * t) / _21323 * ext_call.return_data[0] / 100 * 10^6) + (_21581 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18713 / s * t) / _21323 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _8010 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_8010]:
                                revert with 0, 50
                            mem[_8010 + 32] = token1Address
                            if 1 >= mem[_8010]:
                                revert with 0, 50
                            mem[_8010 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_8010 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_8010 + 100] = 10^18
                            mem[_8010 + 132] = 64
                            mem[_8010 + 164] = mem[_8010]
                            idx = 0
                            s = _8010 + 32
                            t = _8010 + 196
                            while idx < mem[_8010]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _8010 + (32 * mem[_8010]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11904 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11930 = mem[_11904]
                            require mem[_11904] <= test266151307()
                            require _11904 + mem[_11904] + 31 < _11904 + return_data.size
                            _11946 = mem[_11904 + mem[_11904]]
                            if mem[_11904 + mem[_11904]] > test266151307():
                                revert with 0, 65
                            if _11904 + ceil32(return_data.size) + ceil32(32 * mem[_11904 + mem[_11904]]) + 1 > test266151307() or ceil32(32 * mem[_11904 + mem[_11904]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _11904 + ceil32(return_data.size) + ceil32(32 * mem[_11904 + mem[_11904]]) + 1
                            mem[_11904 + ceil32(return_data.size)] = _11946
                            require (32 * _11946) + _11930 + 32 <= return_data.size
                            mem[_11904 + ceil32(return_data.size) + 32 len ceil32(32 * _11946)] = mem[_11904 + _11930 + 32 len ceil32(32 * _11946)]
                            if 1 >= _11946:
                                revert with 0, 50
                            _15505 = mem[_11904 + ceil32(return_data.size) + 64]
                            _15525 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_15525]:
                                revert with 0, 50
                            mem[_15525 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_15525]:
                                revert with 0, 50
                            mem[_15525 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_15525 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_15525 + 100] = _15505
                            mem[_15525 + 132] = 64
                            mem[_15525 + 164] = mem[_15525]
                            idx = 0
                            s = _15525 + 32
                            t = _15525 + 196
                            while idx < mem[_15525]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _15525 + (32 * mem[_15525]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _18745 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _18763 = mem[_18745]
                            require mem[_18745] <= test266151307()
                            require _18745 + mem[_18745] + 31 < _18745 + return_data.size
                            _18779 = mem[_18745 + mem[_18745]]
                            if mem[_18745 + mem[_18745]] > test266151307():
                                revert with 0, 65
                            if _18745 + ceil32(return_data.size) + ceil32(32 * mem[_18745 + mem[_18745]]) + 1 > test266151307() or ceil32(32 * mem[_18745 + mem[_18745]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _18745 + ceil32(return_data.size) + ceil32(32 * mem[_18745 + mem[_18745]]) + 1
                            mem[_18745 + ceil32(return_data.size)] = _18779
                            require (32 * _18779) + _18763 + 32 <= return_data.size
                            mem[_18745 + ceil32(return_data.size) + 32 len ceil32(32 * _18779)] = mem[_18745 + _18763 + 32 len ceil32(32 * _18779)]
                            if 1 >= _18779:
                                revert with 0, 50
                            _21230 = mem[_18745 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18745 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18745 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21355 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21366 = mem[_21355]
                                if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _21230) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_21355]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / mem[_21355] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / mem[_21355]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21712 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _21768 = mem[_21712]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21924 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21924] > !_21768:
                                        revert with 0, 17
                                    if mem[_21924] + _21768 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21366 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21924] + _21768:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21924] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21366 * ext_call.return_data[0] / 100 * 10^6) + (_21768 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21366 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21713 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21770 = mem[_21713]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21925 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_21925] > !_21770:
                                        revert with 0, 17
                                    if mem[_21925] + _21770 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21366 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21925] + _21770:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_21925] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21366 * ext_call.return_data[0] / 100 * 10^6) + (_21770 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230) / _21366 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18745 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18745 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21398 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21422 = mem[_21398]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21398]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / mem[_21398] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / mem[_21398]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21904 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21979 = mem[_21904]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22136 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22136] > !_21979:
                                            revert with 0, 17
                                        if mem[_22136] + _21979 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21422 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22136] + _21979:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22136] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21422 * ext_call.return_data[0] / 100 * 10^6) + (_21979 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21422 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21905 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21981 = mem[_21905]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22137 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_22137] > !_21981:
                                            revert with 0, 17
                                        if mem[_22137] + _21981 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21422 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22137] + _21981:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_22137] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21422 * ext_call.return_data[0] / 100 * 10^6) + (_21981 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / 10^stor259) / _21422 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18745 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _7981 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18745 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22834 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22844 = mem[_22834]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7981) + (Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22834]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / mem[_22834] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / mem[_22834]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22966 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _22993 = mem[_22966]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23091 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23091] > !_22993:
                                            revert with 0, 17
                                        if mem[_23091] + _22993 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22844 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23091] + _22993:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23091] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22844 * ext_call.return_data[0] / 100 * 10^6) + (_22993 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22844 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22967 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22995 = mem[_22967]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23092 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23092] > !_22995:
                                            revert with 0, 17
                                        if mem[_23092] + _22995 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22844 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23092] + _22995:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23092] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22844 * ext_call.return_data[0] / 100 * 10^6) + (_22995 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21230 / s * t) / _22844 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _8088 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_8088]:
                                        revert with 0, 50
                                    mem[_8088 + 32] = token1Address
                                    if 1 >= mem[_8088]:
                                        revert with 0, 50
                                    mem[_8088 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_8088 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_8088 + 100] = 1
                                    mem[_8088 + 132] = 64
                                    mem[_8088 + 164] = mem[_8088]
                                    idx = 0
                                    s = _8088 + 32
                                    t = _8088 + 196
                                    while idx < mem[_8088]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _8088 + (32 * mem[_8088]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _11898 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _11925 = mem[_11898]
                                    require mem[_11898] <= test266151307()
                                    require _11898 + mem[_11898] + 31 < _11898 + return_data.size
                                    _11941 = mem[_11898 + mem[_11898]]
                                    if mem[_11898 + mem[_11898]] > test266151307():
                                        revert with 0, 65
                                    if _11898 + ceil32(return_data.size) + ceil32(32 * mem[_11898 + mem[_11898]]) + 1 > test266151307() or ceil32(32 * mem[_11898 + mem[_11898]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _11898 + ceil32(return_data.size) + ceil32(32 * mem[_11898 + mem[_11898]]) + 1
                                    mem[_11898 + ceil32(return_data.size)] = _11941
                                    require (32 * _11941) + _11925 + 32 <= return_data.size
                                    mem[_11898 + ceil32(return_data.size) + 32 len ceil32(32 * _11941)] = mem[_11898 + _11925 + 32 len ceil32(32 * _11941)]
                                    if 1 >= _11941:
                                        revert with 0, 50
                                    _15498 = mem[_11898 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15795 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15814 = mem[_15795]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15498) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_15795]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / mem[_15795] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / mem[_15795]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16166 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _16217 = mem[_16166]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16366 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16366] > !_16217:
                                                revert with 0, 17
                                            if mem[_16366] + _16217 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15814 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16366] + _16217:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16366] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15814 * ext_call.return_data[0] / 100 * 10^6) + (_16217 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15814 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16167 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _16219 = mem[_16167]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _16367 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_16367] > !_16219:
                                                revert with 0, 17
                                            if mem[_16367] + _16219 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15814 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16367] + _16219:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_16367] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15814 * ext_call.return_data[0] / 100 * 10^6) + (_16219 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498) / _15814 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15868 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15896 = mem[_15868]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15868]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / mem[_15868] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / mem[_15868]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16337 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16399 = mem[_16337]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16577 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16577] > !_16399:
                                                    revert with 0, 17
                                                if mem[_16577] + _16399 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15896 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16577] + _16399:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16577] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15896 * ext_call.return_data[0] / 100 * 10^6) + (_16399 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15896 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16338 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16401 = mem[_16338]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16578 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16578] > !_16401:
                                                    revert with 0, 17
                                                if mem[_16578] + _16401 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15896 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16578] + _16401:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16578] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15896 * ext_call.return_data[0] / 100 * 10^6) + (_16401 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / 10^stor259) / _15896 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11898 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11898 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18868 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18882 = mem[_18868]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18868]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / mem[_18868] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / mem[_18868]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19149 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19182 = mem[_19149]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19357 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19357] > !_19182:
                                                    revert with 0, 17
                                                if mem[_19357] + _19182 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18882 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19357] + _19182:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19357] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18882 * ext_call.return_data[0] / 100 * 10^6) + (_19182 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18882 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19150 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19184 = mem[_19150]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19358 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19358] > !_19184:
                                                    revert with 0, 17
                                                if mem[_19358] + _19184 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18882 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19358] + _19184:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19358] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18882 * ext_call.return_data[0] / 100 * 10^6) + (_19184 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15498 / s * t) / _18882 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _8174 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_8174]:
                                            revert with 0, 50
                                        mem[_8174 + 32] = token1Address
                                        if 1 >= mem[_8174]:
                                            revert with 0, 50
                                        mem[_8174 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_8174 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_8174 + 100] = 10^stor259
                                        mem[_8174 + 132] = 64
                                        mem[_8174 + 164] = mem[_8174]
                                        idx = 0
                                        s = _8174 + 32
                                        t = _8174 + 196
                                        while idx < mem[_8174]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _8174 + (32 * mem[_8174]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _11897 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _11924 = mem[_11897]
                                        require mem[_11897] <= test266151307()
                                        require _11897 + mem[_11897] + 31 < _11897 + return_data.size
                                        _11940 = mem[_11897 + mem[_11897]]
                                        if mem[_11897 + mem[_11897]] > test266151307():
                                            revert with 0, 65
                                        if _11897 + ceil32(return_data.size) + ceil32(32 * mem[_11897 + mem[_11897]]) + 1 > test266151307() or ceil32(32 * mem[_11897 + mem[_11897]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _11897 + ceil32(return_data.size) + ceil32(32 * mem[_11897 + mem[_11897]]) + 1
                                        mem[_11897 + ceil32(return_data.size)] = _11940
                                        require (32 * _11940) + _11924 + 32 <= return_data.size
                                        mem[_11897 + ceil32(return_data.size) + 32 len ceil32(32 * _11940)] = mem[_11897 + _11924 + 32 len ceil32(32 * _11940)]
                                        if 1 >= _11940:
                                            revert with 0, 50
                                        _15497 = mem[_11897 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_11897 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11897 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _15794 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _15813 = mem[_15794]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15497) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_15794]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497) / mem[_15794] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497) / mem[_15794]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16164 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _16214 = mem[_16164]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16364 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16364] > !_16214:
                                                    revert with 0, 17
                                                if mem[_16364] + _16214 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497) / _15813 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16364] + _16214:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16364] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497) / _15813 * ext_call.return_data[0] / 100 * 10^6) + (_16214 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497) / _15813 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16165 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _16216 = mem[_16165]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _16365 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_16365] > !_16216:
                                                    revert with 0, 17
                                                if mem[_16365] + _16216 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497) / _15813 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16365] + _16216:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_16365] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497) / _15813 * ext_call.return_data[0] / 100 * 10^6) + (_16216 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497) / _15813 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11897 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11897 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _15867 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _15893 = mem[_15867]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15497 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_15867]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / 10^stor259) / mem[_15867] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / 10^stor259) / mem[_15867]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16335 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _16392 = mem[_16335]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16572 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16572] > !_16392:
                                                        revert with 0, 17
                                                    if mem[_16572] + _16392 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / 10^stor259) / _15893 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16572] + _16392:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16572] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / 10^stor259) / _15893 * ext_call.return_data[0] / 100 * 10^6) + (_16392 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / 10^stor259) / _15893 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16336 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _16394 = mem[_16336]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _16573 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_16573] > !_16394:
                                                        revert with 0, 17
                                                    if mem[_16573] + _16394 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / 10^stor259) / _15893 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_16573] + _16394:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_16573] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / 10^stor259) / _15893 * ext_call.return_data[0] / 100 * 10^6) + (_16394 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / 10^stor259) / _15893 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_11897 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_11897 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18867 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _18881 = mem[_18867]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _15497 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18867]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / s * t) / mem[_18867] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / s * t) / mem[_18867]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19147 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19179 = mem[_19147]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19355 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19355] > !_19179:
                                                        revert with 0, 17
                                                    if mem[_19355] + _19179 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / s * t) / _18881 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19355] + _19179:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19355] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / s * t) / _18881 * ext_call.return_data[0] / 100 * 10^6) + (_19179 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / s * t) / _18881 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19148 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19181 = mem[_19148]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19356 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19356] > !_19181:
                                                        revert with 0, 17
                                                    if mem[_19356] + _19181 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / s * t) / _18881 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19356] + _19181:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19356] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / s * t) / _18881 * ext_call.return_data[0] / 100 * 10^6) + (_19181 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _15497 / s * t) / _18881 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _11915 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_11915]:
                                            revert with 0, 50
                                        mem[_11915 + 32] = token1Address
                                        if 1 >= mem[_11915]:
                                            revert with 0, 50
                                        mem[_11915 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_11915 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_11915 + 100] = s * t
                                        mem[_11915 + 132] = 64
                                        mem[_11915 + 164] = mem[_11915]
                                        idx = 0
                                        s = _11915 + 32
                                        t = _11915 + 196
                                        while idx < mem[_11915]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _11915 + (32 * mem[_11915]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15546 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15579 = mem[_15546]
                                        require mem[_15546] <= test266151307()
                                        require _15546 + mem[_15546] + 31 < _15546 + return_data.size
                                        _15603 = mem[_15546 + mem[_15546]]
                                        if mem[_15546 + mem[_15546]] > test266151307():
                                            revert with 0, 65
                                        if _15546 + ceil32(return_data.size) + ceil32(32 * mem[_15546 + mem[_15546]]) + 1 > test266151307() or ceil32(32 * mem[_15546 + mem[_15546]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _15546 + ceil32(return_data.size) + ceil32(32 * mem[_15546 + mem[_15546]]) + 1
                                        mem[_15546 + ceil32(return_data.size)] = _15603
                                        require (32 * _15603) + _15579 + 32 <= return_data.size
                                        mem[_15546 + ceil32(return_data.size) + 32 len ceil32(32 * _15603)] = mem[_15546 + _15579 + 32 len ceil32(32 * _15603)]
                                        if 1 >= _15603:
                                            revert with 0, 50
                                        _18711 = mem[_15546 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15546 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15546 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18928 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18944 = mem[_18928]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18711) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18928]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711) / mem[_18928] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711) / mem[_18928]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19336 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19399 = mem[_19336]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19590 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19590] > !_19399:
                                                    revert with 0, 17
                                                if mem[_19590] + _19399 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711) / _18944 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19590] + _19399:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19590] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711) / _18944 * ext_call.return_data[0] / 100 * 10^6) + (_19399 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711) / _18944 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19337 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19401 = mem[_19337]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19591 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19591] > !_19401:
                                                    revert with 0, 17
                                                if mem[_19591] + _19401 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711) / _18944 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19591] + _19401:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19591] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711) / _18944 * ext_call.return_data[0] / 100 * 10^6) + (_19401 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711) / _18944 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15546 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15546 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18992 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19020 = mem[_18992]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18711 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18992]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / 10^stor259) / mem[_18992] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / 10^stor259) / mem[_18992]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19563 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19653 = mem[_19563]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19860 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19860] > !_19653:
                                                        revert with 0, 17
                                                    if mem[_19860] + _19653 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / 10^stor259) / _19020 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19860] + _19653:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19860] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / 10^stor259) / _19020 * ext_call.return_data[0] / 100 * 10^6) + (_19653 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / 10^stor259) / _19020 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19564 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19655 = mem[_19564]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19861 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19861] > !_19655:
                                                        revert with 0, 17
                                                    if mem[_19861] + _19655 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / 10^stor259) / _19020 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19861] + _19655:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19861] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / 10^stor259) / _19020 * ext_call.return_data[0] / 100 * 10^6) + (_19655 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / 10^stor259) / _19020 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15546 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15546 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21309 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21322 = mem[_21309]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18711 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21309]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / s * t) / mem[_21309] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / s * t) / mem[_21309]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21540 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21576 = mem[_21540]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21736 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21736] > !_21576:
                                                        revert with 0, 17
                                                    if mem[_21736] + _21576 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / s * t) / _21322 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21736] + _21576:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21736] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / s * t) / _21322 * ext_call.return_data[0] / 100 * 10^6) + (_21576 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / s * t) / _21322 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21541 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21578 = mem[_21541]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21737 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21737] > !_21578:
                                                        revert with 0, 17
                                                    if mem[_21737] + _21578 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / s * t) / _21322 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21737] + _21578:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21737] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / s * t) / _21322 * ext_call.return_data[0] / 100 * 10^6) + (_21578 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18711 / s * t) / _21322 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _8030 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_8030]:
                                    revert with 0, 50
                                mem[_8030 + 32] = token1Address
                                if 1 >= mem[_8030]:
                                    revert with 0, 50
                                mem[_8030 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_8030 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_8030 + 100] = 10^18
                                mem[_8030 + 132] = 64
                                mem[_8030 + 164] = mem[_8030]
                                idx = 0
                                s = _8030 + 32
                                t = _8030 + 196
                                while idx < mem[_8030]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _8030 + (32 * mem[_8030]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _11899 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _11926 = mem[_11899]
                                require mem[_11899] <= test266151307()
                                require _11899 + mem[_11899] + 31 < _11899 + return_data.size
                                _11942 = mem[_11899 + mem[_11899]]
                                if mem[_11899 + mem[_11899]] > test266151307():
                                    revert with 0, 65
                                if _11899 + ceil32(return_data.size) + ceil32(32 * mem[_11899 + mem[_11899]]) + 1 > test266151307() or ceil32(32 * mem[_11899 + mem[_11899]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _11899 + ceil32(return_data.size) + ceil32(32 * mem[_11899 + mem[_11899]]) + 1
                                mem[_11899 + ceil32(return_data.size)] = _11942
                                require (32 * _11942) + _11926 + 32 <= return_data.size
                                mem[_11899 + ceil32(return_data.size) + 32 len ceil32(32 * _11942)] = mem[_11899 + _11926 + 32 len ceil32(32 * _11942)]
                                if 1 >= _11942:
                                    revert with 0, 50
                                _15499 = mem[_11899 + ceil32(return_data.size) + 64]
                                _15523 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_15523]:
                                    revert with 0, 50
                                mem[_15523 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_15523]:
                                    revert with 0, 50
                                mem[_15523 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_15523 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_15523 + 100] = _15499
                                mem[_15523 + 132] = 64
                                mem[_15523 + 164] = mem[_15523]
                                idx = 0
                                s = _15523 + 32
                                t = _15523 + 196
                                while idx < mem[_15523]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _15523 + (32 * mem[_15523]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _18744 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _18762 = mem[_18744]
                                require mem[_18744] <= test266151307()
                                require _18744 + mem[_18744] + 31 < _18744 + return_data.size
                                _18778 = mem[_18744 + mem[_18744]]
                                if mem[_18744 + mem[_18744]] > test266151307():
                                    revert with 0, 65
                                if _18744 + ceil32(return_data.size) + ceil32(32 * mem[_18744 + mem[_18744]]) + 1 > test266151307() or ceil32(32 * mem[_18744 + mem[_18744]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _18744 + ceil32(return_data.size) + ceil32(32 * mem[_18744 + mem[_18744]]) + 1
                                mem[_18744 + ceil32(return_data.size)] = _18778
                                require (32 * _18778) + _18762 + 32 <= return_data.size
                                mem[_18744 + ceil32(return_data.size) + 32 len ceil32(32 * _18778)] = mem[_18744 + _18762 + 32 len ceil32(32 * _18778)]
                                if 1 >= _18778:
                                    revert with 0, 50
                                _21229 = mem[_18744 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_18744 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18744 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _21354 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _21365 = mem[_21354]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21229) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_21354]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / mem[_21354] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / mem[_21354]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21710 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _21765 = mem[_21710]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21922 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_21922] > !_21765:
                                            revert with 0, 17
                                        if mem[_21922] + _21765 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21365 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21922] + _21765:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_21922] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21365 * ext_call.return_data[0] / 100 * 10^6) + (_21765 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21365 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21711 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21767 = mem[_21711]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21923 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_21923] > !_21767:
                                            revert with 0, 17
                                        if mem[_21923] + _21767 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21365 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21923] + _21767:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_21923] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21365 * ext_call.return_data[0] / 100 * 10^6) + (_21767 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229) / _21365 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18744 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18744 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21397 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21419 = mem[_21397]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21397]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / mem[_21397] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / mem[_21397]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21902 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21972 = mem[_21902]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22131 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22131] > !_21972:
                                                revert with 0, 17
                                            if mem[_22131] + _21972 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21419 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22131] + _21972:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22131] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21419 * ext_call.return_data[0] / 100 * 10^6) + (_21972 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21419 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21903 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21974 = mem[_21903]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22132 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_22132] > !_21974:
                                                revert with 0, 17
                                            if mem[_22132] + _21974 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21419 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22132] + _21974:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_22132] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21419 * ext_call.return_data[0] / 100 * 10^6) + (_21974 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / 10^stor259) / _21419 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18744 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18744 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22833 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22843 = mem[_22833]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22833]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / mem[_22833] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / mem[_22833]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22964 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _22990 = mem[_22964]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23089 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23089] > !_22990:
                                                revert with 0, 17
                                            if mem[_23089] + _22990 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22843 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23089] + _22990:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23089] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22843 * ext_call.return_data[0] / 100 * 10^6) + (_22990 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22843 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22965 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22992 = mem[_22965]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23090 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23090] > !_22992:
                                                revert with 0, 17
                                            if mem[_23090] + _22992 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22843 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23090] + _22992:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23090] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22843 * ext_call.return_data[0] / 100 * 10^6) + (_22992 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21229 / s * t) / _22843 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12068 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12068]:
                                        revert with 0, 50
                                    mem[_12068 + 32] = token1Address
                                    if 1 >= mem[_12068]:
                                        revert with 0, 50
                                    mem[_12068 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12068 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12068 + 100] = 1
                                    mem[_12068 + 132] = 64
                                    mem[_12068 + 164] = mem[_12068]
                                    idx = 0
                                    u = _12068 + 32
                                    v = _12068 + 196
                                    while idx < mem[_12068]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12068 + (32 * mem[_12068]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15544 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15577 = mem[_15544]
                                    require mem[_15544] <= test266151307()
                                    require _15544 + mem[_15544] + 31 < _15544 + return_data.size
                                    _15601 = mem[_15544 + mem[_15544]]
                                    if mem[_15544 + mem[_15544]] > test266151307():
                                        revert with 0, 65
                                    if _15544 + ceil32(return_data.size) + ceil32(32 * mem[_15544 + mem[_15544]]) + 1 > test266151307() or ceil32(32 * mem[_15544 + mem[_15544]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15544 + ceil32(return_data.size) + ceil32(32 * mem[_15544 + mem[_15544]]) + 1
                                    mem[_15544 + ceil32(return_data.size)] = _15601
                                    require (32 * _15601) + _15577 + 32 <= return_data.size
                                    mem[_15544 + ceil32(return_data.size) + 32 len ceil32(32 * _15601)] = mem[_15544 + _15577 + 32 len ceil32(32 * _15601)]
                                    if 1 >= _15601:
                                        revert with 0, 50
                                    _18707 = mem[_15544 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15544 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15544 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18927 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18942 = mem[_18927]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18707) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18927]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / mem[_18927] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / mem[_18927]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19332 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19395 = mem[_19332]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19588 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19588] > !_19395:
                                                revert with 0, 17
                                            if mem[_19588] + _19395 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18942 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19588] + _19395:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19588] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18942 * ext_call.return_data[0] / 100 * 10^6) + (_19395 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18942 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19333 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19397 = mem[_19333]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19589 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19589] > !_19397:
                                                revert with 0, 17
                                            if mem[_19589] + _19397 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18942 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19589] + _19397:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19589] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18942 * ext_call.return_data[0] / 100 * 10^6) + (_19397 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707) / _18942 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15544 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15544 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18991 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19017 = mem[_18991]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18991]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / mem[_18991] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / mem[_18991]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19559 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19645 = mem[_19559]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19854 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19854] > !_19645:
                                                    revert with 0, 17
                                                if mem[_19854] + _19645 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19017 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19854] + _19645:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19854] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19017 * ext_call.return_data[0] / 100 * 10^6) + (_19645 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19017 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19560 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19647 = mem[_19560]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19855 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19855] > !_19647:
                                                    revert with 0, 17
                                                if mem[_19855] + _19647 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19017 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19855] + _19647:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19855] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19017 * ext_call.return_data[0] / 100 * 10^6) + (_19647 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / 10^stor259) / _19017 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15544 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15544 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21308 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21321 = mem[_21308]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18707 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21308]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / u * v) / mem[_21308] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / u * v) / mem[_21308]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21536 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21572 = mem[_21536]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21733 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21733] > !_21572:
                                                    revert with 0, 17
                                                if mem[_21733] + _21572 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / u * v) / _21321 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21733] + _21572:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21733] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / u * v) / _21321 * ext_call.return_data[0] / 100 * 10^6) + (_21572 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / u * v) / _21321 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21537 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21574 = mem[_21537]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21734 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21734] > !_21574:
                                                    revert with 0, 17
                                                if mem[_21734] + _21574 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / u * v) / _21321 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21734] + _21574:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21734] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / u * v) / _21321 * ext_call.return_data[0] / 100 * 10^6) + (_21574 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18707 / u * v) / _21321 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12127 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12127]:
                                            revert with 0, 50
                                        mem[_12127 + 32] = token1Address
                                        if 1 >= mem[_12127]:
                                            revert with 0, 50
                                        mem[_12127 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12127 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12127 + 100] = 10^stor259
                                        mem[_12127 + 132] = 64
                                        mem[_12127 + 164] = mem[_12127]
                                        idx = 0
                                        u = _12127 + 32
                                        v = _12127 + 196
                                        while idx < mem[_12127]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12127 + (32 * mem[_12127]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15543 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15576 = mem[_15543]
                                        require mem[_15543] <= test266151307()
                                        require _15543 + mem[_15543] + 31 < _15543 + return_data.size
                                        _15600 = mem[_15543 + mem[_15543]]
                                        if mem[_15543 + mem[_15543]] > test266151307():
                                            revert with 0, 65
                                        if _15543 + ceil32(return_data.size) + ceil32(32 * mem[_15543 + mem[_15543]]) + 1 > test266151307() or ceil32(32 * mem[_15543 + mem[_15543]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _15543 + ceil32(return_data.size) + ceil32(32 * mem[_15543 + mem[_15543]]) + 1
                                        mem[_15543 + ceil32(return_data.size)] = _15600
                                        require (32 * _15600) + _15576 + 32 <= return_data.size
                                        mem[_15543 + ceil32(return_data.size) + 32 len ceil32(32 * _15600)] = mem[_15543 + _15576 + 32 len ceil32(32 * _15600)]
                                        if 1 >= _15600:
                                            revert with 0, 50
                                        _18706 = mem[_15543 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15543 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15543 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18926 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18941 = mem[_18926]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18706) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18926]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706) / mem[_18926] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706) / mem[_18926]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19330 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19392 = mem[_19330]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19586 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19586] > !_19392:
                                                    revert with 0, 17
                                                if mem[_19586] + _19392 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706) / _18941 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19586] + _19392:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19586] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706) / _18941 * ext_call.return_data[0] / 100 * 10^6) + (_19392 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706) / _18941 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19331 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19394 = mem[_19331]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19587 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19587] > !_19394:
                                                    revert with 0, 17
                                                if mem[_19587] + _19394 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706) / _18941 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19587] + _19394:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19587] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706) / _18941 * ext_call.return_data[0] / 100 * 10^6) + (_19394 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706) / _18941 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15543 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15543 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18990 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19014 = mem[_18990]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18706 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18990]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / 10^stor259) / mem[_18990] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / 10^stor259) / mem[_18990]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19557 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19638 = mem[_19557]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19849 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19849] > !_19638:
                                                        revert with 0, 17
                                                    if mem[_19849] + _19638 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / 10^stor259) / _19014 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19849] + _19638:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19849] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / 10^stor259) / _19014 * ext_call.return_data[0] / 100 * 10^6) + (_19638 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / 10^stor259) / _19014 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19558 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19640 = mem[_19558]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19850 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19850] > !_19640:
                                                        revert with 0, 17
                                                    if mem[_19850] + _19640 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / 10^stor259) / _19014 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19850] + _19640:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19850] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / 10^stor259) / _19014 * ext_call.return_data[0] / 100 * 10^6) + (_19640 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / 10^stor259) / _19014 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15543 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15543 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21307 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21320 = mem[_21307]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _18706 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21307]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / u * v) / mem[_21307] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / u * v) / mem[_21307]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21534 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21569 = mem[_21534]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21731 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21731] > !_21569:
                                                        revert with 0, 17
                                                    if mem[_21731] + _21569 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / u * v) / _21320 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21731] + _21569:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21731] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / u * v) / _21320 * ext_call.return_data[0] / 100 * 10^6) + (_21569 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / u * v) / _21320 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21535 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21571 = mem[_21535]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21732 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21732] > !_21571:
                                                        revert with 0, 17
                                                    if mem[_21732] + _21571 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / u * v) / _21320 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21732] + _21571:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21732] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / u * v) / _21320 * ext_call.return_data[0] / 100 * 10^6) + (_21571 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18706 / u * v) / _21320 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _15563 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15563]:
                                            revert with 0, 50
                                        mem[_15563 + 32] = token1Address
                                        if 1 >= mem[_15563]:
                                            revert with 0, 50
                                        mem[_15563 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15563 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15563 + 100] = u * v
                                        mem[_15563 + 132] = 64
                                        mem[_15563 + 164] = mem[_15563]
                                        idx = 0
                                        u = _15563 + 32
                                        v = _15563 + 196
                                        while idx < mem[_15563]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15563 + (32 * mem[_15563]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18742 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18760 = mem[_18742]
                                        require mem[_18742] <= test266151307()
                                        require _18742 + mem[_18742] + 31 < _18742 + return_data.size
                                        _18776 = mem[_18742 + mem[_18742]]
                                        if mem[_18742 + mem[_18742]] > test266151307():
                                            revert with 0, 65
                                        if _18742 + ceil32(return_data.size) + ceil32(32 * mem[_18742 + mem[_18742]]) + 1 > test266151307() or ceil32(32 * mem[_18742 + mem[_18742]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _18742 + ceil32(return_data.size) + ceil32(32 * mem[_18742 + mem[_18742]]) + 1
                                        mem[_18742 + ceil32(return_data.size)] = _18776
                                        require (32 * _18776) + _18760 + 32 <= return_data.size
                                        mem[_18742 + ceil32(return_data.size) + 32 len ceil32(32 * _18776)] = mem[_18742 + _18760 + 32 len ceil32(32 * _18776)]
                                        if 1 >= _18776:
                                            revert with 0, 50
                                        _21227 = mem[_18742 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18742 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18742 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21353 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21364 = mem[_21353]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21227) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21353]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / mem[_21353] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / mem[_21353]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21708 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21762 = mem[_21708]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21920 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21920] > !_21762:
                                                    revert with 0, 17
                                                if mem[_21920] + _21762 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21364 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21920] + _21762:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21920] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21364 * ext_call.return_data[0] / 100 * 10^6) + (_21762 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21364 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21709 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21764 = mem[_21709]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21921 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21921] > !_21764:
                                                    revert with 0, 17
                                                if mem[_21921] + _21764 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21364 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21921] + _21764:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21921] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21364 * ext_call.return_data[0] / 100 * 10^6) + (_21764 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227) / _21364 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18742 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18742 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21396 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21416 = mem[_21396]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21396]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / mem[_21396] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / mem[_21396]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21900 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21965 = mem[_21900]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22122 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22122] > !_21965:
                                                        revert with 0, 17
                                                    if mem[_22122] + _21965 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21416 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22122] + _21965:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22122] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21416 * ext_call.return_data[0] / 100 * 10^6) + (_21965 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21416 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21901 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21967 = mem[_21901]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22123 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22123] > !_21967:
                                                        revert with 0, 17
                                                    if mem[_22123] + _21967 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21416 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22123] + _21967:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22123] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21416 * ext_call.return_data[0] / 100 * 10^6) + (_21967 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / 10^stor259) / _21416 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18742 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18742 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22832 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22842 = mem[_22832]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22832]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / mem[_22832] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / mem[_22832]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22962 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22987 = mem[_22962]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23087 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23087] > !_22987:
                                                        revert with 0, 17
                                                    if mem[_23087] + _22987 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22842 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23087] + _22987:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23087] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22842 * ext_call.return_data[0] / 100 * 10^6) + (_22987 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22842 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22963 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22989 = mem[_22963]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23088 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23088] > !_22989:
                                                        revert with 0, 17
                                                    if mem[_23088] + _22989 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22842 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23088] + _22989:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23088] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22842 * ext_call.return_data[0] / 100 * 10^6) + (_22989 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21227 / u * v) / _22842 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _11971 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_11971]:
                                    revert with 0, 50
                                mem[_11971 + 32] = token1Address
                                if 1 >= mem[_11971]:
                                    revert with 0, 50
                                mem[_11971 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_11971 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_11971 + 100] = 10^18
                                mem[_11971 + 132] = 64
                                mem[_11971 + 164] = mem[_11971]
                                idx = 0
                                u = _11971 + 32
                                v = _11971 + 196
                                while idx < mem[_11971]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _11971 + (32 * mem[_11971]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15545 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15578 = mem[_15545]
                                require mem[_15545] <= test266151307()
                                require _15545 + mem[_15545] + 31 < _15545 + return_data.size
                                _15602 = mem[_15545 + mem[_15545]]
                                if mem[_15545 + mem[_15545]] > test266151307():
                                    revert with 0, 65
                                if _15545 + ceil32(return_data.size) + ceil32(32 * mem[_15545 + mem[_15545]]) + 1 > test266151307() or ceil32(32 * mem[_15545 + mem[_15545]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15545 + ceil32(return_data.size) + ceil32(32 * mem[_15545 + mem[_15545]]) + 1
                                mem[_15545 + ceil32(return_data.size)] = _15602
                                require (32 * _15602) + _15578 + 32 <= return_data.size
                                mem[_15545 + ceil32(return_data.size) + 32 len ceil32(32 * _15602)] = mem[_15545 + _15578 + 32 len ceil32(32 * _15602)]
                                if 1 >= _15602:
                                    revert with 0, 50
                                _18708 = mem[_15545 + ceil32(return_data.size) + 64]
                                _18729 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_18729]:
                                    revert with 0, 50
                                mem[_18729 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_18729]:
                                    revert with 0, 50
                                mem[_18729 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_18729 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_18729 + 100] = _18708
                                mem[_18729 + 132] = 64
                                mem[_18729 + 164] = mem[_18729]
                                idx = 0
                                u = _18729 + 32
                                v = _18729 + 196
                                while idx < mem[_18729]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _18729 + (32 * mem[_18729]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21241 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21247 = mem[_21241]
                                require mem[_21241] <= test266151307()
                                require _21241 + mem[_21241] + 31 < _21241 + return_data.size
                                _21253 = mem[_21241 + mem[_21241]]
                                if mem[_21241 + mem[_21241]] > test266151307():
                                    revert with 0, 65
                                if _21241 + ceil32(return_data.size) + ceil32(32 * mem[_21241 + mem[_21241]]) + 1 > test266151307() or ceil32(32 * mem[_21241 + mem[_21241]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _21241 + ceil32(return_data.size) + ceil32(32 * mem[_21241 + mem[_21241]]) + 1
                                mem[_21241 + ceil32(return_data.size)] = _21253
                                require (32 * _21253) + _21247 + 32 <= return_data.size
                                mem[_21241 + ceil32(return_data.size) + 32 len ceil32(32 * _21253)] = mem[_21241 + _21247 + 32 len ceil32(32 * _21253)]
                                if 1 >= _21253:
                                    revert with 0, 50
                                _22799 = mem[_21241 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21241 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21241 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22861 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22866 = mem[_22861]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22799) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22861]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799) / mem[_22861] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799) / mem[_22861]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23074 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23108 = mem[_23074]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23191 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23191] > !_23108:
                                            revert with 0, 17
                                        if mem[_23191] + _23108 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799) / _22866 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23191] + _23108:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23191] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799) / _22866 * ext_call.return_data[0] / 100 * 10^6) + (_23108 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799) / _22866 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23075 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23110 = mem[_23075]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23192 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23192] > !_23110:
                                            revert with 0, 17
                                        if mem[_23192] + _23110 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799) / _22866 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23192] + _23110:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23192] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799) / _22866 * ext_call.return_data[0] / 100 * 10^6) + (_23110 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799) / _22866 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21241 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21241 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22881 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22894 = mem[_22881]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22799 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22881]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / 10^stor259) / mem[_22881] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / 10^stor259) / mem[_22881]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23181 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23220 = mem[_23181]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23292 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23292] > !_23220:
                                                revert with 0, 17
                                            if mem[_23292] + _23220 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / 10^stor259) / _22894 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23292] + _23220:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23292] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / 10^stor259) / _22894 * ext_call.return_data[0] / 100 * 10^6) + (_23220 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / 10^stor259) / _22894 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23182 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23222 = mem[_23182]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23293 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23293] > !_23222:
                                                revert with 0, 17
                                            if mem[_23293] + _23222 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / 10^stor259) / _22894 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23293] + _23222:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23293] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / 10^stor259) / _22894 * ext_call.return_data[0] / 100 * 10^6) + (_23222 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / 10^stor259) / _22894 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21241 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21241 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23524 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23529 = mem[_23524]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22799 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23524]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / u * v) / mem[_23524] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / u * v) / mem[_23524]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23569 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23582 = mem[_23569]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23620 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23620] > !_23582:
                                                revert with 0, 17
                                            if mem[_23620] + _23582 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / u * v) / _23529 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23620] + _23582:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23620] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / u * v) / _23529 * ext_call.return_data[0] / 100 * 10^6) + (_23582 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / u * v) / _23529 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23570 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23584 = mem[_23570]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23621 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23621] > !_23584:
                                                revert with 0, 17
                                            if mem[_23621] + _23584 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / u * v) / _23529 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23621] + _23584:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23621] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / u * v) / _23529 * ext_call.return_data[0] / 100 * 10^6) + (_23584 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _7981 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22799 / u * v) / _23529 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                else:
                    s = 10
                    t = 1
                    idx = stor258
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(2 * ceil32(return_data.size)) + 96] = 2
                    mem[(2 * ceil32(return_data.size)) + 128] = token0Address
                    mem[(2 * ceil32(return_data.size)) + 160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                    mem[(2 * ceil32(return_data.size)) + 192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[(2 * ceil32(return_data.size)) + 196] = s * t
                    mem[(2 * ceil32(return_data.size)) + 228] = 64
                    mem[(2 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (2 * ceil32(return_data.size)) + 128
                    v = (2 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(routerAddress)
                    staticcall routerAddress.getAmountsOut(uint256 rg1, address[] rg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[(2 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _7992 = mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (2 * ceil32(return_data.size)) + return_data.size + 192
                    _7995 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(4 * ceil32(return_data.size)) + 192] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    require (32 * _7995) + _7992 + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 224 len ceil32(32 * _7995)] = mem[(2 * ceil32(return_data.size)) + _7992 + 224 len ceil32(32 * _7995)]
                    if 1 >= _7995:
                        revert with 0, 50
                    _11880 = mem[(4 * ceil32(return_data.size)) + 256]
                    if not stor258:
                        if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 17
                        if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                            if not stor259:
                                _12117 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12117]:
                                    revert with 0, 50
                                mem[_12117 + 32] = token1Address
                                if 1 >= mem[_12117]:
                                    revert with 0, 50
                                mem[_12117 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_12117 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12117 + 100] = 1
                                mem[_12117 + 132] = 64
                                mem[_12117 + 164] = mem[_12117]
                                idx = 0
                                s = _12117 + 32
                                t = _12117 + 196
                                while idx < mem[_12117]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12117 + (32 * mem[_12117]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15539 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15573 = mem[_15539]
                                require mem[_15539] <= test266151307()
                                require _15539 + mem[_15539] + 31 < _15539 + return_data.size
                                _15597 = mem[_15539 + mem[_15539]]
                                if mem[_15539 + mem[_15539]] > test266151307():
                                    revert with 0, 65
                                if _15539 + ceil32(return_data.size) + ceil32(32 * mem[_15539 + mem[_15539]]) + 1 > test266151307() or ceil32(32 * mem[_15539 + mem[_15539]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15539 + ceil32(return_data.size) + ceil32(32 * mem[_15539 + mem[_15539]]) + 1
                                mem[_15539 + ceil32(return_data.size)] = _15597
                                require (32 * _15597) + _15573 + 32 <= return_data.size
                                mem[_15539 + ceil32(return_data.size) + 32 len ceil32(32 * _15597)] = mem[_15539 + _15573 + 32 len ceil32(32 * _15597)]
                                if 1 >= _15597:
                                    revert with 0, 50
                                _18701 = mem[_15539 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18925 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18939 = mem[_18925]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _18701) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_18925]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701) / mem[_18925] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701) / mem[_18925]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19326 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _19388 = mem[_19326]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19584 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19584] > !_19388:
                                            revert with 0, 17
                                        if mem[_19584] + _19388 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701) / _18939 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19584] + _19388:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19584] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701) / _18939 * ext_call.return_data[0] / 100 * 10^6) + (_19388 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701) / _18939 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19327 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19390 = mem[_19327]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _19585 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_19585] > !_19390:
                                            revert with 0, 17
                                        if mem[_19585] + _19390 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701) / _18939 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19585] + _19390:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_19585] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701) / _18939 * ext_call.return_data[0] / 100 * 10^6) + (_19390 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701) / _18939 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18989 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _19011 = mem[_18989]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _18701 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18989]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / 10^stor259) / mem[_18989] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / 10^stor259) / mem[_18989]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19553 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19630 = mem[_19553]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19839 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19839] > !_19630:
                                                revert with 0, 17
                                            if mem[_19839] + _19630 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / 10^stor259) / _19011 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19839] + _19630:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19839] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / 10^stor259) / _19011 * ext_call.return_data[0] / 100 * 10^6) + (_19630 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / 10^stor259) / _19011 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19554 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19632 = mem[_19554]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19840 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19840] > !_19632:
                                                revert with 0, 17
                                            if mem[_19840] + _19632 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / 10^stor259) / _19011 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19840] + _19632:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19840] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / 10^stor259) / _19011 * ext_call.return_data[0] / 100 * 10^6) + (_19632 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / 10^stor259) / _19011 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15539 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15539 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21306 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21319 = mem[_21306]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _18701 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21306]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / s * t) / mem[_21306] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / s * t) / mem[_21306]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21530 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21565 = mem[_21530]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21728 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21728] > !_21565:
                                                revert with 0, 17
                                            if mem[_21728] + _21565 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / s * t) / _21319 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21728] + _21565:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21728] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / s * t) / _21319 * ext_call.return_data[0] / 100 * 10^6) + (_21565 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / s * t) / _21319 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21531 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21567 = mem[_21531]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21729 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21729] > !_21567:
                                                revert with 0, 17
                                            if mem[_21729] + _21567 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / s * t) / _21319 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21729] + _21567:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21729] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / s * t) / _21319 * ext_call.return_data[0] / 100 * 10^6) + (_21567 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18701 / s * t) / _21319 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    _12182 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12182]:
                                        revert with 0, 50
                                    mem[_12182 + 32] = token1Address
                                    if 1 >= mem[_12182]:
                                        revert with 0, 50
                                    mem[_12182 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12182 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12182 + 100] = 10^stor259
                                    mem[_12182 + 132] = 64
                                    mem[_12182 + 164] = mem[_12182]
                                    idx = 0
                                    s = _12182 + 32
                                    t = _12182 + 196
                                    while idx < mem[_12182]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12182 + (32 * mem[_12182]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15538 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15572 = mem[_15538]
                                    require mem[_15538] <= test266151307()
                                    require _15538 + mem[_15538] + 31 < _15538 + return_data.size
                                    _15596 = mem[_15538 + mem[_15538]]
                                    if mem[_15538 + mem[_15538]] > test266151307():
                                        revert with 0, 65
                                    if _15538 + ceil32(return_data.size) + ceil32(32 * mem[_15538 + mem[_15538]]) + 1 > test266151307() or ceil32(32 * mem[_15538 + mem[_15538]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15538 + ceil32(return_data.size) + ceil32(32 * mem[_15538 + mem[_15538]]) + 1
                                    mem[_15538 + ceil32(return_data.size)] = _15596
                                    require (32 * _15596) + _15572 + 32 <= return_data.size
                                    mem[_15538 + ceil32(return_data.size) + 32 len ceil32(32 * _15596)] = mem[_15538 + _15572 + 32 len ceil32(32 * _15596)]
                                    if 1 >= _15596:
                                        revert with 0, 50
                                    _18700 = mem[_15538 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15538 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15538 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18924 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18938 = mem[_18924]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _18700) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18924]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700) / mem[_18924] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700) / mem[_18924]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19324 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19385 = mem[_19324]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19582 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19582] > !_19385:
                                                revert with 0, 17
                                            if mem[_19582] + _19385 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700) / _18938 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19582] + _19385:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19582] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700) / _18938 * ext_call.return_data[0] / 100 * 10^6) + (_19385 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700) / _18938 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19325 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19387 = mem[_19325]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19583 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19583] > !_19387:
                                                revert with 0, 17
                                            if mem[_19583] + _19387 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700) / _18938 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19583] + _19387:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19583] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700) / _18938 * ext_call.return_data[0] / 100 * 10^6) + (_19387 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700) / _18938 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15538 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15538 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18988 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19008 = mem[_18988]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _18700 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18988]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / 10^stor259) / mem[_18988] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / 10^stor259) / mem[_18988]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19551 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19623 = mem[_19551]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19834 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19834] > !_19623:
                                                    revert with 0, 17
                                                if mem[_19834] + _19623 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / 10^stor259) / _19008 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19834] + _19623:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19834] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / 10^stor259) / _19008 * ext_call.return_data[0] / 100 * 10^6) + (_19623 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / 10^stor259) / _19008 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19552 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19625 = mem[_19552]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19835 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19835] > !_19625:
                                                    revert with 0, 17
                                                if mem[_19835] + _19625 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / 10^stor259) / _19008 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19835] + _19625:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19835] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / 10^stor259) / _19008 * ext_call.return_data[0] / 100 * 10^6) + (_19625 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / 10^stor259) / _19008 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15538 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15538 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21305 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21318 = mem[_21305]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _18700 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21305]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / s * t) / mem[_21305] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / s * t) / mem[_21305]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21528 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21562 = mem[_21528]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21726 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21726] > !_21562:
                                                    revert with 0, 17
                                                if mem[_21726] + _21562 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / s * t) / _21318 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21726] + _21562:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21726] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / s * t) / _21318 * ext_call.return_data[0] / 100 * 10^6) + (_21562 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / s * t) / _21318 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21529 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21564 = mem[_21529]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21727 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21727] > !_21564:
                                                    revert with 0, 17
                                                if mem[_21727] + _21564 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / s * t) / _21318 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21727] + _21564:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21727] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / s * t) / _21318 * ext_call.return_data[0] / 100 * 10^6) + (_21564 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18700 / s * t) / _21318 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    _15561 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15561]:
                                        revert with 0, 50
                                    mem[_15561 + 32] = token1Address
                                    if 1 >= mem[_15561]:
                                        revert with 0, 50
                                    mem[_15561 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15561 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15561 + 100] = s * t
                                    mem[_15561 + 132] = 64
                                    mem[_15561 + 164] = mem[_15561]
                                    idx = 0
                                    s = _15561 + 32
                                    t = _15561 + 196
                                    while idx < mem[_15561]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15561 + (32 * mem[_15561]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18740 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18758 = mem[_18740]
                                    require mem[_18740] <= test266151307()
                                    require _18740 + mem[_18740] + 31 < _18740 + return_data.size
                                    _18774 = mem[_18740 + mem[_18740]]
                                    if mem[_18740 + mem[_18740]] > test266151307():
                                        revert with 0, 65
                                    if _18740 + ceil32(return_data.size) + ceil32(32 * mem[_18740 + mem[_18740]]) + 1 > test266151307() or ceil32(32 * mem[_18740 + mem[_18740]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _18740 + ceil32(return_data.size) + ceil32(32 * mem[_18740 + mem[_18740]]) + 1
                                    mem[_18740 + ceil32(return_data.size)] = _18774
                                    require (32 * _18774) + _18758 + 32 <= return_data.size
                                    mem[_18740 + ceil32(return_data.size) + 32 len ceil32(32 * _18774)] = mem[_18740 + _18758 + 32 len ceil32(32 * _18774)]
                                    if 1 >= _18774:
                                        revert with 0, 50
                                    _21225 = mem[_18740 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18740 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18740 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21352 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21363 = mem[_21352]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _21225) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21352]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / mem[_21352] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / mem[_21352]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21706 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21759 = mem[_21706]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21918 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21918] > !_21759:
                                                revert with 0, 17
                                            if mem[_21918] + _21759 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21363 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21918] + _21759:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21918] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21363 * ext_call.return_data[0] / 100 * 10^6) + (_21759 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21363 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21707 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21761 = mem[_21707]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21919 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21919] > !_21761:
                                                revert with 0, 17
                                            if mem[_21919] + _21761 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21363 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21919] + _21761:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21919] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21363 * ext_call.return_data[0] / 100 * 10^6) + (_21761 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225) / _21363 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18740 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18740 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21395 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21413 = mem[_21395]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21395]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / mem[_21395] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / mem[_21395]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21898 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21958 = mem[_21898]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22113 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22113] > !_21958:
                                                    revert with 0, 17
                                                if mem[_22113] + _21958 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21413 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22113] + _21958:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22113] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21413 * ext_call.return_data[0] / 100 * 10^6) + (_21958 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21413 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21899 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21960 = mem[_21899]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22114 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22114] > !_21960:
                                                    revert with 0, 17
                                                if mem[_22114] + _21960 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21413 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22114] + _21960:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22114] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21413 * ext_call.return_data[0] / 100 * 10^6) + (_21960 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / 10^stor259) / _21413 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18740 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18740 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22831 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22841 = mem[_22831]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22831]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / mem[_22831] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / mem[_22831]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22960 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22984 = mem[_22960]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23085 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23085] > !_22984:
                                                    revert with 0, 17
                                                if mem[_23085] + _22984 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22841 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23085] + _22984:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23085] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22841 * ext_call.return_data[0] / 100 * 10^6) + (_22984 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22841 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22961 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22986 = mem[_22961]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23086 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23086] > !_22986:
                                                    revert with 0, 17
                                                if mem[_23086] + _22986 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22841 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23086] + _22986:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23086] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22841 * ext_call.return_data[0] / 100 * 10^6) + (_22986 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21225 / s * t) / _22841 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            _12039 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_12039]:
                                revert with 0, 50
                            mem[_12039 + 32] = token1Address
                            if 1 >= mem[_12039]:
                                revert with 0, 50
                            mem[_12039 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            mem[_12039 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_12039 + 100] = 10^18
                            mem[_12039 + 132] = 64
                            mem[_12039 + 164] = mem[_12039]
                            idx = 0
                            s = _12039 + 32
                            t = _12039 + 196
                            while idx < mem[_12039]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _12039 + (32 * mem[_12039]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15540 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _15574 = mem[_15540]
                            require mem[_15540] <= test266151307()
                            require _15540 + mem[_15540] + 31 < _15540 + return_data.size
                            _15598 = mem[_15540 + mem[_15540]]
                            if mem[_15540 + mem[_15540]] > test266151307():
                                revert with 0, 65
                            if _15540 + ceil32(return_data.size) + ceil32(32 * mem[_15540 + mem[_15540]]) + 1 > test266151307() or ceil32(32 * mem[_15540 + mem[_15540]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _15540 + ceil32(return_data.size) + ceil32(32 * mem[_15540 + mem[_15540]]) + 1
                            mem[_15540 + ceil32(return_data.size)] = _15598
                            require (32 * _15598) + _15574 + 32 <= return_data.size
                            mem[_15540 + ceil32(return_data.size) + 32 len ceil32(32 * _15598)] = mem[_15540 + _15574 + 32 len ceil32(32 * _15598)]
                            if 1 >= _15598:
                                revert with 0, 50
                            _18702 = mem[_15540 + ceil32(return_data.size) + 64]
                            _18727 = mem[64]
                            mem[mem[64]] = 2
                            mem[64] = mem[64] + 96
                            if 0 >= mem[_18727]:
                                revert with 0, 50
                            mem[_18727 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                            if 1 >= mem[_18727]:
                                revert with 0, 50
                            mem[_18727 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                            mem[_18727 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                            mem[_18727 + 100] = _18702
                            mem[_18727 + 132] = 64
                            mem[_18727 + 164] = mem[_18727]
                            idx = 0
                            s = _18727 + 32
                            t = _18727 + 196
                            while idx < mem[_18727]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(routerAddress)
                            staticcall routerAddress.mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _18727 + (32 * mem[_18727]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _21240 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _21246 = mem[_21240]
                            require mem[_21240] <= test266151307()
                            require _21240 + mem[_21240] + 31 < _21240 + return_data.size
                            _21252 = mem[_21240 + mem[_21240]]
                            if mem[_21240 + mem[_21240]] > test266151307():
                                revert with 0, 65
                            if _21240 + ceil32(return_data.size) + ceil32(32 * mem[_21240 + mem[_21240]]) + 1 > test266151307() or ceil32(32 * mem[_21240 + mem[_21240]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _21240 + ceil32(return_data.size) + ceil32(32 * mem[_21240 + mem[_21240]]) + 1
                            mem[_21240 + ceil32(return_data.size)] = _21252
                            require (32 * _21252) + _21246 + 32 <= return_data.size
                            mem[_21240 + ceil32(return_data.size) + 32 len ceil32(32 * _21252)] = mem[_21240 + _21246 + 32 len ceil32(32 * _21252)]
                            if 1 >= _21252:
                                revert with 0, 50
                            _22798 = mem[_21240 + ceil32(return_data.size) + 64]
                            if not stor259:
                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21240 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 17
                                if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21240 + ceil32(return_data.size) + 64]):
                                    revert with 0, 17
                                require ext_code.size(lpTokenAddress)
                                staticcall lpTokenAddress.0x18160ddd with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22860 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22865 = mem[_22860]
                                if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _22798) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                    revert with 0, 17
                                if not mem[_22860]:
                                    revert with 0, 18
                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798) / mem[_22860] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798) / mem[_22860]:
                                    revert with 0, 17
                                if not sub_abddf82e:
                                    mem[mem[64] + 36] = this.address
                                    require ext_code.size(masterChefAddress)
                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                            gas gas_remaining wei
                                           args poolId, this.address
                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23072 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 64
                                    _23105 = mem[_23072]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23189 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23189] > !_23105:
                                        revert with 0, 17
                                    if mem[_23189] + _23105 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798) / _22865 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23189] + _23105:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23189] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798) / _22865 * ext_call.return_data[0] / 100 * 10^6) + (_23105 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798) / _22865 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(stakingRewardAddress)
                                    staticcall stakingRewardAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23073 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23107 = mem[_23073]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23190 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    if mem[_23190] > !_23107:
                                        revert with 0, 17
                                    if mem[_23190] + _23107 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798) / _22865 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23190] + _23107:
                                        revert with 0, 17
                                    mem[mem[64]] = (mem[_23190] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798) / _22865 * ext_call.return_data[0] / 100 * 10^6) + (_23107 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798) / _22865 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21240 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not 10^stor259:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21240 + ceil32(return_data.size) + 64] / 10^stor259):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22880 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22891 = mem[_22880]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _22798 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22880]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / 10^stor259) / mem[_22880] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / 10^stor259) / mem[_22880]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23179 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23213 = mem[_23179]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23287 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23287] > !_23213:
                                            revert with 0, 17
                                        if mem[_23287] + _23213 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / 10^stor259) / _22891 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23287] + _23213:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23287] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / 10^stor259) / _22891 * ext_call.return_data[0] / 100 * 10^6) + (_23213 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / 10^stor259) / _22891 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23180 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23215 = mem[_23180]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23288 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23288] > !_23215:
                                            revert with 0, 17
                                        if mem[_23288] + _23215 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / 10^stor259) / _22891 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23288] + _23215:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23288] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / 10^stor259) / _22891 * ext_call.return_data[0] / 100 * 10^6) + (_23215 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / 10^stor259) / _22891 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    s = 10
                                    t = 1
                                    idx = stor259
                                    while idx > 1:
                                        if s > -1 / s:
                                            revert with 0, 17
                                        if not bool(idx):
                                            s = s * s
                                            t = t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        s = s * s
                                        t = s * t
                                        idx = uint255(idx) * 0.5
                                        continue 
                                    if t > -1 / s:
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21240 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if not s * t:
                                        revert with 0, 18
                                    if Mask(112, 0, ext_call.return_data[0]) * _11880 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21240 + ceil32(return_data.size) + 64] / s * t):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23523 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23528 = mem[_23523]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11880) + (Mask(112, 0, ext_call.return_data[32]) * _22798 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23523]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / s * t) / mem[_23523] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / s * t) / mem[_23523]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23567 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23579 = mem[_23567]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23618 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23618] > !_23579:
                                            revert with 0, 17
                                        if mem[_23618] + _23579 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / s * t) / _23528 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23618] + _23579:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23618] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / s * t) / _23528 * ext_call.return_data[0] / 100 * 10^6) + (_23579 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / s * t) / _23528 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23568 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23581 = mem[_23568]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23619 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23619] > !_23581:
                                            revert with 0, 17
                                        if mem[_23619] + _23581 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / s * t) / _23528 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23619] + _23581:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23619] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / s * t) / _23528 * ext_call.return_data[0] / 100 * 10^6) + (_23581 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22798 / s * t) / _23528 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                    else:
                        if bool(bool(stor258 < 78)) or bool(bool(stor258 < 32)):
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not 10^stor258:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _12180 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_12180]:
                                        revert with 0, 50
                                    mem[_12180 + 32] = token1Address
                                    if 1 >= mem[_12180]:
                                        revert with 0, 50
                                    mem[_12180 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_12180 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_12180 + 100] = 1
                                    mem[_12180 + 132] = 64
                                    mem[_12180 + 164] = mem[_12180]
                                    idx = 0
                                    s = _12180 + 32
                                    t = _12180 + 196
                                    while idx < mem[_12180]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _12180 + (32 * mem[_12180]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _15534 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _15569 = mem[_15534]
                                    require mem[_15534] <= test266151307()
                                    require _15534 + mem[_15534] + 31 < _15534 + return_data.size
                                    _15593 = mem[_15534 + mem[_15534]]
                                    if mem[_15534 + mem[_15534]] > test266151307():
                                        revert with 0, 65
                                    if _15534 + ceil32(return_data.size) + ceil32(32 * mem[_15534 + mem[_15534]]) + 1 > test266151307() or ceil32(32 * mem[_15534 + mem[_15534]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _15534 + ceil32(return_data.size) + ceil32(32 * mem[_15534 + mem[_15534]]) + 1
                                    mem[_15534 + ceil32(return_data.size)] = _15593
                                    require (32 * _15593) + _15569 + 32 <= return_data.size
                                    mem[_15534 + ceil32(return_data.size) + 32 len ceil32(32 * _15593)] = mem[_15534 + _15569 + 32 len ceil32(32 * _15593)]
                                    if 1 >= _15593:
                                        revert with 0, 50
                                    _18695 = mem[_15534 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18923 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18936 = mem[_18923]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18695) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_18923]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695) / mem[_18923] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695) / mem[_18923]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19320 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _19381 = mem[_19320]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19580 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19580] > !_19381:
                                                revert with 0, 17
                                            if mem[_19580] + _19381 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695) / _18936 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19580] + _19381:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19580] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695) / _18936 * ext_call.return_data[0] / 100 * 10^6) + (_19381 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695) / _18936 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19321 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19383 = mem[_19321]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _19581 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_19581] > !_19383:
                                                revert with 0, 17
                                            if mem[_19581] + _19383 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695) / _18936 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19581] + _19383:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_19581] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695) / _18936 * ext_call.return_data[0] / 100 * 10^6) + (_19383 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695) / _18936 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18987 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _19005 = mem[_18987]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18695 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18987]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / 10^stor259) / mem[_18987] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / 10^stor259) / mem[_18987]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19547 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19615 = mem[_19547]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19824 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19824] > !_19615:
                                                    revert with 0, 17
                                                if mem[_19824] + _19615 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / 10^stor259) / _19005 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19824] + _19615:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19824] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / 10^stor259) / _19005 * ext_call.return_data[0] / 100 * 10^6) + (_19615 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / 10^stor259) / _19005 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19548 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19617 = mem[_19548]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19825 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19825] > !_19617:
                                                    revert with 0, 17
                                                if mem[_19825] + _19617 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / 10^stor259) / _19005 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19825] + _19617:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19825] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / 10^stor259) / _19005 * ext_call.return_data[0] / 100 * 10^6) + (_19617 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / 10^stor259) / _19005 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            s = 10
                                            t = 1
                                            idx = stor259
                                            while idx > 1:
                                                if s > -1 / s:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    s = s * s
                                                    t = t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                s = s * s
                                                t = s * t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if t > -1 / s:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15534 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not s * t:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15534 + ceil32(return_data.size) + 64] / s * t):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21304 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21317 = mem[_21304]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18695 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21304]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / s * t) / mem[_21304] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / s * t) / mem[_21304]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21524 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21558 = mem[_21524]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21723 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21723] > !_21558:
                                                    revert with 0, 17
                                                if mem[_21723] + _21558 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / s * t) / _21317 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21723] + _21558:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21723] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / s * t) / _21317 * ext_call.return_data[0] / 100 * 10^6) + (_21558 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / s * t) / _21317 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21525 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21560 = mem[_21525]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21724 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21724] > !_21560:
                                                    revert with 0, 17
                                                if mem[_21724] + _21560 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / s * t) / _21317 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21724] + _21560:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21724] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / s * t) / _21317 * ext_call.return_data[0] / 100 * 10^6) + (_21560 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18695 / s * t) / _21317 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _12258 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_12258]:
                                            revert with 0, 50
                                        mem[_12258 + 32] = token1Address
                                        if 1 >= mem[_12258]:
                                            revert with 0, 50
                                        mem[_12258 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_12258 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_12258 + 100] = 10^stor259
                                        mem[_12258 + 132] = 64
                                        mem[_12258 + 164] = mem[_12258]
                                        idx = 0
                                        s = _12258 + 32
                                        t = _12258 + 196
                                        while idx < mem[_12258]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _12258 + (32 * mem[_12258]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15533 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _15568 = mem[_15533]
                                        require mem[_15533] <= test266151307()
                                        require _15533 + mem[_15533] + 31 < _15533 + return_data.size
                                        _15592 = mem[_15533 + mem[_15533]]
                                        if mem[_15533 + mem[_15533]] > test266151307():
                                            revert with 0, 65
                                        if _15533 + ceil32(return_data.size) + ceil32(32 * mem[_15533 + mem[_15533]]) + 1 > test266151307() or ceil32(32 * mem[_15533 + mem[_15533]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _15533 + ceil32(return_data.size) + ceil32(32 * mem[_15533 + mem[_15533]]) + 1
                                        mem[_15533 + ceil32(return_data.size)] = _15592
                                        require (32 * _15592) + _15568 + 32 <= return_data.size
                                        mem[_15533 + ceil32(return_data.size) + 32 len ceil32(32 * _15592)] = mem[_15533 + _15568 + 32 len ceil32(32 * _15592)]
                                        if 1 >= _15592:
                                            revert with 0, 50
                                        _18694 = mem[_15533 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_15533 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15533 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _18922 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _18935 = mem[_18922]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18694) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_18922]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694) / mem[_18922] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694) / mem[_18922]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19318 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _19378 = mem[_19318]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19578 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19578] > !_19378:
                                                    revert with 0, 17
                                                if mem[_19578] + _19378 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694) / _18935 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19578] + _19378:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19578] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694) / _18935 * ext_call.return_data[0] / 100 * 10^6) + (_19378 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694) / _18935 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19319 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19380 = mem[_19319]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _19579 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_19579] > !_19380:
                                                    revert with 0, 17
                                                if mem[_19579] + _19380 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694) / _18935 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19579] + _19380:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_19579] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694) / _18935 * ext_call.return_data[0] / 100 * 10^6) + (_19380 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694) / _18935 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15533 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15533 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _18986 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _19002 = mem[_18986]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18694 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_18986]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / 10^stor259) / mem[_18986] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / 10^stor259) / mem[_18986]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19545 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _19608 = mem[_19545]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19819 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19819] > !_19608:
                                                        revert with 0, 17
                                                    if mem[_19819] + _19608 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / 10^stor259) / _19002 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19819] + _19608:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19819] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / 10^stor259) / _19002 * ext_call.return_data[0] / 100 * 10^6) + (_19608 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / 10^stor259) / _19002 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19546 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _19610 = mem[_19546]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _19820 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_19820] > !_19610:
                                                        revert with 0, 17
                                                    if mem[_19820] + _19610 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / 10^stor259) / _19002 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_19820] + _19610:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_19820] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / 10^stor259) / _19002 * ext_call.return_data[0] / 100 * 10^6) + (_19610 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / 10^stor259) / _19002 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_15533 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_15533 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21303 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21316 = mem[_21303]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _18694 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21303]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / s * t) / mem[_21303] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / s * t) / mem[_21303]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21522 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21555 = mem[_21522]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21721 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21721] > !_21555:
                                                        revert with 0, 17
                                                    if mem[_21721] + _21555 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / s * t) / _21316 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21721] + _21555:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21721] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / s * t) / _21316 * ext_call.return_data[0] / 100 * 10^6) + (_21555 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / s * t) / _21316 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21523 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21557 = mem[_21523]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21722 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_21722] > !_21557:
                                                        revert with 0, 17
                                                    if mem[_21722] + _21557 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / s * t) / _21316 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21722] + _21557:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_21722] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / s * t) / _21316 * ext_call.return_data[0] / 100 * 10^6) + (_21557 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _18694 / s * t) / _21316 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        _15559 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15559]:
                                            revert with 0, 50
                                        mem[_15559 + 32] = token1Address
                                        if 1 >= mem[_15559]:
                                            revert with 0, 50
                                        mem[_15559 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15559 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15559 + 100] = s * t
                                        mem[_15559 + 132] = 64
                                        mem[_15559 + 164] = mem[_15559]
                                        idx = 0
                                        s = _15559 + 32
                                        t = _15559 + 196
                                        while idx < mem[_15559]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15559 + (32 * mem[_15559]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18738 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18756 = mem[_18738]
                                        require mem[_18738] <= test266151307()
                                        require _18738 + mem[_18738] + 31 < _18738 + return_data.size
                                        _18772 = mem[_18738 + mem[_18738]]
                                        if mem[_18738 + mem[_18738]] > test266151307():
                                            revert with 0, 65
                                        if _18738 + ceil32(return_data.size) + ceil32(32 * mem[_18738 + mem[_18738]]) + 1 > test266151307() or ceil32(32 * mem[_18738 + mem[_18738]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _18738 + ceil32(return_data.size) + ceil32(32 * mem[_18738 + mem[_18738]]) + 1
                                        mem[_18738 + ceil32(return_data.size)] = _18772
                                        require (32 * _18772) + _18756 + 32 <= return_data.size
                                        mem[_18738 + ceil32(return_data.size) + 32 len ceil32(32 * _18772)] = mem[_18738 + _18756 + 32 len ceil32(32 * _18772)]
                                        if 1 >= _18772:
                                            revert with 0, 50
                                        _21223 = mem[_18738 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18738 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18738 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21351 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21362 = mem[_21351]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21223) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21351]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / mem[_21351] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / mem[_21351]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21704 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21756 = mem[_21704]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21916 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21916] > !_21756:
                                                    revert with 0, 17
                                                if mem[_21916] + _21756 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21362 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21916] + _21756:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21916] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21362 * ext_call.return_data[0] / 100 * 10^6) + (_21756 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21362 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21705 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21758 = mem[_21705]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21917 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21917] > !_21758:
                                                    revert with 0, 17
                                                if mem[_21917] + _21758 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21362 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21917] + _21758:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21917] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21362 * ext_call.return_data[0] / 100 * 10^6) + (_21758 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223) / _21362 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18738 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18738 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21394 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21410 = mem[_21394]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21394]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / mem[_21394] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / mem[_21394]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21896 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21951 = mem[_21896]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22104 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22104] > !_21951:
                                                        revert with 0, 17
                                                    if mem[_22104] + _21951 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21410 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22104] + _21951:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22104] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21410 * ext_call.return_data[0] / 100 * 10^6) + (_21951 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21410 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21897 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21953 = mem[_21897]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22105 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22105] > !_21953:
                                                        revert with 0, 17
                                                    if mem[_22105] + _21953 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21410 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22105] + _21953:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22105] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21410 * ext_call.return_data[0] / 100 * 10^6) + (_21953 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / 10^stor259) / _21410 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                s = 10
                                                t = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if s > -1 / s:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        s = s * s
                                                        t = t
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    s = s * s
                                                    t = s * t
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if t > -1 / s:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18738 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not s * t:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18738 + ceil32(return_data.size) + 64] / s * t):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22830 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22840 = mem[_22830]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _21223 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22830]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / s * t) / mem[_22830] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / s * t) / mem[_22830]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22958 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22981 = mem[_22958]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23083 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23083] > !_22981:
                                                        revert with 0, 17
                                                    if mem[_23083] + _22981 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / s * t) / _22840 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23083] + _22981:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23083] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / s * t) / _22840 * ext_call.return_data[0] / 100 * 10^6) + (_22981 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / s * t) / _22840 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22959 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22983 = mem[_22959]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23084 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23084] > !_22983:
                                                        revert with 0, 17
                                                    if mem[_23084] + _22983 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / s * t) / _22840 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23084] + _22983:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23084] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / s * t) / _22840 * ext_call.return_data[0] / 100 * 10^6) + (_22983 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21223 / s * t) / _22840 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _12099 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_12099]:
                                    revert with 0, 50
                                mem[_12099 + 32] = token1Address
                                if 1 >= mem[_12099]:
                                    revert with 0, 50
                                mem[_12099 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_12099 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_12099 + 100] = 10^18
                                mem[_12099 + 132] = 64
                                mem[_12099 + 164] = mem[_12099]
                                idx = 0
                                s = _12099 + 32
                                t = _12099 + 196
                                while idx < mem[_12099]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _12099 + (32 * mem[_12099]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _15535 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _15570 = mem[_15535]
                                require mem[_15535] <= test266151307()
                                require _15535 + mem[_15535] + 31 < _15535 + return_data.size
                                _15594 = mem[_15535 + mem[_15535]]
                                if mem[_15535 + mem[_15535]] > test266151307():
                                    revert with 0, 65
                                if _15535 + ceil32(return_data.size) + ceil32(32 * mem[_15535 + mem[_15535]]) + 1 > test266151307() or ceil32(32 * mem[_15535 + mem[_15535]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _15535 + ceil32(return_data.size) + ceil32(32 * mem[_15535 + mem[_15535]]) + 1
                                mem[_15535 + ceil32(return_data.size)] = _15594
                                require (32 * _15594) + _15570 + 32 <= return_data.size
                                mem[_15535 + ceil32(return_data.size) + 32 len ceil32(32 * _15594)] = mem[_15535 + _15570 + 32 len ceil32(32 * _15594)]
                                if 1 >= _15594:
                                    revert with 0, 50
                                _18696 = mem[_15535 + ceil32(return_data.size) + 64]
                                _18725 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_18725]:
                                    revert with 0, 50
                                mem[_18725 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_18725]:
                                    revert with 0, 50
                                mem[_18725 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_18725 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_18725 + 100] = _18696
                                mem[_18725 + 132] = 64
                                mem[_18725 + 164] = mem[_18725]
                                idx = 0
                                s = _18725 + 32
                                t = _18725 + 196
                                while idx < mem[_18725]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _18725 + (32 * mem[_18725]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _21239 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _21245 = mem[_21239]
                                require mem[_21239] <= test266151307()
                                require _21239 + mem[_21239] + 31 < _21239 + return_data.size
                                _21251 = mem[_21239 + mem[_21239]]
                                if mem[_21239 + mem[_21239]] > test266151307():
                                    revert with 0, 65
                                if _21239 + ceil32(return_data.size) + ceil32(32 * mem[_21239 + mem[_21239]]) + 1 > test266151307() or ceil32(32 * mem[_21239 + mem[_21239]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _21239 + ceil32(return_data.size) + ceil32(32 * mem[_21239 + mem[_21239]]) + 1
                                mem[_21239 + ceil32(return_data.size)] = _21251
                                require (32 * _21251) + _21245 + 32 <= return_data.size
                                mem[_21239 + ceil32(return_data.size) + 32 len ceil32(32 * _21251)] = mem[_21239 + _21245 + 32 len ceil32(32 * _21251)]
                                if 1 >= _21251:
                                    revert with 0, 50
                                _22797 = mem[_21239 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_21239 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21239 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _22859 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _22864 = mem[_22859]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22797) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_22859]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797) / mem[_22859] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797) / mem[_22859]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23070 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23102 = mem[_23070]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23187 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23187] > !_23102:
                                            revert with 0, 17
                                        if mem[_23187] + _23102 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797) / _22864 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23187] + _23102:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23187] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797) / _22864 * ext_call.return_data[0] / 100 * 10^6) + (_23102 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797) / _22864 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23071 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23104 = mem[_23071]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23188 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23188] > !_23104:
                                            revert with 0, 17
                                        if mem[_23188] + _23104 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797) / _22864 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23188] + _23104:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23188] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797) / _22864 * ext_call.return_data[0] / 100 * 10^6) + (_23104 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797) / _22864 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21239 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21239 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _22879 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _22888 = mem[_22879]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22797 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_22879]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / 10^stor259) / mem[_22879] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / 10^stor259) / mem[_22879]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23177 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23206 = mem[_23177]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23282 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23282] > !_23206:
                                                revert with 0, 17
                                            if mem[_23282] + _23206 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / 10^stor259) / _22888 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23282] + _23206:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23282] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / 10^stor259) / _22888 * ext_call.return_data[0] / 100 * 10^6) + (_23206 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / 10^stor259) / _22888 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23178 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23208 = mem[_23178]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23283 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23283] > !_23208:
                                                revert with 0, 17
                                            if mem[_23283] + _23208 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / 10^stor259) / _22888 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23283] + _23208:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23283] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / 10^stor259) / _22888 * ext_call.return_data[0] / 100 * 10^6) + (_23208 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / 10^stor259) / _22888 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        s = 10
                                        t = 1
                                        idx = stor259
                                        while idx > 1:
                                            if s > -1 / s:
                                                revert with 0, 17
                                            if not bool(idx):
                                                s = s * s
                                                t = t
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            s = s * s
                                            t = s * t
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if t > -1 / s:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_21239 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not s * t:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258 > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21239 + ceil32(return_data.size) + 64] / s * t):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23522 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23527 = mem[_23522]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (Mask(112, 0, ext_call.return_data[32]) * _22797 / s * t) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23522]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / s * t) / mem[_23522] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / s * t) / mem[_23522]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23565 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23576 = mem[_23565]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23616 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23616] > !_23576:
                                                revert with 0, 17
                                            if mem[_23616] + _23576 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / s * t) / _23527 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23616] + _23576:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23616] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / s * t) / _23527 * ext_call.return_data[0] / 100 * 10^6) + (_23576 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / s * t) / _23527 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23566 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23578 = mem[_23566]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23617 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23617] > !_23578:
                                                revert with 0, 17
                                            if mem[_23617] + _23578 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / s * t) / _23527 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23617] + _23578:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23617] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / s * t) / _23527 * ext_call.return_data[0] / 100 * 10^6) + (_23578 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / 10^stor258) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22797 / s * t) / _23527 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                        else:
                            s = 10
                            t = 1
                            idx = stor258
                            while idx > 1:
                                if s > -1 / s:
                                    revert with 0, 17
                                if not bool(idx):
                                    s = s * s
                                    t = t
                                    idx = uint255(idx) * 0.5
                                    continue 
                                s = s * s
                                t = s * t
                                idx = uint255(idx) * 0.5
                                continue 
                            if t > -1 / s:
                                revert with 0, 17
                            if Mask(112, 0, ext_call.return_data[0]) and mem[(4 * ceil32(return_data.size)) + 256] > -1 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 17
                            if not s * t:
                                revert with 0, 18
                            if lpTokenAddress != 0x4ee072c5946b4cdc00cbdeb4a4e54a03cf6d08d3:
                                if not stor259:
                                    _15744 = mem[64]
                                    mem[mem[64]] = 2
                                    mem[64] = mem[64] + 96
                                    if 0 >= mem[_15744]:
                                        revert with 0, 50
                                    mem[_15744 + 32] = token1Address
                                    if 1 >= mem[_15744]:
                                        revert with 0, 50
                                    mem[_15744 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                    mem[_15744 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                    mem[_15744 + 100] = 1
                                    mem[_15744 + 132] = 64
                                    mem[_15744 + 164] = mem[_15744]
                                    idx = 0
                                    u = _15744 + 32
                                    v = _15744 + 196
                                    while idx < mem[_15744]:
                                        mem[v] = mem[u + 12 len 20]
                                        idx = idx + 1
                                        u = u + 32
                                        v = v + 32
                                        continue 
                                    require ext_code.size(routerAddress)
                                    staticcall routerAddress.mem[mem[64] len 4] with:
                                            gas gas_remaining wei
                                           args mem[mem[64] + 4 len _15744 + (32 * mem[_15744]) + -mem[64] + 192]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _18736 = mem[64]
                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _18754 = mem[_18736]
                                    require mem[_18736] <= test266151307()
                                    require _18736 + mem[_18736] + 31 < _18736 + return_data.size
                                    _18770 = mem[_18736 + mem[_18736]]
                                    if mem[_18736 + mem[_18736]] > test266151307():
                                        revert with 0, 65
                                    if _18736 + ceil32(return_data.size) + ceil32(32 * mem[_18736 + mem[_18736]]) + 1 > test266151307() or ceil32(32 * mem[_18736 + mem[_18736]]) + 1 < 0:
                                        revert with 0, 65
                                    mem[64] = _18736 + ceil32(return_data.size) + ceil32(32 * mem[_18736 + mem[_18736]]) + 1
                                    mem[_18736 + ceil32(return_data.size)] = _18770
                                    require (32 * _18770) + _18754 + 32 <= return_data.size
                                    mem[_18736 + ceil32(return_data.size) + 32 len ceil32(32 * _18770)] = mem[_18736 + _18754 + 32 len ceil32(32 * _18770)]
                                    if 1 >= _18770:
                                        revert with 0, 50
                                    _21219 = mem[_18736 + ceil32(return_data.size) + 64]
                                    if not stor259:
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_18736 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18736 + ceil32(return_data.size) + 64]):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21350 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21360 = mem[_21350]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21219) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_21350]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / mem[_21350] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / mem[_21350]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21700 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _21752 = mem[_21700]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21914 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21914] > !_21752:
                                                revert with 0, 17
                                            if mem[_21914] + _21752 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21360 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21914] + _21752:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21914] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21360 * ext_call.return_data[0] / 100 * 10^6) + (_21752 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21360 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21701 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21754 = mem[_21701]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21915 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_21915] > !_21754:
                                                revert with 0, 17
                                            if mem[_21915] + _21754 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21360 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21915] + _21754:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_21915] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21360 * ext_call.return_data[0] / 100 * 10^6) + (_21754 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219) / _21360 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18736 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not 10^stor259:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18736 + ceil32(return_data.size) + 64] / 10^stor259):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21393 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21407 = mem[_21393]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21393]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / mem[_21393] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / mem[_21393]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21892 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21943 = mem[_21892]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22098 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22098] > !_21943:
                                                    revert with 0, 17
                                                if mem[_22098] + _21943 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21407 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22098] + _21943:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22098] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21407 * ext_call.return_data[0] / 100 * 10^6) + (_21943 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21407 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21893 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21945 = mem[_21893]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22099 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_22099] > !_21945:
                                                    revert with 0, 17
                                                if mem[_22099] + _21945 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21407 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22099] + _21945:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_22099] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21407 * ext_call.return_data[0] / 100 * 10^6) + (_21945 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / 10^stor259) / _21407 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            u = 10
                                            v = 1
                                            idx = stor259
                                            while idx > 1:
                                                if u > -1 / u:
                                                    revert with 0, 17
                                                if not bool(idx):
                                                    u = u * u
                                                    v = v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                u = u * u
                                                v = u * v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            if v > -1 / u:
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18736 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if not u * v:
                                                revert with 0, 18
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18736 + ceil32(return_data.size) + 64] / u * v):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22829 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22839 = mem[_22829]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21219 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22829]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / u * v) / mem[_22829] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / u * v) / mem[_22829]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22954 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _22977 = mem[_22954]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23080 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23080] > !_22977:
                                                    revert with 0, 17
                                                if mem[_23080] + _22977 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / u * v) / _22839 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23080] + _22977:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23080] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / u * v) / _22839 * ext_call.return_data[0] / 100 * 10^6) + (_22977 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / u * v) / _22839 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22955 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22979 = mem[_22955]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23081 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23081] > !_22979:
                                                    revert with 0, 17
                                                if mem[_23081] + _22979 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / u * v) / _22839 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23081] + _22979:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23081] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / u * v) / _22839 * ext_call.return_data[0] / 100 * 10^6) + (_22979 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21219 / u * v) / _22839 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        _15806 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_15806]:
                                            revert with 0, 50
                                        mem[_15806 + 32] = token1Address
                                        if 1 >= mem[_15806]:
                                            revert with 0, 50
                                        mem[_15806 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_15806 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_15806 + 100] = 10^stor259
                                        mem[_15806 + 132] = 64
                                        mem[_15806 + 164] = mem[_15806]
                                        idx = 0
                                        u = _15806 + 32
                                        v = _15806 + 196
                                        while idx < mem[_15806]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _15806 + (32 * mem[_15806]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _18735 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _18753 = mem[_18735]
                                        require mem[_18735] <= test266151307()
                                        require _18735 + mem[_18735] + 31 < _18735 + return_data.size
                                        _18769 = mem[_18735 + mem[_18735]]
                                        if mem[_18735 + mem[_18735]] > test266151307():
                                            revert with 0, 65
                                        if _18735 + ceil32(return_data.size) + ceil32(32 * mem[_18735 + mem[_18735]]) + 1 > test266151307() or ceil32(32 * mem[_18735 + mem[_18735]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _18735 + ceil32(return_data.size) + ceil32(32 * mem[_18735 + mem[_18735]]) + 1
                                        mem[_18735 + ceil32(return_data.size)] = _18769
                                        require (32 * _18769) + _18753 + 32 <= return_data.size
                                        mem[_18735 + ceil32(return_data.size) + 32 len ceil32(32 * _18769)] = mem[_18735 + _18753 + 32 len ceil32(32 * _18769)]
                                        if 1 >= _18769:
                                            revert with 0, 50
                                        _21218 = mem[_18735 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_18735 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18735 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _21349 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _21359 = mem[_21349]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21218) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_21349]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218) / mem[_21349] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218) / mem[_21349]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21698 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _21749 = mem[_21698]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21912 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21912] > !_21749:
                                                    revert with 0, 17
                                                if mem[_21912] + _21749 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218) / _21359 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21912] + _21749:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21912] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218) / _21359 * ext_call.return_data[0] / 100 * 10^6) + (_21749 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218) / _21359 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21699 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21751 = mem[_21699]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21913 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_21913] > !_21751:
                                                    revert with 0, 17
                                                if mem[_21913] + _21751 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218) / _21359 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_21913] + _21751:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_21913] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218) / _21359 * ext_call.return_data[0] / 100 * 10^6) + (_21751 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218) / _21359 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18735 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18735 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _21392 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _21404 = mem[_21392]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21218 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_21392]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / 10^stor259) / mem[_21392] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / 10^stor259) / mem[_21392]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21890 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _21936 = mem[_21890]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22093 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22093] > !_21936:
                                                        revert with 0, 17
                                                    if mem[_22093] + _21936 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / 10^stor259) / _21404 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22093] + _21936:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22093] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / 10^stor259) / _21404 * ext_call.return_data[0] / 100 * 10^6) + (_21936 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / 10^stor259) / _21404 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _21891 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _21938 = mem[_21891]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22094 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_22094] > !_21938:
                                                        revert with 0, 17
                                                    if mem[_22094] + _21938 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / 10^stor259) / _21404 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_22094] + _21938:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_22094] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / 10^stor259) / _21404 * ext_call.return_data[0] / 100 * 10^6) + (_21938 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / 10^stor259) / _21404 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_18735 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_18735 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22828 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22838 = mem[_22828]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _21218 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22828]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / u * v) / mem[_22828] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / u * v) / mem[_22828]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22952 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _22974 = mem[_22952]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23078 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23078] > !_22974:
                                                        revert with 0, 17
                                                    if mem[_23078] + _22974 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / u * v) / _22838 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23078] + _22974:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23078] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / u * v) / _22838 * ext_call.return_data[0] / 100 * 10^6) + (_22974 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / u * v) / _22838 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _22953 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _22976 = mem[_22953]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23079 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23079] > !_22976:
                                                        revert with 0, 17
                                                    if mem[_23079] + _22976 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / u * v) / _22838 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23079] + _22976:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23079] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / u * v) / _22838 * ext_call.return_data[0] / 100 * 10^6) + (_22976 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _21218 / u * v) / _22838 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        _18750 = mem[64]
                                        mem[mem[64]] = 2
                                        mem[64] = mem[64] + 96
                                        if 0 >= mem[_18750]:
                                            revert with 0, 50
                                        mem[_18750 + 32] = token1Address
                                        if 1 >= mem[_18750]:
                                            revert with 0, 50
                                        mem[_18750 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                        mem[_18750 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                        mem[_18750 + 100] = u * v
                                        mem[_18750 + 132] = 64
                                        mem[_18750 + 164] = mem[_18750]
                                        idx = 0
                                        u = _18750 + 32
                                        v = _18750 + 196
                                        while idx < mem[_18750]:
                                            mem[v] = mem[u + 12 len 20]
                                            idx = idx + 1
                                            u = u + 32
                                            v = v + 32
                                            continue 
                                        require ext_code.size(routerAddress)
                                        staticcall routerAddress.mem[mem[64] len 4] with:
                                                gas gas_remaining wei
                                               args mem[mem[64] + 4 len _18750 + (32 * mem[_18750]) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _21237 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _21243 = mem[_21237]
                                        require mem[_21237] <= test266151307()
                                        require _21237 + mem[_21237] + 31 < _21237 + return_data.size
                                        _21249 = mem[_21237 + mem[_21237]]
                                        if mem[_21237 + mem[_21237]] > test266151307():
                                            revert with 0, 65
                                        if _21237 + ceil32(return_data.size) + ceil32(32 * mem[_21237 + mem[_21237]]) + 1 > test266151307() or ceil32(32 * mem[_21237 + mem[_21237]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _21237 + ceil32(return_data.size) + ceil32(32 * mem[_21237 + mem[_21237]]) + 1
                                        mem[_21237 + ceil32(return_data.size)] = _21249
                                        require (32 * _21249) + _21243 + 32 <= return_data.size
                                        mem[_21237 + ceil32(return_data.size) + 32 len ceil32(32 * _21249)] = mem[_21237 + _21243 + 32 len ceil32(32 * _21249)]
                                        if 1 >= _21249:
                                            revert with 0, 50
                                        _22795 = mem[_21237 + ceil32(return_data.size) + 64]
                                        if not stor259:
                                            if Mask(112, 0, ext_call.return_data[32]) and mem[_21237 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 17
                                            if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21237 + ceil32(return_data.size) + 64]):
                                                revert with 0, 17
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x18160ddd with:
                                                    gas gas_remaining wei
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _22858 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _22863 = mem[_22858]
                                            if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22795) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                revert with 0, 17
                                            if not mem[_22858]:
                                                revert with 0, 18
                                            if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / mem[_22858] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / mem[_22858]:
                                                revert with 0, 17
                                            if not sub_abddf82e:
                                                mem[mem[64] + 36] = this.address
                                                require ext_code.size(masterChefAddress)
                                                staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                        gas gas_remaining wei
                                                       args poolId, this.address
                                                mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23068 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 64
                                                _23099 = mem[_23068]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23185 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23185] > !_23099:
                                                    revert with 0, 17
                                                if mem[_23185] + _23099 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22863 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23185] + _23099:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23185] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22863 * ext_call.return_data[0] / 100 * 10^6) + (_23099 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22863 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(stakingRewardAddress)
                                                staticcall stakingRewardAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23069 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23101 = mem[_23069]
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23186 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                if mem[_23186] > !_23101:
                                                    revert with 0, 17
                                                if mem[_23186] + _23101 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22863 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23186] + _23101:
                                                    revert with 0, 17
                                                mem[mem[64]] = (mem[_23186] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22863 * ext_call.return_data[0] / 100 * 10^6) + (_23101 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795) / _22863 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21237 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not 10^stor259:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21237 + ceil32(return_data.size) + 64] / 10^stor259):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _22878 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _22885 = mem[_22878]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_22878]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / mem[_22878] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / mem[_22878]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23175 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23199 = mem[_23175]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23273 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23273] > !_23199:
                                                        revert with 0, 17
                                                    if mem[_23273] + _23199 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22885 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23273] + _23199:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23273] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22885 * ext_call.return_data[0] / 100 * 10^6) + (_23199 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22885 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23176 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _23201 = mem[_23176]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23274 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23274] > !_23201:
                                                        revert with 0, 17
                                                    if mem[_23274] + _23201 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22885 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23274] + _23201:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23274] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22885 * ext_call.return_data[0] / 100 * 10^6) + (_23201 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / 10^stor259) / _22885 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                            else:
                                                u = 10
                                                v = 1
                                                idx = stor259
                                                while idx > 1:
                                                    if u > -1 / u:
                                                        revert with 0, 17
                                                    if not bool(idx):
                                                        u = u * u
                                                        v = v
                                                        idx = uint255(idx) * 0.5
                                                        continue 
                                                    u = u * u
                                                    v = u * v
                                                    idx = uint255(idx) * 0.5
                                                    continue 
                                                if v > -1 / u:
                                                    revert with 0, 17
                                                if Mask(112, 0, ext_call.return_data[32]) and mem[_21237 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                                    revert with 0, 17
                                                if not u * v:
                                                    revert with 0, 18
                                                if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_21237 + ceil32(return_data.size) + 64] / u * v):
                                                    revert with 0, 17
                                                require ext_code.size(lpTokenAddress)
                                                staticcall lpTokenAddress.0x18160ddd with:
                                                        gas gas_remaining wei
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                _23521 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                require return_data.size >= 32
                                                _23526 = mem[_23521]
                                                if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                                    revert with 0, 17
                                                if not mem[_23521]:
                                                    revert with 0, 18
                                                if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / mem[_23521] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / mem[_23521]:
                                                    revert with 0, 17
                                                if not sub_abddf82e:
                                                    mem[mem[64] + 36] = this.address
                                                    require ext_code.size(masterChefAddress)
                                                    staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                            gas gas_remaining wei
                                                           args poolId, this.address
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23563 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _23573 = mem[_23563]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23614 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23614] > !_23573:
                                                        revert with 0, 17
                                                    if mem[_23614] + _23573 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23526 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23614] + _23573:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23614] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23526 * ext_call.return_data[0] / 100 * 10^6) + (_23573 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23526 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(stakingRewardAddress)
                                                    staticcall stakingRewardAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23564 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _23575 = mem[_23564]
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(lpTokenAddress)
                                                    staticcall lpTokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _23615 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    if mem[_23615] > !_23575:
                                                        revert with 0, 17
                                                    if mem[_23615] + _23575 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23526 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23615] + _23575:
                                                        revert with 0, 17
                                                    mem[mem[64]] = (mem[_23615] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23526 * ext_call.return_data[0] / 100 * 10^6) + (_23575 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _22795 / u * v) / _23526 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                            else:
                                _15639 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_15639]:
                                    revert with 0, 50
                                mem[_15639 + 32] = token1Address
                                if 1 >= mem[_15639]:
                                    revert with 0, 50
                                mem[_15639 + 64] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                mem[_15639 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_15639 + 100] = 10^18
                                mem[_15639 + 132] = 64
                                mem[_15639 + 164] = mem[_15639]
                                idx = 0
                                u = _15639 + 32
                                v = _15639 + 196
                                while idx < mem[_15639]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _15639 + (32 * mem[_15639]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _18737 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _18755 = mem[_18737]
                                require mem[_18737] <= test266151307()
                                require _18737 + mem[_18737] + 31 < _18737 + return_data.size
                                _18771 = mem[_18737 + mem[_18737]]
                                if mem[_18737 + mem[_18737]] > test266151307():
                                    revert with 0, 65
                                if _18737 + ceil32(return_data.size) + ceil32(32 * mem[_18737 + mem[_18737]]) + 1 > test266151307() or ceil32(32 * mem[_18737 + mem[_18737]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _18737 + ceil32(return_data.size) + ceil32(32 * mem[_18737 + mem[_18737]]) + 1
                                mem[_18737 + ceil32(return_data.size)] = _18771
                                require (32 * _18771) + _18755 + 32 <= return_data.size
                                mem[_18737 + ceil32(return_data.size) + 32 len ceil32(32 * _18771)] = mem[_18737 + _18755 + 32 len ceil32(32 * _18771)]
                                if 1 >= _18771:
                                    revert with 0, 50
                                _21220 = mem[_18737 + ceil32(return_data.size) + 64]
                                _21235 = mem[64]
                                mem[mem[64]] = 2
                                mem[64] = mem[64] + 96
                                if 0 >= mem[_21235]:
                                    revert with 0, 50
                                mem[_21235 + 32] = 0xc7198437980c041c805a1edcba50c1ce5db95118
                                if 1 >= mem[_21235]:
                                    revert with 0, 50
                                mem[_21235 + 64] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66
                                mem[_21235 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                                mem[_21235 + 100] = _21220
                                mem[_21235 + 132] = 64
                                mem[_21235 + 164] = mem[_21235]
                                idx = 0
                                u = _21235 + 32
                                v = _21235 + 196
                                while idx < mem[_21235]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(routerAddress)
                                staticcall routerAddress.mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _21235 + (32 * mem[_21235]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _22801 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _22802 = mem[_22801]
                                require mem[_22801] <= test266151307()
                                require _22801 + mem[_22801] + 31 < _22801 + return_data.size
                                _22803 = mem[_22801 + mem[_22801]]
                                if mem[_22801 + mem[_22801]] > test266151307():
                                    revert with 0, 65
                                if _22801 + ceil32(return_data.size) + ceil32(32 * mem[_22801 + mem[_22801]]) + 1 > test266151307() or ceil32(32 * mem[_22801 + mem[_22801]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _22801 + ceil32(return_data.size) + ceil32(32 * mem[_22801 + mem[_22801]]) + 1
                                mem[_22801 + ceil32(return_data.size)] = _22803
                                require (32 * _22803) + _22802 + 32 <= return_data.size
                                mem[_22801 + ceil32(return_data.size) + 32 len ceil32(32 * _22803)] = mem[_22801 + _22802 + 32 len ceil32(32 * _22803)]
                                if 1 >= _22803:
                                    revert with 0, 50
                                _23510 = mem[_22801 + ceil32(return_data.size) + 64]
                                if not stor259:
                                    if Mask(112, 0, ext_call.return_data[32]) and mem[_22801 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 17
                                    if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22801 + ceil32(return_data.size) + 64]):
                                        revert with 0, 17
                                    require ext_code.size(lpTokenAddress)
                                    staticcall lpTokenAddress.0x18160ddd with:
                                            gas gas_remaining wei
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _23533 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _23534 = mem[_23533]
                                    if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23510) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                        revert with 0, 17
                                    if not mem[_23533]:
                                        revert with 0, 18
                                    if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510) / mem[_23533] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510) / mem[_23533]:
                                        revert with 0, 17
                                    if not sub_abddf82e:
                                        mem[mem[64] + 36] = this.address
                                        require ext_code.size(masterChefAddress)
                                        staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                gas gas_remaining wei
                                               args poolId, this.address
                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23612 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 64
                                        _23624 = mem[_23612]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23647 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23647] > !_23624:
                                            revert with 0, 17
                                        if mem[_23647] + _23624 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510) / _23534 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23647] + _23624:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23647] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510) / _23534 * ext_call.return_data[0] / 100 * 10^6) + (_23624 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510) / _23534 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(stakingRewardAddress)
                                        staticcall stakingRewardAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23613 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23626 = mem[_23613]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23648 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        if mem[_23648] > !_23626:
                                            revert with 0, 17
                                        if mem[_23648] + _23626 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510) / _23534 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23648] + _23626:
                                            revert with 0, 17
                                        mem[mem[64]] = (mem[_23648] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510) / _23534 * ext_call.return_data[0] / 100 * 10^6) + (_23626 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510) / _23534 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                else:
                                    if bool(bool(stor259 < 78)) or bool(bool(stor259 < 32)):
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_22801 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not 10^stor259:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22801 + ceil32(return_data.size) + 64] / 10^stor259):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23537 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23540 = mem[_23537]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23510 / 10^stor259) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23537]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / 10^stor259) / mem[_23537] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / 10^stor259) / mem[_23537]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23645 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23653 = mem[_23645]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23667 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23667] > !_23653:
                                                revert with 0, 17
                                            if mem[_23667] + _23653 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / 10^stor259) / _23540 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23667] + _23653:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23667] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / 10^stor259) / _23540 * ext_call.return_data[0] / 100 * 10^6) + (_23653 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / 10^stor259) / _23540 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23646 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23655 = mem[_23646]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23668 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23668] > !_23655:
                                                revert with 0, 17
                                            if mem[_23668] + _23655 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / 10^stor259) / _23540 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23668] + _23655:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23668] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / 10^stor259) / _23540 * ext_call.return_data[0] / 100 * 10^6) + (_23655 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / 10^stor259) / _23540 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                    else:
                                        u = 10
                                        v = 1
                                        idx = stor259
                                        while idx > 1:
                                            if u > -1 / u:
                                                revert with 0, 17
                                            if not bool(idx):
                                                u = u * u
                                                v = v
                                                idx = uint255(idx) * 0.5
                                                continue 
                                            u = u * u
                                            v = u * v
                                            idx = uint255(idx) * 0.5
                                            continue 
                                        if v > -1 / u:
                                            revert with 0, 17
                                        if Mask(112, 0, ext_call.return_data[32]) and mem[_22801 + ceil32(return_data.size) + 64] > -1 / Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 17
                                        if not u * v:
                                            revert with 0, 18
                                        if Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t > !(Mask(112, 0, ext_call.return_data[32]) * mem[_22801 + ceil32(return_data.size) + 64] / u * v):
                                            revert with 0, 17
                                        require ext_code.size(lpTokenAddress)
                                        staticcall lpTokenAddress.0x18160ddd with:
                                                gas gas_remaining wei
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _23713 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _23714 = mem[_23713]
                                        if (Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (Mask(112, 0, ext_call.return_data[32]) * _23510 / u * v) > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                                            revert with 0, 17
                                        if not mem[_23713]:
                                            revert with 0, 18
                                        if (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / u * v) / mem[_23713] and ext_call.return_data[0] > -1 / (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / u * v) / mem[_23713]:
                                            revert with 0, 17
                                        if not sub_abddf82e:
                                            mem[mem[64] + 36] = this.address
                                            require ext_code.size(masterChefAddress)
                                            staticcall masterChefAddress.userInfo(uint256 rg1, address rg2) with:
                                                    gas gas_remaining wei
                                                   args poolId, this.address
                                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23719 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 64
                                            _23721 = mem[_23719]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23728 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23728] > !_23721:
                                                revert with 0, 17
                                            if mem[_23728] + _23721 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / u * v) / _23714 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23728] + _23721:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23728] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / u * v) / _23714 * ext_call.return_data[0] / 100 * 10^6) + (_23721 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / u * v) / _23714 * ext_call.return_data[0] / 100 * 10^6) / 10^18
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(stakingRewardAddress)
                                            staticcall stakingRewardAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23720 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _23723 = mem[_23720]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(lpTokenAddress)
                                            staticcall lpTokenAddress.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _23729 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            if mem[_23729] > !_23723:
                                                revert with 0, 17
                                            if mem[_23729] + _23723 and (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / u * v) / _23714 * ext_call.return_data[0] / 100 * 10^6 > -1 / mem[_23729] + _23723:
                                                revert with 0, 17
                                            mem[mem[64]] = (mem[_23729] * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / u * v) / _23714 * ext_call.return_data[0] / 100 * 10^6) + (_23723 * (10^18 * Mask(112, 0, ext_call.return_data[0]) * _11880 / s * t) + (10^18 * Mask(112, 0, ext_call.return_data[32]) * _23510 / u * v) / _23714 * ext_call.return_data[0] / 100 * 10^6) / 10^18
    return memory
      from mem[64]
       len 32
}



}
