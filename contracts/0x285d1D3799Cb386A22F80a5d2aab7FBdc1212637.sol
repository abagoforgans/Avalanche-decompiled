contract main {




// =====================  Runtime code  =====================


#
#  - sub_20665c49(?)
#  - sub_ac951786(?)
#  - checkAavePosition(address arg1, address arg2, address arg3, uint256[] arg4, address arg5, address arg6, uint256[] arg7, uint256 arg8, bool arg9)
#
const nativeToken = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee


address sub_238f9b7aAddress;
address sub_5f9d4d2eAddress;
address instaIndexAddress;
address sub_b729cbebAddress;

function sub_238f9b7a(?) payable {
    return sub_238f9b7aAddress
}

function sub_5f9d4d2e(?) payable {
    return sub_5f9d4d2eAddress
}

function instaIndex() payable {
    return instaIndexAddress
}

function sub_b729cbeb(?) payable {
    return sub_b729cbebAddress
}

function _fallback() payable {
    revert
}

function sub_222641c0(?) payable {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require ext_code.size(sub_238f9b7aAddress)
    staticcall sub_238f9b7aAddress.getLendingPool() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getUserAccountData(address rg1) with:
            gas gas_remaining wei
           args address(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 192
    if 1000000000000000000 * 10^18 > !(arg2 / 2):
        revert with 0, 17
    if not arg2:
        revert with 0, 18
    return (ext_call.return_data[160] > (arg2 / 2) + 1000000000000000000 * 10^18 / arg2)
}

function sub_899149ef(?) payable {
    require calldata.size - 4 >= 32
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 4).length) + 97 < 96 or ceil32(32 * ('cd', 4).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 4).length
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    idx = 0
    s = cd[4] + 36
    t = 128
    while idx < ('cd', 4).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(sub_238f9b7aAddress)
    staticcall sub_238f9b7aAddress.getPriceOracle() with:
            gas gas_remaining wei
    mem[ceil32(32 * ('cd', 4).length) + 97] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97] = 0x9d23d9f200000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 101] = 32
    mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 133] = ('cd', 4).length
    idx = 0
    s = 128
    t = ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 165
    while idx < ('cd', 4).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getAssetsPrices(address[] rg1) with:
            gas gas_remaining wei
           args Array(len=('cd', 4).length, data=mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 165 len 32 * ('cd', 4).length])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * ('cd', 4).length) + (2 * ceil32(return_data.size)) + 97
    require return_data.size >= 32
    _39 = mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97 len 4], 0
    require mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97 len 4], 0 <= test266151307()
    require ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + return_data.size + 97 > ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97 len 4], 0 + 128
    _40 = mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97 len 4], 0 + 97]
    if mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97 len 4], 0 + 97] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97 len 4], 0 + 97]) + 1 < 0 or ceil32(32 * ('cd', 4).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97 len 4], 0 + 97]) + 98 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 4).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + 97 len 4], 0 + 97]) + 98
    mem[ceil32(32 * ('cd', 4).length) + (2 * ceil32(return_data.size)) + 97] = _40
    require _39 + (32 * _40) + 32 <= return_data.size
    mem[ceil32(32 * ('cd', 4).length) + (2 * ceil32(return_data.size)) + 129 len 32 * _40] = mem[ceil32(32 * ('cd', 4).length) + ceil32(return_data.size) + _39 + 129 len 32 * _40]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _40
    mem[mem[64] + 64 len 32 * _40] = mem[ceil32(32 * ('cd', 4).length) + (2 * ceil32(return_data.size)) + 129 len 32 * _40]
    return Array(len=_40, data=mem[mem[64] + 64 len 32 * _40])
}

function sub_bb17e444(?) payable {
    require calldata.size - 4 >= 32
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 4).length) + 97 < 96 or ceil32(32 * ('cd', 4).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 4).length
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    idx = 0
    s = cd[4] + 36
    t = 128
    while idx < ('cd', 4).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    mem[ceil32(32 * ('cd', 4).length) + 97] = ('cd', 4).length
    mem[64] = ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 129
    if not ('cd', 4).length:
        idx = 0
        while idx < ('cd', 4).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _194 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _200 = mem[_194]
            _201 = mem[_194 + 32]
            _202 = mem[_194 + 64]
            _205 = mem[_194 + 160]
            require mem[_194 + 160] == bool(mem[_194 + 160])
            _219 = mem[_194 + 192]
            require mem[_194 + 192] == bool(mem[_194 + 192])
            require mem[_194 + 224] == bool(mem[_194 + 224])
            _229 = mem[_194 + 256]
            require mem[_194 + 256] == bool(mem[_194 + 256])
            require mem[_194 + 288] == bool(mem[_194 + 288])
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _235 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _237 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _239 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _241 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _244 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _248 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            mem[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129] + 192] = bool(mem[_194 + 288])
            mem[_248 + 160] = bool(_229)
            mem[_244 + 128] = bool(_219)
            mem[_241 + 96] = bool(_205)
            mem[_239 + 64] = _202
            mem[_237 + 32] = _201
            mem[_235] = _200
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _178 = mem[64]
        mem[mem[64]] = 32
        _182 = mem[ceil32(32 * ('cd', 4).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 4).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 4).length) + 129
        t = mem[64] + 64
        while idx < _182:
            _262 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_262 + 32]
            mem[t + 64] = mem[_262 + 64]
            mem[t + 96] = bool(mem[_262 + 96])
            mem[t + 128] = bool(mem[_262 + 128])
            mem[t + 160] = bool(mem[_262 + 160])
            mem[t + 192] = bool(mem[_262 + 192])
            mem[t + 224] = mem[_262 + 224]
            mem[t + 256] = mem[_262 + 256]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        return memory
          from mem[64]
           len _178 + (288 * _182) + -mem[64] + 64
    mem[64] = ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 417
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 129] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 161] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 193] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 225] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 257] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 289] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 321] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 353] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 385] = 0
    mem[var26002] = var26001
    if not var26003 - 1:
        idx = 0
        while idx < ('cd', 4).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _377 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _384 = mem[_377]
            _385 = mem[_377 + 32]
            _386 = mem[_377 + 64]
            _389 = mem[_377 + 160]
            require mem[_377 + 160] == bool(mem[_377 + 160])
            _402 = mem[_377 + 192]
            require mem[_377 + 192] == bool(mem[_377 + 192])
            require mem[_377 + 224] == bool(mem[_377 + 224])
            _411 = mem[_377 + 256]
            require mem[_377 + 256] == bool(mem[_377 + 256])
            require mem[_377 + 288] == bool(mem[_377 + 288])
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _417 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _419 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _421 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _424 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _428 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _432 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            mem[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129] + 192] = bool(mem[_377 + 288])
            mem[_432 + 160] = bool(_411)
            mem[_428 + 128] = bool(_402)
            mem[_424 + 96] = bool(_389)
            mem[_421 + 64] = _386
            mem[_419 + 32] = _385
            mem[_417] = _384
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _361 = mem[64]
        mem[mem[64]] = 32
        _364 = mem[ceil32(32 * ('cd', 4).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 4).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 4).length) + 129
        t = mem[64] + 64
        while idx < _364:
            _445 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_445 + 32]
            mem[t + 64] = mem[_445 + 64]
            mem[t + 96] = bool(mem[_445 + 96])
            mem[t + 128] = bool(mem[_445 + 128])
            mem[t + 160] = bool(mem[_445 + 160])
            mem[t + 192] = bool(mem[_445 + 192])
            mem[t + 224] = mem[_445 + 224]
            mem[t + 256] = mem[_445 + 256]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        return memory
          from mem[64]
           len _361 + (288 * _364) + -mem[64] + 64
    mem[64] = ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 705
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 417] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 449] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 481] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 513] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 545] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 577] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 609] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 641] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 673] = 0
    mem[var30002] = var30001
    if not var30003 - 1:
        idx = 0
        while idx < ('cd', 4).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _559 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _566 = mem[_559]
            _567 = mem[_559 + 32]
            _568 = mem[_559 + 64]
            _571 = mem[_559 + 160]
            require mem[_559 + 160] == bool(mem[_559 + 160])
            _584 = mem[_559 + 192]
            require mem[_559 + 192] == bool(mem[_559 + 192])
            require mem[_559 + 224] == bool(mem[_559 + 224])
            _593 = mem[_559 + 256]
            require mem[_559 + 256] == bool(mem[_559 + 256])
            require mem[_559 + 288] == bool(mem[_559 + 288])
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _599 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _601 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _603 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _606 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _610 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _614 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            mem[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129] + 192] = bool(mem[_559 + 288])
            mem[_614 + 160] = bool(_593)
            mem[_610 + 128] = bool(_584)
            mem[_606 + 96] = bool(_571)
            mem[_603 + 64] = _568
            mem[_601 + 32] = _567
            mem[_599] = _566
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _543 = mem[64]
        mem[mem[64]] = 32
        _546 = mem[ceil32(32 * ('cd', 4).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 4).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 4).length) + 129
        t = mem[64] + 64
        while idx < _546:
            _627 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_627 + 32]
            mem[t + 64] = mem[_627 + 64]
            mem[t + 96] = bool(mem[_627 + 96])
            mem[t + 128] = bool(mem[_627 + 128])
            mem[t + 160] = bool(mem[_627 + 160])
            mem[t + 192] = bool(mem[_627 + 192])
            mem[t + 224] = mem[_627 + 224]
            mem[t + 256] = mem[_627 + 256]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        return memory
          from mem[64]
           len _543 + (288 * _546) + -mem[64] + 64
    mem[64] = ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 993
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 705] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 737] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 769] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 801] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 833] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 865] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 897] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 929] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 961] = 0
    mem[var34002] = var34001
    if not var34003 - 1:
        idx = 0
        while idx < ('cd', 4).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _741 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _748 = mem[_741]
            _749 = mem[_741 + 32]
            _750 = mem[_741 + 64]
            _753 = mem[_741 + 160]
            require mem[_741 + 160] == bool(mem[_741 + 160])
            _766 = mem[_741 + 192]
            require mem[_741 + 192] == bool(mem[_741 + 192])
            require mem[_741 + 224] == bool(mem[_741 + 224])
            _775 = mem[_741 + 256]
            require mem[_741 + 256] == bool(mem[_741 + 256])
            require mem[_741 + 288] == bool(mem[_741 + 288])
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _781 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _783 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _785 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _788 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _792 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _796 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            mem[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129] + 192] = bool(mem[_741 + 288])
            mem[_796 + 160] = bool(_775)
            mem[_792 + 128] = bool(_766)
            mem[_788 + 96] = bool(_753)
            mem[_785 + 64] = _750
            mem[_783 + 32] = _749
            mem[_781] = _748
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _725 = mem[64]
        mem[mem[64]] = 32
        _728 = mem[ceil32(32 * ('cd', 4).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 4).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 4).length) + 129
        t = mem[64] + 64
        while idx < _728:
            _809 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_809 + 32]
            mem[t + 64] = mem[_809 + 64]
            mem[t + 96] = bool(mem[_809 + 96])
            mem[t + 128] = bool(mem[_809 + 128])
            mem[t + 160] = bool(mem[_809 + 160])
            mem[t + 192] = bool(mem[_809 + 192])
            mem[t + 224] = mem[_809 + 224]
            mem[t + 256] = mem[_809 + 256]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        return memory
          from mem[64]
           len _725 + (288 * _728) + -mem[64] + 64
    mem[64] = ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1281
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 993] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1025] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1057] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1089] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1121] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1153] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1185] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1217] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1249] = 0
    mem[var38002] = var38001
    if not var38003 - 1:
        idx = 0
        while idx < ('cd', 4).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _923 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _930 = mem[_923]
            _931 = mem[_923 + 32]
            _932 = mem[_923 + 64]
            _935 = mem[_923 + 160]
            require mem[_923 + 160] == bool(mem[_923 + 160])
            _948 = mem[_923 + 192]
            require mem[_923 + 192] == bool(mem[_923 + 192])
            require mem[_923 + 224] == bool(mem[_923 + 224])
            _957 = mem[_923 + 256]
            require mem[_923 + 256] == bool(mem[_923 + 256])
            require mem[_923 + 288] == bool(mem[_923 + 288])
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _963 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _965 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _967 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _970 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _974 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _978 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            mem[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129] + 192] = bool(mem[_923 + 288])
            mem[_978 + 160] = bool(_957)
            mem[_974 + 128] = bool(_948)
            mem[_970 + 96] = bool(_935)
            mem[_967 + 64] = _932
            mem[_965 + 32] = _931
            mem[_963] = _930
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _907 = mem[64]
        mem[mem[64]] = 32
        _910 = mem[ceil32(32 * ('cd', 4).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 4).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 4).length) + 129
        t = mem[64] + 64
        while idx < _910:
            _991 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_991 + 32]
            mem[t + 64] = mem[_991 + 64]
            mem[t + 96] = bool(mem[_991 + 96])
            mem[t + 128] = bool(mem[_991 + 128])
            mem[t + 160] = bool(mem[_991 + 160])
            mem[t + 192] = bool(mem[_991 + 192])
            mem[t + 224] = mem[_991 + 224]
            mem[t + 256] = mem[_991 + 256]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        return memory
          from mem[64]
           len _907 + (288 * _910) + -mem[64] + 64
    mem[64] = ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1569
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1281] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1313] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1345] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1377] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1409] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1441] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1473] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1505] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1537] = 0
    mem[var42002] = var42001
    if not var42003 - 1:
        idx = 0
        while idx < ('cd', 4).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1105 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1112 = mem[_1105]
            _1113 = mem[_1105 + 32]
            _1114 = mem[_1105 + 64]
            _1117 = mem[_1105 + 160]
            require mem[_1105 + 160] == bool(mem[_1105 + 160])
            _1130 = mem[_1105 + 192]
            require mem[_1105 + 192] == bool(mem[_1105 + 192])
            require mem[_1105 + 224] == bool(mem[_1105 + 224])
            _1139 = mem[_1105 + 256]
            require mem[_1105 + 256] == bool(mem[_1105 + 256])
            require mem[_1105 + 288] == bool(mem[_1105 + 288])
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1145 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1147 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1149 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1152 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1156 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1160 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            mem[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129] + 192] = bool(mem[_1105 + 288])
            mem[_1160 + 160] = bool(_1139)
            mem[_1156 + 128] = bool(_1130)
            mem[_1152 + 96] = bool(_1117)
            mem[_1149 + 64] = _1114
            mem[_1147 + 32] = _1113
            mem[_1145] = _1112
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _1089 = mem[64]
        mem[mem[64]] = 32
        _1092 = mem[ceil32(32 * ('cd', 4).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 4).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 4).length) + 129
        t = mem[64] + 64
        while idx < _1092:
            _1173 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1173 + 32]
            mem[t + 64] = mem[_1173 + 64]
            mem[t + 96] = bool(mem[_1173 + 96])
            mem[t + 128] = bool(mem[_1173 + 128])
            mem[t + 160] = bool(mem[_1173 + 160])
            mem[t + 192] = bool(mem[_1173 + 192])
            mem[t + 224] = mem[_1173 + 224]
            mem[t + 256] = mem[_1173 + 256]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        return memory
          from mem[64]
           len _1089 + (288 * _1092) + -mem[64] + 64
    mem[64] = ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1857
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1569] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1601] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1633] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1665] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1697] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1729] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1761] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1793] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1825] = 0
    mem[var46002] = var46001
    if not var46003 - 1:
        idx = 0
        while idx < ('cd', 4).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1287 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1294 = mem[_1287]
            _1295 = mem[_1287 + 32]
            _1296 = mem[_1287 + 64]
            _1299 = mem[_1287 + 160]
            require mem[_1287 + 160] == bool(mem[_1287 + 160])
            _1312 = mem[_1287 + 192]
            require mem[_1287 + 192] == bool(mem[_1287 + 192])
            require mem[_1287 + 224] == bool(mem[_1287 + 224])
            _1321 = mem[_1287 + 256]
            require mem[_1287 + 256] == bool(mem[_1287 + 256])
            require mem[_1287 + 288] == bool(mem[_1287 + 288])
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1327 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1329 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1331 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1334 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1338 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1342 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            mem[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129] + 192] = bool(mem[_1287 + 288])
            mem[_1342 + 160] = bool(_1321)
            mem[_1338 + 128] = bool(_1312)
            mem[_1334 + 96] = bool(_1299)
            mem[_1331 + 64] = _1296
            mem[_1329 + 32] = _1295
            mem[_1327] = _1294
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _1271 = mem[64]
        mem[mem[64]] = 32
        _1274 = mem[ceil32(32 * ('cd', 4).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 4).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 4).length) + 129
        t = mem[64] + 64
        while idx < _1274:
            _1355 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1355 + 32]
            mem[t + 64] = mem[_1355 + 64]
            mem[t + 96] = bool(mem[_1355 + 96])
            mem[t + 128] = bool(mem[_1355 + 128])
            mem[t + 160] = bool(mem[_1355 + 160])
            mem[t + 192] = bool(mem[_1355 + 192])
            mem[t + 224] = mem[_1355 + 224]
            mem[t + 256] = mem[_1355 + 256]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        return memory
          from mem[64]
           len _1271 + (288 * _1274) + -mem[64] + 64
    mem[64] = ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2145
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1857] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1889] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1921] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1953] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 1985] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2017] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2049] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2081] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2113] = 0
    mem[var50002] = var50001
    if not var50003 - 1:
        idx = 0
        while idx < ('cd', 4).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1469 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1476 = mem[_1469]
            _1477 = mem[_1469 + 32]
            _1478 = mem[_1469 + 64]
            _1481 = mem[_1469 + 160]
            require mem[_1469 + 160] == bool(mem[_1469 + 160])
            _1494 = mem[_1469 + 192]
            require mem[_1469 + 192] == bool(mem[_1469 + 192])
            require mem[_1469 + 224] == bool(mem[_1469 + 224])
            _1503 = mem[_1469 + 256]
            require mem[_1469 + 256] == bool(mem[_1469 + 256])
            require mem[_1469 + 288] == bool(mem[_1469 + 288])
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1509 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1511 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1513 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1516 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1520 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1524 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            mem[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129] + 192] = bool(mem[_1469 + 288])
            mem[_1524 + 160] = bool(_1503)
            mem[_1520 + 128] = bool(_1494)
            mem[_1516 + 96] = bool(_1481)
            mem[_1513 + 64] = _1478
            mem[_1511 + 32] = _1477
            mem[_1509] = _1476
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _1453 = mem[64]
        mem[mem[64]] = 32
        _1456 = mem[ceil32(32 * ('cd', 4).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 4).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 4).length) + 129
        t = mem[64] + 64
        while idx < _1456:
            _1537 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1537 + 32]
            mem[t + 64] = mem[_1537 + 64]
            mem[t + 96] = bool(mem[_1537 + 96])
            mem[t + 128] = bool(mem[_1537 + 128])
            mem[t + 160] = bool(mem[_1537 + 160])
            mem[t + 192] = bool(mem[_1537 + 192])
            mem[t + 224] = mem[_1537 + 224]
            mem[t + 256] = mem[_1537 + 256]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        return memory
          from mem[64]
           len _1453 + (288 * _1456) + -mem[64] + 64
    mem[64] = ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2433
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2145] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2177] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2209] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2241] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2273] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2305] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2337] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2369] = 0
    mem[ceil32(32 * ('cd', 4).length) + (32 * ('cd', 4).length) + 2401] = 0
    mem[var54002] = var54001
    if var54003 - 1:
        # nil
    else:
        idx = 0
        while idx < ('cd', 4).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1651 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1658 = mem[_1651]
            _1659 = mem[_1651 + 32]
            _1660 = mem[_1651 + 64]
            _1663 = mem[_1651 + 160]
            require mem[_1651 + 160] == bool(mem[_1651 + 160])
            _1676 = mem[_1651 + 192]
            require mem[_1651 + 192] == bool(mem[_1651 + 192])
            require mem[_1651 + 224] == bool(mem[_1651 + 224])
            _1685 = mem[_1651 + 256]
            require mem[_1651 + 256] == bool(mem[_1651 + 256])
            require mem[_1651 + 288] == bool(mem[_1651 + 288])
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1691 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1693 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1695 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1698 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1702 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            _1706 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
            if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                revert with 0, 50
            mem[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129] + 192] = bool(mem[_1651 + 288])
            mem[_1706 + 160] = bool(_1685)
            mem[_1702 + 128] = bool(_1676)
            mem[_1698 + 96] = bool(_1663)
            mem[_1695 + 64] = _1660
            mem[_1693 + 32] = _1659
            mem[_1691] = _1658
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _1635 = mem[64]
        mem[mem[64]] = 32
        _1638 = mem[ceil32(32 * ('cd', 4).length) + 97]
        mem[mem[64] + 32] = mem[ceil32(32 * ('cd', 4).length) + 97]
        idx = 0
        s = ceil32(32 * ('cd', 4).length) + 129
        t = mem[64] + 64
        while idx < _1638:
            _1719 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1719 + 32]
            mem[t + 64] = mem[_1719 + 64]
            mem[t + 96] = bool(mem[_1719 + 96])
            mem[t + 128] = bool(mem[_1719 + 128])
            mem[t + 160] = bool(mem[_1719 + 160])
            mem[t + 192] = bool(mem[_1719 + 192])
            mem[t + 224] = mem[_1719 + 224]
            mem[t + 256] = mem[_1719 + 256]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        return memory
          from mem[64]
           len _1635 + (288 * _1638) + -mem[64] + 64
}

function sub_b2092181(?) payable {
    require calldata.size - 4 >= 32
    require cd[4] <= test266151307()
    require calldata.size + -cd[4] - 4 >= 160
    require ('cd', 4).length == address(('cd', 4).length)
    mem[96] = ('cd', 4).length
    require ('cd', 4)[0] <= test266151307()
    require cd[4] + ('cd', 4)[0] + 35 < calldata.size
    if cd[(cd[4] + ('cd', 4)[0] + 4)] > test266151307():
        revert with 0, 65
    if ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 257 < 256 or ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 257 > test266151307():
        revert with 0, 65
    mem[256] = cd[(cd[4] + ('cd', 4)[0] + 4)]
    require cd[4] + ('cd', 4)[0] + (32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 36 <= calldata.size
    idx = 0
    s = cd[4] + ('cd', 4)[0] + 36
    t = 288
    while idx < cd[(cd[4] + ('cd', 4)[0] + 4)]:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[128] = 256
    require ('cd', 4)[1] <= test266151307()
    require cd[4] + ('cd', 4)[1] + 35 < calldata.size
    if cd[(cd[4] + ('cd', 4)[1] + 4)] > test266151307():
        revert with 0, 65
    if ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + 258 < 257 or ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + 258 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 257] = cd[(cd[4] + ('cd', 4)[1] + 4)]
    require cd[4] + ('cd', 4)[1] + (32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + 36 <= calldata.size
    idx = 0
    s = cd[4] + ('cd', 4)[1] + 36
    t = ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 289
    while idx < cd[(cd[4] + ('cd', 4)[1] + 4)]:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[160] = ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 257
    require ('cd', 4)[2] <= test266151307()
    require cd[4] + ('cd', 4)[2] + 35 < calldata.size
    if cd[(cd[4] + ('cd', 4)[2] + 4)] > test266151307():
        revert with 0, 65
    if ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + 259 < 258 or ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + 259 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + 258] = cd[(cd[4] + ('cd', 4)[2] + 4)]
    require cd[4] + ('cd', 4)[2] + (32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + 36 <= calldata.size
    idx = 0
    s = cd[4] + ('cd', 4)[2] + 36
    t = ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + 290
    while idx < cd[(cd[4] + ('cd', 4)[2] + 4)]:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[192] = ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + 258
    require ('cd', 4)[3] <= test266151307()
    require cd[4] + ('cd', 4)[3] + 35 < calldata.size
    if cd[(cd[4] + ('cd', 4)[3] + 4)] > test266151307():
        revert with 0, 65
    if ceil32(32 * cd[(cd[4] + ('cd', 4)[3] + 4)]) + 260 < 259 or ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[3] + 4)]) + 260 > test266151307():
        revert with 0, 65
    mem[ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + 259] = cd[(cd[4] + ('cd', 4)[3] + 4)]
    require cd[4] + ('cd', 4)[3] + (32 * cd[(cd[4] + ('cd', 4)[3] + 4)]) + 36 <= calldata.size
    idx = 0
    s = cd[4] + ('cd', 4)[3] + 36
    t = ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + 291
    while idx < cd[(cd[4] + ('cd', 4)[3] + 4)]:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[224] = ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + 259
    require ext_code.size(sub_238f9b7aAddress)
    staticcall sub_238f9b7aAddress.getPriceOracle() with:
            gas gas_remaining wei
    mem[ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[3] + 4)]) + 260] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[3] + 4)]) + ceil32(return_data.size) + 260
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[3] + 4)]) + ceil32(return_data.size) + 260] = 0x9d23d9f200000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[3] + 4)]) + ceil32(return_data.size) + 264] = 32
    mem[ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[3] + 4)]) + ceil32(return_data.size) + 296] = cd[(cd[4] + ('cd', 4)[3] + 4)]
    idx = 0
    s = ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[1] + 4)]) + ceil32(32 * cd[(cd[4] + ('cd', 4)[2] + 4)]) + 291
    t = mem[64] + 68
    while idx < cd[(cd[4] + ('cd', 4)[3] + 4)]:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
            gas gas_remaining wei
           args mem[mem[64] + 4 len (32 * cd[(cd[4] + ('cd', 4)[3] + 4)]) + 64]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _554 = mem[64]
    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _555 = mem[_554]
    require mem[_554] <= test266151307()
    require _554 + return_data.size > _554 + mem[_554] + 31
    _556 = mem[_554 + mem[_554]]
    if mem[_554 + mem[_554]] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[_554 + mem[_554]]) + 1 < 0 or _554 + ceil32(return_data.size) + ceil32(32 * mem[_554 + mem[_554]]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = _554 + ceil32(return_data.size) + ceil32(32 * mem[_554 + mem[_554]]) + 1
    mem[_554 + ceil32(return_data.size)] = _556
    require _555 + (32 * _556) + 32 <= return_data.size
    mem[_554 + ceil32(return_data.size) + 32 len 32 * _556] = mem[_554 + _555 + 32 len 32 * _556]
    _654 = mem[224]
    _655 = mem[mem[224]]
    if mem[mem[224]] > test266151307():
        revert with 0, 65
    _656 = mem[64]
    mem[mem[64]] = mem[mem[224]]
    mem[64] = mem[64] + (32 * _655) + 32
    if not _655:
        idx = 0
        while idx < _655:
            if idx >= mem[_654]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + _654 + 32])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _761 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _768 = mem[_761]
            _769 = mem[_761 + 32]
            _770 = mem[_761 + 64]
            _773 = mem[_761 + 160]
            require mem[_761 + 160] == bool(mem[_761 + 160])
            _783 = mem[_761 + 192]
            require mem[_761 + 192] == bool(mem[_761 + 192])
            require mem[_761 + 224] == bool(mem[_761 + 224])
            _795 = mem[_761 + 256]
            require mem[_761 + 256] == bool(mem[_761 + 256])
            require mem[_761 + 288] == bool(mem[_761 + 288])
            if idx >= mem[_656]:
                revert with 0, 50
            _805 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _809 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _811 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _813 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _817 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _823 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            mem[mem[(32 * idx) + _656 + 32] + 192] = bool(mem[_761 + 288])
            mem[_823 + 160] = bool(_795)
            mem[_817 + 128] = bool(_783)
            mem[_813 + 96] = bool(_773)
            mem[_811 + 64] = _770
            mem[_809 + 32] = _769
            mem[_805] = _768
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        s = 0
        while idx < mem[mem[224]]:
            if idx >= mem[mem[160]]:
                revert with 0, 50
            if idx >= mem[_656]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _656 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _656 + 32]] + 18:
                if mem[(32 * idx) + mem[160] + 32] and 1 > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 32)):
                if mem[(32 * idx) + mem[160] + 32] and 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18):
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            u = 10
            v = 1
            t = -mem[mem[(32 * idx) + _656 + 32]] + 18
            while t > 1:
                if u > -1 / u:
                    revert with 0, 17
                if not bool(t):
                    u = u * u
                    v = v
                    t = uint255(t) * 0.5
                    continue 
                u = u * u
                v = u * v
                t = uint255(t) * 0.5
                continue 
            if v > -1 / u:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] and u * v > -1 / mem[(32 * idx) + mem[160] + 32]:
                revert with 0, 17
            if idx >= mem[_554 + ceil32(return_data.size)]:
                revert with 0, 50
            if mem[(32 * idx) + mem[160] + 32] * u * v and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * u * v:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                revert with 0, 17
            if s > !((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
            continue 
        return s, 1
    mem[64] = _656 + (32 * _655) + 320
    mem[_656 + (32 * _655) + 32] = 0
    mem[_656 + (32 * _655) + 64] = 0
    mem[_656 + (32 * _655) + 96] = 0
    mem[_656 + (32 * _655) + 128] = 0
    mem[_656 + (32 * _655) + 160] = 0
    mem[_656 + (32 * _655) + 192] = 0
    mem[_656 + (32 * _655) + 224] = 0
    mem[_656 + (32 * _655) + 256] = 0
    mem[_656 + (32 * _655) + 288] = 0
    mem[var113002] = var113001
    if not var113003 - 1:
        idx = 0
        while idx < _655:
            if idx >= mem[_654]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + _654 + 32])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _961 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _970 = mem[_961]
            _971 = mem[_961 + 32]
            _972 = mem[_961 + 64]
            _975 = mem[_961 + 160]
            require mem[_961 + 160] == bool(mem[_961 + 160])
            _987 = mem[_961 + 192]
            require mem[_961 + 192] == bool(mem[_961 + 192])
            require mem[_961 + 224] == bool(mem[_961 + 224])
            _996 = mem[_961 + 256]
            require mem[_961 + 256] == bool(mem[_961 + 256])
            require mem[_961 + 288] == bool(mem[_961 + 288])
            if idx >= mem[_656]:
                revert with 0, 50
            _1007 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1010 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1012 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1015 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1021 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1027 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            mem[mem[(32 * idx) + _656 + 32] + 192] = bool(mem[_961 + 288])
            mem[_1027 + 160] = bool(_996)
            mem[_1021 + 128] = bool(_987)
            mem[_1015 + 96] = bool(_975)
            mem[_1012 + 64] = _972
            mem[_1010 + 32] = _971
            mem[_1007] = _970
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        s = 0
        while idx < mem[mem[224]]:
            if idx >= mem[mem[160]]:
                revert with 0, 50
            if idx >= mem[_656]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _656 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _656 + 32]] + 18:
                if mem[(32 * idx) + mem[160] + 32] and 1 > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 32)):
                if mem[(32 * idx) + mem[160] + 32] and 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18):
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            u = 10
            v = 1
            t = -mem[mem[(32 * idx) + _656 + 32]] + 18
            while t > 1:
                if u > -1 / u:
                    revert with 0, 17
                if not bool(t):
                    u = u * u
                    v = v
                    t = uint255(t) * 0.5
                    continue 
                u = u * u
                v = u * v
                t = uint255(t) * 0.5
                continue 
            if v > -1 / u:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] and u * v > -1 / mem[(32 * idx) + mem[160] + 32]:
                revert with 0, 17
            if idx >= mem[_554 + ceil32(return_data.size)]:
                revert with 0, 50
            if mem[(32 * idx) + mem[160] + 32] * u * v and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * u * v:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                revert with 0, 17
            if s > !((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
            continue 
        return s, 1
    mem[64] = _656 + (32 * _655) + 608
    mem[_656 + (32 * _655) + 320] = 0
    mem[_656 + (32 * _655) + 352] = 0
    mem[_656 + (32 * _655) + 384] = 0
    mem[_656 + (32 * _655) + 416] = 0
    mem[_656 + (32 * _655) + 448] = 0
    mem[_656 + (32 * _655) + 480] = 0
    mem[_656 + (32 * _655) + 512] = 0
    mem[_656 + (32 * _655) + 544] = 0
    mem[_656 + (32 * _655) + 576] = 0
    mem[var117002] = var117001
    if not var117003 - 1:
        idx = 0
        while idx < _655:
            if idx >= mem[_654]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + _654 + 32])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1162 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1171 = mem[_1162]
            _1172 = mem[_1162 + 32]
            _1173 = mem[_1162 + 64]
            _1176 = mem[_1162 + 160]
            require mem[_1162 + 160] == bool(mem[_1162 + 160])
            _1187 = mem[_1162 + 192]
            require mem[_1162 + 192] == bool(mem[_1162 + 192])
            require mem[_1162 + 224] == bool(mem[_1162 + 224])
            _1197 = mem[_1162 + 256]
            require mem[_1162 + 256] == bool(mem[_1162 + 256])
            require mem[_1162 + 288] == bool(mem[_1162 + 288])
            if idx >= mem[_656]:
                revert with 0, 50
            _1208 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1211 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1213 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1216 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1222 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1228 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            mem[mem[(32 * idx) + _656 + 32] + 192] = bool(mem[_1162 + 288])
            mem[_1228 + 160] = bool(_1197)
            mem[_1222 + 128] = bool(_1187)
            mem[_1216 + 96] = bool(_1176)
            mem[_1213 + 64] = _1173
            mem[_1211 + 32] = _1172
            mem[_1208] = _1171
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        s = 0
        while idx < mem[mem[224]]:
            if idx >= mem[mem[160]]:
                revert with 0, 50
            if idx >= mem[_656]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _656 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _656 + 32]] + 18:
                if mem[(32 * idx) + mem[160] + 32] and 1 > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 32)):
                if mem[(32 * idx) + mem[160] + 32] and 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18):
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            u = 10
            v = 1
            t = -mem[mem[(32 * idx) + _656 + 32]] + 18
            while t > 1:
                if u > -1 / u:
                    revert with 0, 17
                if not bool(t):
                    u = u * u
                    v = v
                    t = uint255(t) * 0.5
                    continue 
                u = u * u
                v = u * v
                t = uint255(t) * 0.5
                continue 
            if v > -1 / u:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] and u * v > -1 / mem[(32 * idx) + mem[160] + 32]:
                revert with 0, 17
            if idx >= mem[_554 + ceil32(return_data.size)]:
                revert with 0, 50
            if mem[(32 * idx) + mem[160] + 32] * u * v and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * u * v:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                revert with 0, 17
            if s > !((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
            continue 
        return s, 1
    mem[64] = _656 + (32 * _655) + 896
    mem[_656 + (32 * _655) + 608] = 0
    mem[_656 + (32 * _655) + 640] = 0
    mem[_656 + (32 * _655) + 672] = 0
    mem[_656 + (32 * _655) + 704] = 0
    mem[_656 + (32 * _655) + 736] = 0
    mem[_656 + (32 * _655) + 768] = 0
    mem[_656 + (32 * _655) + 800] = 0
    mem[_656 + (32 * _655) + 832] = 0
    mem[_656 + (32 * _655) + 864] = 0
    mem[var121002] = var121001
    if not var121003 - 1:
        idx = 0
        while idx < _655:
            if idx >= mem[_654]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + _654 + 32])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1363 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1372 = mem[_1363]
            _1373 = mem[_1363 + 32]
            _1374 = mem[_1363 + 64]
            _1377 = mem[_1363 + 160]
            require mem[_1363 + 160] == bool(mem[_1363 + 160])
            _1388 = mem[_1363 + 192]
            require mem[_1363 + 192] == bool(mem[_1363 + 192])
            require mem[_1363 + 224] == bool(mem[_1363 + 224])
            _1398 = mem[_1363 + 256]
            require mem[_1363 + 256] == bool(mem[_1363 + 256])
            require mem[_1363 + 288] == bool(mem[_1363 + 288])
            if idx >= mem[_656]:
                revert with 0, 50
            _1409 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1412 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1414 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1417 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1423 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1429 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            mem[mem[(32 * idx) + _656 + 32] + 192] = bool(mem[_1363 + 288])
            mem[_1429 + 160] = bool(_1398)
            mem[_1423 + 128] = bool(_1388)
            mem[_1417 + 96] = bool(_1377)
            mem[_1414 + 64] = _1374
            mem[_1412 + 32] = _1373
            mem[_1409] = _1372
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        s = 0
        while idx < mem[mem[224]]:
            if idx >= mem[mem[160]]:
                revert with 0, 50
            if idx >= mem[_656]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _656 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _656 + 32]] + 18:
                if mem[(32 * idx) + mem[160] + 32] and 1 > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 32)):
                if mem[(32 * idx) + mem[160] + 32] and 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18):
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            u = 10
            v = 1
            t = -mem[mem[(32 * idx) + _656 + 32]] + 18
            while t > 1:
                if u > -1 / u:
                    revert with 0, 17
                if not bool(t):
                    u = u * u
                    v = v
                    t = uint255(t) * 0.5
                    continue 
                u = u * u
                v = u * v
                t = uint255(t) * 0.5
                continue 
            if v > -1 / u:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] and u * v > -1 / mem[(32 * idx) + mem[160] + 32]:
                revert with 0, 17
            if idx >= mem[_554 + ceil32(return_data.size)]:
                revert with 0, 50
            if mem[(32 * idx) + mem[160] + 32] * u * v and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * u * v:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                revert with 0, 17
            if s > !((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
            continue 
        return s, 1
    mem[64] = _656 + (32 * _655) + 1184
    mem[_656 + (32 * _655) + 896] = 0
    mem[_656 + (32 * _655) + 928] = 0
    mem[_656 + (32 * _655) + 960] = 0
    mem[_656 + (32 * _655) + 992] = 0
    mem[_656 + (32 * _655) + 1024] = 0
    mem[_656 + (32 * _655) + 1056] = 0
    mem[_656 + (32 * _655) + 1088] = 0
    mem[_656 + (32 * _655) + 1120] = 0
    mem[_656 + (32 * _655) + 1152] = 0
    mem[var125002] = var125001
    if not var125003 - 1:
        idx = 0
        while idx < _655:
            if idx >= mem[_654]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + _654 + 32])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1564 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1573 = mem[_1564]
            _1574 = mem[_1564 + 32]
            _1575 = mem[_1564 + 64]
            _1578 = mem[_1564 + 160]
            require mem[_1564 + 160] == bool(mem[_1564 + 160])
            _1589 = mem[_1564 + 192]
            require mem[_1564 + 192] == bool(mem[_1564 + 192])
            require mem[_1564 + 224] == bool(mem[_1564 + 224])
            _1599 = mem[_1564 + 256]
            require mem[_1564 + 256] == bool(mem[_1564 + 256])
            require mem[_1564 + 288] == bool(mem[_1564 + 288])
            if idx >= mem[_656]:
                revert with 0, 50
            _1610 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1613 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1615 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1618 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1624 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1630 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            mem[mem[(32 * idx) + _656 + 32] + 192] = bool(mem[_1564 + 288])
            mem[_1630 + 160] = bool(_1599)
            mem[_1624 + 128] = bool(_1589)
            mem[_1618 + 96] = bool(_1578)
            mem[_1615 + 64] = _1575
            mem[_1613 + 32] = _1574
            mem[_1610] = _1573
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        s = 0
        while idx < mem[mem[224]]:
            if idx >= mem[mem[160]]:
                revert with 0, 50
            if idx >= mem[_656]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _656 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _656 + 32]] + 18:
                if mem[(32 * idx) + mem[160] + 32] and 1 > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 32)):
                if mem[(32 * idx) + mem[160] + 32] and 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18):
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            u = 10
            v = 1
            t = -mem[mem[(32 * idx) + _656 + 32]] + 18
            while t > 1:
                if u > -1 / u:
                    revert with 0, 17
                if not bool(t):
                    u = u * u
                    v = v
                    t = uint255(t) * 0.5
                    continue 
                u = u * u
                v = u * v
                t = uint255(t) * 0.5
                continue 
            if v > -1 / u:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] and u * v > -1 / mem[(32 * idx) + mem[160] + 32]:
                revert with 0, 17
            if idx >= mem[_554 + ceil32(return_data.size)]:
                revert with 0, 50
            if mem[(32 * idx) + mem[160] + 32] * u * v and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * u * v:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                revert with 0, 17
            if s > !((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
            continue 
        return s, 1
    mem[64] = _656 + (32 * _655) + 1472
    mem[_656 + (32 * _655) + 1184] = 0
    mem[_656 + (32 * _655) + 1216] = 0
    mem[_656 + (32 * _655) + 1248] = 0
    mem[_656 + (32 * _655) + 1280] = 0
    mem[_656 + (32 * _655) + 1312] = 0
    mem[_656 + (32 * _655) + 1344] = 0
    mem[_656 + (32 * _655) + 1376] = 0
    mem[_656 + (32 * _655) + 1408] = 0
    mem[_656 + (32 * _655) + 1440] = 0
    mem[var129002] = var129001
    if not var129003 - 1:
        idx = 0
        while idx < _655:
            if idx >= mem[_654]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + _654 + 32])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1765 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1774 = mem[_1765]
            _1775 = mem[_1765 + 32]
            _1776 = mem[_1765 + 64]
            _1779 = mem[_1765 + 160]
            require mem[_1765 + 160] == bool(mem[_1765 + 160])
            _1790 = mem[_1765 + 192]
            require mem[_1765 + 192] == bool(mem[_1765 + 192])
            require mem[_1765 + 224] == bool(mem[_1765 + 224])
            _1800 = mem[_1765 + 256]
            require mem[_1765 + 256] == bool(mem[_1765 + 256])
            require mem[_1765 + 288] == bool(mem[_1765 + 288])
            if idx >= mem[_656]:
                revert with 0, 50
            _1811 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1814 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1816 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1819 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1825 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _1831 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            mem[mem[(32 * idx) + _656 + 32] + 192] = bool(mem[_1765 + 288])
            mem[_1831 + 160] = bool(_1800)
            mem[_1825 + 128] = bool(_1790)
            mem[_1819 + 96] = bool(_1779)
            mem[_1816 + 64] = _1776
            mem[_1814 + 32] = _1775
            mem[_1811] = _1774
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        s = 0
        while idx < mem[mem[224]]:
            if idx >= mem[mem[160]]:
                revert with 0, 50
            if idx >= mem[_656]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _656 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _656 + 32]] + 18:
                if mem[(32 * idx) + mem[160] + 32] and 1 > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _656 + 32]] + 18 < 32)):
                if mem[(32 * idx) + mem[160] + 32] and 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) > -1 / mem[(32 * idx) + mem[160] + 32]:
                    revert with 0, 17
                if idx >= mem[_554 + ceil32(return_data.size)]:
                    revert with 0, 50
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18):
                    revert with 0, 17
                if mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                    revert with 0, 17
                if s > !((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((mem[(32 * idx) + mem[160] + 32] * 10^(-mem[mem[(32 * idx) + _656 + 32]] + 18) * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
                continue 
            u = 10
            v = 1
            t = -mem[mem[(32 * idx) + _656 + 32]] + 18
            while t > 1:
                if u > -1 / u:
                    revert with 0, 17
                if not bool(t):
                    u = u * u
                    v = v
                    t = uint255(t) * 0.5
                    continue 
                u = u * u
                v = u * v
                t = uint255(t) * 0.5
                continue 
            if v > -1 / u:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] and u * v > -1 / mem[(32 * idx) + mem[160] + 32]:
                revert with 0, 17
            if idx >= mem[_554 + ceil32(return_data.size)]:
                revert with 0, 50
            if mem[(32 * idx) + mem[160] + 32] * u * v and mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -1 / mem[(32 * idx) + mem[160] + 32] * u * v:
                revert with 0, 17
            if mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32] > -500000000000000001:
                revert with 0, 17
            if s > !((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((mem[(32 * idx) + mem[160] + 32] * u * v * mem[(32 * idx) + _554 + ceil32(return_data.size) + 32]) + 5 * 10^17 / 10^18)
            continue 
        return s, 1
    mem[64] = _656 + (32 * _655) + 1760
    mem[_656 + (32 * _655) + 1472] = 0
    mem[_656 + (32 * _655) + 1504] = 0
    mem[_656 + (32 * _655) + 1536] = 0
    mem[_656 + (32 * _655) + 1568] = 0
    mem[_656 + (32 * _655) + 1600] = 0
    mem[_656 + (32 * _655) + 1632] = 0
    mem[_656 + (32 * _655) + 1664] = 0
    mem[_656 + (32 * _655) + 1696] = 0
    mem[_656 + (32 * _655) + 1728] = 0
    mem[var133002] = var133001
    if not var133003 - 1:
        idx = 0
        while idx < _655:
            if idx >= mem[_654]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + _654 + 32])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1966 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1975 = mem[_1966]
            _1976 = mem[_1966 + 32]
            _1977 = mem[_1966 + 64]
            _1980 = mem[_1966 + 160]
            require mem[_1966 + 160] == bool(mem[_1966 + 160])
            _1991 = mem[_1966 + 192]
            require mem[_1966 + 192] == bool(mem[_1966 + 192])
            require mem[_1966 + 224] == bool(mem[_1966 + 224])
            _2001 = mem[_1966 + 256]
            require mem[_1966 + 256] == bool(mem[_1966 + 256])
            require mem[_1966 + 288] == bool(mem[_1966 + 288])
            if idx >= mem[_656]:
                revert with 0, 50
            _2012 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _2015 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _2017 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _2020 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _2026 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            _2032 = mem[(32 * idx) + _656 + 32]
            if idx >= mem[_656]:
                revert with 0, 50
            mem[mem[(32 * idx) + _656 + 32] + 192] = bool(mem[_1966 + 288])
            mem[_2032 + 160] = bool(_2001)
            mem[_2026 + 128] = bool(_1991)
            mem[_2020 + 96] = bool(_1980)
            mem[_2017 + 64] = _1977
            mem[_2015 + 32] = _1976
            mem[_2012] = _1975
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    # nil
}

function sub_493ebfec(?) payable {
    require calldata.size - 4 >= 64
    require cd[4] <= test266151307()
    require calldata.size + -cd[4] - 4 >= 64
    require ('cd', 4).length <= test266151307()
    require cd[4] + ('cd', 4).length + 35 < calldata.size
    if cd[(cd[4] + ('cd', 4).length + 4)] > test266151307():
        revert with 0, 65
    if ceil32(32 * cd[(cd[4] + ('cd', 4).length + 4)]) + 161 < 160 or ceil32(32 * cd[(cd[4] + ('cd', 4).length + 4)]) + 161 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * cd[(cd[4] + ('cd', 4).length + 4)]) + 161
    mem[160] = cd[(cd[4] + ('cd', 4).length + 4)]
    require calldata.size >= cd[4] + ('cd', 4).length + (96 * cd[(cd[4] + ('cd', 4).length + 4)]) + 36
    idx = 0
    s = cd[4] + ('cd', 4).length + 36
    t = 192
    while idx < cd[(cd[4] + ('cd', 4).length + 4)]:
        require calldata.size - s >= 96
        _1162 = mem[64]
        if mem[64] + 96 < mem[64] or mem[64] + 96 > test266151307():
            revert with 0, 65
        mem[64] = mem[64] + 96
        require cd[s] == address(cd[s])
        mem[_1162] = cd[s]
        require cd[(s + 32)] == address(cd[(s + 32)])
        mem[_1162 + 32] = cd[(s + 32)]
        mem[_1162 + 64] = cd[(s + 64)]
        mem[t] = _1162
        idx = idx + 1
        s = s + 96
        t = t + 32
        continue 
    mem[96] = 160
    require ('cd', 4)[0] <= test266151307()
    require cd[4] + ('cd', 4)[0] + 35 < calldata.size
    if cd[(cd[4] + ('cd', 4)[0] + 4)] > test266151307():
        revert with 0, 65
    _1163 = mem[64]
    if mem[64] + ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 1 < mem[64] or mem[64] + ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 1 > test266151307():
        revert with 0, 65
    mem[64] = mem[64] + ceil32(32 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 1
    mem[_1163] = cd[(cd[4] + ('cd', 4)[0] + 4)]
    require calldata.size >= cd[4] + ('cd', 4)[0] + (96 * cd[(cd[4] + ('cd', 4)[0] + 4)]) + 36
    idx = 0
    s = cd[4] + ('cd', 4)[0] + 36
    t = _1163 + 32
    while idx < cd[(cd[4] + ('cd', 4)[0] + 4)]:
        require calldata.size - s >= 96
        _2321 = mem[64]
        if mem[64] + 96 < mem[64] or mem[64] + 96 > test266151307():
            revert with 0, 65
        mem[64] = mem[64] + 96
        require cd[s] == address(cd[s])
        mem[_2321] = cd[s]
        require cd[(s + 32)] == address(cd[(s + 32)])
        mem[_2321 + 32] = cd[(s + 32)]
        mem[_2321 + 64] = cd[(s + 64)]
        mem[t] = _2321
        idx = idx + 1
        s = s + 96
        t = t + 32
        continue 
    mem[128] = _1163
    require cd[36] == bool(cd[36])
    _2322 = mem[64]
    mem[64] = mem[64] + 160
    mem[_2322] = 0
    mem[_2322 + 32] = 96
    mem[_2322 + 64] = 96
    mem[_2322 + 96] = 96
    mem[_2322 + 128] = 96
    _2324 = mem[mem[96]]
    _2326 = mem[_1163]
    if mem[mem[96]] > test266151307():
        revert with 0, 65
    _2327 = mem[64]
    mem[mem[64]] = mem[mem[96]]
    if not _2324:
        mem[_2322 + 32] = mem[64]
        if _2326 > test266151307():
            revert with 0, 65
        mem[_2327 + (32 * _2324) + 32] = _2326
        mem[64] = _2327 + (32 * _2324) + (32 * _2326) + 64
        if not _2326:
            mem[_2322 + 64] = _2327 + (32 * _2324) + 32
            if _2324 > test266151307():
                revert with 0, 65
            mem[_2327 + (32 * _2324) + (32 * _2326) + 64] = _2324
            if not _2324:
                mem[_2322 + 96] = _2327 + (32 * _2324) + (32 * _2326) + 64
                if _2326 > test266151307():
                    revert with 0, 65
                mem[_2327 + (64 * _2324) + (32 * _2326) + 96] = _2326
                mem[64] = _2327 + (64 * _2324) + (64 * _2326) + 128
                if not _2326:
                    mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
                    idx = 0
                    while idx < _2324:
                        if idx >= mem[mem[96]]:
                            revert with 0, 50
                        _3511 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                        if idx >= mem[mem[96]]:
                            revert with 0, 50
                        if idx >= mem[mem[_2322 + 96]]:
                            revert with 0, 50
                        if not cd[36]:
                            if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                                mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                            else:
                                mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                        else:
                            if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                                mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                            else:
                                mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                        if idx >= mem[mem[_2322 + 32]]:
                            revert with 0, 50
                        mem[(32 * idx) + mem[_2322 + 32] + 32] = _3511
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    idx = 0
                    while idx < _2326:
                        if idx >= mem[mem[128]]:
                            revert with 0, 50
                        _4648 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                        if idx >= mem[mem[128]]:
                            revert with 0, 50
                        if idx >= mem[mem[_2322 + 128]]:
                            revert with 0, 50
                        if not cd[36]:
                            if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                                mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                            else:
                                mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                        else:
                            if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                                mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                            else:
                                mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                        if idx >= mem[mem[_2322 + 64]]:
                            revert with 0, 50
                        mem[(32 * idx) + mem[_2322 + 64] + 32] = _4648
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    _4646 = mem[64]
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = mem[_2322 + 12 len 20]
                    _4695 = mem[_2322 + 32]
                    mem[mem[64] + 64] = 160
                    _4790 = mem[_4695]
                    mem[mem[64] + 192] = mem[_4695]
                    mem[mem[64] + 224 len 32 * _4790] = mem[_4695 + 32 len 32 * _4790]
                    _5318 = mem[_2322 + 64]
                    mem[mem[64] + 96] = (32 * _4790) + 192
                    _5334 = mem[_5318]
                    mem[mem[64] + (32 * _4790) + 224] = mem[_5318]
                    mem[mem[64] + (32 * _4790) + 256 len 32 * _5334] = mem[_5318 + 32 len 32 * _5334]
                    idx = _5334
                    _5494 = mem[_2322 + 96]
                    mem[mem[64] + 128] = (32 * _4790) + (32 * _5334) + 224
                    _5510 = mem[_5494]
                    mem[mem[64] + (32 * _4790) + (32 * _5334) + 256] = mem[_5494]
                    idx = 0
                    s = _5494 + 32
                    t = mem[64] + (32 * _4790) + (32 * _5334) + 288
                    while idx < _5510:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    _5622 = mem[_2322 + 128]
                    mem[_4646 + 160] = (32 * _4790) + (32 * _5334) + (32 * _5510) + 256
                    _5638 = mem[_5622]
                    mem[_4646 + (32 * _4790) + (32 * _5334) + (32 * _5510) + 288] = mem[_5622]
                    idx = 0
                    s = _5622 + 32
                    t = _4646 + (32 * _4790) + (32 * _5334) + (32 * _5510) + 320
                    while idx < _5638:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    return memory
                      from mem[64]
                       len _4646 + (32 * _4790) + (32 * _5334) + (32 * _5510) + (32 * _5638) + -mem[64] + 320
                mem[_2327 + (64 * _2324) + (32 * _2326) + 128 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
                mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
                idx = 0
                while idx < _2324:
                    if idx >= mem[mem[96]]:
                        revert with 0, 50
                    _3513 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                    if idx >= mem[mem[96]]:
                        revert with 0, 50
                    if idx >= mem[mem[_2322 + 96]]:
                        revert with 0, 50
                    if not cd[36]:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                    else:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                    if idx >= mem[mem[_2322 + 32]]:
                        revert with 0, 50
                    mem[(32 * idx) + mem[_2322 + 32] + 32] = _3513
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                idx = 0
                while idx < _2326:
                    if idx >= mem[mem[128]]:
                        revert with 0, 50
                    _4651 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                    if idx >= mem[mem[128]]:
                        revert with 0, 50
                    if idx >= mem[mem[_2322 + 128]]:
                        revert with 0, 50
                    if not cd[36]:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                    else:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                    if idx >= mem[mem[_2322 + 64]]:
                        revert with 0, 50
                    mem[(32 * idx) + mem[_2322 + 64] + 32] = _4651
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                _4649 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = mem[_2322 + 12 len 20]
                _4701 = mem[_2322 + 32]
                mem[mem[64] + 64] = 160
                _4795 = mem[_4701]
                mem[mem[64] + 192] = mem[_4701]
                mem[mem[64] + 224 len 32 * _4795] = mem[_4701 + 32 len 32 * _4795]
                _5319 = mem[_2322 + 64]
                mem[mem[64] + 96] = (32 * _4795) + 192
                _5335 = mem[_5319]
                mem[mem[64] + (32 * _4795) + 224] = mem[_5319]
                mem[mem[64] + (32 * _4795) + 256 len 32 * _5335] = mem[_5319 + 32 len 32 * _5335]
                idx = _5335
                _5495 = mem[_2322 + 96]
                mem[mem[64] + 128] = (32 * _4795) + (32 * _5335) + 224
                _5511 = mem[_5495]
                mem[mem[64] + (32 * _4795) + (32 * _5335) + 256] = mem[_5495]
                idx = 0
                s = _5495 + 32
                t = mem[64] + (32 * _4795) + (32 * _5335) + 288
                while idx < _5511:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                _5623 = mem[_2322 + 128]
                mem[_4649 + 160] = (32 * _4795) + (32 * _5335) + (32 * _5511) + 256
                _5639 = mem[_5623]
                mem[_4649 + (32 * _4795) + (32 * _5335) + (32 * _5511) + 288] = mem[_5623]
                idx = 0
                s = _5623 + 32
                t = _4649 + (32 * _4795) + (32 * _5335) + (32 * _5511) + 320
                while idx < _5639:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                return memory
                  from mem[64]
                   len _4649 + (32 * _4795) + (32 * _5335) + (32 * _5511) + (32 * _5639) + -mem[64] + 320
            mem[_2327 + (32 * _2324) + (32 * _2326) + 96 len 32 * _2324] = call.data[calldata.size len 32 * _2324]
            mem[_2322 + 96] = _2327 + (32 * _2324) + (32 * _2326) + 64
            if _2326 > test266151307():
                revert with 0, 65
            mem[_2327 + (64 * _2324) + (32 * _2326) + 96] = _2326
            mem[64] = _2327 + (64 * _2324) + (64 * _2326) + 128
            if not _2326:
                mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
                idx = 0
                while idx < _2324:
                    if idx >= mem[mem[96]]:
                        revert with 0, 50
                    _3515 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                    if idx >= mem[mem[96]]:
                        revert with 0, 50
                    if idx >= mem[mem[_2322 + 96]]:
                        revert with 0, 50
                    if not cd[36]:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                    else:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                    if idx >= mem[mem[_2322 + 32]]:
                        revert with 0, 50
                    mem[(32 * idx) + mem[_2322 + 32] + 32] = _3515
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                idx = 0
                while idx < _2326:
                    if idx >= mem[mem[128]]:
                        revert with 0, 50
                    _4654 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                    if idx >= mem[mem[128]]:
                        revert with 0, 50
                    if idx >= mem[mem[_2322 + 128]]:
                        revert with 0, 50
                    if not cd[36]:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                    else:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                    if idx >= mem[mem[_2322 + 64]]:
                        revert with 0, 50
                    mem[(32 * idx) + mem[_2322 + 64] + 32] = _4654
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                _4652 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = mem[_2322 + 12 len 20]
                _4707 = mem[_2322 + 32]
                mem[mem[64] + 64] = 160
                _4800 = mem[_4707]
                mem[mem[64] + 192] = mem[_4707]
                mem[mem[64] + 224 len 32 * _4800] = mem[_4707 + 32 len 32 * _4800]
                _5320 = mem[_2322 + 64]
                mem[mem[64] + 96] = (32 * _4800) + 192
                _5336 = mem[_5320]
                mem[mem[64] + (32 * _4800) + 224] = mem[_5320]
                mem[mem[64] + (32 * _4800) + 256 len 32 * _5336] = mem[_5320 + 32 len 32 * _5336]
                idx = _5336
                _5496 = mem[_2322 + 96]
                mem[mem[64] + 128] = (32 * _4800) + (32 * _5336) + 224
                _5512 = mem[_5496]
                mem[mem[64] + (32 * _4800) + (32 * _5336) + 256] = mem[_5496]
                idx = 0
                s = _5496 + 32
                t = mem[64] + (32 * _4800) + (32 * _5336) + 288
                while idx < _5512:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                _5624 = mem[_2322 + 128]
                mem[_4652 + 160] = (32 * _4800) + (32 * _5336) + (32 * _5512) + 256
                _5640 = mem[_5624]
                mem[_4652 + (32 * _4800) + (32 * _5336) + (32 * _5512) + 288] = mem[_5624]
                idx = 0
                s = _5624 + 32
                t = _4652 + (32 * _4800) + (32 * _5336) + (32 * _5512) + 320
                while idx < _5640:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                return memory
                  from mem[64]
                   len _4652 + (32 * _4800) + (32 * _5336) + (32 * _5512) + (32 * _5640) + -mem[64] + 320
            mem[_2327 + (64 * _2324) + (32 * _2326) + 128 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
            mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
            idx = 0
            while idx < _2324:
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                _3517 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 96]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 32]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 32] + 32] = _3517
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            idx = 0
            while idx < _2326:
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                _4657 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 128]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 64]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 64] + 32] = _4657
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            mem[mem[64]] = 32
            mem[mem[64] + 32] = mem[_2322 + 12 len 20]
            _4713 = mem[_2322 + 32]
            mem[mem[64] + 64] = 160
            _4805 = mem[_4713]
            mem[mem[64] + 192] = mem[_4713]
            mem[mem[64] + 224 len 32 * _4805] = mem[_4713 + 32 len 32 * _4805]
            var64001 = _4805
            _5321 = mem[_2322 + 64]
            mem[mem[64] + 96] = (32 * _4805) + 192
            _5337 = mem[_5321]
            mem[mem[64] + (32 * _4805) + 224] = mem[_5321]
            mem[mem[64] + (32 * _4805) + 256 len 32 * _5337] = mem[_5321 + 32 len 32 * _5337]
            idx = _5337
            _5497 = mem[_2322 + 96]
            mem[mem[64] + 128] = (32 * _4805) + (32 * _5337) + 224
            _5513 = mem[_5497]
            mem[mem[64] + (32 * _4805) + (32 * _5337) + 256] = mem[_5497]
            idx = 0
            s = _5497 + 32
            t = mem[64] + (32 * _4805) + (32 * _5337) + 288
            while idx < _5513:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            _5625 = mem[_2322 + 128]
            mem[mem[64] + 160] = (32 * _4805) + (32 * _5337) + (32 * _5513) + 256
            _5641 = mem[_5625]
            mem[mem[64] + (32 * _4805) + (32 * _5337) + (32 * _5513) + 288] = mem[_5625]
            idx = 0
            s = _5625 + 32
            t = mem[64] + (32 * _4805) + (32 * _5337) + (32 * _5513) + 320
            while idx < _5641:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return 32, mem[mem[64] + 32], 
                   160,
                   (32 * _4805) + 192,
                   (32 * _4805) + (32 * _5337) + 224,
                   (32 * _4805) + (32 * _5337) + (32 * _5513) + 256,
                   mem[mem[64] + 192 len (32 * _4805) + (32 * _5337) + (32 * _5513) + (32 * _5641) + 128]
        mem[_2327 + (32 * _2324) + 64 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
        mem[_2322 + 64] = _2327 + (32 * _2324) + 32
        if _2324 > test266151307():
            revert with 0, 65
        mem[_2327 + (32 * _2324) + (32 * _2326) + 64] = _2324
        if not _2324:
            mem[_2322 + 96] = _2327 + (32 * _2324) + (32 * _2326) + 64
            if _2326 > test266151307():
                revert with 0, 65
            mem[_2327 + (64 * _2324) + (32 * _2326) + 96] = _2326
            mem[64] = _2327 + (64 * _2324) + (64 * _2326) + 128
            if not _2326:
                mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
                idx = 0
                while idx < _2324:
                    if idx >= mem[mem[96]]:
                        revert with 0, 50
                    _3519 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                    if idx >= mem[mem[96]]:
                        revert with 0, 50
                    if idx >= mem[mem[_2322 + 96]]:
                        revert with 0, 50
                    if not cd[36]:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                    else:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                    if idx >= mem[mem[_2322 + 32]]:
                        revert with 0, 50
                    mem[(32 * idx) + mem[_2322 + 32] + 32] = _3519
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                idx = 0
                while idx < _2326:
                    if idx >= mem[mem[128]]:
                        revert with 0, 50
                    _4660 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                    if idx >= mem[mem[128]]:
                        revert with 0, 50
                    if idx >= mem[mem[_2322 + 128]]:
                        revert with 0, 50
                    if not cd[36]:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                    else:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                    if idx >= mem[mem[_2322 + 64]]:
                        revert with 0, 50
                    mem[(32 * idx) + mem[_2322 + 64] + 32] = _4660
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                mem[mem[64]] = 32
                mem[mem[64] + 32] = mem[_2322 + 12 len 20]
                _4719 = mem[_2322 + 32]
                mem[mem[64] + 64] = 160
                _4810 = mem[_4719]
                mem[mem[64] + 192] = mem[_4719]
                mem[mem[64] + 224 len 32 * _4810] = mem[_4719 + 32 len 32 * _4810]
                _5322 = mem[_2322 + 64]
                mem[mem[64] + 96] = (32 * _4810) + 192
                _5338 = mem[_5322]
                mem[mem[64] + (32 * _4810) + 224] = mem[_5322]
                mem[mem[64] + (32 * _4810) + 256 len 32 * _5338] = mem[_5322 + 32 len 32 * _5338]
                idx = _5338
                _5498 = mem[_2322 + 96]
                mem[mem[64] + 128] = (32 * _4810) + (32 * _5338) + 224
                _5514 = mem[_5498]
                mem[mem[64] + (32 * _4810) + (32 * _5338) + 256] = mem[_5498]
                idx = 0
                s = _5498 + 32
                t = mem[64] + (32 * _4810) + (32 * _5338) + 288
                while idx < _5514:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                _5626 = mem[_2322 + 128]
                mem[mem[64] + 160] = (32 * _4810) + (32 * _5338) + (32 * _5514) + 256
                _5642 = mem[_5626]
                mem[mem[64] + (32 * _4810) + (32 * _5338) + (32 * _5514) + 288] = mem[_5626]
                idx = 0
                s = _5626 + 32
                t = mem[64] + (32 * _4810) + (32 * _5338) + (32 * _5514) + 320
                while idx < _5642:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                return 32, mem[mem[64] + 32], 
                       160,
                       (32 * _4810) + 192,
                       (32 * _4810) + (32 * _5338) + 224,
                       (32 * _4810) + (32 * _5338) + (32 * _5514) + 256,
                       mem[mem[64] + 192 len (32 * _4810) + (32 * _5338) + (32 * _5514) + (32 * _5642) + 128]
            mem[_2327 + (64 * _2324) + (32 * _2326) + 128 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
            mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
            idx = 0
            while idx < _2324:
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                _3521 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 96]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 32]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 32] + 32] = _3521
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            idx = 0
            while idx < _2326:
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                _4663 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 128]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 64]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 64] + 32] = _4663
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _4661 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = mem[_2322 + 12 len 20]
            _4725 = mem[_2322 + 32]
            mem[mem[64] + 64] = 160
            _4815 = mem[_4725]
            mem[mem[64] + 192] = mem[_4725]
            mem[mem[64] + 224 len 32 * _4815] = mem[_4725 + 32 len 32 * _4815]
            var64001 = _4815
            _5323 = mem[_2322 + 64]
            mem[mem[64] + 96] = (32 * _4815) + 192
            _5339 = mem[_5323]
            mem[mem[64] + (32 * _4815) + 224] = mem[_5323]
            mem[mem[64] + (32 * _4815) + 256 len 32 * _5339] = mem[_5323 + 32 len 32 * _5339]
            idx = _5339
            _5499 = mem[_2322 + 96]
            mem[mem[64] + 128] = (32 * _4815) + (32 * _5339) + 224
            _5515 = mem[_5499]
            mem[mem[64] + (32 * _4815) + (32 * _5339) + 256] = mem[_5499]
            idx = 0
            s = _5499 + 32
            t = mem[64] + (32 * _4815) + (32 * _5339) + 288
            while idx < _5515:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            _5627 = mem[_2322 + 128]
            mem[_4661 + 160] = (32 * _4815) + (32 * _5339) + (32 * _5515) + 256
            _5643 = mem[_5627]
            mem[_4661 + (32 * _4815) + (32 * _5339) + (32 * _5515) + 288] = mem[_5627]
            idx = 0
            s = _5627 + 32
            t = _4661 + (32 * _4815) + (32 * _5339) + (32 * _5515) + 320
            while idx < _5643:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _4661 + (32 * _4815) + (32 * _5339) + (32 * _5515) + (32 * _5643) + -mem[64] + 320
        mem[_2327 + (32 * _2324) + (32 * _2326) + 96 len 32 * _2324] = call.data[calldata.size len 32 * _2324]
        mem[_2322 + 96] = _2327 + (32 * _2324) + (32 * _2326) + 64
        if _2326 > test266151307():
            revert with 0, 65
        mem[_2327 + (64 * _2324) + (32 * _2326) + 96] = _2326
        mem[64] = _2327 + (64 * _2324) + (64 * _2326) + 128
        if not _2326:
            mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
            idx = 0
            while idx < _2324:
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                _3523 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 96]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 32]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 32] + 32] = _3523
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            idx = 0
            while idx < _2326:
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                _4666 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 128]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 64]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 64] + 32] = _4666
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _4664 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = mem[_2322 + 12 len 20]
            _4731 = mem[_2322 + 32]
            mem[mem[64] + 64] = 160
            _4820 = mem[_4731]
            mem[mem[64] + 192] = mem[_4731]
            mem[mem[64] + 224 len 32 * _4820] = mem[_4731 + 32 len 32 * _4820]
            var64001 = _4820
            _5324 = mem[_2322 + 64]
            mem[mem[64] + 96] = (32 * _4820) + 192
            _5340 = mem[_5324]
            mem[mem[64] + (32 * _4820) + 224] = mem[_5324]
            mem[mem[64] + (32 * _4820) + 256 len 32 * _5340] = mem[_5324 + 32 len 32 * _5340]
            idx = _5340
            _5500 = mem[_2322 + 96]
            mem[mem[64] + 128] = (32 * _4820) + (32 * _5340) + 224
            _5516 = mem[_5500]
            mem[mem[64] + (32 * _4820) + (32 * _5340) + 256] = mem[_5500]
            idx = 0
            s = _5500 + 32
            t = mem[64] + (32 * _4820) + (32 * _5340) + 288
            while idx < _5516:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            _5628 = mem[_2322 + 128]
            mem[_4664 + 160] = (32 * _4820) + (32 * _5340) + (32 * _5516) + 256
            _5644 = mem[_5628]
            mem[_4664 + (32 * _4820) + (32 * _5340) + (32 * _5516) + 288] = mem[_5628]
            idx = 0
            s = _5628 + 32
            t = _4664 + (32 * _4820) + (32 * _5340) + (32 * _5516) + 320
            while idx < _5644:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _4664 + (32 * _4820) + (32 * _5340) + (32 * _5516) + (32 * _5644) + -mem[64] + 320
        mem[_2327 + (64 * _2324) + (32 * _2326) + 128 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
        mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
        idx = 0
        while idx < _2324:
            if idx >= mem[mem[96]]:
                revert with 0, 50
            _3525 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
            if idx >= mem[mem[96]]:
                revert with 0, 50
            if idx >= mem[mem[_2322 + 96]]:
                revert with 0, 50
            if not cd[36]:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
            else:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
            if idx >= mem[mem[_2322 + 32]]:
                revert with 0, 50
            mem[(32 * idx) + mem[_2322 + 32] + 32] = _3525
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        while idx < _2326:
            if idx >= mem[mem[128]]:
                revert with 0, 50
            _4669 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
            if idx >= mem[mem[128]]:
                revert with 0, 50
            if idx >= mem[mem[_2322 + 128]]:
                revert with 0, 50
            if not cd[36]:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
            else:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
            if idx >= mem[mem[_2322 + 64]]:
                revert with 0, 50
            mem[(32 * idx) + mem[_2322 + 64] + 32] = _4669
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _4667 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = mem[_2322 + 12 len 20]
        _4737 = mem[_2322 + 32]
        mem[mem[64] + 64] = 160
        _4825 = mem[_4737]
        mem[mem[64] + 192] = mem[_4737]
        mem[mem[64] + 224 len 32 * _4825] = mem[_4737 + 32 len 32 * _4825]
        var65001 = _4825
        _5325 = mem[_2322 + 64]
        mem[mem[64] + 96] = (32 * _4825) + 192
        _5341 = mem[_5325]
        mem[mem[64] + (32 * _4825) + 224] = mem[_5325]
        mem[mem[64] + (32 * _4825) + 256 len 32 * _5341] = mem[_5325 + 32 len 32 * _5341]
        idx = _5341
        _5501 = mem[_2322 + 96]
        mem[mem[64] + 128] = (32 * _4825) + (32 * _5341) + 224
        _5517 = mem[_5501]
        mem[mem[64] + (32 * _4825) + (32 * _5341) + 256] = mem[_5501]
        idx = 0
        s = _5501 + 32
        t = mem[64] + (32 * _4825) + (32 * _5341) + 288
        while idx < _5517:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        _5629 = mem[_2322 + 128]
        mem[_4667 + 160] = (32 * _4825) + (32 * _5341) + (32 * _5517) + 256
        _5645 = mem[_5629]
        mem[_4667 + (32 * _4825) + (32 * _5341) + (32 * _5517) + 288] = mem[_5629]
        idx = 0
        s = _5629 + 32
        t = _4667 + (32 * _4825) + (32 * _5341) + (32 * _5517) + 320
        while idx < _5645:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _4667 + (32 * _4825) + (32 * _5341) + (32 * _5517) + (32 * _5645) + -mem[64] + 320
    mem[mem[64] + 32 len 32 * _2324] = call.data[calldata.size len 32 * _2324]
    mem[_2322 + 32] = mem[64]
    if _2326 > test266151307():
        revert with 0, 65
    mem[_2327 + (32 * _2324) + 32] = _2326
    mem[64] = _2327 + (32 * _2324) + (32 * _2326) + 64
    if not _2326:
        mem[_2322 + 64] = _2327 + (32 * _2324) + 32
        if _2324 > test266151307():
            revert with 0, 65
        mem[_2327 + (32 * _2324) + (32 * _2326) + 64] = _2324
        if not _2324:
            mem[_2322 + 96] = _2327 + (32 * _2324) + (32 * _2326) + 64
            if _2326 > test266151307():
                revert with 0, 65
            mem[_2327 + (64 * _2324) + (32 * _2326) + 96] = _2326
            mem[64] = _2327 + (64 * _2324) + (64 * _2326) + 128
            if not _2326:
                mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
                idx = 0
                while idx < _2324:
                    if idx >= mem[mem[96]]:
                        revert with 0, 50
                    _3527 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                    if idx >= mem[mem[96]]:
                        revert with 0, 50
                    if idx >= mem[mem[_2322 + 96]]:
                        revert with 0, 50
                    if not cd[36]:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                    else:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                    if idx >= mem[mem[_2322 + 32]]:
                        revert with 0, 50
                    mem[(32 * idx) + mem[_2322 + 32] + 32] = _3527
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                idx = 0
                while idx < _2326:
                    if idx >= mem[mem[128]]:
                        revert with 0, 50
                    _4672 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                    if idx >= mem[mem[128]]:
                        revert with 0, 50
                    if idx >= mem[mem[_2322 + 128]]:
                        revert with 0, 50
                    if not cd[36]:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                    else:
                        if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                        else:
                            mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                    if idx >= mem[mem[_2322 + 64]]:
                        revert with 0, 50
                    mem[(32 * idx) + mem[_2322 + 64] + 32] = _4672
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                _4670 = mem[64]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = mem[_2322 + 12 len 20]
                _4743 = mem[_2322 + 32]
                mem[mem[64] + 64] = 160
                _4830 = mem[_4743]
                mem[mem[64] + 192] = mem[_4743]
                mem[mem[64] + 224 len 32 * _4830] = mem[_4743 + 32 len 32 * _4830]
                _5326 = mem[_2322 + 64]
                mem[mem[64] + 96] = (32 * _4830) + 192
                _5342 = mem[_5326]
                mem[mem[64] + (32 * _4830) + 224] = mem[_5326]
                mem[mem[64] + (32 * _4830) + 256 len 32 * _5342] = mem[_5326 + 32 len 32 * _5342]
                idx = _5342
                _5502 = mem[_2322 + 96]
                mem[mem[64] + 128] = (32 * _4830) + (32 * _5342) + 224
                _5518 = mem[_5502]
                mem[mem[64] + (32 * _4830) + (32 * _5342) + 256] = mem[_5502]
                idx = 0
                s = _5502 + 32
                t = mem[64] + (32 * _4830) + (32 * _5342) + 288
                while idx < _5518:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                _5630 = mem[_2322 + 128]
                mem[_4670 + 160] = (32 * _4830) + (32 * _5342) + (32 * _5518) + 256
                _5646 = mem[_5630]
                mem[_4670 + (32 * _4830) + (32 * _5342) + (32 * _5518) + 288] = mem[_5630]
                idx = 0
                s = _5630 + 32
                t = _4670 + (32 * _4830) + (32 * _5342) + (32 * _5518) + 320
                while idx < _5646:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                return memory
                  from mem[64]
                   len _4670 + (32 * _4830) + (32 * _5342) + (32 * _5518) + (32 * _5646) + -mem[64] + 320
            mem[_2327 + (64 * _2324) + (32 * _2326) + 128 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
            mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
            idx = 0
            while idx < _2324:
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                _3529 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 96]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 32]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 32] + 32] = _3529
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            idx = 0
            while idx < _2326:
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                _4675 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 128]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 64]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 64] + 32] = _4675
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _4673 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = mem[_2322 + 12 len 20]
            _4749 = mem[_2322 + 32]
            mem[mem[64] + 64] = 160
            _4835 = mem[_4749]
            mem[mem[64] + 192] = mem[_4749]
            mem[mem[64] + 224 len 32 * _4835] = mem[_4749 + 32 len 32 * _4835]
            var64001 = _4835
            _5327 = mem[_2322 + 64]
            mem[mem[64] + 96] = (32 * _4835) + 192
            _5343 = mem[_5327]
            mem[mem[64] + (32 * _4835) + 224] = mem[_5327]
            mem[mem[64] + (32 * _4835) + 256 len 32 * _5343] = mem[_5327 + 32 len 32 * _5343]
            idx = _5343
            _5503 = mem[_2322 + 96]
            mem[mem[64] + 128] = (32 * _4835) + (32 * _5343) + 224
            _5519 = mem[_5503]
            mem[mem[64] + (32 * _4835) + (32 * _5343) + 256] = mem[_5503]
            idx = 0
            s = _5503 + 32
            t = mem[64] + (32 * _4835) + (32 * _5343) + 288
            while idx < _5519:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            _5631 = mem[_2322 + 128]
            mem[_4673 + 160] = (32 * _4835) + (32 * _5343) + (32 * _5519) + 256
            _5647 = mem[_5631]
            mem[_4673 + (32 * _4835) + (32 * _5343) + (32 * _5519) + 288] = mem[_5631]
            idx = 0
            s = _5631 + 32
            t = _4673 + (32 * _4835) + (32 * _5343) + (32 * _5519) + 320
            while idx < _5647:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _4673 + (32 * _4835) + (32 * _5343) + (32 * _5519) + (32 * _5647) + -mem[64] + 320
        mem[_2327 + (32 * _2324) + (32 * _2326) + 96 len 32 * _2324] = call.data[calldata.size len 32 * _2324]
        mem[_2322 + 96] = _2327 + (32 * _2324) + (32 * _2326) + 64
        if _2326 > test266151307():
            revert with 0, 65
        mem[_2327 + (64 * _2324) + (32 * _2326) + 96] = _2326
        mem[64] = _2327 + (64 * _2324) + (64 * _2326) + 128
        if not _2326:
            mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
            idx = 0
            while idx < _2324:
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                _3531 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 96]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 32]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 32] + 32] = _3531
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            idx = 0
            while idx < _2326:
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                _4678 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 128]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 64]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 64] + 32] = _4678
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _4676 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = mem[_2322 + 12 len 20]
            _4755 = mem[_2322 + 32]
            mem[mem[64] + 64] = 160
            _4840 = mem[_4755]
            mem[mem[64] + 192] = mem[_4755]
            mem[mem[64] + 224 len 32 * _4840] = mem[_4755 + 32 len 32 * _4840]
            var64001 = _4840
            _5328 = mem[_2322 + 64]
            mem[mem[64] + 96] = (32 * _4840) + 192
            _5344 = mem[_5328]
            mem[mem[64] + (32 * _4840) + 224] = mem[_5328]
            mem[mem[64] + (32 * _4840) + 256 len 32 * _5344] = mem[_5328 + 32 len 32 * _5344]
            idx = _5344
            _5504 = mem[_2322 + 96]
            mem[mem[64] + 128] = (32 * _4840) + (32 * _5344) + 224
            _5520 = mem[_5504]
            mem[mem[64] + (32 * _4840) + (32 * _5344) + 256] = mem[_5504]
            idx = 0
            s = _5504 + 32
            t = mem[64] + (32 * _4840) + (32 * _5344) + 288
            while idx < _5520:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            _5632 = mem[_2322 + 128]
            mem[_4676 + 160] = (32 * _4840) + (32 * _5344) + (32 * _5520) + 256
            _5648 = mem[_5632]
            mem[_4676 + (32 * _4840) + (32 * _5344) + (32 * _5520) + 288] = mem[_5632]
            idx = 0
            s = _5632 + 32
            t = _4676 + (32 * _4840) + (32 * _5344) + (32 * _5520) + 320
            while idx < _5648:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _4676 + (32 * _4840) + (32 * _5344) + (32 * _5520) + (32 * _5648) + -mem[64] + 320
        mem[_2327 + (64 * _2324) + (32 * _2326) + 128 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
        mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
        idx = 0
        while idx < _2324:
            if idx >= mem[mem[96]]:
                revert with 0, 50
            _3533 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
            if idx >= mem[mem[96]]:
                revert with 0, 50
            if idx >= mem[mem[_2322 + 96]]:
                revert with 0, 50
            if not cd[36]:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
            else:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
            if idx >= mem[mem[_2322 + 32]]:
                revert with 0, 50
            mem[(32 * idx) + mem[_2322 + 32] + 32] = _3533
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        while idx < _2326:
            if idx >= mem[mem[128]]:
                revert with 0, 50
            _4681 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
            if idx >= mem[mem[128]]:
                revert with 0, 50
            if idx >= mem[mem[_2322 + 128]]:
                revert with 0, 50
            if not cd[36]:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
            else:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
            if idx >= mem[mem[_2322 + 64]]:
                revert with 0, 50
            mem[(32 * idx) + mem[_2322 + 64] + 32] = _4681
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _4679 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = mem[_2322 + 12 len 20]
        _4761 = mem[_2322 + 32]
        mem[mem[64] + 64] = 160
        _4845 = mem[_4761]
        mem[mem[64] + 192] = mem[_4761]
        mem[mem[64] + 224 len 32 * _4845] = mem[_4761 + 32 len 32 * _4845]
        var65001 = _4845
        _5329 = mem[_2322 + 64]
        mem[mem[64] + 96] = (32 * _4845) + 192
        _5345 = mem[_5329]
        mem[mem[64] + (32 * _4845) + 224] = mem[_5329]
        mem[mem[64] + (32 * _4845) + 256 len 32 * _5345] = mem[_5329 + 32 len 32 * _5345]
        idx = _5345
        _5505 = mem[_2322 + 96]
        mem[mem[64] + 128] = (32 * _4845) + (32 * _5345) + 224
        _5521 = mem[_5505]
        mem[mem[64] + (32 * _4845) + (32 * _5345) + 256] = mem[_5505]
        idx = 0
        s = _5505 + 32
        t = mem[64] + (32 * _4845) + (32 * _5345) + 288
        while idx < _5521:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        _5633 = mem[_2322 + 128]
        mem[_4679 + 160] = (32 * _4845) + (32 * _5345) + (32 * _5521) + 256
        _5649 = mem[_5633]
        mem[_4679 + (32 * _4845) + (32 * _5345) + (32 * _5521) + 288] = mem[_5633]
        idx = 0
        s = _5633 + 32
        t = _4679 + (32 * _4845) + (32 * _5345) + (32 * _5521) + 320
        while idx < _5649:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _4679 + (32 * _4845) + (32 * _5345) + (32 * _5521) + (32 * _5649) + -mem[64] + 320
    mem[_2327 + (32 * _2324) + 64 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
    mem[_2322 + 64] = _2327 + (32 * _2324) + 32
    if _2324 > test266151307():
        revert with 0, 65
    mem[_2327 + (32 * _2324) + (32 * _2326) + 64] = _2324
    if not _2324:
        mem[_2322 + 96] = _2327 + (32 * _2324) + (32 * _2326) + 64
        if _2326 > test266151307():
            revert with 0, 65
        mem[_2327 + (64 * _2324) + (32 * _2326) + 96] = _2326
        mem[64] = _2327 + (64 * _2324) + (64 * _2326) + 128
        if not _2326:
            mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
            idx = 0
            while idx < _2324:
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                _3535 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
                if idx >= mem[mem[96]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 96]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 32]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 32] + 32] = _3535
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            idx = 0
            while idx < _2326:
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                _4684 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
                if idx >= mem[mem[128]]:
                    revert with 0, 50
                if idx >= mem[mem[_2322 + 128]]:
                    revert with 0, 50
                if not cd[36]:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
                else:
                    if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                    else:
                        mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
                if idx >= mem[mem[_2322 + 64]]:
                    revert with 0, 50
                mem[(32 * idx) + mem[_2322 + 64] + 32] = _4684
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _4682 = mem[64]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = mem[_2322 + 12 len 20]
            _4767 = mem[_2322 + 32]
            mem[mem[64] + 64] = 160
            _4850 = mem[_4767]
            mem[mem[64] + 192] = mem[_4767]
            mem[mem[64] + 224 len 32 * _4850] = mem[_4767 + 32 len 32 * _4850]
            var64001 = _4850
            _5330 = mem[_2322 + 64]
            mem[mem[64] + 96] = (32 * _4850) + 192
            _5346 = mem[_5330]
            mem[mem[64] + (32 * _4850) + 224] = mem[_5330]
            mem[mem[64] + (32 * _4850) + 256 len 32 * _5346] = mem[_5330 + 32 len 32 * _5346]
            idx = _5346
            _5506 = mem[_2322 + 96]
            mem[mem[64] + 128] = (32 * _4850) + (32 * _5346) + 224
            _5522 = mem[_5506]
            mem[mem[64] + (32 * _4850) + (32 * _5346) + 256] = mem[_5506]
            idx = 0
            s = _5506 + 32
            t = mem[64] + (32 * _4850) + (32 * _5346) + 288
            while idx < _5522:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            _5634 = mem[_2322 + 128]
            mem[_4682 + 160] = (32 * _4850) + (32 * _5346) + (32 * _5522) + 256
            _5650 = mem[_5634]
            mem[_4682 + (32 * _4850) + (32 * _5346) + (32 * _5522) + 288] = mem[_5634]
            idx = 0
            s = _5634 + 32
            t = _4682 + (32 * _4850) + (32 * _5346) + (32 * _5522) + 320
            while idx < _5650:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            return memory
              from mem[64]
               len _4682 + (32 * _4850) + (32 * _5346) + (32 * _5522) + (32 * _5650) + -mem[64] + 320
        mem[_2327 + (64 * _2324) + (32 * _2326) + 128 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
        mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
        idx = 0
        while idx < _2324:
            if idx >= mem[mem[96]]:
                revert with 0, 50
            _3537 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
            if idx >= mem[mem[96]]:
                revert with 0, 50
            if idx >= mem[mem[_2322 + 96]]:
                revert with 0, 50
            if not cd[36]:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
            else:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
            if idx >= mem[mem[_2322 + 32]]:
                revert with 0, 50
            mem[(32 * idx) + mem[_2322 + 32] + 32] = _3537
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        while idx < _2326:
            if idx >= mem[mem[128]]:
                revert with 0, 50
            _4687 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
            if idx >= mem[mem[128]]:
                revert with 0, 50
            if idx >= mem[mem[_2322 + 128]]:
                revert with 0, 50
            if not cd[36]:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
            else:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
            if idx >= mem[mem[_2322 + 64]]:
                revert with 0, 50
            mem[(32 * idx) + mem[_2322 + 64] + 32] = _4687
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _4685 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = mem[_2322 + 12 len 20]
        _4773 = mem[_2322 + 32]
        mem[mem[64] + 64] = 160
        _4855 = mem[_4773]
        mem[mem[64] + 192] = mem[_4773]
        mem[mem[64] + 224 len 32 * _4855] = mem[_4773 + 32 len 32 * _4855]
        var65001 = _4855
        _5331 = mem[_2322 + 64]
        mem[mem[64] + 96] = (32 * _4855) + 192
        _5347 = mem[_5331]
        mem[mem[64] + (32 * _4855) + 224] = mem[_5331]
        mem[mem[64] + (32 * _4855) + 256 len 32 * _5347] = mem[_5331 + 32 len 32 * _5347]
        idx = _5347
        _5507 = mem[_2322 + 96]
        mem[mem[64] + 128] = (32 * _4855) + (32 * _5347) + 224
        _5523 = mem[_5507]
        mem[mem[64] + (32 * _4855) + (32 * _5347) + 256] = mem[_5507]
        idx = 0
        s = _5507 + 32
        t = mem[64] + (32 * _4855) + (32 * _5347) + 288
        while idx < _5523:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        _5635 = mem[_2322 + 128]
        mem[_4685 + 160] = (32 * _4855) + (32 * _5347) + (32 * _5523) + 256
        _5651 = mem[_5635]
        mem[_4685 + (32 * _4855) + (32 * _5347) + (32 * _5523) + 288] = mem[_5635]
        idx = 0
        s = _5635 + 32
        t = _4685 + (32 * _4855) + (32 * _5347) + (32 * _5523) + 320
        while idx < _5651:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _4685 + (32 * _4855) + (32 * _5347) + (32 * _5523) + (32 * _5651) + -mem[64] + 320
    mem[_2327 + (32 * _2324) + (32 * _2326) + 96 len 32 * _2324] = call.data[calldata.size len 32 * _2324]
    mem[_2322 + 96] = _2327 + (32 * _2324) + (32 * _2326) + 64
    if _2326 > test266151307():
        revert with 0, 65
    mem[_2327 + (64 * _2324) + (32 * _2326) + 96] = _2326
    mem[64] = _2327 + (64 * _2324) + (64 * _2326) + 128
    if not _2326:
        mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
        idx = 0
        while idx < _2324:
            if idx >= mem[mem[96]]:
                revert with 0, 50
            _3539 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
            if idx >= mem[mem[96]]:
                revert with 0, 50
            if idx >= mem[mem[_2322 + 96]]:
                revert with 0, 50
            if not cd[36]:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
            else:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
            if idx >= mem[mem[_2322 + 32]]:
                revert with 0, 50
            mem[(32 * idx) + mem[_2322 + 32] + 32] = _3539
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        idx = 0
        while idx < _2326:
            if idx >= mem[mem[128]]:
                revert with 0, 50
            _4690 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
            if idx >= mem[mem[128]]:
                revert with 0, 50
            if idx >= mem[mem[_2322 + 128]]:
                revert with 0, 50
            if not cd[36]:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
            else:
                if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
                else:
                    mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
            if idx >= mem[mem[_2322 + 64]]:
                revert with 0, 50
            mem[(32 * idx) + mem[_2322 + 64] + 32] = _4690
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _4688 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = mem[_2322 + 12 len 20]
        _4779 = mem[_2322 + 32]
        mem[mem[64] + 64] = 160
        _4860 = mem[_4779]
        mem[mem[64] + 192] = mem[_4779]
        mem[mem[64] + 224 len 32 * _4860] = mem[_4779 + 32 len 32 * _4860]
        var65001 = _4860
        _5332 = mem[_2322 + 64]
        mem[mem[64] + 96] = (32 * _4860) + 192
        _5348 = mem[_5332]
        mem[mem[64] + (32 * _4860) + 224] = mem[_5332]
        mem[mem[64] + (32 * _4860) + 256 len 32 * _5348] = mem[_5332 + 32 len 32 * _5348]
        idx = _5348
        _5508 = mem[_2322 + 96]
        mem[mem[64] + 128] = (32 * _4860) + (32 * _5348) + 224
        _5524 = mem[_5508]
        mem[mem[64] + (32 * _4860) + (32 * _5348) + 256] = mem[_5508]
        idx = 0
        s = _5508 + 32
        t = mem[64] + (32 * _4860) + (32 * _5348) + 288
        while idx < _5524:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        _5636 = mem[_2322 + 128]
        mem[_4688 + 160] = (32 * _4860) + (32 * _5348) + (32 * _5524) + 256
        _5652 = mem[_5636]
        mem[_4688 + (32 * _4860) + (32 * _5348) + (32 * _5524) + 288] = mem[_5636]
        idx = 0
        s = _5636 + 32
        t = _4688 + (32 * _4860) + (32 * _5348) + (32 * _5524) + 320
        while idx < _5652:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _4688 + (32 * _4860) + (32 * _5348) + (32 * _5524) + (32 * _5652) + -mem[64] + 320
    mem[_2327 + (64 * _2324) + (32 * _2326) + 128 len 32 * _2326] = call.data[calldata.size len 32 * _2326]
    mem[_2322 + 128] = _2327 + (64 * _2324) + (32 * _2326) + 96
    idx = 0
    while idx < _2324:
        if idx >= mem[mem[96]]:
            revert with 0, 50
        _3541 = mem[mem[(32 * idx) + mem[96] + 32] + 64]
        if idx >= mem[mem[96]]:
            revert with 0, 50
        if idx >= mem[mem[_2322 + 96]]:
            revert with 0, 50
        if not cd[36]:
            if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]:
                mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
            else:
                mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 12 len 20]
        else:
            if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]:
                mem[(32 * idx) + mem[_2322 + 96] + 32] = sub_b729cbebAddress
            else:
                mem[(32 * idx) + mem[_2322 + 96] + 32] = mem[mem[(32 * idx) + mem[96] + 32] + 44 len 20]
        if idx >= mem[mem[_2322 + 32]]:
            revert with 0, 50
        mem[(32 * idx) + mem[_2322 + 32] + 32] = _3541
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    idx = 0
    while idx < _2326:
        if idx >= mem[mem[128]]:
            revert with 0, 50
        _4693 = mem[mem[(32 * idx) + mem[128] + 32] + 64]
        if idx >= mem[mem[128]]:
            revert with 0, 50
        if idx >= mem[mem[_2322 + 128]]:
            revert with 0, 50
        if not cd[36]:
            if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]:
                mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
            else:
                mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 12 len 20]
        else:
            if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]:
                mem[(32 * idx) + mem[_2322 + 128] + 32] = sub_b729cbebAddress
            else:
                mem[(32 * idx) + mem[_2322 + 128] + 32] = mem[mem[(32 * idx) + mem[128] + 32] + 44 len 20]
        if idx >= mem[mem[_2322 + 64]]:
            revert with 0, 50
        mem[(32 * idx) + mem[_2322 + 64] + 32] = _4693
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    _4691 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = mem[_2322 + 12 len 20]
    _4785 = mem[_2322 + 32]
    mem[mem[64] + 64] = 160
    _4865 = mem[_4785]
    mem[mem[64] + 192] = mem[_4785]
    mem[mem[64] + 224 len 32 * _4865] = mem[_4785 + 32 len 32 * _4865]
    var66001 = _4865
    _5333 = mem[_2322 + 64]
    mem[mem[64] + 96] = (32 * _4865) + 192
    _5349 = mem[_5333]
    mem[mem[64] + (32 * _4865) + 224] = mem[_5333]
    mem[mem[64] + (32 * _4865) + 256 len 32 * _5349] = mem[_5333 + 32 len 32 * _5349]
    idx = _5349
    _5509 = mem[_2322 + 96]
    mem[mem[64] + 128] = (32 * _4865) + (32 * _5349) + 224
    _5525 = mem[_5509]
    mem[mem[64] + (32 * _4865) + (32 * _5349) + 256] = mem[_5509]
    idx = 0
    s = _5509 + 32
    t = mem[64] + (32 * _4865) + (32 * _5349) + 288
    while idx < _5525:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    _5637 = mem[_2322 + 128]
    mem[mem[64] + 160] = (32 * _4865) + (32 * _5349) + (32 * _5525) + 256
    _5653 = mem[_5637]
    mem[mem[64] + (32 * _4865) + (32 * _5349) + (32 * _5525) + 288] = mem[_5637]
    idx = 0
    s = _5637 + 32
    t = mem[64] + (32 * _4865) + (32 * _5349) + (32 * _5525) + 320
    while idx < _5653:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    return memory
      from mem[64]
       len _4691 + (32 * _4865) + (32 * _5349) + (32 * _5525) + (32 * _5653) + -mem[64] + 320
}

function sub_83382653(?) payable {
    require calldata.size - 4 >= 64
    require cd[4] == address(cd[4])
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 36).length) + 97 < 96 or ceil32(32 * ('cd', 36).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 36).length
    require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
    idx = 0
    s = cd[36] + 36
    t = 128
    while idx < ('cd', 36).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(sub_238f9b7aAddress)
    staticcall sub_238f9b7aAddress.getPriceOracle() with:
            gas gas_remaining wei
    mem[ceil32(32 * ('cd', 36).length) + 97] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97] = 0x9d23d9f200000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 101] = 32
    mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 133] = ('cd', 36).length
    idx = 0
    s = 128
    t = ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 165
    while idx < ('cd', 36).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getAssetsPrices(address[] rg1) with:
            gas gas_remaining wei
           args Array(len=('cd', 36).length, data=mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 165 len 32 * ('cd', 36).length])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97
    require return_data.size >= 32
    _581 = mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97 len 4], 0
    require mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97 len 4], 0 <= test266151307()
    require ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + return_data.size + 97 > ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97 len 4], 0 + 128
    _582 = mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97 len 4], 0 + 97]
    if mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97 len 4], 0 + 97] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97 len 4], 0 + 97]) + 1 < 0 or ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97 len 4], 0 + 97]) + 98 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 97 len 4], 0 + 97]) + 98
    mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97] = _582
    require _581 + (32 * _582) + 32 <= return_data.size
    mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129 len 32 * _582] = mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + _581 + 129 len 32 * _582]
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    _862 = mem[64]
    mem[mem[64]] = ('cd', 36).length
    mem[64] = mem[64] + (32 * ('cd', 36).length) + 32
    if not ('cd', 36).length:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1147 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1153 = mem[_1147]
            _1154 = mem[_1147 + 32]
            _1155 = mem[_1147 + 64]
            _1158 = mem[_1147 + 160]
            require mem[_1147 + 160] == bool(mem[_1147 + 160])
            _1175 = mem[_1147 + 192]
            require mem[_1147 + 192] == bool(mem[_1147 + 192])
            require mem[_1147 + 224] == bool(mem[_1147 + 224])
            _1200 = mem[_1147 + 256]
            require mem[_1147 + 256] == bool(mem[_1147 + 256])
            require mem[_1147 + 288] == bool(mem[_1147 + 288])
            if idx >= mem[_862]:
                revert with 0, 50
            _1209 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1211 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1213 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1215 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1218 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1223 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            mem[mem[(32 * idx) + _862 + 32] + 192] = bool(mem[_1147 + 288])
            mem[_1223 + 160] = bool(_1200)
            mem[_1218 + 128] = bool(_1175)
            mem[_1215 + 96] = bool(_1158)
            mem[_1213 + 64] = _1155
            mem[_1211 + 32] = _1154
            mem[_1209] = _1153
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _1410 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _1410:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1419 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_1419 + 224] == mem[_1419 + 251 len 5]
            require mem[_1419 + 256] == bool(mem[_1419 + 256])
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_1419] and 1 > -1 / mem[_1419]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_1419] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_1419]:
                    revert with 0, 17
                if mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_1419 + 32] > !mem[_1419 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_1419 + 32] + mem[_1419 + 64] and 1 > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_1419 + 32] + mem[_1419 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                        revert with 0, 17
                    if (mem[_1419 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_1419 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _1410 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_1419 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_1419 + 32] + mem[_1419 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _1410 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _1410 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_1419 + 32] + mem[_1419 + 64] and x * y > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_1419 + 32] * x * y) + (mem[_1419 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_1419 + 32] * x * y) + (mem[_1419 + 64] * x * y):
                    revert with 0, 17
                if (mem[_1419 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_1419 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _1410 = mem[96]
                idx = idx + 1
                s = s + ((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_1419 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_1419] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_1419] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_1419]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18):
                    revert with 0, 17
                if mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_1419 + 32] > !mem[_1419 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_1419 + 32] + mem[_1419 + 64] and 1 > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_1419 + 32] + mem[_1419 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                        revert with 0, 17
                    if (mem[_1419 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_1419 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _1410 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_1419 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_1419 + 32] + mem[_1419 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _1410 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _1410 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_1419 + 32] + mem[_1419 + 64] and x * y > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_1419 + 32] * x * y) + (mem[_1419 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_1419 + 32] * x * y) + (mem[_1419 + 64] * x * y):
                    revert with 0, 17
                if (mem[_1419 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_1419 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _1410 = mem[96]
                idx = idx + 1
                s = s + ((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_1419 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_1419] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _1410 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_1419] and x * y > -1 / mem[_1419]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if mem[_1419] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_1419] * x * y:
                revert with 0, 17
            if mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                revert with 0, 17
            if mem[_1419 + 32] > !mem[_1419 + 64]:
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_1419 + 32] + mem[_1419 + 64] and 1 > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_1419 + 32] + mem[_1419 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                    revert with 0, 17
                if (mem[_1419 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_1419 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _1410 = mem[96]
                idx = idx + 1
                s = s + ((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_1419 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_1419 + 32] + mem[_1419 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _1410 = mem[96]
                idx = idx + 1
                s = s + ((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_1419 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _1410 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_1419 + 32] + mem[_1419 + 64] and z * a > -1 / mem[_1419 + 32] + mem[_1419 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if (mem[_1419 + 32] * z * a) + (mem[_1419 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_1419 + 32] * z * a) + (mem[_1419 + 64] * z * a):
                revert with 0, 17
            if (mem[_1419 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_1419 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _1410 = mem[96]
            idx = idx + 1
            s = s + ((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
            t = t + ((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
            u = u + ((mem[_1419 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_1419 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_1419] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            continue 
        return v, u, t, s
    mem[64] = _862 + (32 * ('cd', 36).length) + 320
    mem[_862 + (32 * ('cd', 36).length) + 32] = 0
    mem[_862 + (32 * ('cd', 36).length) + 64] = 0
    mem[_862 + (32 * ('cd', 36).length) + 96] = 0
    mem[_862 + (32 * ('cd', 36).length) + 128] = 0
    mem[_862 + (32 * ('cd', 36).length) + 160] = 0
    mem[_862 + (32 * ('cd', 36).length) + 192] = 0
    mem[_862 + (32 * ('cd', 36).length) + 224] = 0
    mem[_862 + (32 * ('cd', 36).length) + 256] = 0
    mem[_862 + (32 * ('cd', 36).length) + 288] = 0
    mem[var64002] = var64001
    if not var64003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1802 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1809 = mem[_1802]
            _1810 = mem[_1802 + 32]
            _1811 = mem[_1802 + 64]
            _1814 = mem[_1802 + 160]
            require mem[_1802 + 160] == bool(mem[_1802 + 160])
            _1837 = mem[_1802 + 192]
            require mem[_1802 + 192] == bool(mem[_1802 + 192])
            require mem[_1802 + 224] == bool(mem[_1802 + 224])
            _1860 = mem[_1802 + 256]
            require mem[_1802 + 256] == bool(mem[_1802 + 256])
            require mem[_1802 + 288] == bool(mem[_1802 + 288])
            if idx >= mem[_862]:
                revert with 0, 50
            _1869 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1871 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1873 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1876 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1880 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _1885 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            mem[mem[(32 * idx) + _862 + 32] + 192] = bool(mem[_1802 + 288])
            mem[_1885 + 160] = bool(_1860)
            mem[_1880 + 128] = bool(_1837)
            mem[_1876 + 96] = bool(_1814)
            mem[_1873 + 64] = _1811
            mem[_1871 + 32] = _1810
            mem[_1869] = _1809
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _2109 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _2109:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2120 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_2120 + 224] == mem[_2120 + 251 len 5]
            require mem[_2120 + 256] == bool(mem[_2120 + 256])
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_2120] and 1 > -1 / mem[_2120]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_2120] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2120]:
                    revert with 0, 17
                if mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_2120 + 32] > !mem[_2120 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_2120 + 32] + mem[_2120 + 64] and 1 > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_2120 + 32] + mem[_2120 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                        revert with 0, 17
                    if (mem[_2120 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2120 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2109 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_2120 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_2120 + 32] + mem[_2120 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2109 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _2109 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_2120 + 32] + mem[_2120 + 64] and x * y > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_2120 + 32] * x * y) + (mem[_2120 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2120 + 32] * x * y) + (mem[_2120 + 64] * x * y):
                    revert with 0, 17
                if (mem[_2120 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2120 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2109 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_2120 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2120] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_2120] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_2120]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18):
                    revert with 0, 17
                if mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_2120 + 32] > !mem[_2120 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_2120 + 32] + mem[_2120 + 64] and 1 > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_2120 + 32] + mem[_2120 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                        revert with 0, 17
                    if (mem[_2120 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2120 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2109 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_2120 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_2120 + 32] + mem[_2120 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2109 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _2109 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_2120 + 32] + mem[_2120 + 64] and x * y > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_2120 + 32] * x * y) + (mem[_2120 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2120 + 32] * x * y) + (mem[_2120 + 64] * x * y):
                    revert with 0, 17
                if (mem[_2120 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2120 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2109 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_2120 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2120] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _2109 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_2120] and x * y > -1 / mem[_2120]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if mem[_2120] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2120] * x * y:
                revert with 0, 17
            if mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                revert with 0, 17
            if mem[_2120 + 32] > !mem[_2120 + 64]:
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_2120 + 32] + mem[_2120 + 64] and 1 > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_2120 + 32] + mem[_2120 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                    revert with 0, 17
                if (mem[_2120 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2120 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2109 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_2120 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_2120 + 32] + mem[_2120 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2109 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_2120 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _2109 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_2120 + 32] + mem[_2120 + 64] and z * a > -1 / mem[_2120 + 32] + mem[_2120 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if (mem[_2120 + 32] * z * a) + (mem[_2120 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2120 + 32] * z * a) + (mem[_2120 + 64] * z * a):
                revert with 0, 17
            if (mem[_2120 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_2120 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _2109 = mem[96]
            idx = idx + 1
            s = s + ((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
            t = t + ((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
            u = u + ((mem[_2120 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2120 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_2120] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            continue 
        return v, u, t, s
    mem[64] = _862 + (32 * ('cd', 36).length) + 608
    mem[_862 + (32 * ('cd', 36).length) + 320] = 0
    mem[_862 + (32 * ('cd', 36).length) + 352] = 0
    mem[_862 + (32 * ('cd', 36).length) + 384] = 0
    mem[_862 + (32 * ('cd', 36).length) + 416] = 0
    mem[_862 + (32 * ('cd', 36).length) + 448] = 0
    mem[_862 + (32 * ('cd', 36).length) + 480] = 0
    mem[_862 + (32 * ('cd', 36).length) + 512] = 0
    mem[_862 + (32 * ('cd', 36).length) + 544] = 0
    mem[_862 + (32 * ('cd', 36).length) + 576] = 0
    mem[var68002] = var68001
    if not var68003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2509 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _2516 = mem[_2509]
            _2517 = mem[_2509 + 32]
            _2518 = mem[_2509 + 64]
            _2521 = mem[_2509 + 160]
            require mem[_2509 + 160] == bool(mem[_2509 + 160])
            _2541 = mem[_2509 + 192]
            require mem[_2509 + 192] == bool(mem[_2509 + 192])
            require mem[_2509 + 224] == bool(mem[_2509 + 224])
            _2567 = mem[_2509 + 256]
            require mem[_2509 + 256] == bool(mem[_2509 + 256])
            require mem[_2509 + 288] == bool(mem[_2509 + 288])
            if idx >= mem[_862]:
                revert with 0, 50
            _2576 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _2578 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _2580 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _2583 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _2587 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _2592 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            mem[mem[(32 * idx) + _862 + 32] + 192] = bool(mem[_2509 + 288])
            mem[_2592 + 160] = bool(_2567)
            mem[_2587 + 128] = bool(_2541)
            mem[_2583 + 96] = bool(_2521)
            mem[_2580 + 64] = _2518
            mem[_2578 + 32] = _2517
            mem[_2576] = _2516
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _2816 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _2816:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2827 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_2827 + 224] == mem[_2827 + 251 len 5]
            require mem[_2827 + 256] == bool(mem[_2827 + 256])
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_2827] and 1 > -1 / mem[_2827]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_2827] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2827]:
                    revert with 0, 17
                if mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_2827 + 32] > !mem[_2827 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_2827 + 32] + mem[_2827 + 64] and 1 > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_2827 + 32] + mem[_2827 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                        revert with 0, 17
                    if (mem[_2827 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2827 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2816 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_2827 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_2827 + 32] + mem[_2827 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2816 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _2816 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_2827 + 32] + mem[_2827 + 64] and x * y > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_2827 + 32] * x * y) + (mem[_2827 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2827 + 32] * x * y) + (mem[_2827 + 64] * x * y):
                    revert with 0, 17
                if (mem[_2827 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2827 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2816 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_2827 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2827] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_2827] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_2827]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18):
                    revert with 0, 17
                if mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_2827 + 32] > !mem[_2827 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_2827 + 32] + mem[_2827 + 64] and 1 > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_2827 + 32] + mem[_2827 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                        revert with 0, 17
                    if (mem[_2827 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2827 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2816 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_2827 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_2827 + 32] + mem[_2827 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2816 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _2816 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_2827 + 32] + mem[_2827 + 64] and x * y > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_2827 + 32] * x * y) + (mem[_2827 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2827 + 32] * x * y) + (mem[_2827 + 64] * x * y):
                    revert with 0, 17
                if (mem[_2827 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2827 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2816 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_2827 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2827] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _2816 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_2827] and x * y > -1 / mem[_2827]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if mem[_2827] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2827] * x * y:
                revert with 0, 17
            if mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                revert with 0, 17
            if mem[_2827 + 32] > !mem[_2827 + 64]:
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_2827 + 32] + mem[_2827 + 64] and 1 > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_2827 + 32] + mem[_2827 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                    revert with 0, 17
                if (mem[_2827 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2827 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2816 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_2827 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_2827 + 32] + mem[_2827 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2816 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_2827 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _2816 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_2827 + 32] + mem[_2827 + 64] and z * a > -1 / mem[_2827 + 32] + mem[_2827 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if (mem[_2827 + 32] * z * a) + (mem[_2827 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_2827 + 32] * z * a) + (mem[_2827 + 64] * z * a):
                revert with 0, 17
            if (mem[_2827 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_2827 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _2816 = mem[96]
            idx = idx + 1
            s = s + ((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
            t = t + ((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
            u = u + ((mem[_2827 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_2827 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_2827] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            continue 
        return v, u, t, s
    mem[64] = _862 + (32 * ('cd', 36).length) + 896
    mem[_862 + (32 * ('cd', 36).length) + 608] = 0
    mem[_862 + (32 * ('cd', 36).length) + 640] = 0
    mem[_862 + (32 * ('cd', 36).length) + 672] = 0
    mem[_862 + (32 * ('cd', 36).length) + 704] = 0
    mem[_862 + (32 * ('cd', 36).length) + 736] = 0
    mem[_862 + (32 * ('cd', 36).length) + 768] = 0
    mem[_862 + (32 * ('cd', 36).length) + 800] = 0
    mem[_862 + (32 * ('cd', 36).length) + 832] = 0
    mem[_862 + (32 * ('cd', 36).length) + 864] = 0
    mem[var72002] = var72001
    if not var72003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3216 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _3223 = mem[_3216]
            _3224 = mem[_3216 + 32]
            _3225 = mem[_3216 + 64]
            _3228 = mem[_3216 + 160]
            require mem[_3216 + 160] == bool(mem[_3216 + 160])
            _3248 = mem[_3216 + 192]
            require mem[_3216 + 192] == bool(mem[_3216 + 192])
            require mem[_3216 + 224] == bool(mem[_3216 + 224])
            _3274 = mem[_3216 + 256]
            require mem[_3216 + 256] == bool(mem[_3216 + 256])
            require mem[_3216 + 288] == bool(mem[_3216 + 288])
            if idx >= mem[_862]:
                revert with 0, 50
            _3283 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _3285 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _3287 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _3290 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _3294 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _3299 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            mem[mem[(32 * idx) + _862 + 32] + 192] = bool(mem[_3216 + 288])
            mem[_3299 + 160] = bool(_3274)
            mem[_3294 + 128] = bool(_3248)
            mem[_3290 + 96] = bool(_3228)
            mem[_3287 + 64] = _3225
            mem[_3285 + 32] = _3224
            mem[_3283] = _3223
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _3523 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _3523:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3534 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_3534 + 224] == mem[_3534 + 251 len 5]
            require mem[_3534 + 256] == bool(mem[_3534 + 256])
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_3534] and 1 > -1 / mem[_3534]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_3534] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_3534]:
                    revert with 0, 17
                if mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_3534 + 32] > !mem[_3534 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_3534 + 32] + mem[_3534 + 64] and 1 > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_3534 + 32] + mem[_3534 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                        revert with 0, 17
                    if (mem[_3534 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3534 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3523 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_3534 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_3534 + 32] + mem[_3534 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3523 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _3523 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_3534 + 32] + mem[_3534 + 64] and x * y > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_3534 + 32] * x * y) + (mem[_3534 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_3534 + 32] * x * y) + (mem[_3534 + 64] * x * y):
                    revert with 0, 17
                if (mem[_3534 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3534 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3523 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_3534 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3534] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_3534] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_3534]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18):
                    revert with 0, 17
                if mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_3534 + 32] > !mem[_3534 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_3534 + 32] + mem[_3534 + 64] and 1 > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_3534 + 32] + mem[_3534 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                        revert with 0, 17
                    if (mem[_3534 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3534 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3523 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_3534 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_3534 + 32] + mem[_3534 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3523 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _3523 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_3534 + 32] + mem[_3534 + 64] and x * y > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_3534 + 32] * x * y) + (mem[_3534 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_3534 + 32] * x * y) + (mem[_3534 + 64] * x * y):
                    revert with 0, 17
                if (mem[_3534 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3534 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3523 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_3534 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3534] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _3523 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_3534] and x * y > -1 / mem[_3534]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if mem[_3534] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_3534] * x * y:
                revert with 0, 17
            if mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                revert with 0, 17
            if mem[_3534 + 32] > !mem[_3534 + 64]:
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_3534 + 32] + mem[_3534 + 64] and 1 > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_3534 + 32] + mem[_3534 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                    revert with 0, 17
                if (mem[_3534 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3534 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3523 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_3534 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_3534 + 32] + mem[_3534 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3523 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_3534 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _3523 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_3534 + 32] + mem[_3534 + 64] and z * a > -1 / mem[_3534 + 32] + mem[_3534 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if (mem[_3534 + 32] * z * a) + (mem[_3534 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_3534 + 32] * z * a) + (mem[_3534 + 64] * z * a):
                revert with 0, 17
            if (mem[_3534 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_3534 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _3523 = mem[96]
            idx = idx + 1
            s = s + ((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
            t = t + ((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
            u = u + ((mem[_3534 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_3534 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_3534] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            continue 
        return v, u, t, s
    mem[64] = _862 + (32 * ('cd', 36).length) + 1184
    mem[_862 + (32 * ('cd', 36).length) + 896] = 0
    mem[_862 + (32 * ('cd', 36).length) + 928] = 0
    mem[_862 + (32 * ('cd', 36).length) + 960] = 0
    mem[_862 + (32 * ('cd', 36).length) + 992] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1024] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1056] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1088] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1120] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1152] = 0
    mem[var76002] = var76001
    if not var76003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3923 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _3930 = mem[_3923]
            _3931 = mem[_3923 + 32]
            _3932 = mem[_3923 + 64]
            _3935 = mem[_3923 + 160]
            require mem[_3923 + 160] == bool(mem[_3923 + 160])
            _3955 = mem[_3923 + 192]
            require mem[_3923 + 192] == bool(mem[_3923 + 192])
            require mem[_3923 + 224] == bool(mem[_3923 + 224])
            _3981 = mem[_3923 + 256]
            require mem[_3923 + 256] == bool(mem[_3923 + 256])
            require mem[_3923 + 288] == bool(mem[_3923 + 288])
            if idx >= mem[_862]:
                revert with 0, 50
            _3990 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _3992 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _3994 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _3997 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _4001 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _4006 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            mem[mem[(32 * idx) + _862 + 32] + 192] = bool(mem[_3923 + 288])
            mem[_4006 + 160] = bool(_3981)
            mem[_4001 + 128] = bool(_3955)
            mem[_3997 + 96] = bool(_3935)
            mem[_3994 + 64] = _3932
            mem[_3992 + 32] = _3931
            mem[_3990] = _3930
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _4230 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _4230:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4241 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_4241 + 224] == mem[_4241 + 251 len 5]
            require mem[_4241 + 256] == bool(mem[_4241 + 256])
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_4241] and 1 > -1 / mem[_4241]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_4241] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4241]:
                    revert with 0, 17
                if mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_4241 + 32] > !mem[_4241 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_4241 + 32] + mem[_4241 + 64] and 1 > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_4241 + 32] + mem[_4241 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                        revert with 0, 17
                    if (mem[_4241 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4241 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4230 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_4241 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_4241 + 32] + mem[_4241 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4230 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _4230 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_4241 + 32] + mem[_4241 + 64] and x * y > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_4241 + 32] * x * y) + (mem[_4241 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4241 + 32] * x * y) + (mem[_4241 + 64] * x * y):
                    revert with 0, 17
                if (mem[_4241 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4241 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4230 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_4241 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4241] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_4241] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_4241]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18):
                    revert with 0, 17
                if mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_4241 + 32] > !mem[_4241 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_4241 + 32] + mem[_4241 + 64] and 1 > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_4241 + 32] + mem[_4241 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                        revert with 0, 17
                    if (mem[_4241 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4241 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4230 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_4241 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_4241 + 32] + mem[_4241 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4230 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _4230 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_4241 + 32] + mem[_4241 + 64] and x * y > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_4241 + 32] * x * y) + (mem[_4241 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4241 + 32] * x * y) + (mem[_4241 + 64] * x * y):
                    revert with 0, 17
                if (mem[_4241 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4241 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4230 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_4241 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4241] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _4230 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_4241] and x * y > -1 / mem[_4241]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if mem[_4241] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4241] * x * y:
                revert with 0, 17
            if mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                revert with 0, 17
            if mem[_4241 + 32] > !mem[_4241 + 64]:
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_4241 + 32] + mem[_4241 + 64] and 1 > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_4241 + 32] + mem[_4241 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                    revert with 0, 17
                if (mem[_4241 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4241 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4230 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_4241 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_4241 + 32] + mem[_4241 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4230 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_4241 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _4230 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_4241 + 32] + mem[_4241 + 64] and z * a > -1 / mem[_4241 + 32] + mem[_4241 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if (mem[_4241 + 32] * z * a) + (mem[_4241 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4241 + 32] * z * a) + (mem[_4241 + 64] * z * a):
                revert with 0, 17
            if (mem[_4241 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_4241 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _4230 = mem[96]
            idx = idx + 1
            s = s + ((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
            t = t + ((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
            u = u + ((mem[_4241 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4241 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_4241] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            continue 
        return v, u, t, s
    mem[64] = _862 + (32 * ('cd', 36).length) + 1472
    mem[_862 + (32 * ('cd', 36).length) + 1184] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1216] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1248] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1280] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1312] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1344] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1376] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1408] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1440] = 0
    mem[var80002] = var80001
    if not var80003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4630 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _4637 = mem[_4630]
            _4638 = mem[_4630 + 32]
            _4639 = mem[_4630 + 64]
            _4642 = mem[_4630 + 160]
            require mem[_4630 + 160] == bool(mem[_4630 + 160])
            _4662 = mem[_4630 + 192]
            require mem[_4630 + 192] == bool(mem[_4630 + 192])
            require mem[_4630 + 224] == bool(mem[_4630 + 224])
            _4688 = mem[_4630 + 256]
            require mem[_4630 + 256] == bool(mem[_4630 + 256])
            require mem[_4630 + 288] == bool(mem[_4630 + 288])
            if idx >= mem[_862]:
                revert with 0, 50
            _4697 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _4699 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _4701 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _4704 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _4708 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _4713 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            mem[mem[(32 * idx) + _862 + 32] + 192] = bool(mem[_4630 + 288])
            mem[_4713 + 160] = bool(_4688)
            mem[_4708 + 128] = bool(_4662)
            mem[_4704 + 96] = bool(_4642)
            mem[_4701 + 64] = _4639
            mem[_4699 + 32] = _4638
            mem[_4697] = _4637
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _4937 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _4937:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4948 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_4948 + 224] == mem[_4948 + 251 len 5]
            require mem[_4948 + 256] == bool(mem[_4948 + 256])
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_4948] and 1 > -1 / mem[_4948]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_4948] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4948]:
                    revert with 0, 17
                if mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_4948 + 32] > !mem[_4948 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_4948 + 32] + mem[_4948 + 64] and 1 > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_4948 + 32] + mem[_4948 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                        revert with 0, 17
                    if (mem[_4948 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4948 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4937 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_4948 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_4948 + 32] + mem[_4948 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4937 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _4937 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_4948 + 32] + mem[_4948 + 64] and x * y > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_4948 + 32] * x * y) + (mem[_4948 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4948 + 32] * x * y) + (mem[_4948 + 64] * x * y):
                    revert with 0, 17
                if (mem[_4948 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4948 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4937 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_4948 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4948] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_4948] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_4948]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18):
                    revert with 0, 17
                if mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_4948 + 32] > !mem[_4948 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_4948 + 32] + mem[_4948 + 64] and 1 > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_4948 + 32] + mem[_4948 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                        revert with 0, 17
                    if (mem[_4948 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4948 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4937 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_4948 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_4948 + 32] + mem[_4948 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4937 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _4937 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_4948 + 32] + mem[_4948 + 64] and x * y > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_4948 + 32] * x * y) + (mem[_4948 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4948 + 32] * x * y) + (mem[_4948 + 64] * x * y):
                    revert with 0, 17
                if (mem[_4948 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4948 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4937 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_4948 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4948] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _4937 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_4948] and x * y > -1 / mem[_4948]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if mem[_4948] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4948] * x * y:
                revert with 0, 17
            if mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                revert with 0, 17
            if mem[_4948 + 32] > !mem[_4948 + 64]:
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_4948 + 32] + mem[_4948 + 64] and 1 > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_4948 + 32] + mem[_4948 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                    revert with 0, 17
                if (mem[_4948 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4948 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4937 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_4948 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_4948 + 32] + mem[_4948 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4937 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_4948 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _4937 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_4948 + 32] + mem[_4948 + 64] and z * a > -1 / mem[_4948 + 32] + mem[_4948 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if (mem[_4948 + 32] * z * a) + (mem[_4948 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_4948 + 32] * z * a) + (mem[_4948 + 64] * z * a):
                revert with 0, 17
            if (mem[_4948 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_4948 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _4937 = mem[96]
            idx = idx + 1
            s = s + ((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
            t = t + ((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
            u = u + ((mem[_4948 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_4948 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_4948] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            continue 
        return v, u, t, s
    mem[64] = _862 + (32 * ('cd', 36).length) + 1760
    mem[_862 + (32 * ('cd', 36).length) + 1472] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1504] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1536] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1568] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1600] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1632] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1664] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1696] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1728] = 0
    mem[var84002] = var84001
    if not var84003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5337 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _5344 = mem[_5337]
            _5345 = mem[_5337 + 32]
            _5346 = mem[_5337 + 64]
            _5349 = mem[_5337 + 160]
            require mem[_5337 + 160] == bool(mem[_5337 + 160])
            _5369 = mem[_5337 + 192]
            require mem[_5337 + 192] == bool(mem[_5337 + 192])
            require mem[_5337 + 224] == bool(mem[_5337 + 224])
            _5395 = mem[_5337 + 256]
            require mem[_5337 + 256] == bool(mem[_5337 + 256])
            require mem[_5337 + 288] == bool(mem[_5337 + 288])
            if idx >= mem[_862]:
                revert with 0, 50
            _5404 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _5406 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _5408 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _5411 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _5415 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _5420 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            mem[mem[(32 * idx) + _862 + 32] + 192] = bool(mem[_5337 + 288])
            mem[_5420 + 160] = bool(_5395)
            mem[_5415 + 128] = bool(_5369)
            mem[_5411 + 96] = bool(_5349)
            mem[_5408 + 64] = _5346
            mem[_5406 + 32] = _5345
            mem[_5404] = _5344
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _5644 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _5644:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5655 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_5655 + 224] == mem[_5655 + 251 len 5]
            require mem[_5655 + 256] == bool(mem[_5655 + 256])
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_5655] and 1 > -1 / mem[_5655]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_5655] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_5655]:
                    revert with 0, 17
                if mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_5655 + 32] > !mem[_5655 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_5655 + 32] + mem[_5655 + 64] and 1 > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_5655 + 32] + mem[_5655 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                        revert with 0, 17
                    if (mem[_5655 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5655 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5644 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_5655 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_5655 + 32] + mem[_5655 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5644 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _5644 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_5655 + 32] + mem[_5655 + 64] and x * y > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_5655 + 32] * x * y) + (mem[_5655 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_5655 + 32] * x * y) + (mem[_5655 + 64] * x * y):
                    revert with 0, 17
                if (mem[_5655 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5655 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5644 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_5655 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5655] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_5655] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_5655]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18):
                    revert with 0, 17
                if mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_5655 + 32] > !mem[_5655 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_5655 + 32] + mem[_5655 + 64] and 1 > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_5655 + 32] + mem[_5655 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                        revert with 0, 17
                    if (mem[_5655 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5655 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5644 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_5655 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                    if mem[_5655 + 32] + mem[_5655 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5644 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _862 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _5644 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_5655 + 32] + mem[_5655 + 64] and x * y > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_5655 + 32] * x * y) + (mem[_5655 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_5655 + 32] * x * y) + (mem[_5655 + 64] * x * y):
                    revert with 0, 17
                if (mem[_5655 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5655 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5644 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_5655 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5655] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _5644 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_5655] and x * y > -1 / mem[_5655]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if mem[_5655] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_5655] * x * y:
                revert with 0, 17
            if mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                revert with 0, 17
            if mem[_5655 + 32] > !mem[_5655 + 64]:
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_5655 + 32] + mem[_5655 + 64] and 1 > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_5655 + 32] + mem[_5655 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                    revert with 0, 17
                if (mem[_5655 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5655 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5644 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_5655 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32)):
                if mem[_5655 + 32] + mem[_5655 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if (mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5644 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                t = t + ((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                u = u + ((mem[_5655 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _862 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _5644 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_5655 + 32] + mem[_5655 + 64] and z * a > -1 / mem[_5655 + 32] + mem[_5655 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                revert with 0, 50
            if (mem[_5655 + 32] * z * a) + (mem[_5655 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_5655 + 32] * z * a) + (mem[_5655 + 64] * z * a):
                revert with 0, 17
            if (mem[_5655 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_5655 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_862]:
                revert with 0, 50
            if (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _5644 = mem[96]
            idx = idx + 1
            s = s + ((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
            t = t + ((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
            u = u + ((mem[_5655 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_5655 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_5655] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
            continue 
        return v, u, t, s
    mem[64] = _862 + (32 * ('cd', 36).length) + 2048
    mem[_862 + (32 * ('cd', 36).length) + 1760] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1792] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1824] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1856] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1888] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1920] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1952] = 0
    mem[_862 + (32 * ('cd', 36).length) + 1984] = 0
    mem[_862 + (32 * ('cd', 36).length) + 2016] = 0
    mem[var88002] = var88001
    if var88003 - 1:
        # nil
    else:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6044 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _6051 = mem[_6044]
            _6052 = mem[_6044 + 32]
            _6053 = mem[_6044 + 64]
            _6056 = mem[_6044 + 160]
            require mem[_6044 + 160] == bool(mem[_6044 + 160])
            _6076 = mem[_6044 + 192]
            require mem[_6044 + 192] == bool(mem[_6044 + 192])
            require mem[_6044 + 224] == bool(mem[_6044 + 224])
            _6102 = mem[_6044 + 256]
            require mem[_6044 + 256] == bool(mem[_6044 + 256])
            require mem[_6044 + 288] == bool(mem[_6044 + 288])
            if idx >= mem[_862]:
                revert with 0, 50
            _6111 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _6113 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _6115 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _6118 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _6122 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            _6127 = mem[(32 * idx) + _862 + 32]
            if idx >= mem[_862]:
                revert with 0, 50
            mem[mem[(32 * idx) + _862 + 32] + 192] = bool(mem[_6044 + 288])
            mem[_6127 + 160] = bool(_6102)
            mem[_6122 + 128] = bool(_6076)
            mem[_6118 + 96] = bool(_6056)
            mem[_6115 + 64] = _6053
            mem[_6113 + 32] = _6052
            mem[_6111] = _6051
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _6351 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _6351:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6362 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_6362 + 224] == mem[_6362 + 251 len 5]
            require mem[_6362 + 256] == bool(mem[_6362 + 256])
            if idx >= mem[_862]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                if mem[_6362] and 1 > -1 / mem[_6362]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                    revert with 0, 50
                if mem[_6362] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_6362]:
                    revert with 0, 17
                if mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                    revert with 0, 17
                if mem[_6362 + 32] > !mem[_6362 + 64]:
                    revert with 0, 17
                if idx >= mem[_862]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                    if mem[_6362 + 32] + mem[_6362 + 64] and 1 > -1 / mem[_6362 + 32] + mem[_6362 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_6362 + 32] + mem[_6362 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_6362 + 32] + mem[_6362 + 64]:
                        revert with 0, 17
                    if (mem[_6362 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_6362 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _6351 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_6362 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
                if not bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32):
                    # nil
                else:
                    if mem[_6362 + 32] + mem[_6362 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_6362 + 32] + mem[_6362 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if (mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if (mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _6351 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                    t = t + ((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                    u = u + ((mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_6362] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                    continue 
            else:
                if not bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32):
                    # nil
                else:
                    if mem[_6362] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_6362]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                        revert with 0, 50
                    if mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18):
                        revert with 0, 17
                    if mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -500000000000000001:
                        revert with 0, 17
                    if mem[_6362 + 32] > !mem[_6362 + 64]:
                        revert with 0, 17
                    if idx >= mem[_862]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _862 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _862 + 32]] + 18:
                        if mem[_6362 + 32] + mem[_6362 + 64] and 1 > -1 / mem[_6362 + 32] + mem[_6362 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                            revert with 0, 50
                        if mem[_6362 + 32] + mem[_6362 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / mem[_6362 + 32] + mem[_6362 + 64]:
                            revert with 0, 17
                        if (mem[_6362 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_6362 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_862]:
                            revert with 0, 50
                        if (mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_862]:
                            revert with 0, 50
                        if (mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _6351 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                        t = t + ((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                        u = u + ((mem[_6362 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                        continue 
                    if not bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _862 + 32]] + 18 < 32):
                        # nil
                    else:
                        if mem[_6362 + 32] + mem[_6362 + 64] and 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) > -1 / mem[_6362 + 32] + mem[_6362 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 97]:
                            revert with 0, 50
                        if (mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129] > -1 / (mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_862]:
                            revert with 0, 50
                        if (mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 64] > -1 / (mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_862]:
                            revert with 0, 50
                        if (mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _862 + 32] + 32] > -1 / (mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _6351 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 64] / 10000)
                        t = t + ((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _862 + 32] + 32] / 10000)
                        u = u + ((mem[_6362 + 32] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + (mem[_6362 + 64] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_6362] * 10^(-mem[mem[(32 * idx) + _862 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 129]) + 5 * 10^17 / 10^18)
                        continue 
        return v, u, t, s
}

function sub_d4c40c0d(?) payable {
    require calldata.size - 4 >= 128
    require cd[4] == address(cd[4])
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 36).length) + 97 < 96 or ceil32(32 * ('cd', 36).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 36).length
    require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
    idx = 0
    s = cd[36] + 36
    t = 128
    while idx < ('cd', 36).length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[ceil32(32 * ('cd', 36).length) + 97] = 0
    mem[ceil32(32 * ('cd', 36).length) + 129] = 0
    mem[ceil32(32 * ('cd', 36).length) + 161] = 0
    mem[ceil32(32 * ('cd', 36).length) + 193] = 0
    mem[ceil32(32 * ('cd', 36).length) + 225] = 0
    mem[ceil32(32 * ('cd', 36).length) + 257] = 0
    mem[ceil32(32 * ('cd', 36).length) + 289] = 0
    require ext_code.size(sub_238f9b7aAddress)
    staticcall sub_238f9b7aAddress.getPriceOracle() with:
            gas gas_remaining wei
    mem[ceil32(32 * ('cd', 36).length) + 321] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321] = 0x9d23d9f200000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 325] = 32
    mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 357] = ('cd', 36).length
    idx = 0
    s = 128
    t = ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 389
    while idx < ('cd', 36).length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getAssetsPrices(address[] rg1) with:
            gas gas_remaining wei
           args Array(len=('cd', 36).length, data=mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 389 len 32 * ('cd', 36).length])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321
    require return_data.size >= 32
    _635 = mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321 len 4], 0
    require mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321 len 4], 0 <= test266151307()
    require ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + return_data.size + 321 > ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321 len 4], 0 + 352
    _636 = mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321 len 4], 0 + 321]
    if mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321 len 4], 0 + 321] > test266151307():
        revert with 0, 65
    if ceil32(32 * mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321 len 4], 0 + 321]) + 1 < 0 or ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321 len 4], 0 + 321]) + 322 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + 321 len 4], 0 + 321]) + 322
    mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321] = _636
    require _635 + (32 * _636) + 32 <= return_data.size
    mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353 len 32 * _636] = mem[ceil32(32 * ('cd', 36).length) + ceil32(return_data.size) + _635 + 353 len 32 * _636]
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    _942 = mem[64]
    mem[mem[64]] = ('cd', 36).length
    mem[64] = mem[64] + (32 * ('cd', 36).length) + 32
    if not ('cd', 36).length:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1252 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1257 = mem[_1252]
            _1258 = mem[_1252 + 32]
            _1259 = mem[_1252 + 64]
            _1262 = mem[_1252 + 160]
            require mem[_1252 + 160] == bool(mem[_1252 + 160])
            _1278 = mem[_1252 + 192]
            require mem[_1252 + 192] == bool(mem[_1252 + 192])
            require mem[_1252 + 224] == bool(mem[_1252 + 224])
            _1303 = mem[_1252 + 256]
            require mem[_1252 + 256] == bool(mem[_1252 + 256])
            require mem[_1252 + 288] == bool(mem[_1252 + 288])
            if idx >= mem[_942]:
                revert with 0, 50
            _1317 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _1319 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _1321 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _1323 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _1326 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _1333 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            mem[mem[(32 * idx) + _942 + 32] + 192] = bool(mem[_1252 + 288])
            mem[_1333 + 160] = bool(_1303)
            mem[_1326 + 128] = bool(_1278)
            mem[_1323 + 96] = bool(_1262)
            mem[_1321 + 64] = _1259
            mem[_1319 + 32] = _1258
            mem[_1317] = _1257
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _1542 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _1542:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1549 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_1549 + 224] == mem[_1549 + 251 len 5]
            require mem[_1549 + 256] == bool(mem[_1549 + 256])
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_1549] and 1 > -1 / mem[_1549]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_1549] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_1549]:
                    revert with 0, 17
                if mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_1549 + 32] > !mem[_1549 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_1549 + 32] + mem[_1549 + 64] and 1 > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_1549 + 32] + mem[_1549 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                        revert with 0, 17
                    if (mem[_1549 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_1549 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _1542 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_1549 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_1549 + 32] + mem[_1549 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _1542 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _1542 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_1549 + 32] + mem[_1549 + 64] and x * y > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_1549 + 32] * x * y) + (mem[_1549 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_1549 + 32] * x * y) + (mem[_1549 + 64] * x * y):
                    revert with 0, 17
                if (mem[_1549 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_1549 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _1542 = mem[96]
                idx = idx + 1
                s = s + ((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_1549 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_1549] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_1549] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_1549]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18):
                    revert with 0, 17
                if mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_1549 + 32] > !mem[_1549 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_1549 + 32] + mem[_1549 + 64] and 1 > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_1549 + 32] + mem[_1549 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                        revert with 0, 17
                    if (mem[_1549 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_1549 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _1542 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_1549 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_1549 + 32] + mem[_1549 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _1542 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _1542 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_1549 + 32] + mem[_1549 + 64] and x * y > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_1549 + 32] * x * y) + (mem[_1549 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_1549 + 32] * x * y) + (mem[_1549 + 64] * x * y):
                    revert with 0, 17
                if (mem[_1549 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_1549 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _1542 = mem[96]
                idx = idx + 1
                s = s + ((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_1549 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_1549] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _1542 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_1549] and x * y > -1 / mem[_1549]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if mem[_1549] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_1549] * x * y:
                revert with 0, 17
            if mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                revert with 0, 17
            if mem[_1549 + 32] > !mem[_1549 + 64]:
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_1549 + 32] + mem[_1549 + 64] and 1 > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_1549 + 32] + mem[_1549 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                    revert with 0, 17
                if (mem[_1549 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_1549 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _1542 = mem[96]
                idx = idx + 1
                s = s + ((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_1549 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_1549 + 32] + mem[_1549 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _1542 = mem[96]
                idx = idx + 1
                s = s + ((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_1549 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _1542 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_1549 + 32] + mem[_1549 + 64] and z * a > -1 / mem[_1549 + 32] + mem[_1549 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if (mem[_1549 + 32] * z * a) + (mem[_1549 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_1549 + 32] * z * a) + (mem[_1549 + 64] * z * a):
                revert with 0, 17
            if (mem[_1549 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_1549 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _1542 = mem[96]
            idx = idx + 1
            s = s + ((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
            t = t + ((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
            u = u + ((mem[_1549 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_1549 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_1549] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            continue 
        mem[ceil32(32 * ('cd', 36).length) + 225] = v
        if u > !cd[100]:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 257] = u + cd[100]
        if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 161] = 10000 * t / v
        if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 193] = 10000 * s / v
        if u + cd[100] > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 129] = (10000 * u) + (10000 * cd[100]) / v
        if 10^18 < cd[68]:
            revert with 0, 17
        if v and -cd[68] + 10^18 > -1 / v:
            revert with 0, 17
        if (10^18 * v) - (cd[68] * v) > -500000000000000001:
            revert with 0, 17
        if s < (10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 97] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64]] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64] + 32] = (10000 * u) + (10000 * cd[100]) / v
        mem[mem[64] + 64] = 10000 * t / v
        mem[mem[64] + 96] = 10000 * s / v
        mem[mem[64] + 128] = v
        mem[mem[64] + 160] = u + cd[100]
        mem[mem[64] + 192] = mem[ceil32(32 * ('cd', 36).length) + 289]
        return u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18), 
               (10000 * u) + (10000 * cd[100]) / v,
               10000 * t / v,
               10000 * s / v,
               v,
               u + cd[100],
               mem[mem[64] + 192]
    mem[64] = _942 + (32 * ('cd', 36).length) + 320
    mem[_942 + (32 * ('cd', 36).length) + 32] = 0
    mem[_942 + (32 * ('cd', 36).length) + 64] = 0
    mem[_942 + (32 * ('cd', 36).length) + 96] = 0
    mem[_942 + (32 * ('cd', 36).length) + 128] = 0
    mem[_942 + (32 * ('cd', 36).length) + 160] = 0
    mem[_942 + (32 * ('cd', 36).length) + 192] = 0
    mem[_942 + (32 * ('cd', 36).length) + 224] = 0
    mem[_942 + (32 * ('cd', 36).length) + 256] = 0
    mem[_942 + (32 * ('cd', 36).length) + 288] = 0
    mem[var67002] = var67001
    if not var67003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1972 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _1978 = mem[_1972]
            _1979 = mem[_1972 + 32]
            _1980 = mem[_1972 + 64]
            _1983 = mem[_1972 + 160]
            require mem[_1972 + 160] == bool(mem[_1972 + 160])
            _2004 = mem[_1972 + 192]
            require mem[_1972 + 192] == bool(mem[_1972 + 192])
            require mem[_1972 + 224] == bool(mem[_1972 + 224])
            _2029 = mem[_1972 + 256]
            require mem[_1972 + 256] == bool(mem[_1972 + 256])
            require mem[_1972 + 288] == bool(mem[_1972 + 288])
            if idx >= mem[_942]:
                revert with 0, 50
            _2042 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2044 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2046 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2049 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2055 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2060 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            mem[mem[(32 * idx) + _942 + 32] + 192] = bool(mem[_1972 + 288])
            mem[_2060 + 160] = bool(_2029)
            mem[_2055 + 128] = bool(_2004)
            mem[_2049 + 96] = bool(_1983)
            mem[_2046 + 64] = _1980
            mem[_2044 + 32] = _1979
            mem[_2042] = _1978
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _2306 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _2306:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2315 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_2315 + 224] == mem[_2315 + 251 len 5]
            require mem[_2315 + 256] == bool(mem[_2315 + 256])
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_2315] and 1 > -1 / mem[_2315]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_2315] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_2315]:
                    revert with 0, 17
                if mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_2315 + 32] > !mem[_2315 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_2315 + 32] + mem[_2315 + 64] and 1 > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_2315 + 32] + mem[_2315 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                        revert with 0, 17
                    if (mem[_2315 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2315 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2306 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_2315 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_2315 + 32] + mem[_2315 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2306 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _2306 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_2315 + 32] + mem[_2315 + 64] and x * y > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_2315 + 32] * x * y) + (mem[_2315 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_2315 + 32] * x * y) + (mem[_2315 + 64] * x * y):
                    revert with 0, 17
                if (mem[_2315 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2315 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2306 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_2315 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2315] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_2315] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_2315]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18):
                    revert with 0, 17
                if mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_2315 + 32] > !mem[_2315 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_2315 + 32] + mem[_2315 + 64] and 1 > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_2315 + 32] + mem[_2315 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                        revert with 0, 17
                    if (mem[_2315 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2315 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2306 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_2315 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_2315 + 32] + mem[_2315 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2306 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _2306 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_2315 + 32] + mem[_2315 + 64] and x * y > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_2315 + 32] * x * y) + (mem[_2315 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_2315 + 32] * x * y) + (mem[_2315 + 64] * x * y):
                    revert with 0, 17
                if (mem[_2315 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2315 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2306 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_2315 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2315] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _2306 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_2315] and x * y > -1 / mem[_2315]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if mem[_2315] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_2315] * x * y:
                revert with 0, 17
            if mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                revert with 0, 17
            if mem[_2315 + 32] > !mem[_2315 + 64]:
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_2315 + 32] + mem[_2315 + 64] and 1 > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_2315 + 32] + mem[_2315 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                    revert with 0, 17
                if (mem[_2315 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2315 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2306 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_2315 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_2315 + 32] + mem[_2315 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2306 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_2315 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _2306 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_2315 + 32] + mem[_2315 + 64] and z * a > -1 / mem[_2315 + 32] + mem[_2315 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if (mem[_2315 + 32] * z * a) + (mem[_2315 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_2315 + 32] * z * a) + (mem[_2315 + 64] * z * a):
                revert with 0, 17
            if (mem[_2315 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_2315 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _2306 = mem[96]
            idx = idx + 1
            s = s + ((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
            t = t + ((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
            u = u + ((mem[_2315 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_2315 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_2315] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            continue 
        mem[ceil32(32 * ('cd', 36).length) + 225] = v
        if u > !cd[100]:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 257] = u + cd[100]
        if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 161] = 10000 * t / v
        if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 193] = 10000 * s / v
        if u + cd[100] > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 129] = (10000 * u) + (10000 * cd[100]) / v
        if 10^18 < cd[68]:
            revert with 0, 17
        if v and -cd[68] + 10^18 > -1 / v:
            revert with 0, 17
        if (10^18 * v) - (cd[68] * v) > -500000000000000001:
            revert with 0, 17
        if s < (10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 97] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64]] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64] + 32] = (10000 * u) + (10000 * cd[100]) / v
        mem[mem[64] + 64] = 10000 * t / v
        mem[mem[64] + 96] = 10000 * s / v
        mem[mem[64] + 128] = v
        mem[mem[64] + 160] = u + cd[100]
        mem[mem[64] + 192] = mem[ceil32(32 * ('cd', 36).length) + 289]
        return u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18), 
               (10000 * u) + (10000 * cd[100]) / v,
               10000 * t / v,
               10000 * s / v,
               v,
               u + cd[100],
               mem[mem[64] + 192]
    mem[64] = _942 + (32 * ('cd', 36).length) + 608
    mem[_942 + (32 * ('cd', 36).length) + 320] = 0
    mem[_942 + (32 * ('cd', 36).length) + 352] = 0
    mem[_942 + (32 * ('cd', 36).length) + 384] = 0
    mem[_942 + (32 * ('cd', 36).length) + 416] = 0
    mem[_942 + (32 * ('cd', 36).length) + 448] = 0
    mem[_942 + (32 * ('cd', 36).length) + 480] = 0
    mem[_942 + (32 * ('cd', 36).length) + 512] = 0
    mem[_942 + (32 * ('cd', 36).length) + 544] = 0
    mem[_942 + (32 * ('cd', 36).length) + 576] = 0
    mem[var71002] = var71001
    if not var71003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2744 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _2750 = mem[_2744]
            _2751 = mem[_2744 + 32]
            _2752 = mem[_2744 + 64]
            _2755 = mem[_2744 + 160]
            require mem[_2744 + 160] == bool(mem[_2744 + 160])
            _2773 = mem[_2744 + 192]
            require mem[_2744 + 192] == bool(mem[_2744 + 192])
            require mem[_2744 + 224] == bool(mem[_2744 + 224])
            _2801 = mem[_2744 + 256]
            require mem[_2744 + 256] == bool(mem[_2744 + 256])
            require mem[_2744 + 288] == bool(mem[_2744 + 288])
            if idx >= mem[_942]:
                revert with 0, 50
            _2814 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2816 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2818 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2821 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2827 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _2832 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            mem[mem[(32 * idx) + _942 + 32] + 192] = bool(mem[_2744 + 288])
            mem[_2832 + 160] = bool(_2801)
            mem[_2827 + 128] = bool(_2773)
            mem[_2821 + 96] = bool(_2755)
            mem[_2818 + 64] = _2752
            mem[_2816 + 32] = _2751
            mem[_2814] = _2750
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _3078 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _3078:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3087 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_3087 + 224] == mem[_3087 + 251 len 5]
            require mem[_3087 + 256] == bool(mem[_3087 + 256])
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_3087] and 1 > -1 / mem[_3087]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_3087] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3087]:
                    revert with 0, 17
                if mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_3087 + 32] > !mem[_3087 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_3087 + 32] + mem[_3087 + 64] and 1 > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_3087 + 32] + mem[_3087 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                        revert with 0, 17
                    if (mem[_3087 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3087 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3078 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_3087 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_3087 + 32] + mem[_3087 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3078 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _3078 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_3087 + 32] + mem[_3087 + 64] and x * y > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_3087 + 32] * x * y) + (mem[_3087 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3087 + 32] * x * y) + (mem[_3087 + 64] * x * y):
                    revert with 0, 17
                if (mem[_3087 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3087 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3078 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_3087 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3087] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_3087] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_3087]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18):
                    revert with 0, 17
                if mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_3087 + 32] > !mem[_3087 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_3087 + 32] + mem[_3087 + 64] and 1 > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_3087 + 32] + mem[_3087 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                        revert with 0, 17
                    if (mem[_3087 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3087 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3078 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_3087 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_3087 + 32] + mem[_3087 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3078 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _3078 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_3087 + 32] + mem[_3087 + 64] and x * y > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_3087 + 32] * x * y) + (mem[_3087 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3087 + 32] * x * y) + (mem[_3087 + 64] * x * y):
                    revert with 0, 17
                if (mem[_3087 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3087 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3078 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_3087 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3087] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _3078 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_3087] and x * y > -1 / mem[_3087]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if mem[_3087] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3087] * x * y:
                revert with 0, 17
            if mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                revert with 0, 17
            if mem[_3087 + 32] > !mem[_3087 + 64]:
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_3087 + 32] + mem[_3087 + 64] and 1 > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_3087 + 32] + mem[_3087 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                    revert with 0, 17
                if (mem[_3087 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3087 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3078 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_3087 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_3087 + 32] + mem[_3087 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3078 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_3087 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _3078 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_3087 + 32] + mem[_3087 + 64] and z * a > -1 / mem[_3087 + 32] + mem[_3087 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if (mem[_3087 + 32] * z * a) + (mem[_3087 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3087 + 32] * z * a) + (mem[_3087 + 64] * z * a):
                revert with 0, 17
            if (mem[_3087 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_3087 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _3078 = mem[96]
            idx = idx + 1
            s = s + ((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
            t = t + ((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
            u = u + ((mem[_3087 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3087 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_3087] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            continue 
        mem[ceil32(32 * ('cd', 36).length) + 225] = v
        if u > !cd[100]:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 257] = u + cd[100]
        if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 161] = 10000 * t / v
        if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 193] = 10000 * s / v
        if u + cd[100] > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 129] = (10000 * u) + (10000 * cd[100]) / v
        if 10^18 < cd[68]:
            revert with 0, 17
        if v and -cd[68] + 10^18 > -1 / v:
            revert with 0, 17
        if (10^18 * v) - (cd[68] * v) > -500000000000000001:
            revert with 0, 17
        if s < (10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 97] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64]] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64] + 32] = (10000 * u) + (10000 * cd[100]) / v
        mem[mem[64] + 64] = 10000 * t / v
        mem[mem[64] + 96] = 10000 * s / v
        mem[mem[64] + 128] = v
        mem[mem[64] + 160] = u + cd[100]
        mem[mem[64] + 192] = mem[ceil32(32 * ('cd', 36).length) + 289]
        return u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18), 
               (10000 * u) + (10000 * cd[100]) / v,
               10000 * t / v,
               10000 * s / v,
               v,
               u + cd[100],
               mem[mem[64] + 192]
    mem[64] = _942 + (32 * ('cd', 36).length) + 896
    mem[_942 + (32 * ('cd', 36).length) + 608] = 0
    mem[_942 + (32 * ('cd', 36).length) + 640] = 0
    mem[_942 + (32 * ('cd', 36).length) + 672] = 0
    mem[_942 + (32 * ('cd', 36).length) + 704] = 0
    mem[_942 + (32 * ('cd', 36).length) + 736] = 0
    mem[_942 + (32 * ('cd', 36).length) + 768] = 0
    mem[_942 + (32 * ('cd', 36).length) + 800] = 0
    mem[_942 + (32 * ('cd', 36).length) + 832] = 0
    mem[_942 + (32 * ('cd', 36).length) + 864] = 0
    mem[var75002] = var75001
    if not var75003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3516 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _3522 = mem[_3516]
            _3523 = mem[_3516 + 32]
            _3524 = mem[_3516 + 64]
            _3527 = mem[_3516 + 160]
            require mem[_3516 + 160] == bool(mem[_3516 + 160])
            _3545 = mem[_3516 + 192]
            require mem[_3516 + 192] == bool(mem[_3516 + 192])
            require mem[_3516 + 224] == bool(mem[_3516 + 224])
            _3573 = mem[_3516 + 256]
            require mem[_3516 + 256] == bool(mem[_3516 + 256])
            require mem[_3516 + 288] == bool(mem[_3516 + 288])
            if idx >= mem[_942]:
                revert with 0, 50
            _3586 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _3588 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _3590 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _3593 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _3599 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _3604 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            mem[mem[(32 * idx) + _942 + 32] + 192] = bool(mem[_3516 + 288])
            mem[_3604 + 160] = bool(_3573)
            mem[_3599 + 128] = bool(_3545)
            mem[_3593 + 96] = bool(_3527)
            mem[_3590 + 64] = _3524
            mem[_3588 + 32] = _3523
            mem[_3586] = _3522
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _3850 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _3850:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3859 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_3859 + 224] == mem[_3859 + 251 len 5]
            require mem[_3859 + 256] == bool(mem[_3859 + 256])
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_3859] and 1 > -1 / mem[_3859]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_3859] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3859]:
                    revert with 0, 17
                if mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_3859 + 32] > !mem[_3859 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_3859 + 32] + mem[_3859 + 64] and 1 > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_3859 + 32] + mem[_3859 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                        revert with 0, 17
                    if (mem[_3859 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3859 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3850 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_3859 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_3859 + 32] + mem[_3859 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3850 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _3850 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_3859 + 32] + mem[_3859 + 64] and x * y > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_3859 + 32] * x * y) + (mem[_3859 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3859 + 32] * x * y) + (mem[_3859 + 64] * x * y):
                    revert with 0, 17
                if (mem[_3859 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3859 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3850 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_3859 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3859] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_3859] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_3859]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18):
                    revert with 0, 17
                if mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_3859 + 32] > !mem[_3859 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_3859 + 32] + mem[_3859 + 64] and 1 > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_3859 + 32] + mem[_3859 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                        revert with 0, 17
                    if (mem[_3859 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3859 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3850 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_3859 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_3859 + 32] + mem[_3859 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _3850 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _3850 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_3859 + 32] + mem[_3859 + 64] and x * y > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_3859 + 32] * x * y) + (mem[_3859 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3859 + 32] * x * y) + (mem[_3859 + 64] * x * y):
                    revert with 0, 17
                if (mem[_3859 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3859 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3850 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_3859 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3859] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _3850 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_3859] and x * y > -1 / mem[_3859]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if mem[_3859] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3859] * x * y:
                revert with 0, 17
            if mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                revert with 0, 17
            if mem[_3859 + 32] > !mem[_3859 + 64]:
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_3859 + 32] + mem[_3859 + 64] and 1 > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_3859 + 32] + mem[_3859 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                    revert with 0, 17
                if (mem[_3859 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3859 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3850 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_3859 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_3859 + 32] + mem[_3859 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _3850 = mem[96]
                idx = idx + 1
                s = s + ((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_3859 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _3850 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_3859 + 32] + mem[_3859 + 64] and z * a > -1 / mem[_3859 + 32] + mem[_3859 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if (mem[_3859 + 32] * z * a) + (mem[_3859 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_3859 + 32] * z * a) + (mem[_3859 + 64] * z * a):
                revert with 0, 17
            if (mem[_3859 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_3859 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _3850 = mem[96]
            idx = idx + 1
            s = s + ((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
            t = t + ((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
            u = u + ((mem[_3859 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_3859 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_3859] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            continue 
        mem[ceil32(32 * ('cd', 36).length) + 225] = v
        if u > !cd[100]:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 257] = u + cd[100]
        if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 161] = 10000 * t / v
        if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 193] = 10000 * s / v
        if u + cd[100] > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 129] = (10000 * u) + (10000 * cd[100]) / v
        if 10^18 < cd[68]:
            revert with 0, 17
        if v and -cd[68] + 10^18 > -1 / v:
            revert with 0, 17
        if (10^18 * v) - (cd[68] * v) > -500000000000000001:
            revert with 0, 17
        if s < (10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 97] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64]] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64] + 32] = (10000 * u) + (10000 * cd[100]) / v
        mem[mem[64] + 64] = 10000 * t / v
        mem[mem[64] + 96] = 10000 * s / v
        mem[mem[64] + 128] = v
        mem[mem[64] + 160] = u + cd[100]
        mem[mem[64] + 192] = mem[ceil32(32 * ('cd', 36).length) + 289]
        return u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18), 
               (10000 * u) + (10000 * cd[100]) / v,
               10000 * t / v,
               10000 * s / v,
               v,
               u + cd[100],
               mem[mem[64] + 192]
    mem[64] = _942 + (32 * ('cd', 36).length) + 1184
    mem[_942 + (32 * ('cd', 36).length) + 896] = 0
    mem[_942 + (32 * ('cd', 36).length) + 928] = 0
    mem[_942 + (32 * ('cd', 36).length) + 960] = 0
    mem[_942 + (32 * ('cd', 36).length) + 992] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1024] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1056] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1088] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1120] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1152] = 0
    mem[var79002] = var79001
    if not var79003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4288 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _4294 = mem[_4288]
            _4295 = mem[_4288 + 32]
            _4296 = mem[_4288 + 64]
            _4299 = mem[_4288 + 160]
            require mem[_4288 + 160] == bool(mem[_4288 + 160])
            _4317 = mem[_4288 + 192]
            require mem[_4288 + 192] == bool(mem[_4288 + 192])
            require mem[_4288 + 224] == bool(mem[_4288 + 224])
            _4345 = mem[_4288 + 256]
            require mem[_4288 + 256] == bool(mem[_4288 + 256])
            require mem[_4288 + 288] == bool(mem[_4288 + 288])
            if idx >= mem[_942]:
                revert with 0, 50
            _4358 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _4360 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _4362 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _4365 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _4371 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _4376 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            mem[mem[(32 * idx) + _942 + 32] + 192] = bool(mem[_4288 + 288])
            mem[_4376 + 160] = bool(_4345)
            mem[_4371 + 128] = bool(_4317)
            mem[_4365 + 96] = bool(_4299)
            mem[_4362 + 64] = _4296
            mem[_4360 + 32] = _4295
            mem[_4358] = _4294
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _4622 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _4622:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4631 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_4631 + 224] == mem[_4631 + 251 len 5]
            require mem[_4631 + 256] == bool(mem[_4631 + 256])
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_4631] and 1 > -1 / mem[_4631]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_4631] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_4631]:
                    revert with 0, 17
                if mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_4631 + 32] > !mem[_4631 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_4631 + 32] + mem[_4631 + 64] and 1 > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_4631 + 32] + mem[_4631 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                        revert with 0, 17
                    if (mem[_4631 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4631 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4622 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_4631 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_4631 + 32] + mem[_4631 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4622 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _4622 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_4631 + 32] + mem[_4631 + 64] and x * y > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_4631 + 32] * x * y) + (mem[_4631 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_4631 + 32] * x * y) + (mem[_4631 + 64] * x * y):
                    revert with 0, 17
                if (mem[_4631 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4631 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4622 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_4631 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4631] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_4631] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_4631]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18):
                    revert with 0, 17
                if mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_4631 + 32] > !mem[_4631 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_4631 + 32] + mem[_4631 + 64] and 1 > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_4631 + 32] + mem[_4631 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                        revert with 0, 17
                    if (mem[_4631 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4631 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4622 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_4631 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_4631 + 32] + mem[_4631 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4622 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _4622 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_4631 + 32] + mem[_4631 + 64] and x * y > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_4631 + 32] * x * y) + (mem[_4631 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_4631 + 32] * x * y) + (mem[_4631 + 64] * x * y):
                    revert with 0, 17
                if (mem[_4631 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4631 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4622 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_4631 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4631] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _4622 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_4631] and x * y > -1 / mem[_4631]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if mem[_4631] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_4631] * x * y:
                revert with 0, 17
            if mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                revert with 0, 17
            if mem[_4631 + 32] > !mem[_4631 + 64]:
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_4631 + 32] + mem[_4631 + 64] and 1 > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_4631 + 32] + mem[_4631 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                    revert with 0, 17
                if (mem[_4631 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4631 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4622 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_4631 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_4631 + 32] + mem[_4631 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4622 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_4631 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _4622 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_4631 + 32] + mem[_4631 + 64] and z * a > -1 / mem[_4631 + 32] + mem[_4631 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if (mem[_4631 + 32] * z * a) + (mem[_4631 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_4631 + 32] * z * a) + (mem[_4631 + 64] * z * a):
                revert with 0, 17
            if (mem[_4631 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_4631 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _4622 = mem[96]
            idx = idx + 1
            s = s + ((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
            t = t + ((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
            u = u + ((mem[_4631 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_4631 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_4631] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            continue 
        mem[ceil32(32 * ('cd', 36).length) + 225] = v
        if u > !cd[100]:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 257] = u + cd[100]
        if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 161] = 10000 * t / v
        if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 193] = 10000 * s / v
        if u + cd[100] > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 129] = (10000 * u) + (10000 * cd[100]) / v
        if 10^18 < cd[68]:
            revert with 0, 17
        if v and -cd[68] + 10^18 > -1 / v:
            revert with 0, 17
        if (10^18 * v) - (cd[68] * v) > -500000000000000001:
            revert with 0, 17
        if s < (10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 97] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64]] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64] + 32] = (10000 * u) + (10000 * cd[100]) / v
        mem[mem[64] + 64] = 10000 * t / v
        mem[mem[64] + 96] = 10000 * s / v
        mem[mem[64] + 128] = v
        mem[mem[64] + 160] = u + cd[100]
        mem[mem[64] + 192] = mem[ceil32(32 * ('cd', 36).length) + 289]
        return u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18), 
               (10000 * u) + (10000 * cd[100]) / v,
               10000 * t / v,
               10000 * s / v,
               v,
               u + cd[100],
               mem[mem[64] + 192]
    mem[64] = _942 + (32 * ('cd', 36).length) + 1472
    mem[_942 + (32 * ('cd', 36).length) + 1184] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1216] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1248] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1280] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1312] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1344] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1376] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1408] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1440] = 0
    mem[var83002] = var83001
    if not var83003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5060 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _5066 = mem[_5060]
            _5067 = mem[_5060 + 32]
            _5068 = mem[_5060 + 64]
            _5071 = mem[_5060 + 160]
            require mem[_5060 + 160] == bool(mem[_5060 + 160])
            _5089 = mem[_5060 + 192]
            require mem[_5060 + 192] == bool(mem[_5060 + 192])
            require mem[_5060 + 224] == bool(mem[_5060 + 224])
            _5117 = mem[_5060 + 256]
            require mem[_5060 + 256] == bool(mem[_5060 + 256])
            require mem[_5060 + 288] == bool(mem[_5060 + 288])
            if idx >= mem[_942]:
                revert with 0, 50
            _5130 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5132 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5134 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5137 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5143 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5148 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            mem[mem[(32 * idx) + _942 + 32] + 192] = bool(mem[_5060 + 288])
            mem[_5148 + 160] = bool(_5117)
            mem[_5143 + 128] = bool(_5089)
            mem[_5137 + 96] = bool(_5071)
            mem[_5134 + 64] = _5068
            mem[_5132 + 32] = _5067
            mem[_5130] = _5066
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _5394 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _5394:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5403 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_5403 + 224] == mem[_5403 + 251 len 5]
            require mem[_5403 + 256] == bool(mem[_5403 + 256])
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_5403] and 1 > -1 / mem[_5403]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_5403] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_5403]:
                    revert with 0, 17
                if mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_5403 + 32] > !mem[_5403 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_5403 + 32] + mem[_5403 + 64] and 1 > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_5403 + 32] + mem[_5403 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                        revert with 0, 17
                    if (mem[_5403 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5403 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5394 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_5403 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_5403 + 32] + mem[_5403 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5394 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _5394 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_5403 + 32] + mem[_5403 + 64] and x * y > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_5403 + 32] * x * y) + (mem[_5403 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_5403 + 32] * x * y) + (mem[_5403 + 64] * x * y):
                    revert with 0, 17
                if (mem[_5403 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5403 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5394 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_5403 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5403] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_5403] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_5403]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18):
                    revert with 0, 17
                if mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_5403 + 32] > !mem[_5403 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_5403 + 32] + mem[_5403 + 64] and 1 > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_5403 + 32] + mem[_5403 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                        revert with 0, 17
                    if (mem[_5403 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5403 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5394 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_5403 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_5403 + 32] + mem[_5403 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5394 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _5394 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_5403 + 32] + mem[_5403 + 64] and x * y > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_5403 + 32] * x * y) + (mem[_5403 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_5403 + 32] * x * y) + (mem[_5403 + 64] * x * y):
                    revert with 0, 17
                if (mem[_5403 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5403 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5394 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_5403 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5403] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _5394 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_5403] and x * y > -1 / mem[_5403]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if mem[_5403] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_5403] * x * y:
                revert with 0, 17
            if mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                revert with 0, 17
            if mem[_5403 + 32] > !mem[_5403 + 64]:
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_5403 + 32] + mem[_5403 + 64] and 1 > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_5403 + 32] + mem[_5403 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                    revert with 0, 17
                if (mem[_5403 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5403 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5394 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_5403 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_5403 + 32] + mem[_5403 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5394 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_5403 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _5394 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_5403 + 32] + mem[_5403 + 64] and z * a > -1 / mem[_5403 + 32] + mem[_5403 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if (mem[_5403 + 32] * z * a) + (mem[_5403 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_5403 + 32] * z * a) + (mem[_5403 + 64] * z * a):
                revert with 0, 17
            if (mem[_5403 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_5403 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _5394 = mem[96]
            idx = idx + 1
            s = s + ((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
            t = t + ((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
            u = u + ((mem[_5403 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_5403 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_5403] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            continue 
        mem[ceil32(32 * ('cd', 36).length) + 225] = v
        if u > !cd[100]:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 257] = u + cd[100]
        if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 161] = 10000 * t / v
        if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 193] = 10000 * s / v
        if u + cd[100] > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 129] = (10000 * u) + (10000 * cd[100]) / v
        if 10^18 < cd[68]:
            revert with 0, 17
        if v and -cd[68] + 10^18 > -1 / v:
            revert with 0, 17
        if (10^18 * v) - (cd[68] * v) > -500000000000000001:
            revert with 0, 17
        if s < (10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 97] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64]] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64] + 32] = (10000 * u) + (10000 * cd[100]) / v
        mem[mem[64] + 64] = 10000 * t / v
        mem[mem[64] + 96] = 10000 * s / v
        mem[mem[64] + 128] = v
        mem[mem[64] + 160] = u + cd[100]
        mem[mem[64] + 192] = mem[ceil32(32 * ('cd', 36).length) + 289]
        return u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18), 
               (10000 * u) + (10000 * cd[100]) / v,
               10000 * t / v,
               10000 * s / v,
               v,
               u + cd[100],
               mem[mem[64] + 192]
    mem[64] = _942 + (32 * ('cd', 36).length) + 1760
    mem[_942 + (32 * ('cd', 36).length) + 1472] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1504] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1536] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1568] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1600] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1632] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1664] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1696] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1728] = 0
    mem[var87002] = var87001
    if not var87003 - 1:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5832 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _5838 = mem[_5832]
            _5839 = mem[_5832 + 32]
            _5840 = mem[_5832 + 64]
            _5843 = mem[_5832 + 160]
            require mem[_5832 + 160] == bool(mem[_5832 + 160])
            _5861 = mem[_5832 + 192]
            require mem[_5832 + 192] == bool(mem[_5832 + 192])
            require mem[_5832 + 224] == bool(mem[_5832 + 224])
            _5889 = mem[_5832 + 256]
            require mem[_5832 + 256] == bool(mem[_5832 + 256])
            require mem[_5832 + 288] == bool(mem[_5832 + 288])
            if idx >= mem[_942]:
                revert with 0, 50
            _5902 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5904 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5906 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5909 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5915 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _5920 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            mem[mem[(32 * idx) + _942 + 32] + 192] = bool(mem[_5832 + 288])
            mem[_5920 + 160] = bool(_5889)
            mem[_5915 + 128] = bool(_5861)
            mem[_5909 + 96] = bool(_5843)
            mem[_5906 + 64] = _5840
            mem[_5904 + 32] = _5839
            mem[_5902] = _5838
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _6166 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _6166:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6175 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_6175 + 224] == mem[_6175 + 251 len 5]
            require mem[_6175 + 256] == bool(mem[_6175 + 256])
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_6175] and 1 > -1 / mem[_6175]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_6175] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6175]:
                    revert with 0, 17
                if mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_6175 + 32] > !mem[_6175 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_6175 + 32] + mem[_6175 + 64] and 1 > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_6175 + 32] + mem[_6175 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                        revert with 0, 17
                    if (mem[_6175 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_6175 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _6166 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_6175 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_6175 + 32] + mem[_6175 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _6166 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _6166 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_6175 + 32] + mem[_6175 + 64] and x * y > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_6175 + 32] * x * y) + (mem[_6175 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_6175 + 32] * x * y) + (mem[_6175 + 64] * x * y):
                    revert with 0, 17
                if (mem[_6175 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_6175 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _6166 = mem[96]
                idx = idx + 1
                s = s + ((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_6175 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_6175] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_6175] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_6175]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18):
                    revert with 0, 17
                if mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_6175 + 32] > !mem[_6175 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_6175 + 32] + mem[_6175 + 64] and 1 > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_6175 + 32] + mem[_6175 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                        revert with 0, 17
                    if (mem[_6175 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_6175 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _6166 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_6175 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                    if mem[_6175 + 32] + mem[_6175 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _6166 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _942 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _6166 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_6175 + 32] + mem[_6175 + 64] and x * y > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_6175 + 32] * x * y) + (mem[_6175 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_6175 + 32] * x * y) + (mem[_6175 + 64] * x * y):
                    revert with 0, 17
                if (mem[_6175 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_6175 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _6166 = mem[96]
                idx = idx + 1
                s = s + ((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_6175 + 32] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_6175] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            x = 10
            y = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if x > -1 / x:
                    revert with 0, 17
                _6166 = mem[96]
                if not bool(w):
                    x = x * x
                    y = y
                    w = uint255(w) * 0.5
                    continue 
                x = x * x
                y = x * y
                w = uint255(w) * 0.5
                continue 
            if y > -1 / x:
                revert with 0, 17
            if mem[_6175] and x * y > -1 / mem[_6175]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if mem[_6175] * x * y and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6175] * x * y:
                revert with 0, 17
            if mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                revert with 0, 17
            if mem[_6175 + 32] > !mem[_6175 + 64]:
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_6175 + 32] + mem[_6175 + 64] and 1 > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_6175 + 32] + mem[_6175 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                    revert with 0, 17
                if (mem[_6175 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_6175 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _6166 = mem[96]
                idx = idx + 1
                s = s + ((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_6175 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            if bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32)):
                if mem[_6175 + 32] + mem[_6175 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if (mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                    revert with 0, 17
                if (mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _6166 = mem[96]
                idx = idx + 1
                s = s + ((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                t = t + ((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                u = u + ((mem[_6175 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                continue 
            z = 10
            a = 1
            w = -mem[mem[(32 * idx) + _942 + 32]] + 18
            while w > 1:
                if z > -1 / z:
                    revert with 0, 17
                _6166 = mem[96]
                if not bool(w):
                    z = z * z
                    a = a
                    w = uint255(w) * 0.5
                    continue 
                z = z * z
                a = z * a
                w = uint255(w) * 0.5
                continue 
            if a > -1 / z:
                revert with 0, 17
            if mem[_6175 + 32] + mem[_6175 + 64] and z * a > -1 / mem[_6175 + 32] + mem[_6175 + 64]:
                revert with 0, 17
            if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                revert with 0, 50
            if (mem[_6175 + 32] * z * a) + (mem[_6175 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_6175 + 32] * z * a) + (mem[_6175 + 64] * z * a):
                revert with 0, 17
            if (mem[_6175 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                revert with 0, 17
            if v > !((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if u > !((mem[_6175 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if s > !((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                revert with 0, 17
            if idx >= mem[_942]:
                revert with 0, 50
            if (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                revert with 0, 17
            if t > !((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            _6166 = mem[96]
            idx = idx + 1
            s = s + ((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
            t = t + ((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
            u = u + ((mem[_6175 + 32] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6175 + 64] * z * a * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            v = v + ((mem[_6175] * x * y * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
            continue 
        mem[ceil32(32 * ('cd', 36).length) + 225] = v
        if u > !cd[100]:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 257] = u + cd[100]
        if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 161] = 10000 * t / v
        if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 193] = 10000 * s / v
        if u + cd[100] > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 129] = (10000 * u) + (10000 * cd[100]) / v
        if 10^18 < cd[68]:
            revert with 0, 17
        if v and -cd[68] + 10^18 > -1 / v:
            revert with 0, 17
        if (10^18 * v) - (cd[68] * v) > -500000000000000001:
            revert with 0, 17
        if s < (10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 97] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64]] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64] + 32] = (10000 * u) + (10000 * cd[100]) / v
        mem[mem[64] + 64] = 10000 * t / v
        mem[mem[64] + 96] = 10000 * s / v
        mem[mem[64] + 128] = v
        mem[mem[64] + 160] = u + cd[100]
        mem[mem[64] + 192] = mem[ceil32(32 * ('cd', 36).length) + 289]
        return u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18), 
               (10000 * u) + (10000 * cd[100]) / v,
               10000 * t / v,
               10000 * s / v,
               v,
               u + cd[100],
               mem[mem[64] + 192]
    mem[64] = _942 + (32 * ('cd', 36).length) + 2048
    mem[_942 + (32 * ('cd', 36).length) + 1760] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1792] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1824] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1856] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1888] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1920] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1952] = 0
    mem[_942 + (32 * ('cd', 36).length) + 1984] = 0
    mem[_942 + (32 * ('cd', 36).length) + 2016] = 0
    mem[var91002] = var91001
    if var91003 - 1:
        # nil
    else:
        idx = 0
        while idx < ('cd', 36).length:
            if idx >= mem[96]:
                revert with 0, 50
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                    gas gas_remaining wei
                   args address(mem[(32 * idx) + 128])
            mem[mem[64] len 320] = ext_call.return_data[0 len 320]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6604 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 320
            _6610 = mem[_6604]
            _6611 = mem[_6604 + 32]
            _6612 = mem[_6604 + 64]
            _6615 = mem[_6604 + 160]
            require mem[_6604 + 160] == bool(mem[_6604 + 160])
            _6633 = mem[_6604 + 192]
            require mem[_6604 + 192] == bool(mem[_6604 + 192])
            require mem[_6604 + 224] == bool(mem[_6604 + 224])
            _6661 = mem[_6604 + 256]
            require mem[_6604 + 256] == bool(mem[_6604 + 256])
            require mem[_6604 + 288] == bool(mem[_6604 + 288])
            if idx >= mem[_942]:
                revert with 0, 50
            _6674 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _6676 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _6678 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _6681 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _6687 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            _6692 = mem[(32 * idx) + _942 + 32]
            if idx >= mem[_942]:
                revert with 0, 50
            mem[mem[(32 * idx) + _942 + 32] + 192] = bool(mem[_6604 + 288])
            mem[_6692 + 160] = bool(_6661)
            mem[_6687 + 128] = bool(_6633)
            mem[_6681 + 96] = bool(_6615)
            mem[_6678 + 64] = _6612
            mem[_6676 + 32] = _6611
            mem[_6674] = _6610
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _6938 = mem[96]
        idx = 0
        s = 0
        t = 0
        u = 0
        v = 0
        while idx < _6938:
            if idx >= mem[96]:
                revert with 0, 50
            mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(sub_5f9d4d2eAddress)
            staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4], address(cd[4])
            mem[mem[64] len 288] = ext_call.return_data[0 len 288]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6947 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 288
            require mem[_6947 + 224] == mem[_6947 + 251 len 5]
            require mem[_6947 + 256] == bool(mem[_6947 + 256])
            if idx >= mem[_942]:
                revert with 0, 50
            if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                revert with 0, 17
            if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                if mem[_6947] and 1 > -1 / mem[_6947]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                    revert with 0, 50
                if mem[_6947] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6947]:
                    revert with 0, 17
                if mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                    revert with 0, 17
                if mem[_6947 + 32] > !mem[_6947 + 64]:
                    revert with 0, 17
                if idx >= mem[_942]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                    if mem[_6947 + 32] + mem[_6947 + 64] and 1 > -1 / mem[_6947 + 32] + mem[_6947 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_6947 + 32] + mem[_6947 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6947 + 32] + mem[_6947 + 64]:
                        revert with 0, 17
                    if (mem[_6947 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_6947 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _6938 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_6947 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
                if not bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32):
                    # nil
                else:
                    if mem[_6947 + 32] + mem[_6947 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_6947 + 32] + mem[_6947 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if (mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if (mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _6938 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                    t = t + ((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                    u = u + ((mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_6947] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                    continue 
            else:
                if not bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32):
                    # nil
                else:
                    if mem[_6947] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_6947]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                        revert with 0, 50
                    if mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18):
                        revert with 0, 17
                    if mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -500000000000000001:
                        revert with 0, 17
                    if mem[_6947 + 32] > !mem[_6947 + 64]:
                        revert with 0, 17
                    if idx >= mem[_942]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _942 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _942 + 32]] + 18:
                        if mem[_6947 + 32] + mem[_6947 + 64] and 1 > -1 / mem[_6947 + 32] + mem[_6947 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                            revert with 0, 50
                        if mem[_6947 + 32] + mem[_6947 + 64] and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / mem[_6947 + 32] + mem[_6947 + 64]:
                            revert with 0, 17
                        if (mem[_6947 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_6947 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_942]:
                            revert with 0, 50
                        if (mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_942]:
                            revert with 0, 50
                        if (mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _6938 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                        t = t + ((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                        u = u + ((mem[_6947 + 32] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                        continue 
                    if not bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _942 + 32]] + 18 < 32):
                        # nil
                    else:
                        if mem[_6947 + 32] + mem[_6947 + 64] and 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) > -1 / mem[_6947 + 32] + mem[_6947 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 321]:
                            revert with 0, 50
                        if (mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353] > -1 / (mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_942]:
                            revert with 0, 50
                        if (mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 64] > -1 / (mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_942]:
                            revert with 0, 50
                        if (mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _942 + 32] + 32] > -1 / (mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _6938 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 64] / 10000)
                        t = t + ((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _942 + 32] + 32] / 10000)
                        u = u + ((mem[_6947 + 32] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + (mem[_6947 + 64] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_6947] * 10^(-mem[mem[(32 * idx) + _942 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * ('cd', 36).length) + (2 * ceil32(return_data.size)) + 353]) + 5 * 10^17 / 10^18)
                        continue 
        mem[ceil32(32 * ('cd', 36).length) + 225] = v
        if u > !cd[100]:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 257] = u + cd[100]
        if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 161] = 10000 * t / v
        if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 193] = 10000 * s / v
        if u + cd[100] > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
            revert with 0, 17
        if not v:
            revert with 0, 18
        mem[ceil32(32 * ('cd', 36).length) + 129] = (10000 * u) + (10000 * cd[100]) / v
        if 10^18 < cd[68]:
            revert with 0, 17
        if v and -cd[68] + 10^18 > -1 / v:
            revert with 0, 17
        if (10^18 * v) - (cd[68] * v) > -500000000000000001:
            revert with 0, 17
        if s < (10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18:
            revert with 0, 17
        mem[ceil32(32 * ('cd', 36).length) + 97] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64]] = u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18)
        mem[mem[64] + 32] = (10000 * u) + (10000 * cd[100]) / v
        mem[mem[64] + 64] = 10000 * t / v
        mem[mem[64] + 96] = 10000 * s / v
        mem[mem[64] + 128] = v
        mem[mem[64] + 160] = u + cd[100]
        mem[mem[64] + 192] = mem[ceil32(32 * ('cd', 36).length) + 289]
        return u + cd[100] < s - ((10^18 * v) + (-1 * cd[68] * v) + 5 * 10^17 / 10^18), 
               (10000 * u) + (10000 * cd[100]) / v,
               10000 * t / v,
               10000 * s / v,
               v,
               u + cd[100],
               mem[mem[64] + 192]
}

function checkLiquidity(address arg1, address[] arg2, uint256 arg3, uint256 arg4, uint256 arg5, bool arg6) payable {
    require calldata.size - 4 >= 192
    require arg1 == arg1
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    if arg2.length > test266151307():
        revert with 0, 65
    if ceil32(32 * arg2.length) + 97 < 96 or ceil32(32 * arg2.length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = arg2.length
    require arg2 + (32 * arg2.length) + 36 <= calldata.size
    idx = 0
    s = arg2 + 36
    t = 128
    while idx < arg2.length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require arg6 == arg6
    mem[ceil32(32 * arg2.length) + 129] = 0
    mem[ceil32(32 * arg2.length) + 161] = 0
    mem[ceil32(32 * arg2.length) + 193] = 0
    mem[ceil32(32 * arg2.length) + 225] = 0
    mem[ceil32(32 * arg2.length) + 257] = 0
    mem[ceil32(32 * arg2.length) + 289] = 0
    require ext_code.size(sub_238f9b7aAddress)
    staticcall sub_238f9b7aAddress.getLendingPool() with:
            gas gas_remaining wei
    mem[ceil32(32 * arg2.length) + 321] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(ext_call.return_data[12 len 20])
    staticcall ext_call.return_data[12 len 20].getUserAccountData(address rg1) with:
            gas gas_remaining wei
           args arg1
    mem[ceil32(32 * arg2.length) + ceil32(return_data.size) + 321 len 192] = ext_call.return_data[0 len 192]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 192
    if 1000000000000000000 * 10^18 > !(arg5 / 2):
        revert with 0, 17
    if not arg5:
        revert with 0, 18
    mem[ceil32(32 * arg2.length) + 97] = ext_call.return_data[160] > (arg5 / 2) + 1000000000000000000 * 10^18 / arg5
    if ext_call.return_data[160] <= (arg5 / 2) + 1000000000000000000 * 10^18 / arg5:
        return ext_call.return_data[160] > (arg5 / 2) + 1000000000000000000 * 10^18 / arg5, 0, 0, 0, 0, 0, 0
    mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = 0
    mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = 0
    mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 0
    mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 0
    mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = 0
    mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = 0
    mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513] = 0
    require ext_code.size(sub_238f9b7aAddress)
    staticcall sub_238f9b7aAddress.getPriceOracle() with:
            gas gas_remaining wei
    mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 545] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545] = 0x9d23d9f200000000000000000000000000000000000000000000000000000000
    mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 549] = 32
    mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 581] = arg2.length
    idx = 0
    s = 128
    t = ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 613
    while idx < arg2.length:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getAssetsPrices(address[] rg1) with:
            gas gas_remaining wei
           args Array(len=arg2.length, data=mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 613 len 32 * arg2.length])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545
    require return_data.size >= 32
    if arg6:
        _1054 = mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0
        require mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 <= test266151307()
        require ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + return_data.size + 545 > ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 576
        _1056 = mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545]
        if mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545]) + 1 < 0 or ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545]) + 546 > test266151307():
            revert with 0, 65
        mem[64] = ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545]) + 546
        mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545] = _1056
        require _1054 + (32 * _1056) + 32 <= return_data.size
        mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577 len 32 * _1056] = mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + _1054 + 577 len 32 * _1056]
        if arg2.length > test266151307():
            revert with 0, 65
        _1668 = mem[64]
        mem[mem[64]] = arg2.length
        mem[64] = mem[64] + (32 * arg2.length) + 32
        if not arg2.length:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2286 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _2298 = mem[_2286]
                _2299 = mem[_2286 + 32]
                _2300 = mem[_2286 + 64]
                _2303 = mem[_2286 + 160]
                require mem[_2286 + 160] == bool(mem[_2286 + 160])
                _2332 = mem[_2286 + 192]
                require mem[_2286 + 192] == bool(mem[_2286 + 192])
                require mem[_2286 + 224] == bool(mem[_2286 + 224])
                _2388 = mem[_2286 + 256]
                require mem[_2286 + 256] == bool(mem[_2286 + 256])
                require mem[_2286 + 288] == bool(mem[_2286 + 288])
                if idx >= mem[_1668]:
                    revert with 0, 50
                _2416 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _2422 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _2426 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _2430 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _2436 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _2449 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1668 + 32] + 192] = bool(mem[_2286 + 288])
                mem[_2449 + 160] = bool(_2388)
                mem[_2436 + 128] = bool(_2332)
                mem[_2430 + 96] = bool(_2303)
                mem[_2426 + 64] = _2300
                mem[_2422 + 32] = _2299
                mem[_2416] = _2298
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _2868 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _2868:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2882 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_2882 + 224] == mem[_2882 + 251 len 5]
                require mem[_2882 + 256] == bool(mem[_2882 + 256])
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_2882] and 1 > -1 / mem[_2882]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_2882] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2882]:
                        revert with 0, 17
                    if mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_2882 + 32] > !mem[_2882 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_2882 + 32] + mem[_2882 + 64] and 1 > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_2882 + 32] + mem[_2882 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                            revert with 0, 17
                        if (mem[_2882 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_2882 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _2868 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_2882 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_2882 + 32] + mem[_2882 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _2868 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _2868 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_2882 + 32] + mem[_2882 + 64] and x * y > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_2882 + 32] * x * y) + (mem[_2882 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2882 + 32] * x * y) + (mem[_2882 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_2882 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2882 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2868 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_2882 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2882] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_2882] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_2882]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18):
                        revert with 0, 17
                    if mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_2882 + 32] > !mem[_2882 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_2882 + 32] + mem[_2882 + 64] and 1 > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_2882 + 32] + mem[_2882 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                            revert with 0, 17
                        if (mem[_2882 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_2882 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _2868 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_2882 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_2882 + 32] + mem[_2882 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _2868 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _2868 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_2882 + 32] + mem[_2882 + 64] and x * y > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_2882 + 32] * x * y) + (mem[_2882 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2882 + 32] * x * y) + (mem[_2882 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_2882 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2882 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2868 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_2882 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2882] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _2868 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_2882] and x * y > -1 / mem[_2882]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_2882] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2882] * x * y:
                    revert with 0, 17
                if mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_2882 + 32] > !mem[_2882 + 64]:
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_2882 + 32] + mem[_2882 + 64] and 1 > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_2882 + 32] + mem[_2882 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                        revert with 0, 17
                    if (mem[_2882 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2882 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2868 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_2882 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_2882 + 32] + mem[_2882 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2868 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_2882 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _2868 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_2882 + 32] + mem[_2882 + 64] and z * a > -1 / mem[_2882 + 32] + mem[_2882 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_2882 + 32] * z * a) + (mem[_2882 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2882 + 32] * z * a) + (mem[_2882 + 64] * z * a):
                    revert with 0, 17
                if (mem[_2882 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2882 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2868 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                t = t + ((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                u = u + ((mem[_2882 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2882 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2882] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg3:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg3
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg3 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg3) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg3) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg3
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg3) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg3,
                   mem[mem[64] + 192]
        mem[64] = _1668 + (32 * arg2.length) + 320
        mem[_1668 + (32 * arg2.length) + 32] = 0
        mem[_1668 + (32 * arg2.length) + 64] = 0
        mem[_1668 + (32 * arg2.length) + 96] = 0
        mem[_1668 + (32 * arg2.length) + 128] = 0
        mem[_1668 + (32 * arg2.length) + 160] = 0
        mem[_1668 + (32 * arg2.length) + 192] = 0
        mem[_1668 + (32 * arg2.length) + 224] = 0
        mem[_1668 + (32 * arg2.length) + 256] = 0
        mem[_1668 + (32 * arg2.length) + 288] = 0
        mem[var108002] = var108001
        if not var108003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3725 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _3738 = mem[_3725]
                _3739 = mem[_3725 + 32]
                _3740 = mem[_3725 + 64]
                _3743 = mem[_3725 + 160]
                require mem[_3725 + 160] == bool(mem[_3725 + 160])
                _3780 = mem[_3725 + 192]
                require mem[_3725 + 192] == bool(mem[_3725 + 192])
                require mem[_3725 + 224] == bool(mem[_3725 + 224])
                _3839 = mem[_3725 + 256]
                require mem[_3725 + 256] == bool(mem[_3725 + 256])
                require mem[_3725 + 288] == bool(mem[_3725 + 288])
                if idx >= mem[_1668]:
                    revert with 0, 50
                _3866 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _3872 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _3876 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _3881 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _3890 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _3901 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1668 + 32] + 192] = bool(mem[_3725 + 288])
                mem[_3901 + 160] = bool(_3839)
                mem[_3890 + 128] = bool(_3780)
                mem[_3881 + 96] = bool(_3743)
                mem[_3876 + 64] = _3740
                mem[_3872 + 32] = _3739
                mem[_3866] = _3738
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _4396 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _4396:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4412 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_4412 + 224] == mem[_4412 + 251 len 5]
                require mem[_4412 + 256] == bool(mem[_4412 + 256])
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_4412] and 1 > -1 / mem[_4412]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_4412] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4412]:
                        revert with 0, 17
                    if mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_4412 + 32] > !mem[_4412 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_4412 + 32] + mem[_4412 + 64] and 1 > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_4412 + 32] + mem[_4412 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                            revert with 0, 17
                        if (mem[_4412 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_4412 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _4396 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_4412 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_4412 + 32] + mem[_4412 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _4396 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _4396 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_4412 + 32] + mem[_4412 + 64] and x * y > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_4412 + 32] * x * y) + (mem[_4412 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4412 + 32] * x * y) + (mem[_4412 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_4412 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4412 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4396 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_4412 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4412] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_4412] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_4412]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18):
                        revert with 0, 17
                    if mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_4412 + 32] > !mem[_4412 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_4412 + 32] + mem[_4412 + 64] and 1 > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_4412 + 32] + mem[_4412 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                            revert with 0, 17
                        if (mem[_4412 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_4412 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _4396 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_4412 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_4412 + 32] + mem[_4412 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _4396 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _4396 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_4412 + 32] + mem[_4412 + 64] and x * y > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_4412 + 32] * x * y) + (mem[_4412 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4412 + 32] * x * y) + (mem[_4412 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_4412 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4412 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4396 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_4412 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4412] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _4396 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_4412] and x * y > -1 / mem[_4412]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_4412] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4412] * x * y:
                    revert with 0, 17
                if mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_4412 + 32] > !mem[_4412 + 64]:
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_4412 + 32] + mem[_4412 + 64] and 1 > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_4412 + 32] + mem[_4412 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                        revert with 0, 17
                    if (mem[_4412 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4412 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4396 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_4412 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_4412 + 32] + mem[_4412 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4396 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_4412 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _4396 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_4412 + 32] + mem[_4412 + 64] and z * a > -1 / mem[_4412 + 32] + mem[_4412 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_4412 + 32] * z * a) + (mem[_4412 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4412 + 32] * z * a) + (mem[_4412 + 64] * z * a):
                    revert with 0, 17
                if (mem[_4412 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4412 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4396 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                t = t + ((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                u = u + ((mem[_4412 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4412 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4412] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg3:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg3
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg3 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg3) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg3) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg3
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg3) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg3,
                   mem[mem[64] + 192]
        mem[64] = _1668 + (32 * arg2.length) + 608
        mem[_1668 + (32 * arg2.length) + 320] = 0
        mem[_1668 + (32 * arg2.length) + 352] = 0
        mem[_1668 + (32 * arg2.length) + 384] = 0
        mem[_1668 + (32 * arg2.length) + 416] = 0
        mem[_1668 + (32 * arg2.length) + 448] = 0
        mem[_1668 + (32 * arg2.length) + 480] = 0
        mem[_1668 + (32 * arg2.length) + 512] = 0
        mem[_1668 + (32 * arg2.length) + 544] = 0
        mem[_1668 + (32 * arg2.length) + 576] = 0
        mem[var112002] = var112001
        if not var112003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5269 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _5282 = mem[_5269]
                _5283 = mem[_5269 + 32]
                _5284 = mem[_5269 + 64]
                _5287 = mem[_5269 + 160]
                require mem[_5269 + 160] == bool(mem[_5269 + 160])
                _5321 = mem[_5269 + 192]
                require mem[_5269 + 192] == bool(mem[_5269 + 192])
                require mem[_5269 + 224] == bool(mem[_5269 + 224])
                _5383 = mem[_5269 + 256]
                require mem[_5269 + 256] == bool(mem[_5269 + 256])
                require mem[_5269 + 288] == bool(mem[_5269 + 288])
                if idx >= mem[_1668]:
                    revert with 0, 50
                _5410 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _5416 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _5420 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _5425 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _5434 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _5445 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1668 + 32] + 192] = bool(mem[_5269 + 288])
                mem[_5445 + 160] = bool(_5383)
                mem[_5434 + 128] = bool(_5321)
                mem[_5425 + 96] = bool(_5287)
                mem[_5420 + 64] = _5284
                mem[_5416 + 32] = _5283
                mem[_5410] = _5282
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _5940 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _5940:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5956 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_5956 + 224] == mem[_5956 + 251 len 5]
                require mem[_5956 + 256] == bool(mem[_5956 + 256])
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_5956] and 1 > -1 / mem[_5956]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_5956] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5956]:
                        revert with 0, 17
                    if mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_5956 + 32] > !mem[_5956 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_5956 + 32] + mem[_5956 + 64] and 1 > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_5956 + 32] + mem[_5956 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                            revert with 0, 17
                        if (mem[_5956 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_5956 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _5940 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_5956 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_5956 + 32] + mem[_5956 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _5940 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _5940 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_5956 + 32] + mem[_5956 + 64] and x * y > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_5956 + 32] * x * y) + (mem[_5956 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5956 + 32] * x * y) + (mem[_5956 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_5956 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5956 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5940 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_5956 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5956] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_5956] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_5956]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18):
                        revert with 0, 17
                    if mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_5956 + 32] > !mem[_5956 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_5956 + 32] + mem[_5956 + 64] and 1 > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_5956 + 32] + mem[_5956 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                            revert with 0, 17
                        if (mem[_5956 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_5956 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _5940 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_5956 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_5956 + 32] + mem[_5956 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _5940 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _5940 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_5956 + 32] + mem[_5956 + 64] and x * y > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_5956 + 32] * x * y) + (mem[_5956 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5956 + 32] * x * y) + (mem[_5956 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_5956 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5956 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5940 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_5956 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5956] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _5940 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_5956] and x * y > -1 / mem[_5956]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_5956] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5956] * x * y:
                    revert with 0, 17
                if mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_5956 + 32] > !mem[_5956 + 64]:
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_5956 + 32] + mem[_5956 + 64] and 1 > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_5956 + 32] + mem[_5956 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                        revert with 0, 17
                    if (mem[_5956 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5956 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5940 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_5956 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_5956 + 32] + mem[_5956 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5940 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_5956 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _5940 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_5956 + 32] + mem[_5956 + 64] and z * a > -1 / mem[_5956 + 32] + mem[_5956 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_5956 + 32] * z * a) + (mem[_5956 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5956 + 32] * z * a) + (mem[_5956 + 64] * z * a):
                    revert with 0, 17
                if (mem[_5956 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5956 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5940 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                t = t + ((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                u = u + ((mem[_5956 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5956 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5956] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg3:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg3
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg3 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg3) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg3) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg3
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg3) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg3,
                   mem[mem[64] + 192]
        mem[64] = _1668 + (32 * arg2.length) + 896
        mem[_1668 + (32 * arg2.length) + 608] = 0
        mem[_1668 + (32 * arg2.length) + 640] = 0
        mem[_1668 + (32 * arg2.length) + 672] = 0
        mem[_1668 + (32 * arg2.length) + 704] = 0
        mem[_1668 + (32 * arg2.length) + 736] = 0
        mem[_1668 + (32 * arg2.length) + 768] = 0
        mem[_1668 + (32 * arg2.length) + 800] = 0
        mem[_1668 + (32 * arg2.length) + 832] = 0
        mem[_1668 + (32 * arg2.length) + 864] = 0
        mem[var116002] = var116001
        if not var116003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6813 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _6826 = mem[_6813]
                _6827 = mem[_6813 + 32]
                _6828 = mem[_6813 + 64]
                _6831 = mem[_6813 + 160]
                require mem[_6813 + 160] == bool(mem[_6813 + 160])
                _6865 = mem[_6813 + 192]
                require mem[_6813 + 192] == bool(mem[_6813 + 192])
                require mem[_6813 + 224] == bool(mem[_6813 + 224])
                _6927 = mem[_6813 + 256]
                require mem[_6813 + 256] == bool(mem[_6813 + 256])
                require mem[_6813 + 288] == bool(mem[_6813 + 288])
                if idx >= mem[_1668]:
                    revert with 0, 50
                _6954 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _6960 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _6964 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _6969 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _6978 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _6989 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1668 + 32] + 192] = bool(mem[_6813 + 288])
                mem[_6989 + 160] = bool(_6927)
                mem[_6978 + 128] = bool(_6865)
                mem[_6969 + 96] = bool(_6831)
                mem[_6964 + 64] = _6828
                mem[_6960 + 32] = _6827
                mem[_6954] = _6826
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _7484 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _7484:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7500 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_7500 + 224] == mem[_7500 + 251 len 5]
                require mem[_7500 + 256] == bool(mem[_7500 + 256])
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_7500] and 1 > -1 / mem[_7500]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_7500] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7500]:
                        revert with 0, 17
                    if mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_7500 + 32] > !mem[_7500 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_7500 + 32] + mem[_7500 + 64] and 1 > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_7500 + 32] + mem[_7500 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                            revert with 0, 17
                        if (mem[_7500 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_7500 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _7484 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_7500 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_7500 + 32] + mem[_7500 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _7484 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _7484 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_7500 + 32] + mem[_7500 + 64] and x * y > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_7500 + 32] * x * y) + (mem[_7500 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7500 + 32] * x * y) + (mem[_7500 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_7500 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_7500 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _7484 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_7500 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_7500] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_7500] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_7500]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18):
                        revert with 0, 17
                    if mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_7500 + 32] > !mem[_7500 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_7500 + 32] + mem[_7500 + 64] and 1 > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_7500 + 32] + mem[_7500 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                            revert with 0, 17
                        if (mem[_7500 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_7500 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _7484 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_7500 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_7500 + 32] + mem[_7500 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _7484 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _7484 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_7500 + 32] + mem[_7500 + 64] and x * y > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_7500 + 32] * x * y) + (mem[_7500 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7500 + 32] * x * y) + (mem[_7500 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_7500 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_7500 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _7484 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_7500 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_7500] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _7484 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_7500] and x * y > -1 / mem[_7500]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_7500] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7500] * x * y:
                    revert with 0, 17
                if mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_7500 + 32] > !mem[_7500 + 64]:
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_7500 + 32] + mem[_7500 + 64] and 1 > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_7500 + 32] + mem[_7500 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                        revert with 0, 17
                    if (mem[_7500 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_7500 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _7484 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_7500 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_7500 + 32] + mem[_7500 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _7484 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_7500 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _7484 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_7500 + 32] + mem[_7500 + 64] and z * a > -1 / mem[_7500 + 32] + mem[_7500 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_7500 + 32] * z * a) + (mem[_7500 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7500 + 32] * z * a) + (mem[_7500 + 64] * z * a):
                    revert with 0, 17
                if (mem[_7500 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_7500 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _7484 = mem[96]
                idx = idx + 1
                s = s + ((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                t = t + ((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                u = u + ((mem[_7500 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7500 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_7500] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg3:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg3
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg3 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg3) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg3) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg3
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg3) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg3,
                   mem[mem[64] + 192]
        mem[64] = _1668 + (32 * arg2.length) + 1184
        mem[_1668 + (32 * arg2.length) + 896] = 0
        mem[_1668 + (32 * arg2.length) + 928] = 0
        mem[_1668 + (32 * arg2.length) + 960] = 0
        mem[_1668 + (32 * arg2.length) + 992] = 0
        mem[_1668 + (32 * arg2.length) + 1024] = 0
        mem[_1668 + (32 * arg2.length) + 1056] = 0
        mem[_1668 + (32 * arg2.length) + 1088] = 0
        mem[_1668 + (32 * arg2.length) + 1120] = 0
        mem[_1668 + (32 * arg2.length) + 1152] = 0
        mem[var120002] = var120001
        if not var120003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8357 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _8370 = mem[_8357]
                _8371 = mem[_8357 + 32]
                _8372 = mem[_8357 + 64]
                _8375 = mem[_8357 + 160]
                require mem[_8357 + 160] == bool(mem[_8357 + 160])
                _8409 = mem[_8357 + 192]
                require mem[_8357 + 192] == bool(mem[_8357 + 192])
                require mem[_8357 + 224] == bool(mem[_8357 + 224])
                _8471 = mem[_8357 + 256]
                require mem[_8357 + 256] == bool(mem[_8357 + 256])
                require mem[_8357 + 288] == bool(mem[_8357 + 288])
                if idx >= mem[_1668]:
                    revert with 0, 50
                _8498 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _8504 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _8508 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _8513 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _8522 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _8533 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1668 + 32] + 192] = bool(mem[_8357 + 288])
                mem[_8533 + 160] = bool(_8471)
                mem[_8522 + 128] = bool(_8409)
                mem[_8513 + 96] = bool(_8375)
                mem[_8508 + 64] = _8372
                mem[_8504 + 32] = _8371
                mem[_8498] = _8370
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _9028 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _9028:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9044 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_9044 + 224] == mem[_9044 + 251 len 5]
                require mem[_9044 + 256] == bool(mem[_9044 + 256])
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_9044] and 1 > -1 / mem[_9044]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_9044] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9044]:
                        revert with 0, 17
                    if mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_9044 + 32] > !mem[_9044 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_9044 + 32] + mem[_9044 + 64] and 1 > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_9044 + 32] + mem[_9044 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                            revert with 0, 17
                        if (mem[_9044 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_9044 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _9028 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_9044 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_9044 + 32] + mem[_9044 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _9028 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _9028 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_9044 + 32] + mem[_9044 + 64] and x * y > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_9044 + 32] * x * y) + (mem[_9044 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9044 + 32] * x * y) + (mem[_9044 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_9044 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_9044 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _9028 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_9044 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_9044] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_9044] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_9044]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18):
                        revert with 0, 17
                    if mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_9044 + 32] > !mem[_9044 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_9044 + 32] + mem[_9044 + 64] and 1 > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_9044 + 32] + mem[_9044 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                            revert with 0, 17
                        if (mem[_9044 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_9044 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _9028 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_9044 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_9044 + 32] + mem[_9044 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _9028 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _9028 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_9044 + 32] + mem[_9044 + 64] and x * y > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_9044 + 32] * x * y) + (mem[_9044 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9044 + 32] * x * y) + (mem[_9044 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_9044 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_9044 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _9028 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_9044 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_9044] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _9028 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_9044] and x * y > -1 / mem[_9044]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_9044] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9044] * x * y:
                    revert with 0, 17
                if mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_9044 + 32] > !mem[_9044 + 64]:
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_9044 + 32] + mem[_9044 + 64] and 1 > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_9044 + 32] + mem[_9044 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                        revert with 0, 17
                    if (mem[_9044 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_9044 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _9028 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_9044 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_9044 + 32] + mem[_9044 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _9028 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_9044 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _9028 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_9044 + 32] + mem[_9044 + 64] and z * a > -1 / mem[_9044 + 32] + mem[_9044 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_9044 + 32] * z * a) + (mem[_9044 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9044 + 32] * z * a) + (mem[_9044 + 64] * z * a):
                    revert with 0, 17
                if (mem[_9044 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_9044 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _9028 = mem[96]
                idx = idx + 1
                s = s + ((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                t = t + ((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                u = u + ((mem[_9044 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9044 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_9044] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg3:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg3
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg3 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg3) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg3) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg3
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg3) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg3,
                   mem[mem[64] + 192]
        mem[64] = _1668 + (32 * arg2.length) + 1472
        mem[_1668 + (32 * arg2.length) + 1184] = 0
        mem[_1668 + (32 * arg2.length) + 1216] = 0
        mem[_1668 + (32 * arg2.length) + 1248] = 0
        mem[_1668 + (32 * arg2.length) + 1280] = 0
        mem[_1668 + (32 * arg2.length) + 1312] = 0
        mem[_1668 + (32 * arg2.length) + 1344] = 0
        mem[_1668 + (32 * arg2.length) + 1376] = 0
        mem[_1668 + (32 * arg2.length) + 1408] = 0
        mem[_1668 + (32 * arg2.length) + 1440] = 0
        mem[var124002] = var124001
        if not var124003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9901 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _9914 = mem[_9901]
                _9915 = mem[_9901 + 32]
                _9916 = mem[_9901 + 64]
                _9919 = mem[_9901 + 160]
                require mem[_9901 + 160] == bool(mem[_9901 + 160])
                _9953 = mem[_9901 + 192]
                require mem[_9901 + 192] == bool(mem[_9901 + 192])
                require mem[_9901 + 224] == bool(mem[_9901 + 224])
                _10015 = mem[_9901 + 256]
                require mem[_9901 + 256] == bool(mem[_9901 + 256])
                require mem[_9901 + 288] == bool(mem[_9901 + 288])
                if idx >= mem[_1668]:
                    revert with 0, 50
                _10042 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _10048 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _10052 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _10057 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _10066 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _10077 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1668 + 32] + 192] = bool(mem[_9901 + 288])
                mem[_10077 + 160] = bool(_10015)
                mem[_10066 + 128] = bool(_9953)
                mem[_10057 + 96] = bool(_9919)
                mem[_10052 + 64] = _9916
                mem[_10048 + 32] = _9915
                mem[_10042] = _9914
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _10572 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _10572:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10588 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_10588 + 224] == mem[_10588 + 251 len 5]
                require mem[_10588 + 256] == bool(mem[_10588 + 256])
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_10588] and 1 > -1 / mem[_10588]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_10588] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10588]:
                        revert with 0, 17
                    if mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_10588 + 32] > !mem[_10588 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_10588 + 32] + mem[_10588 + 64] and 1 > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_10588 + 32] + mem[_10588 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                            revert with 0, 17
                        if (mem[_10588 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_10588 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _10572 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_10588 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_10588 + 32] + mem[_10588 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _10572 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _10572 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_10588 + 32] + mem[_10588 + 64] and x * y > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_10588 + 32] * x * y) + (mem[_10588 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10588 + 32] * x * y) + (mem[_10588 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_10588 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_10588 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _10572 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_10588 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_10588] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_10588] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_10588]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18):
                        revert with 0, 17
                    if mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_10588 + 32] > !mem[_10588 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_10588 + 32] + mem[_10588 + 64] and 1 > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_10588 + 32] + mem[_10588 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                            revert with 0, 17
                        if (mem[_10588 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_10588 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _10572 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_10588 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_10588 + 32] + mem[_10588 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _10572 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _10572 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_10588 + 32] + mem[_10588 + 64] and x * y > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_10588 + 32] * x * y) + (mem[_10588 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10588 + 32] * x * y) + (mem[_10588 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_10588 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_10588 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _10572 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_10588 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_10588] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _10572 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_10588] and x * y > -1 / mem[_10588]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_10588] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10588] * x * y:
                    revert with 0, 17
                if mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_10588 + 32] > !mem[_10588 + 64]:
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_10588 + 32] + mem[_10588 + 64] and 1 > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_10588 + 32] + mem[_10588 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                        revert with 0, 17
                    if (mem[_10588 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_10588 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _10572 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_10588 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_10588 + 32] + mem[_10588 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _10572 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_10588 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _10572 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_10588 + 32] + mem[_10588 + 64] and z * a > -1 / mem[_10588 + 32] + mem[_10588 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_10588 + 32] * z * a) + (mem[_10588 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10588 + 32] * z * a) + (mem[_10588 + 64] * z * a):
                    revert with 0, 17
                if (mem[_10588 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_10588 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _10572 = mem[96]
                idx = idx + 1
                s = s + ((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                t = t + ((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                u = u + ((mem[_10588 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10588 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_10588] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg3:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg3
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg3 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg3) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg3) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg3
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg3) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg3,
                   mem[mem[64] + 192]
        mem[64] = _1668 + (32 * arg2.length) + 1760
        mem[_1668 + (32 * arg2.length) + 1472] = 0
        mem[_1668 + (32 * arg2.length) + 1504] = 0
        mem[_1668 + (32 * arg2.length) + 1536] = 0
        mem[_1668 + (32 * arg2.length) + 1568] = 0
        mem[_1668 + (32 * arg2.length) + 1600] = 0
        mem[_1668 + (32 * arg2.length) + 1632] = 0
        mem[_1668 + (32 * arg2.length) + 1664] = 0
        mem[_1668 + (32 * arg2.length) + 1696] = 0
        mem[_1668 + (32 * arg2.length) + 1728] = 0
        mem[var128002] = var128001
        if not var128003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _11445 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _11458 = mem[_11445]
                _11459 = mem[_11445 + 32]
                _11460 = mem[_11445 + 64]
                _11463 = mem[_11445 + 160]
                require mem[_11445 + 160] == bool(mem[_11445 + 160])
                _11497 = mem[_11445 + 192]
                require mem[_11445 + 192] == bool(mem[_11445 + 192])
                require mem[_11445 + 224] == bool(mem[_11445 + 224])
                _11559 = mem[_11445 + 256]
                require mem[_11445 + 256] == bool(mem[_11445 + 256])
                require mem[_11445 + 288] == bool(mem[_11445 + 288])
                if idx >= mem[_1668]:
                    revert with 0, 50
                _11586 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _11592 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _11596 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _11601 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _11610 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _11621 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1668 + 32] + 192] = bool(mem[_11445 + 288])
                mem[_11621 + 160] = bool(_11559)
                mem[_11610 + 128] = bool(_11497)
                mem[_11601 + 96] = bool(_11463)
                mem[_11596 + 64] = _11460
                mem[_11592 + 32] = _11459
                mem[_11586] = _11458
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _12116 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _12116:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _12132 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_12132 + 224] == mem[_12132 + 251 len 5]
                require mem[_12132 + 256] == bool(mem[_12132 + 256])
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_12132] and 1 > -1 / mem[_12132]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_12132] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12132]:
                        revert with 0, 17
                    if mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_12132 + 32] > !mem[_12132 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_12132 + 32] + mem[_12132 + 64] and 1 > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_12132 + 32] + mem[_12132 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                            revert with 0, 17
                        if (mem[_12132 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_12132 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _12116 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_12132 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_12132 + 32] + mem[_12132 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _12116 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _12116 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_12132 + 32] + mem[_12132 + 64] and x * y > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_12132 + 32] * x * y) + (mem[_12132 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12132 + 32] * x * y) + (mem[_12132 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_12132 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_12132 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _12116 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_12132 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_12132] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_12132] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_12132]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18):
                        revert with 0, 17
                    if mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_12132 + 32] > !mem[_12132 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_12132 + 32] + mem[_12132 + 64] and 1 > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_12132 + 32] + mem[_12132 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                            revert with 0, 17
                        if (mem[_12132 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_12132 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _12116 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_12132 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                        if mem[_12132 + 32] + mem[_12132 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _12116 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _12116 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_12132 + 32] + mem[_12132 + 64] and x * y > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_12132 + 32] * x * y) + (mem[_12132 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12132 + 32] * x * y) + (mem[_12132 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_12132 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_12132 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _12116 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_12132 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_12132] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _12116 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_12132] and x * y > -1 / mem[_12132]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_12132] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12132] * x * y:
                    revert with 0, 17
                if mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_12132 + 32] > !mem[_12132 + 64]:
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_12132 + 32] + mem[_12132 + 64] and 1 > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_12132 + 32] + mem[_12132 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                        revert with 0, 17
                    if (mem[_12132 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_12132 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _12116 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_12132 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32)):
                    if mem[_12132 + 32] + mem[_12132 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _12116 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                    t = t + ((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                    u = u + ((mem[_12132 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1668 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _12116 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_12132 + 32] + mem[_12132 + 64] and z * a > -1 / mem[_12132 + 32] + mem[_12132 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_12132 + 32] * z * a) + (mem[_12132 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12132 + 32] * z * a) + (mem[_12132 + 64] * z * a):
                    revert with 0, 17
                if (mem[_12132 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_12132 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1668]:
                    revert with 0, 50
                if (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _12116 = mem[96]
                idx = idx + 1
                s = s + ((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                t = t + ((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                u = u + ((mem[_12132 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12132 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_12132] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg3:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg3
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg3 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg3) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg3) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg3
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg3) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg3,
                   mem[mem[64] + 192]
        mem[64] = _1668 + (32 * arg2.length) + 2048
        mem[_1668 + (32 * arg2.length) + 1760] = 0
        mem[_1668 + (32 * arg2.length) + 1792] = 0
        mem[_1668 + (32 * arg2.length) + 1824] = 0
        mem[_1668 + (32 * arg2.length) + 1856] = 0
        mem[_1668 + (32 * arg2.length) + 1888] = 0
        mem[_1668 + (32 * arg2.length) + 1920] = 0
        mem[_1668 + (32 * arg2.length) + 1952] = 0
        mem[_1668 + (32 * arg2.length) + 1984] = 0
        mem[_1668 + (32 * arg2.length) + 2016] = 0
        mem[var132002] = var132001
        if var132003 - 1:
            # nil
        else:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _12989 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _13002 = mem[_12989]
                _13003 = mem[_12989 + 32]
                _13004 = mem[_12989 + 64]
                _13007 = mem[_12989 + 160]
                require mem[_12989 + 160] == bool(mem[_12989 + 160])
                _13041 = mem[_12989 + 192]
                require mem[_12989 + 192] == bool(mem[_12989 + 192])
                require mem[_12989 + 224] == bool(mem[_12989 + 224])
                _13103 = mem[_12989 + 256]
                require mem[_12989 + 256] == bool(mem[_12989 + 256])
                require mem[_12989 + 288] == bool(mem[_12989 + 288])
                if idx >= mem[_1668]:
                    revert with 0, 50
                _13130 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _13136 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _13140 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _13145 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _13154 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                _13165 = mem[(32 * idx) + _1668 + 32]
                if idx >= mem[_1668]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1668 + 32] + 192] = bool(mem[_12989 + 288])
                mem[_13165 + 160] = bool(_13103)
                mem[_13154 + 128] = bool(_13041)
                mem[_13145 + 96] = bool(_13007)
                mem[_13140 + 64] = _13004
                mem[_13136 + 32] = _13003
                mem[_13130] = _13002
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _13660 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _13660:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13676 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_13676 + 224] == mem[_13676 + 251 len 5]
                require mem[_13676 + 256] == bool(mem[_13676 + 256])
                if idx >= mem[_1668]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                    if mem[_13676] and 1 > -1 / mem[_13676]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_13676] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_13676]:
                        revert with 0, 17
                    if mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_13676 + 32] > !mem[_13676 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1668]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                        if mem[_13676 + 32] + mem[_13676 + 64] and 1 > -1 / mem[_13676 + 32] + mem[_13676 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_13676 + 32] + mem[_13676 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_13676 + 32] + mem[_13676 + 64]:
                            revert with 0, 17
                        if (mem[_13676 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_13676 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _13660 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_13676 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if not bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32):
                        # nil
                    else:
                        if mem[_13676 + 32] + mem[_13676 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_13676 + 32] + mem[_13676 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if (mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _13660 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                        t = t + ((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                        u = u + ((mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_13676] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                else:
                    if not bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32):
                        # nil
                    else:
                        if mem[_13676] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_13676]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18):
                            revert with 0, 17
                        if mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                            revert with 0, 17
                        if mem[_13676 + 32] > !mem[_13676 + 64]:
                            revert with 0, 17
                        if idx >= mem[_1668]:
                            revert with 0, 50
                        if 18 < mem[mem[(32 * idx) + _1668 + 32]]:
                            revert with 0, 17
                        if not -mem[mem[(32 * idx) + _1668 + 32]] + 18:
                            if mem[_13676 + 32] + mem[_13676 + 64] and 1 > -1 / mem[_13676 + 32] + mem[_13676 + 64]:
                                revert with 0, 17
                            if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                                revert with 0, 50
                            if mem[_13676 + 32] + mem[_13676 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_13676 + 32] + mem[_13676 + 64]:
                                revert with 0, 17
                            if (mem[_13676 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                                revert with 0, 17
                            if v > !((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                                revert with 0, 17
                            if u > !((mem[_13676 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                                revert with 0, 17
                            if idx >= mem[_1668]:
                                revert with 0, 50
                            if (mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                                revert with 0, 17
                            if s > !((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                                revert with 0, 17
                            if idx >= mem[_1668]:
                                revert with 0, 50
                            if (mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                                revert with 0, 17
                            if t > !((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            _13660 = mem[96]
                            idx = idx + 1
                            s = s + ((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                            t = t + ((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                            u = u + ((mem[_13676 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                            v = v + ((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                            continue 
                        if not bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _1668 + 32]] + 18 < 32):
                            # nil
                        else:
                            if mem[_13676 + 32] + mem[_13676 + 64] and 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) > -1 / mem[_13676 + 32] + mem[_13676 + 64]:
                                revert with 0, 17
                            if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                                revert with 0, 50
                            if (mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18)):
                                revert with 0, 17
                            if (mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                                revert with 0, 17
                            if v > !((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                                revert with 0, 17
                            if u > !((mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                                revert with 0, 17
                            if idx >= mem[_1668]:
                                revert with 0, 50
                            if (mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 64] > -1 / (mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                                revert with 0, 17
                            if s > !((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000):
                                revert with 0, 17
                            if idx >= mem[_1668]:
                                revert with 0, 50
                            if (mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1668 + 32] + 32] > -1 / (mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                                revert with 0, 17
                            if t > !((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            _13660 = mem[96]
                            idx = idx + 1
                            s = s + ((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 64] / 10000)
                            t = t + ((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1668 + 32] + 32] / 10000)
                            u = u + ((mem[_13676 + 32] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13676 + 64] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                            v = v + ((mem[_13676] * 10^(-mem[mem[(32 * idx) + _1668 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                            continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg3:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg3
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg3 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg3) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg3) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg3
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg3 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg3) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg3,
                   mem[mem[64] + 192]
    else:
        _1055 = mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0
        require mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 <= test266151307()
        require ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + return_data.size + 545 > ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 576
        _1057 = mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545]
        if mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545]) + 1 < 0 or ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545]) + 546 > test266151307():
            revert with 0, 65
        mem[64] = ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + 545 len 4], 0 + 545]) + 546
        mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545] = _1057
        require _1055 + (32 * _1057) + 32 <= return_data.size
        mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577 len 32 * _1057] = mem[ceil32(32 * arg2.length) + (4 * ceil32(return_data.size)) + _1055 + 577 len 32 * _1057]
        if arg2.length > test266151307():
            revert with 0, 65
        _1669 = mem[64]
        mem[mem[64]] = arg2.length
        mem[64] = mem[64] + (32 * arg2.length) + 32
        if not arg2.length:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2290 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _2306 = mem[_2290]
                _2307 = mem[_2290 + 32]
                _2308 = mem[_2290 + 64]
                _2311 = mem[_2290 + 160]
                require mem[_2290 + 160] == bool(mem[_2290 + 160])
                _2342 = mem[_2290 + 192]
                require mem[_2290 + 192] == bool(mem[_2290 + 192])
                require mem[_2290 + 224] == bool(mem[_2290 + 224])
                _2392 = mem[_2290 + 256]
                require mem[_2290 + 256] == bool(mem[_2290 + 256])
                require mem[_2290 + 288] == bool(mem[_2290 + 288])
                if idx >= mem[_1669]:
                    revert with 0, 50
                _2420 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _2424 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _2428 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _2433 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _2442 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _2454 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1669 + 32] + 192] = bool(mem[_2290 + 288])
                mem[_2454 + 160] = bool(_2392)
                mem[_2442 + 128] = bool(_2342)
                mem[_2433 + 96] = bool(_2311)
                mem[_2428 + 64] = _2308
                mem[_2424 + 32] = _2307
                mem[_2420] = _2306
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _2869 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _2869:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2885 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_2885 + 224] == mem[_2885 + 251 len 5]
                require mem[_2885 + 256] == bool(mem[_2885 + 256])
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_2885] and 1 > -1 / mem[_2885]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_2885] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2885]:
                        revert with 0, 17
                    if mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_2885 + 32] > !mem[_2885 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_2885 + 32] + mem[_2885 + 64] and 1 > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_2885 + 32] + mem[_2885 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                            revert with 0, 17
                        if (mem[_2885 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_2885 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _2869 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_2885 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_2885 + 32] + mem[_2885 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _2869 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _2869 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_2885 + 32] + mem[_2885 + 64] and x * y > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_2885 + 32] * x * y) + (mem[_2885 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2885 + 32] * x * y) + (mem[_2885 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_2885 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2885 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2869 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_2885 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2885] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_2885] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_2885]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18):
                        revert with 0, 17
                    if mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_2885 + 32] > !mem[_2885 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_2885 + 32] + mem[_2885 + 64] and 1 > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_2885 + 32] + mem[_2885 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                            revert with 0, 17
                        if (mem[_2885 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_2885 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _2869 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_2885 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_2885 + 32] + mem[_2885 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _2869 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _2869 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_2885 + 32] + mem[_2885 + 64] and x * y > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_2885 + 32] * x * y) + (mem[_2885 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2885 + 32] * x * y) + (mem[_2885 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_2885 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2885 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2869 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_2885 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2885] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _2869 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_2885] and x * y > -1 / mem[_2885]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_2885] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2885] * x * y:
                    revert with 0, 17
                if mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_2885 + 32] > !mem[_2885 + 64]:
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_2885 + 32] + mem[_2885 + 64] and 1 > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_2885 + 32] + mem[_2885 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                        revert with 0, 17
                    if (mem[_2885 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2885 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2869 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_2885 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_2885 + 32] + mem[_2885 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _2869 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_2885 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _2869 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_2885 + 32] + mem[_2885 + 64] and z * a > -1 / mem[_2885 + 32] + mem[_2885 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_2885 + 32] * z * a) + (mem[_2885 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_2885 + 32] * z * a) + (mem[_2885 + 64] * z * a):
                    revert with 0, 17
                if (mem[_2885 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_2885 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _2869 = mem[96]
                idx = idx + 1
                s = s + ((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                t = t + ((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                u = u + ((mem[_2885 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_2885 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_2885] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg4:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg4
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg4 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg4) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg4) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg4
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg4) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg4,
                   mem[mem[64] + 192]
        mem[64] = _1669 + (32 * arg2.length) + 320
        mem[_1669 + (32 * arg2.length) + 32] = 0
        mem[_1669 + (32 * arg2.length) + 64] = 0
        mem[_1669 + (32 * arg2.length) + 96] = 0
        mem[_1669 + (32 * arg2.length) + 128] = 0
        mem[_1669 + (32 * arg2.length) + 160] = 0
        mem[_1669 + (32 * arg2.length) + 192] = 0
        mem[_1669 + (32 * arg2.length) + 224] = 0
        mem[_1669 + (32 * arg2.length) + 256] = 0
        mem[_1669 + (32 * arg2.length) + 288] = 0
        mem[var108002] = var108001
        if not var108003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3729 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _3746 = mem[_3729]
                _3747 = mem[_3729 + 32]
                _3748 = mem[_3729 + 64]
                _3751 = mem[_3729 + 160]
                require mem[_3729 + 160] == bool(mem[_3729 + 160])
                _3793 = mem[_3729 + 192]
                require mem[_3729 + 192] == bool(mem[_3729 + 192])
                require mem[_3729 + 224] == bool(mem[_3729 + 224])
                _3843 = mem[_3729 + 256]
                require mem[_3729 + 256] == bool(mem[_3729 + 256])
                require mem[_3729 + 288] == bool(mem[_3729 + 288])
                if idx >= mem[_1669]:
                    revert with 0, 50
                _3870 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _3874 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _3878 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _3884 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _3896 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _3906 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1669 + 32] + 192] = bool(mem[_3729 + 288])
                mem[_3906 + 160] = bool(_3843)
                mem[_3896 + 128] = bool(_3793)
                mem[_3884 + 96] = bool(_3751)
                mem[_3878 + 64] = _3748
                mem[_3874 + 32] = _3747
                mem[_3870] = _3746
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _4397 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _4397:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _4415 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_4415 + 224] == mem[_4415 + 251 len 5]
                require mem[_4415 + 256] == bool(mem[_4415 + 256])
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_4415] and 1 > -1 / mem[_4415]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_4415] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4415]:
                        revert with 0, 17
                    if mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_4415 + 32] > !mem[_4415 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_4415 + 32] + mem[_4415 + 64] and 1 > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_4415 + 32] + mem[_4415 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                            revert with 0, 17
                        if (mem[_4415 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_4415 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _4397 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_4415 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_4415 + 32] + mem[_4415 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _4397 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _4397 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_4415 + 32] + mem[_4415 + 64] and x * y > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_4415 + 32] * x * y) + (mem[_4415 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4415 + 32] * x * y) + (mem[_4415 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_4415 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4415 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4397 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_4415 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4415] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_4415] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_4415]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18):
                        revert with 0, 17
                    if mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_4415 + 32] > !mem[_4415 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_4415 + 32] + mem[_4415 + 64] and 1 > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_4415 + 32] + mem[_4415 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                            revert with 0, 17
                        if (mem[_4415 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_4415 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _4397 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_4415 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_4415 + 32] + mem[_4415 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _4397 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _4397 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_4415 + 32] + mem[_4415 + 64] and x * y > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_4415 + 32] * x * y) + (mem[_4415 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4415 + 32] * x * y) + (mem[_4415 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_4415 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4415 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4397 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_4415 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4415] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _4397 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_4415] and x * y > -1 / mem[_4415]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_4415] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4415] * x * y:
                    revert with 0, 17
                if mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_4415 + 32] > !mem[_4415 + 64]:
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_4415 + 32] + mem[_4415 + 64] and 1 > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_4415 + 32] + mem[_4415 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                        revert with 0, 17
                    if (mem[_4415 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4415 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4397 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_4415 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_4415 + 32] + mem[_4415 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _4397 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_4415 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _4397 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_4415 + 32] + mem[_4415 + 64] and z * a > -1 / mem[_4415 + 32] + mem[_4415 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_4415 + 32] * z * a) + (mem[_4415 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_4415 + 32] * z * a) + (mem[_4415 + 64] * z * a):
                    revert with 0, 17
                if (mem[_4415 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_4415 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _4397 = mem[96]
                idx = idx + 1
                s = s + ((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                t = t + ((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                u = u + ((mem[_4415 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_4415 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_4415] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg4:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg4
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg4 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg4) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg4) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg4
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg4) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg4,
                   mem[mem[64] + 192]
        mem[64] = _1669 + (32 * arg2.length) + 608
        mem[_1669 + (32 * arg2.length) + 320] = 0
        mem[_1669 + (32 * arg2.length) + 352] = 0
        mem[_1669 + (32 * arg2.length) + 384] = 0
        mem[_1669 + (32 * arg2.length) + 416] = 0
        mem[_1669 + (32 * arg2.length) + 448] = 0
        mem[_1669 + (32 * arg2.length) + 480] = 0
        mem[_1669 + (32 * arg2.length) + 512] = 0
        mem[_1669 + (32 * arg2.length) + 544] = 0
        mem[_1669 + (32 * arg2.length) + 576] = 0
        mem[var112002] = var112001
        if not var112003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5273 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _5290 = mem[_5273]
                _5291 = mem[_5273 + 32]
                _5292 = mem[_5273 + 64]
                _5295 = mem[_5273 + 160]
                require mem[_5273 + 160] == bool(mem[_5273 + 160])
                _5334 = mem[_5273 + 192]
                require mem[_5273 + 192] == bool(mem[_5273 + 192])
                require mem[_5273 + 224] == bool(mem[_5273 + 224])
                _5387 = mem[_5273 + 256]
                require mem[_5273 + 256] == bool(mem[_5273 + 256])
                require mem[_5273 + 288] == bool(mem[_5273 + 288])
                if idx >= mem[_1669]:
                    revert with 0, 50
                _5414 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _5418 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _5422 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _5428 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _5440 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _5450 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1669 + 32] + 192] = bool(mem[_5273 + 288])
                mem[_5450 + 160] = bool(_5387)
                mem[_5440 + 128] = bool(_5334)
                mem[_5428 + 96] = bool(_5295)
                mem[_5422 + 64] = _5292
                mem[_5418 + 32] = _5291
                mem[_5414] = _5290
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _5941 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _5941:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5959 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_5959 + 224] == mem[_5959 + 251 len 5]
                require mem[_5959 + 256] == bool(mem[_5959 + 256])
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_5959] and 1 > -1 / mem[_5959]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_5959] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5959]:
                        revert with 0, 17
                    if mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_5959 + 32] > !mem[_5959 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_5959 + 32] + mem[_5959 + 64] and 1 > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_5959 + 32] + mem[_5959 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                            revert with 0, 17
                        if (mem[_5959 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_5959 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _5941 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_5959 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_5959 + 32] + mem[_5959 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _5941 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _5941 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_5959 + 32] + mem[_5959 + 64] and x * y > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_5959 + 32] * x * y) + (mem[_5959 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5959 + 32] * x * y) + (mem[_5959 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_5959 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5959 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5941 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_5959 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5959] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_5959] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_5959]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18):
                        revert with 0, 17
                    if mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_5959 + 32] > !mem[_5959 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_5959 + 32] + mem[_5959 + 64] and 1 > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_5959 + 32] + mem[_5959 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                            revert with 0, 17
                        if (mem[_5959 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_5959 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _5941 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_5959 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_5959 + 32] + mem[_5959 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _5941 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _5941 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_5959 + 32] + mem[_5959 + 64] and x * y > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_5959 + 32] * x * y) + (mem[_5959 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5959 + 32] * x * y) + (mem[_5959 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_5959 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5959 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5941 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_5959 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5959] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _5941 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_5959] and x * y > -1 / mem[_5959]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_5959] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5959] * x * y:
                    revert with 0, 17
                if mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_5959 + 32] > !mem[_5959 + 64]:
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_5959 + 32] + mem[_5959 + 64] and 1 > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_5959 + 32] + mem[_5959 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                        revert with 0, 17
                    if (mem[_5959 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5959 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5941 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_5959 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_5959 + 32] + mem[_5959 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _5941 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_5959 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _5941 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_5959 + 32] + mem[_5959 + 64] and z * a > -1 / mem[_5959 + 32] + mem[_5959 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_5959 + 32] * z * a) + (mem[_5959 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_5959 + 32] * z * a) + (mem[_5959 + 64] * z * a):
                    revert with 0, 17
                if (mem[_5959 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_5959 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _5941 = mem[96]
                idx = idx + 1
                s = s + ((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                t = t + ((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                u = u + ((mem[_5959 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_5959 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_5959] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg4:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg4
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg4 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg4) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg4) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg4
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg4) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg4,
                   mem[mem[64] + 192]
        mem[64] = _1669 + (32 * arg2.length) + 896
        mem[_1669 + (32 * arg2.length) + 608] = 0
        mem[_1669 + (32 * arg2.length) + 640] = 0
        mem[_1669 + (32 * arg2.length) + 672] = 0
        mem[_1669 + (32 * arg2.length) + 704] = 0
        mem[_1669 + (32 * arg2.length) + 736] = 0
        mem[_1669 + (32 * arg2.length) + 768] = 0
        mem[_1669 + (32 * arg2.length) + 800] = 0
        mem[_1669 + (32 * arg2.length) + 832] = 0
        mem[_1669 + (32 * arg2.length) + 864] = 0
        mem[var116002] = var116001
        if not var116003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6817 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _6834 = mem[_6817]
                _6835 = mem[_6817 + 32]
                _6836 = mem[_6817 + 64]
                _6839 = mem[_6817 + 160]
                require mem[_6817 + 160] == bool(mem[_6817 + 160])
                _6878 = mem[_6817 + 192]
                require mem[_6817 + 192] == bool(mem[_6817 + 192])
                require mem[_6817 + 224] == bool(mem[_6817 + 224])
                _6931 = mem[_6817 + 256]
                require mem[_6817 + 256] == bool(mem[_6817 + 256])
                require mem[_6817 + 288] == bool(mem[_6817 + 288])
                if idx >= mem[_1669]:
                    revert with 0, 50
                _6958 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _6962 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _6966 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _6972 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _6984 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _6994 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1669 + 32] + 192] = bool(mem[_6817 + 288])
                mem[_6994 + 160] = bool(_6931)
                mem[_6984 + 128] = bool(_6878)
                mem[_6972 + 96] = bool(_6839)
                mem[_6966 + 64] = _6836
                mem[_6962 + 32] = _6835
                mem[_6958] = _6834
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _7485 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _7485:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _7503 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_7503 + 224] == mem[_7503 + 251 len 5]
                require mem[_7503 + 256] == bool(mem[_7503 + 256])
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_7503] and 1 > -1 / mem[_7503]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_7503] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7503]:
                        revert with 0, 17
                    if mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_7503 + 32] > !mem[_7503 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_7503 + 32] + mem[_7503 + 64] and 1 > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_7503 + 32] + mem[_7503 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                            revert with 0, 17
                        if (mem[_7503 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_7503 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _7485 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_7503 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_7503 + 32] + mem[_7503 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _7485 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _7485 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_7503 + 32] + mem[_7503 + 64] and x * y > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_7503 + 32] * x * y) + (mem[_7503 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7503 + 32] * x * y) + (mem[_7503 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_7503 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_7503 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _7485 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_7503 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_7503] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_7503] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_7503]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18):
                        revert with 0, 17
                    if mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_7503 + 32] > !mem[_7503 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_7503 + 32] + mem[_7503 + 64] and 1 > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_7503 + 32] + mem[_7503 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                            revert with 0, 17
                        if (mem[_7503 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_7503 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _7485 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_7503 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_7503 + 32] + mem[_7503 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _7485 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _7485 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_7503 + 32] + mem[_7503 + 64] and x * y > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_7503 + 32] * x * y) + (mem[_7503 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7503 + 32] * x * y) + (mem[_7503 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_7503 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_7503 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _7485 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_7503 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_7503] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _7485 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_7503] and x * y > -1 / mem[_7503]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_7503] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7503] * x * y:
                    revert with 0, 17
                if mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_7503 + 32] > !mem[_7503 + 64]:
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_7503 + 32] + mem[_7503 + 64] and 1 > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_7503 + 32] + mem[_7503 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                        revert with 0, 17
                    if (mem[_7503 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_7503 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _7485 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_7503 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_7503 + 32] + mem[_7503 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _7485 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_7503 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _7485 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_7503 + 32] + mem[_7503 + 64] and z * a > -1 / mem[_7503 + 32] + mem[_7503 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_7503 + 32] * z * a) + (mem[_7503 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_7503 + 32] * z * a) + (mem[_7503 + 64] * z * a):
                    revert with 0, 17
                if (mem[_7503 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_7503 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _7485 = mem[96]
                idx = idx + 1
                s = s + ((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                t = t + ((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                u = u + ((mem[_7503 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_7503 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_7503] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg4:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg4
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg4 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg4) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg4) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg4
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg4) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg4,
                   mem[mem[64] + 192]
        mem[64] = _1669 + (32 * arg2.length) + 1184
        mem[_1669 + (32 * arg2.length) + 896] = 0
        mem[_1669 + (32 * arg2.length) + 928] = 0
        mem[_1669 + (32 * arg2.length) + 960] = 0
        mem[_1669 + (32 * arg2.length) + 992] = 0
        mem[_1669 + (32 * arg2.length) + 1024] = 0
        mem[_1669 + (32 * arg2.length) + 1056] = 0
        mem[_1669 + (32 * arg2.length) + 1088] = 0
        mem[_1669 + (32 * arg2.length) + 1120] = 0
        mem[_1669 + (32 * arg2.length) + 1152] = 0
        mem[var120002] = var120001
        if not var120003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8361 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _8378 = mem[_8361]
                _8379 = mem[_8361 + 32]
                _8380 = mem[_8361 + 64]
                _8383 = mem[_8361 + 160]
                require mem[_8361 + 160] == bool(mem[_8361 + 160])
                _8422 = mem[_8361 + 192]
                require mem[_8361 + 192] == bool(mem[_8361 + 192])
                require mem[_8361 + 224] == bool(mem[_8361 + 224])
                _8475 = mem[_8361 + 256]
                require mem[_8361 + 256] == bool(mem[_8361 + 256])
                require mem[_8361 + 288] == bool(mem[_8361 + 288])
                if idx >= mem[_1669]:
                    revert with 0, 50
                _8502 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _8506 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _8510 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _8516 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _8528 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _8538 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1669 + 32] + 192] = bool(mem[_8361 + 288])
                mem[_8538 + 160] = bool(_8475)
                mem[_8528 + 128] = bool(_8422)
                mem[_8516 + 96] = bool(_8383)
                mem[_8510 + 64] = _8380
                mem[_8506 + 32] = _8379
                mem[_8502] = _8378
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _9029 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _9029:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9047 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_9047 + 224] == mem[_9047 + 251 len 5]
                require mem[_9047 + 256] == bool(mem[_9047 + 256])
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_9047] and 1 > -1 / mem[_9047]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_9047] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9047]:
                        revert with 0, 17
                    if mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_9047 + 32] > !mem[_9047 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_9047 + 32] + mem[_9047 + 64] and 1 > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_9047 + 32] + mem[_9047 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                            revert with 0, 17
                        if (mem[_9047 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_9047 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _9029 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_9047 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_9047 + 32] + mem[_9047 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _9029 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _9029 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_9047 + 32] + mem[_9047 + 64] and x * y > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_9047 + 32] * x * y) + (mem[_9047 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9047 + 32] * x * y) + (mem[_9047 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_9047 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_9047 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _9029 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_9047 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_9047] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_9047] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_9047]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18):
                        revert with 0, 17
                    if mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_9047 + 32] > !mem[_9047 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_9047 + 32] + mem[_9047 + 64] and 1 > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_9047 + 32] + mem[_9047 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                            revert with 0, 17
                        if (mem[_9047 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_9047 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _9029 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_9047 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_9047 + 32] + mem[_9047 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _9029 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _9029 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_9047 + 32] + mem[_9047 + 64] and x * y > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_9047 + 32] * x * y) + (mem[_9047 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9047 + 32] * x * y) + (mem[_9047 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_9047 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_9047 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _9029 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_9047 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_9047] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _9029 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_9047] and x * y > -1 / mem[_9047]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_9047] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9047] * x * y:
                    revert with 0, 17
                if mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_9047 + 32] > !mem[_9047 + 64]:
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_9047 + 32] + mem[_9047 + 64] and 1 > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_9047 + 32] + mem[_9047 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                        revert with 0, 17
                    if (mem[_9047 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_9047 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _9029 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_9047 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_9047 + 32] + mem[_9047 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _9029 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_9047 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _9029 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_9047 + 32] + mem[_9047 + 64] and z * a > -1 / mem[_9047 + 32] + mem[_9047 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_9047 + 32] * z * a) + (mem[_9047 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_9047 + 32] * z * a) + (mem[_9047 + 64] * z * a):
                    revert with 0, 17
                if (mem[_9047 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_9047 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _9029 = mem[96]
                idx = idx + 1
                s = s + ((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                t = t + ((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                u = u + ((mem[_9047 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_9047 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_9047] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg4:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg4
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg4 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg4) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg4) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg4
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg4) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg4,
                   mem[mem[64] + 192]
        mem[64] = _1669 + (32 * arg2.length) + 1472
        mem[_1669 + (32 * arg2.length) + 1184] = 0
        mem[_1669 + (32 * arg2.length) + 1216] = 0
        mem[_1669 + (32 * arg2.length) + 1248] = 0
        mem[_1669 + (32 * arg2.length) + 1280] = 0
        mem[_1669 + (32 * arg2.length) + 1312] = 0
        mem[_1669 + (32 * arg2.length) + 1344] = 0
        mem[_1669 + (32 * arg2.length) + 1376] = 0
        mem[_1669 + (32 * arg2.length) + 1408] = 0
        mem[_1669 + (32 * arg2.length) + 1440] = 0
        mem[var124002] = var124001
        if not var124003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9905 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _9922 = mem[_9905]
                _9923 = mem[_9905 + 32]
                _9924 = mem[_9905 + 64]
                _9927 = mem[_9905 + 160]
                require mem[_9905 + 160] == bool(mem[_9905 + 160])
                _9966 = mem[_9905 + 192]
                require mem[_9905 + 192] == bool(mem[_9905 + 192])
                require mem[_9905 + 224] == bool(mem[_9905 + 224])
                _10019 = mem[_9905 + 256]
                require mem[_9905 + 256] == bool(mem[_9905 + 256])
                require mem[_9905 + 288] == bool(mem[_9905 + 288])
                if idx >= mem[_1669]:
                    revert with 0, 50
                _10046 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _10050 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _10054 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _10060 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _10072 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _10082 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1669 + 32] + 192] = bool(mem[_9905 + 288])
                mem[_10082 + 160] = bool(_10019)
                mem[_10072 + 128] = bool(_9966)
                mem[_10060 + 96] = bool(_9927)
                mem[_10054 + 64] = _9924
                mem[_10050 + 32] = _9923
                mem[_10046] = _9922
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _10573 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _10573:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10591 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_10591 + 224] == mem[_10591 + 251 len 5]
                require mem[_10591 + 256] == bool(mem[_10591 + 256])
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_10591] and 1 > -1 / mem[_10591]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_10591] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10591]:
                        revert with 0, 17
                    if mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_10591 + 32] > !mem[_10591 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_10591 + 32] + mem[_10591 + 64] and 1 > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_10591 + 32] + mem[_10591 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                            revert with 0, 17
                        if (mem[_10591 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_10591 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _10573 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_10591 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_10591 + 32] + mem[_10591 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _10573 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _10573 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_10591 + 32] + mem[_10591 + 64] and x * y > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_10591 + 32] * x * y) + (mem[_10591 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10591 + 32] * x * y) + (mem[_10591 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_10591 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_10591 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _10573 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_10591 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_10591] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_10591] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_10591]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18):
                        revert with 0, 17
                    if mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_10591 + 32] > !mem[_10591 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_10591 + 32] + mem[_10591 + 64] and 1 > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_10591 + 32] + mem[_10591 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                            revert with 0, 17
                        if (mem[_10591 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_10591 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _10573 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_10591 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_10591 + 32] + mem[_10591 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _10573 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _10573 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_10591 + 32] + mem[_10591 + 64] and x * y > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_10591 + 32] * x * y) + (mem[_10591 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10591 + 32] * x * y) + (mem[_10591 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_10591 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_10591 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _10573 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_10591 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_10591] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _10573 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_10591] and x * y > -1 / mem[_10591]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_10591] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10591] * x * y:
                    revert with 0, 17
                if mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_10591 + 32] > !mem[_10591 + 64]:
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_10591 + 32] + mem[_10591 + 64] and 1 > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_10591 + 32] + mem[_10591 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                        revert with 0, 17
                    if (mem[_10591 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_10591 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _10573 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_10591 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_10591 + 32] + mem[_10591 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _10573 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_10591 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _10573 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_10591 + 32] + mem[_10591 + 64] and z * a > -1 / mem[_10591 + 32] + mem[_10591 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_10591 + 32] * z * a) + (mem[_10591 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_10591 + 32] * z * a) + (mem[_10591 + 64] * z * a):
                    revert with 0, 17
                if (mem[_10591 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_10591 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _10573 = mem[96]
                idx = idx + 1
                s = s + ((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                t = t + ((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                u = u + ((mem[_10591 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_10591 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_10591] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg4:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg4
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg4 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg4) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg4) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg4
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg4) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg4,
                   mem[mem[64] + 192]
        mem[64] = _1669 + (32 * arg2.length) + 1760
        mem[_1669 + (32 * arg2.length) + 1472] = 0
        mem[_1669 + (32 * arg2.length) + 1504] = 0
        mem[_1669 + (32 * arg2.length) + 1536] = 0
        mem[_1669 + (32 * arg2.length) + 1568] = 0
        mem[_1669 + (32 * arg2.length) + 1600] = 0
        mem[_1669 + (32 * arg2.length) + 1632] = 0
        mem[_1669 + (32 * arg2.length) + 1664] = 0
        mem[_1669 + (32 * arg2.length) + 1696] = 0
        mem[_1669 + (32 * arg2.length) + 1728] = 0
        mem[var128002] = var128001
        if not var128003 - 1:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _11449 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _11466 = mem[_11449]
                _11467 = mem[_11449 + 32]
                _11468 = mem[_11449 + 64]
                _11471 = mem[_11449 + 160]
                require mem[_11449 + 160] == bool(mem[_11449 + 160])
                _11510 = mem[_11449 + 192]
                require mem[_11449 + 192] == bool(mem[_11449 + 192])
                require mem[_11449 + 224] == bool(mem[_11449 + 224])
                _11563 = mem[_11449 + 256]
                require mem[_11449 + 256] == bool(mem[_11449 + 256])
                require mem[_11449 + 288] == bool(mem[_11449 + 288])
                if idx >= mem[_1669]:
                    revert with 0, 50
                _11590 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _11594 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _11598 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _11604 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _11616 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _11626 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1669 + 32] + 192] = bool(mem[_11449 + 288])
                mem[_11626 + 160] = bool(_11563)
                mem[_11616 + 128] = bool(_11510)
                mem[_11604 + 96] = bool(_11471)
                mem[_11598 + 64] = _11468
                mem[_11594 + 32] = _11467
                mem[_11590] = _11466
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _12117 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _12117:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _12135 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_12135 + 224] == mem[_12135 + 251 len 5]
                require mem[_12135 + 256] == bool(mem[_12135 + 256])
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_12135] and 1 > -1 / mem[_12135]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_12135] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12135]:
                        revert with 0, 17
                    if mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_12135 + 32] > !mem[_12135 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_12135 + 32] + mem[_12135 + 64] and 1 > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_12135 + 32] + mem[_12135 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                            revert with 0, 17
                        if (mem[_12135 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_12135 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _12117 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_12135 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_12135 + 32] + mem[_12135 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _12117 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _12117 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_12135 + 32] + mem[_12135 + 64] and x * y > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_12135 + 32] * x * y) + (mem[_12135 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12135 + 32] * x * y) + (mem[_12135 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_12135 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_12135 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _12117 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_12135 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_12135] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_12135] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_12135]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18):
                        revert with 0, 17
                    if mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_12135 + 32] > !mem[_12135 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_12135 + 32] + mem[_12135 + 64] and 1 > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_12135 + 32] + mem[_12135 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                            revert with 0, 17
                        if (mem[_12135 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_12135 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _12117 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_12135 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                        if mem[_12135 + 32] + mem[_12135 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _12117 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    x = 10
                    y = 1
                    w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                    while w > 1:
                        if x > -1 / x:
                            revert with 0, 17
                        _12117 = mem[96]
                        if not bool(w):
                            x = x * x
                            y = y
                            w = uint255(w) * 0.5
                            continue 
                        x = x * x
                        y = x * y
                        w = uint255(w) * 0.5
                        continue 
                    if y > -1 / x:
                        revert with 0, 17
                    if mem[_12135 + 32] + mem[_12135 + 64] and x * y > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_12135 + 32] * x * y) + (mem[_12135 + 64] * x * y) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12135 + 32] * x * y) + (mem[_12135 + 64] * x * y):
                        revert with 0, 17
                    if (mem[_12135 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_12135 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _12117 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_12135 + 32] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_12135] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                x = 10
                y = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if x > -1 / x:
                        revert with 0, 17
                    _12117 = mem[96]
                    if not bool(w):
                        x = x * x
                        y = y
                        w = uint255(w) * 0.5
                        continue 
                    x = x * x
                    y = x * y
                    w = uint255(w) * 0.5
                    continue 
                if y > -1 / x:
                    revert with 0, 17
                if mem[_12135] and x * y > -1 / mem[_12135]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if mem[_12135] * x * y and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12135] * x * y:
                    revert with 0, 17
                if mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                    revert with 0, 17
                if mem[_12135 + 32] > !mem[_12135 + 64]:
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_12135 + 32] + mem[_12135 + 64] and 1 > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_12135 + 32] + mem[_12135 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                        revert with 0, 17
                    if (mem[_12135 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_12135 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _12117 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_12135 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                if bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78)) or bool(bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32)):
                    if mem[_12135 + 32] + mem[_12135 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if (mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                        revert with 0, 17
                    if (mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                        revert with 0, 17
                    if v > !((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if u > !((mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if s > !((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                        revert with 0, 17
                    if t > !((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    _12117 = mem[96]
                    idx = idx + 1
                    s = s + ((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                    t = t + ((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                    u = u + ((mem[_12135 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    v = v + ((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                    continue 
                z = 10
                a = 1
                w = -mem[mem[(32 * idx) + _1669 + 32]] + 18
                while w > 1:
                    if z > -1 / z:
                        revert with 0, 17
                    _12117 = mem[96]
                    if not bool(w):
                        z = z * z
                        a = a
                        w = uint255(w) * 0.5
                        continue 
                    z = z * z
                    a = z * a
                    w = uint255(w) * 0.5
                    continue 
                if a > -1 / z:
                    revert with 0, 17
                if mem[_12135 + 32] + mem[_12135 + 64] and z * a > -1 / mem[_12135 + 32] + mem[_12135 + 64]:
                    revert with 0, 17
                if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                    revert with 0, 50
                if (mem[_12135 + 32] * z * a) + (mem[_12135 + 64] * z * a) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_12135 + 32] * z * a) + (mem[_12135 + 64] * z * a):
                    revert with 0, 17
                if (mem[_12135 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                    revert with 0, 17
                if v > !((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if u > !((mem[_12135 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if s > !((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                    revert with 0, 17
                if idx >= mem[_1669]:
                    revert with 0, 50
                if (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                    revert with 0, 17
                if t > !((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                _12117 = mem[96]
                idx = idx + 1
                s = s + ((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                t = t + ((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                u = u + ((mem[_12135 + 32] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_12135 + 64] * z * a * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                v = v + ((mem[_12135] * x * y * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg4:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg4
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg4 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg4) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg4) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg4
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg4) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg4,
                   mem[mem[64] + 192]
        mem[64] = _1669 + (32 * arg2.length) + 2048
        mem[_1669 + (32 * arg2.length) + 1760] = 0
        mem[_1669 + (32 * arg2.length) + 1792] = 0
        mem[_1669 + (32 * arg2.length) + 1824] = 0
        mem[_1669 + (32 * arg2.length) + 1856] = 0
        mem[_1669 + (32 * arg2.length) + 1888] = 0
        mem[_1669 + (32 * arg2.length) + 1920] = 0
        mem[_1669 + (32 * arg2.length) + 1952] = 0
        mem[_1669 + (32 * arg2.length) + 1984] = 0
        mem[_1669 + (32 * arg2.length) + 2016] = 0
        mem[var132002] = var132001
        if var132003 - 1:
            # nil
        else:
            idx = 0
            while idx < arg2.length:
                if idx >= mem[96]:
                    revert with 0, 50
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getReserveConfigurationData(address rg1) with:
                        gas gas_remaining wei
                       args address(mem[(32 * idx) + 128])
                mem[mem[64] len 320] = ext_call.return_data[0 len 320]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _12993 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 320
                _13010 = mem[_12993]
                _13011 = mem[_12993 + 32]
                _13012 = mem[_12993 + 64]
                _13015 = mem[_12993 + 160]
                require mem[_12993 + 160] == bool(mem[_12993 + 160])
                _13054 = mem[_12993 + 192]
                require mem[_12993 + 192] == bool(mem[_12993 + 192])
                require mem[_12993 + 224] == bool(mem[_12993 + 224])
                _13107 = mem[_12993 + 256]
                require mem[_12993 + 256] == bool(mem[_12993 + 256])
                require mem[_12993 + 288] == bool(mem[_12993 + 288])
                if idx >= mem[_1669]:
                    revert with 0, 50
                _13134 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _13138 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _13142 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _13148 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _13160 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                _13170 = mem[(32 * idx) + _1669 + 32]
                if idx >= mem[_1669]:
                    revert with 0, 50
                mem[mem[(32 * idx) + _1669 + 32] + 192] = bool(mem[_12993 + 288])
                mem[_13170 + 160] = bool(_13107)
                mem[_13160 + 128] = bool(_13054)
                mem[_13148 + 96] = bool(_13015)
                mem[_13142 + 64] = _13012
                mem[_13138 + 32] = _13011
                mem[_13134] = _13010
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            _13661 = mem[96]
            idx = 0
            s = 0
            t = 0
            u = 0
            v = 0
            while idx < _13661:
                if idx >= mem[96]:
                    revert with 0, 50
                mem[mem[64] + 4] = mem[(32 * idx) + 140 len 20]
                require ext_code.size(sub_5f9d4d2eAddress)
                staticcall sub_5f9d4d2eAddress.getUserReserveData(address rg1, address rg2) with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4], address(arg1)
                mem[mem[64] len 288] = ext_call.return_data[0 len 288]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13679 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 288
                require mem[_13679 + 224] == mem[_13679 + 251 len 5]
                require mem[_13679 + 256] == bool(mem[_13679 + 256])
                if idx >= mem[_1669]:
                    revert with 0, 50
                if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                    revert with 0, 17
                if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                    if mem[_13679] and 1 > -1 / mem[_13679]:
                        revert with 0, 17
                    if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                        revert with 0, 50
                    if mem[_13679] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_13679]:
                        revert with 0, 17
                    if mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                        revert with 0, 17
                    if mem[_13679 + 32] > !mem[_13679 + 64]:
                        revert with 0, 17
                    if idx >= mem[_1669]:
                        revert with 0, 50
                    if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                        revert with 0, 17
                    if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                        if mem[_13679 + 32] + mem[_13679 + 64] and 1 > -1 / mem[_13679 + 32] + mem[_13679 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_13679 + 32] + mem[_13679 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_13679 + 32] + mem[_13679 + 64]:
                            revert with 0, 17
                        if (mem[_13679 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_13679 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _13661 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_13679 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                    if not bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32):
                        # nil
                    else:
                        if mem[_13679 + 32] + mem[_13679 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_13679 + 32] + mem[_13679 + 64]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if (mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                            revert with 0, 17
                        if (mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                            revert with 0, 17
                        if v > !((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if u > !((mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if s > !((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if (mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                            revert with 0, 17
                        if t > !((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        _13661 = mem[96]
                        idx = idx + 1
                        s = s + ((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                        t = t + ((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                        u = u + ((mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        v = v + ((mem[_13679] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                        continue 
                else:
                    if not bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32):
                        # nil
                    else:
                        if mem[_13679] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_13679]:
                            revert with 0, 17
                        if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                            revert with 0, 50
                        if mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18):
                            revert with 0, 17
                        if mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -500000000000000001:
                            revert with 0, 17
                        if mem[_13679 + 32] > !mem[_13679 + 64]:
                            revert with 0, 17
                        if idx >= mem[_1669]:
                            revert with 0, 50
                        if 18 < mem[mem[(32 * idx) + _1669 + 32]]:
                            revert with 0, 17
                        if not -mem[mem[(32 * idx) + _1669 + 32]] + 18:
                            if mem[_13679 + 32] + mem[_13679 + 64] and 1 > -1 / mem[_13679 + 32] + mem[_13679 + 64]:
                                revert with 0, 17
                            if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                                revert with 0, 50
                            if mem[_13679 + 32] + mem[_13679 + 64] and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / mem[_13679 + 32] + mem[_13679 + 64]:
                                revert with 0, 17
                            if (mem[_13679 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                                revert with 0, 17
                            if v > !((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                                revert with 0, 17
                            if u > !((mem[_13679 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                                revert with 0, 17
                            if idx >= mem[_1669]:
                                revert with 0, 50
                            if (mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                                revert with 0, 17
                            if s > !((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                                revert with 0, 17
                            if idx >= mem[_1669]:
                                revert with 0, 50
                            if (mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                                revert with 0, 17
                            if t > !((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            _13661 = mem[96]
                            idx = idx + 1
                            s = s + ((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                            t = t + ((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                            u = u + ((mem[_13679 + 32] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                            v = v + ((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                            continue 
                        if not bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 78) and not bool(-mem[mem[(32 * idx) + _1669 + 32]] + 18 < 32):
                            # nil
                        else:
                            if mem[_13679 + 32] + mem[_13679 + 64] and 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) > -1 / mem[_13679 + 32] + mem[_13679 + 64]:
                                revert with 0, 17
                            if idx >= mem[ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 545]:
                                revert with 0, 50
                            if (mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) and mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577] > -1 / (mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18)):
                                revert with 0, 17
                            if (mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) > -500000000000000001:
                                revert with 0, 17
                            if v > !((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                                revert with 0, 17
                            if u > !((mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18):
                                revert with 0, 17
                            if idx >= mem[_1669]:
                                revert with 0, 50
                            if (mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 64] > -1 / (mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                                revert with 0, 17
                            if s > !((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000):
                                revert with 0, 17
                            if idx >= mem[_1669]:
                                revert with 0, 50
                            if (mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 and mem[mem[(32 * idx) + _1669 + 32] + 32] > -1 / (mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18:
                                revert with 0, 17
                            if t > !((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            _13661 = mem[96]
                            idx = idx + 1
                            s = s + ((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 64] / 10000)
                            t = t + ((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18 * mem[mem[(32 * idx) + _1669 + 32] + 32] / 10000)
                            u = u + ((mem[_13679 + 32] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + (mem[_13679 + 64] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                            v = v + ((mem[_13679] * 10^(-mem[mem[(32 * idx) + _1669 + 32]] + 18) * mem[(32 * idx) + ceil32(32 * arg2.length) + (6 * ceil32(return_data.size)) + 577]) + 5 * 10^17 / 10^18)
                            continue 
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 449] = v
            if u > !arg4:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 481] = u + arg4
            if t > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 385] = 10000 * t / v
            if s > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 417] = 10000 * s / v
            if u + arg4 > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                revert with 0, 17
            if not v:
                revert with 0, 18
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 353] = (10000 * u) + (10000 * arg4) / v
            if 10^18 < arg5:
                revert with 0, 17
            if v and -arg5 + 10^18 > -1 / v:
                revert with 0, 17
            if (10^18 * v) - (arg5 * v) > -500000000000000001:
                revert with 0, 17
            if s < (10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18:
                revert with 0, 17
            mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 321] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64]] = u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18)
            mem[mem[64] + 32] = (10000 * u) + (10000 * arg4) / v
            mem[mem[64] + 64] = 10000 * t / v
            mem[mem[64] + 96] = 10000 * s / v
            mem[mem[64] + 128] = v
            mem[mem[64] + 160] = u + arg4
            mem[mem[64] + 192] = mem[ceil32(32 * arg2.length) + (2 * ceil32(return_data.size)) + 513]
            return u + arg4 < s - ((10^18 * v) + (-1 * arg5 * v) + 5 * 10^17 / 10^18), 
                   (10000 * u) + (10000 * arg4) / v,
                   10000 * t / v,
                   10000 * s / v,
                   v,
                   u + arg4,
                   mem[mem[64] + 192]
}



}
