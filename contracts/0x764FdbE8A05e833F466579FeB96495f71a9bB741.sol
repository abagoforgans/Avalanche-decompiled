contract main {




// =====================  Runtime code  =====================


#
#  - sub_01251f2a(?)
#  - sub_255d7d55(?)
#  - cashoutAll()
#  - sub_ae8369e8(?)
#  - sub_b6492247(?)
#
uint256 totalShares;
array of uint256 stor1;
array of uint256 shares;
array of uint256 released;
array of address payee;
array of uint256 totalReleased;
array of uint256 released;
array of uint256 stor7;
array of uint256 stor8;
array of uint256 stor9;
array of uint256 stor10;
array of uint256 stor11;
mapping of uint256 sub_f5368c29;
address sub_ef630563Address;
address sub_9cfccb46Address;
address sub_ea84397bAddress;
array of struct stor18;
address _uniswapV2RouterAddress;
address futurUsePoolAddress;
address distributionPoolAddress;
address sub_2a607841Address;
uint256 rewardsFee;
uint256 liquidityPoolFee;
uint256 futurFee;
uint256 totalFees;
uint256 cashoutFee;
uint8 stor28;
uint8 stor28; offset 8
uint256 swapTokensAmount;
uint8 stor30;
uint8 stor30; offset 8
uint256 stor30; offset 16
uint256 stor30; offset 8
array of struct stor99;

function totalFees() {
    return totalFees
}

function sub_2a607841(?) {
    return sub_2a607841Address
}

function rewardsFee() {
    return rewardsFee
}

function totalShares() {
    return totalShares
}

function released(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return released[address(arg1)][address(arg2)]
}

function liquidityPoolFee() {
    return liquidityPoolFee
}

function _uniswapV2Router() {
    return _uniswapV2RouterAddress
}

function swapTokensAmount() {
    return swapTokensAmount
}

function cashoutFee() {
    return cashoutFee
}

function payee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if arg1 >= payee.length:
        revert with 0, 50
    return address(payee[arg1])
}

function released(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return released[address(arg1)]
}

function sub_9cfccb46(?) {
    return sub_9cfccb46Address
}

function futurUsePool() {
    return futurUsePoolAddress
}

function futurFee() {
    return futurFee
}

function distributionPool() {
    return distributionPoolAddress
}

function shares(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return shares[address(arg1)]
}

function totalReleased(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return totalReleased[address(arg1)]
}

function totalReleased() {
    return stor1.length
}

function sub_ea84397b(?) {
    return sub_ea84397bAddress
}

function sub_ef630563(?) {
    return sub_ef630563Address
}

function sub_f5368c29(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_f5368c29[arg1]
}

function _fallback() payable {
    revert
}

function updateCashoutFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    cashoutFee = arg1
}

function updateSwapTokensAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    swapTokensAmount = arg1
}

function setToken(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    sub_9cfccb46Address = arg1
}

function updateFuturWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    futurUsePoolAddress = arg1
}

function sub_3f8bdd22(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    sub_ef630563Address = address(arg1)
}

function updateRewardsWall(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    distributionPoolAddress = arg1
}

function sub_69d0013b(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    uint8(stor30.field_0) = uint8(bool(arg1))
}

function sub_4c0768fc(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    Mask(248, 0, stor30.field_8) = Mask(248, 0, bool(arg1))
}

function sub_e19d3c48(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    Mask(240, 0, stor30.field_16) = Mask(240, 0, bool(arg1))
}

function sub_d6a0d2ee(?) {
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x7e923cd8 with:
         gas gas_remaining wei
        args 7
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return delegate.return_data[0]
}

function updateLiquiditFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    liquidityPoolFee = arg1
    if rewardsFee > !arg1:
        revert with 0, 17
    if rewardsFee + arg1 > !futurFee:
        revert with 0, 17
    totalFees = rewardsFee + arg1 + futurFee
}

function updateRewardsFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    rewardsFee = arg1
    if arg1 > !liquidityPoolFee:
        revert with 0, 17
    if arg1 + liquidityPoolFee > !futurFee:
        revert with 0, 17
    totalFees = arg1 + liquidityPoolFee + futurFee
}

function updateFuturFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    futurFee = arg1
    if rewardsFee > !liquidityPoolFee:
        revert with 0, 17
    if rewardsFee + liquidityPoolFee > !arg1:
        revert with 0, 17
    totalFees = rewardsFee + liquidityPoolFee + arg1
}

function updateUniswapV2Router(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    if _uniswapV2RouterAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'TKN: The router already has that address'
    _uniswapV2RouterAddress = arg1
}

function sub_4c7f490e(?) payable {
    mem[64] = 96
    require not msg.value
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    mem[96] = 0x7e923cd800000000000000000000000000000000000000000000000000000000
    mem[var80001] = 7
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.mem[var84003 len 4] with:
         gas gas_remaining wei
        args mem[var84003 + 4 len var84004 - 4]
    mem[var84005] = delegate.return_data[0]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require var88002 - var88001 >= 32
    if var94002 >= var94001:
        return 0
    mem[ceil32(return_data.size) + 96] = 0x3846629900000000000000000000000000000000000000000000000000000000
    mem[var98001] = 7
    mem[var98001 + 32] = var98002
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.mem[var102003 len 4] with:
         gas gas_remaining wei
        args mem[var102003 + 4 len var102004 - 4]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require var106002 - var106001 >= 32
    require mem[var108002] <= test266151307()
    require var110005 - var110004 - var110002 >= 384
    # nil
}

function getTotalCreatedNodes() payable {
    mem[64] = 96
    require not msg.value
    mem[96] = 0x7e923cd800000000000000000000000000000000000000000000000000000000
    mem[var49001] = 7
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.mem[var53003 len 4] with:
         gas gas_remaining wei
        args mem[var53003 + 4 len var53004 - 4]
    mem[var53005] = delegate.return_data[0]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require var57002 - var57001 >= 32
    if var61002 >= var61001:
        return var61003
    mem[ceil32(return_data.size) + 96] = 0x3846629900000000000000000000000000000000000000000000000000000000
    mem[var65001] = 7
    mem[var65001 + 32] = var65002
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.mem[var69003 len 4] with:
         gas gas_remaining wei
        args mem[var69003 + 4 len var69004 - 4]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require var73002 - var73001 >= 32
    require mem[var75002] <= test266151307()
    require var77005 - var77004 - var77002 >= 384
    if not bool((2 * ceil32(return_data.size)) + 480 <= test266151307()):
        revert with 0, 65
    # nil
}

function sub_f54549bc(?) {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(arg1.length) + 128 < 96 or ceil32(arg1.length) + 128 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x0 with:
         gas gas_remaining wei
        args 7, Array(len=arg1.length, data=arg1[all])
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 0, delegate.return_data[4 len 28] < 0:
        revert with 0, 'NodeType doesn exist'
    if bool(stor18.length):
        if bool(stor18.length) == uint255(stor18.length.field_1) < 32:
            revert with 0, 34
        if arg1.length:
            uint256(stor18[].field_0) = Array(len=arg1.length, data=arg1[all])
        else:
            stor18.length = 0
            idx = 0
            while uint255(stor18.length.field_1) + 31 / 32 > idx:
                uint256(stor18[idx].field_0) = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor18.length) == stor18.length.field_1 % 128 < 32:
            revert with 0, 34
        if arg1.length:
            uint256(stor18[].field_0) = Array(len=arg1.length, data=arg1[all])
        else:
            stor18.length = 0
            idx = 0
            while stor18.length.field_1 % 128 + 31 / 32 > idx:
                uint256(stor18[idx].field_0) = 0
                idx = idx + 1
                continue 
}

function sub_c4c69038(?) {
    require calldata.size - 4 >= 352
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(arg1.length) + 128 < 96 or ceil32(arg1.length) + 128 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x0 with:
         gas gas_remaining wei
        args 7, Array(len=arg1.length, data=arg1[all])
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 0, delegate.return_data[4 len 28] < 0:
        revert with 0, 'changeNodeType: nodeTypeName does not exist'
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
         gas gas_remaining wei
        args 7, Array(len=arg1.length, data=arg1[all])
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if arg2:
        stor1[delegate.return_data[0]] = arg2
    if arg3:
        shares[delegate.return_data[0]] = arg3
    if arg4:
        released[delegate.return_data[0]] = arg4
    if arg5:
        uint256(payee[delegate.return_data[0]]) = arg5
    if arg6:
        released[delegate.return_data[0]] = arg6
    if arg7:
        stor7[delegate.return_data[0]] = arg7
    if arg8:
        stor8[delegate.return_data[0]] = arg8
    if arg9:
        stor9[delegate.return_data[0]] = arg9
    if arg10:
        stor10[delegate.return_data[0]] = arg10
    if arg11:
        stor11[delegate.return_data[0]] = arg11
}

function sub_d8a911d9(?) {
    require calldata.size - 4 >= 64
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(arg1.length) + 128 < 96 or ceil32(arg1.length) + 128 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    mem[128 len arg1.length] = arg1[all]
    mem[arg1.length + 128] = 0
    require arg2 == address(arg2)
    mem[ceil32(arg1.length) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
    mem[ceil32(arg1.length) + 132] = 7
    mem[ceil32(arg1.length) + 164] = 64
    mem[ceil32(arg1.length) + 196] = arg1.length
    mem[ceil32(arg1.length) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
    if ceil32(arg1.length) > arg1.length:
        mem[arg1.length + ceil32(arg1.length) + 228] = 0
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x0 with:
         gas gas_remaining wei
        args 7, Array(len=arg1.length, data=arg1[all])
    mem[ceil32(arg1.length) + 128] = delegate.return_data[0]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 0, delegate.return_data[4 len 28] < 0:
        return 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 128 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
    mem[arg1.length + ceil32(arg1.length) + ceil32(return_data.size) + 128] = 11
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = uint256(stor[sha3(mem[ceil32(arg1.length) + ceil32(return_data.size) + 128 len arg1.length + 32])][address(arg2)].field_0)
    return memory
      from ceil32(arg1.length) + ceil32(return_data.size) + 128
       len 32
}

function release(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not shares[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    if eth.balance(this.address) > !stor1.length:
        revert with 0, 17
    if eth.balance(this.address) + stor1.length and shares[address(arg1)] > -1 / eth.balance(this.address) + stor1.length:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (eth.balance(this.address) * shares[address(arg1)]) + (stor1.length * shares[address(arg1)]) / totalShares < released[address(arg1)]:
        revert with 0, 17
    if not ((eth.balance(this.address) * shares[address(arg1)]) + (stor1.length * shares[address(arg1)]) / totalShares) - released[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)] > !(((eth.balance(this.address) * shares[address(arg1)]) + (stor1.length * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    released[address(arg1)] = (eth.balance(this.address) * shares[address(arg1)]) + (stor1.length * shares[address(arg1)]) / totalShares
    if stor1.length > !(((eth.balance(this.address) * shares[address(arg1)]) + (stor1.length * shares[address(arg1)]) / totalShares) - released[address(arg1)]):
        revert with 0, 17
    stor1.length = stor1.length + ((eth.balance(this.address) * shares[address(arg1)]) + (stor1.length * shares[address(arg1)]) / totalShares) - released[address(arg1)]
    if eth.balance(this.address) < ((eth.balance(this.address) * shares[address(arg1)]) + (stor1.length * shares[address(arg1)]) / totalShares) - released[address(arg1)]:
        revert with 0, 'Address: insufficient balance'
    call arg1 with:
       value ((eth.balance(this.address) * shares[address(arg1)]) + (stor1.length * shares[address(arg1)]) / totalShares) - released[address(arg1)] wei
         gas gas_remaining wei
    if not return_data.size:
        if not ext_call.success:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        'Address: unable to send value, recipient may have reverted'
    else:
        if not ext_call.success:
            revert with 0, 'Address: unable to send value, recipient may have reverted'
    ('bool', 'ext_call.success')
    emit PaymentReleased(address(arg1), ((eth.balance(this.address) * shares[address(arg1)]) + (stor1.length * shares[address(arg1)]) / totalShares) - released[address(arg1)]);
}

function sub_9f3b0abe(?) {
    require calldata.size - 4 >= 32
    mem[96] = 0x3846629900000000000000000000000000000000000000000000000000000000
    mem[100] = 7
    mem[132] = arg1
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x38466299 with:
         gas gas_remaining wei
        args 7, arg1
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    _4 = mem[96 len 4], 0
    require mem[96 len 4], 0 <= test266151307()
    require return_data.size - mem[96 len 4], 0 >= 384
    if not bool(ceil32(return_data.size) + 480 <= test266151307()):
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + 480
    _6 = mem[mem[96 len 4], 0 + 96]
    require mem[mem[96 len 4], 0 + 96] <= test266151307()
    require mem[96 len 4], 0 + mem[mem[96 len 4], 0 + 96] + 127 < return_data.size + 96
    _7 = mem[mem[96 len 4], 0 + mem[mem[96 len 4], 0 + 96] + 96]
    if mem[mem[96 len 4], 0 + mem[mem[96 len 4], 0 + 96] + 96] > test266151307():
        revert with 0, 65
    if ceil32(mem[mem[96 len 4], 0 + mem[mem[96 len 4], 0 + 96] + 96]) + 416 < 384 or ceil32(return_data.size) + ceil32(mem[mem[96 len 4], 0 + mem[mem[96 len 4], 0 + 96] + 96]) + 512 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(mem[mem[96 len 4], 0 + mem[mem[96 len 4], 0 + 96] + 96]) + 512
    mem[ceil32(return_data.size) + 480] = _7
    require mem[96 len 4], 0 + _6 + _7 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 512 len ceil32(_7)] = mem[mem[96 len 4], 0 + _6 + 128 len ceil32(_7)]
    if ceil32(_7) <= _7:
        mem[ceil32(return_data.size) + 96] = ceil32(return_data.size) + 480
        mem[ceil32(return_data.size) + 128] = mem[_4 + 128]
        mem[ceil32(return_data.size) + 160] = mem[_4 + 160]
        mem[ceil32(return_data.size) + 192] = mem[_4 + 192]
        mem[ceil32(return_data.size) + 224] = mem[_4 + 224]
        mem[ceil32(return_data.size) + 256] = mem[_4 + 256]
        mem[ceil32(return_data.size) + 288] = mem[_4 + 288]
        mem[ceil32(return_data.size) + 320] = mem[_4 + 320]
        mem[ceil32(return_data.size) + 352] = mem[_4 + 352]
        mem[ceil32(return_data.size) + 384] = mem[_4 + 384]
        mem[ceil32(return_data.size) + 416] = mem[_4 + 416]
        mem[ceil32(return_data.size) + 448] = mem[_4 + 448]
        _69 = mem[64]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _7
        mem[mem[64] + 64 len ceil32(_7)] = mem[ceil32(return_data.size) + 512 len ceil32(_7)]
        if ceil32(_7) <= _7:
            return Array(len=_7, data=mem[mem[64] + 64 len ceil32(_7)])
        mem[_7 + mem[64] + 64] = 0
        return memory
          from mem[64]
           len ceil32(_7) + _69 + -mem[64] + 64
    mem[_7 + ceil32(return_data.size) + 512] = 0
    mem[ceil32(return_data.size) + 96] = ceil32(return_data.size) + 480
    mem[ceil32(return_data.size) + 128] = mem[_4 + 128]
    mem[ceil32(return_data.size) + 160] = mem[_4 + 160]
    mem[ceil32(return_data.size) + 192] = mem[_4 + 192]
    mem[ceil32(return_data.size) + 224] = mem[_4 + 224]
    mem[ceil32(return_data.size) + 256] = mem[_4 + 256]
    mem[ceil32(return_data.size) + 288] = mem[_4 + 288]
    mem[ceil32(return_data.size) + 320] = mem[_4 + 320]
    mem[ceil32(return_data.size) + 352] = mem[_4 + 352]
    mem[ceil32(return_data.size) + 384] = mem[_4 + 384]
    mem[ceil32(return_data.size) + 416] = mem[_4 + 416]
    mem[ceil32(return_data.size) + 448] = mem[_4 + 448]
    _70 = mem[64]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _7
    mem[mem[64] + 64 len ceil32(_7)] = mem[ceil32(return_data.size) + 512 len ceil32(_7)]
    if ceil32(_7) <= _7:
        return Array(len=_7, data=mem[mem[64] + 64 len ceil32(_7)])
    mem[_7 + mem[64] + 64] = 0
    return memory
      from mem[64]
       len ceil32(_7) + _70 + -mem[64] + 64
}

function sub_ca721f22(?) {
    if bool(stor18.length):
        if bool(stor18.length) == uint255(stor18.length.field_1) < 32:
            revert with 0, 34
        if bool(stor18.length):
            if bool(stor18.length) == uint255(stor18.length.field_1) < 32:
                revert with 0, 34
            if uint255(stor18.length.field_1):
                if 31 < uint255(stor18.length.field_1):
                    mem[128] = uint256(stor18.field_0)
                    idx = 128
                    s = 0
                    while uint255(stor18.length.field_1) + 96 > idx:
                        mem[idx + 32] = uint256(stor18[s].field_256)
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor18.length.field_1)), data=mem[128 len ceil32(uint255(stor18.length.field_1))])
                mem[128] = 256 * Mask(248, 0, stor18.length.field_8)
        else:
            if bool(stor18.length) == stor18.length.field_1 % 128 < 32:
                revert with 0, 34
            if stor18.length.field_1 % 128:
                if 31 < stor18.length.field_1 % 128:
                    mem[128] = uint256(stor18.field_0)
                    idx = 128
                    s = 0
                    while stor18.length.field_1 % 128 + 96 > idx:
                        mem[idx + 32] = uint256(stor18[s].field_256)
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor18.length.field_1)), data=mem[128 len ceil32(uint255(stor18.length.field_1))])
                mem[128] = 256 * Mask(248, 0, stor18.length.field_8)
        mem[ceil32(uint255(stor18.length.field_1)) + 192 len ceil32(uint255(stor18.length.field_1))] = mem[128 len ceil32(uint255(stor18.length.field_1))]
        if ceil32(uint255(stor18.length.field_1)) > uint255(stor18.length.field_1):
            mem[uint255(stor18.length.field_1) + ceil32(uint255(stor18.length.field_1)) + 192] = 0
        return Array(len=2 * Mask(256, -1, uint255(stor18.length.field_1)), data=mem[128 len ceil32(uint255(stor18.length.field_1))], mem[(2 * ceil32(uint255(stor18.length.field_1))) + 192 len 2 * ceil32(uint255(stor18.length.field_1))]), 
    if bool(stor18.length) == stor18.length.field_1 % 128 < 32:
        revert with 0, 34
    if bool(stor18.length):
        if bool(stor18.length) == uint255(stor18.length.field_1) < 32:
            revert with 0, 34
        if uint255(stor18.length.field_1):
            if 31 < uint255(stor18.length.field_1):
                mem[128] = uint256(stor18.field_0)
                idx = 128
                s = 0
                while uint255(stor18.length.field_1) + 96 > idx:
                    mem[idx + 32] = uint256(stor18[s].field_256)
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor18.length % 128, data=mem[128 len ceil32(stor18.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor18.length.field_8)
    else:
        if bool(stor18.length) == stor18.length.field_1 % 128 < 32:
            revert with 0, 34
        if stor18.length.field_1 % 128:
            if 31 < stor18.length.field_1 % 128:
                mem[128] = uint256(stor18.field_0)
                idx = 128
                s = 0
                while stor18.length.field_1 % 128 + 96 > idx:
                    mem[idx + 32] = uint256(stor18[s].field_256)
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor18.length % 128, data=mem[128 len ceil32(stor18.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor18.length.field_8)
    mem[ceil32(stor18.length.field_1 % 128) + 192 len ceil32(stor18.length.field_1 % 128)] = mem[128 len ceil32(stor18.length.field_1 % 128)]
    if ceil32(stor18.length.field_1 % 128) > stor18.length.field_1 % 128:
        mem[stor18.length.field_1 % 128 + ceil32(stor18.length.field_1 % 128) + 192] = 0
    return Array(len=stor18.length % 128, data=mem[128 len ceil32(stor18.length.field_1 % 128)], mem[(2 * ceil32(stor18.length.field_1 % 128)) + 192 len 2 * ceil32(stor18.length.field_1 % 128)]), 
}

function release(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not shares[address(arg2)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'PaymentSplitter: account has no shares'
    mem[100] = this.address
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] > !totalReleased[address(arg1)]:
        revert with 0, 17
    if ext_call.return_data[0] + totalReleased[address(arg1)] and shares[address(arg2)] > -1 / ext_call.return_data[0] + totalReleased[address(arg1)]:
        revert with 0, 17
    if not totalShares:
        revert with 0, 18
    if (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares < released[address(arg1)][address(arg2)]:
        revert with 0, 17
    if not ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]:
        revert with 0, 'PaymentSplitter: account is not due payment'
    if released[address(arg1)][address(arg2)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    released[address(arg1)][address(arg2)] = (ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares
    if totalReleased[address(arg1)] > !(((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]):
        revert with 0, 17
    totalReleased[address(arg1)] = totalReleased[address(arg1)] + ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 132] = arg2
    mem[ceil32(return_data.size) + 164] = ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)]
    mem[ceil32(return_data.size) + 96] = 68
    mem[ceil32(return_data.size) + 132 len 28] = address(arg2) << 64
    mem[ceil32(return_data.size) + 128 len 4] = unknown_0xa9059cbb(?????)
    mem[ceil32(return_data.size) + 196] = 32
    mem[ceil32(return_data.size) + 228] = 'SafeERC20: low-level call failed'
    if not ext_code.size(arg1):
        revert with 0, 'Address: call to non-contract'
    mem[ceil32(return_data.size) + 260 len 96] = unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0
    mem[ceil32(return_data.size) + 328] = 0
    call arg1 with:
       funct Mask(32, 224, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) >> 224
         gas gas_remaining wei
        args (Mask(512, -288, unknown_0xa9059cbb(?????), address(arg2) << 64, 0, ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], 0) << 288)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if ext_call.return_data[0]:
            require ext_call.return_data[0] >= 32
            require 0, mem[132 len 28] == bool(0, mem[132 len 28])
            if not 0, mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    else:
        mem[ceil32(return_data.size) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            require mem[ceil32(return_data.size) + 292] == bool(mem[ceil32(return_data.size) + 292])
            if not mem[ceil32(return_data.size) + 292]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
    emit ERC20PaymentReleased(address(arg2), ((ext_call.return_data[0] * shares[address(arg2)]) + (totalReleased[address(arg1)] * shares[address(arg2)]) / totalShares) - released[address(arg1)][address(arg2)], arg1);
}

function sub_795e0113(?) {
    require calldata.size - 4 >= 64
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(arg1.length) + 128 < 96 or ceil32(arg1.length) + 128 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x0 with:
         gas gas_remaining wei
        args 7, Array(len=arg1.length, data=arg1[all])
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 0, delegate.return_data[4 len 28] < 0:
        return 0
    if not arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return stor1[delegate.return_data[0]]
    if 1 == arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return shares[delegate.return_data[0]]
    if 2 == arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return released[delegate.return_data[0]]
    if 3 == arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return uint256(payee[delegate.return_data[0]])
    if 4 == arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return totalReleased[delegate.return_data[0]]
    if 5 == arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return released[delegate.return_data[0]]
    if 6 == arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return stor7[delegate.return_data[0]]
    if 7 == arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return stor8[delegate.return_data[0]]
    if 8 == arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return stor9[delegate.return_data[0]]
    if 9 == arg2:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return stor10[delegate.return_data[0]]
    if arg2 != 10:
        return 0
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
         gas gas_remaining wei
        args 7, Array(len=arg1.length, data=arg1[all])
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return stor11[delegate.return_data[0]]
}

function sub_035f722b(?) {
    require calldata.size - 4 >= 64
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if ceil32(('cd', 4).length) + 128 < 96 or ceil32(('cd', 4).length) + 128 > test266151307():
        revert with 0, 65
    require cd[4] + ('cd', 4).length + 36 <= calldata.size
    mem[128 len ('cd', 4).length] = call.data[cd[4] + 36 len ('cd', 4).length]
    mem[('cd', 4).length + 128] = 0
    require cd[36] <= test266151307()
    require calldata.size > cd[36] + 35
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    if (32 * ('cd', 36).length) + 160 < 128 or ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + 160 > test266151307():
        revert with 0, 65
    mem[ceil32(('cd', 4).length) + 128] = ('cd', 36).length
    require calldata.size >= cd[36] + (32 * ('cd', 36).length) + 36
    s = cd[36] + 36
    t = ceil32(('cd', 4).length) + 160
    idx = 0
    while idx < ('cd', 36).length:
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        idx = idx + 1
        continue 
    if sub_9cfccb46Address != msg.sender:
        if sub_ef630563Address != msg.sender:
            revert with 0, 'Fuck off'
    if ('cd', 4).length <= 0:
        revert with 0, 'addNodeType: Empty name'
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + 164] = 7
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + 196] = 64
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + 228] = ('cd', 4).length
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + 260 len ceil32(('cd', 4).length)] = call.data[cd[4] + 36 len ('cd', 4).length], mem[('cd', 4).length + 128 len ceil32(('cd', 4).length) - ('cd', 4).length]
    if ceil32(('cd', 4).length) > ('cd', 4).length:
        mem[('cd', 4).length + ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + 260] = 0
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
         gas gas_remaining wei
        args 7, Array(len=('cd', 4).length, data=call.data[cd[4] + 36 len ('cd', 4).length])
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + 160] = delegate.return_data[0]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if delegate.return_data[0] >= 0:
        revert with 0, 'addNodeType: same nodeTypeName exists.'
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 160] = 96
    if 0 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 192] = mem[ceil32(('cd', 4).length) + 160]
    if 1 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 224] = mem[ceil32(('cd', 4).length) + 192]
    if 2 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 256] = mem[ceil32(('cd', 4).length) + 224]
    if 3 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 288] = mem[ceil32(('cd', 4).length) + 256]
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 320] = 0
    if 4 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 352] = mem[ceil32(('cd', 4).length) + 288]
    if 5 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 384] = mem[ceil32(('cd', 4).length) + 320]
    if 6 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 416] = mem[ceil32(('cd', 4).length) + 352]
    if 7 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    mem[ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 448] = mem[ceil32(('cd', 4).length) + 384]
    if 8 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    if 9 >= Mask(8 * -ceil32(('cd', 4).length) + ('cd', 4).length + 32, 0, 0), mem[('cd', 4).length + 160 len -('cd', 4).length + ceil32(('cd', 4).length)]:
        revert with 0, 50
    if ceil32(('cd', 4).length) > ('cd', 4).length:
        mem[('cd', 4).length + ceil32(('cd', 4).length) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 676] = 0
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 676] = 384
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 1060] = ('cd', 4).length
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 1092 len ceil32(('cd', 4).length)] = call.data[cd[4] + 36 len ('cd', 4).length], mem[('cd', 4).length + 128 len ceil32(('cd', 4).length) - ('cd', 4).length]
    if ceil32(('cd', 4).length) > ('cd', 4).length:
        mem[('cd', 4).length + (2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 1092] = 0
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 708] = mem[ceil32(('cd', 4).length) + 160]
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 740] = mem[ceil32(('cd', 4).length) + 192]
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 772] = mem[ceil32(('cd', 4).length) + 224]
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 804] = mem[ceil32(('cd', 4).length) + 256]
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 836] = 0
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 868] = mem[ceil32(('cd', 4).length) + 288]
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 900] = mem[ceil32(('cd', 4).length) + 320]
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 932] = mem[ceil32(('cd', 4).length) + 352]
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 964] = mem[ceil32(('cd', 4).length) + 384]
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 996] = mem[ceil32(('cd', 4).length) + 416]
    mem[(2 * ceil32(('cd', 4).length)) + (32 * ('cd', 36).length) + ceil32(return_data.size) + 1028] = mem[ceil32(('cd', 4).length) + 448]
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x41740085 with:
         gas gas_remaining wei
        args 7, 96, ceil32(('cd', 4).length) + 128, ('cd', 4).length, Mask(8 * ceil32(('cd', 4).length), -(8 * ceil32(('cd', 4).length)) + 256, call.data[cd[4] + 36 len ('cd', 4).length], mem[('cd', 4).length + 128 len ceil32(('cd', 4).length) - ('cd', 4).length]) << (8 * ceil32(('cd', 4).length)) - 256, 384, mem[ceil32(('cd', 4).length) + 160], mem[ceil32(('cd', 4).length) + 192], mem[ceil32(('cd', 4).length) + 224], mem[ceil32(('cd', 4).length) + 256], 0, mem[ceil32(('cd', 4).length) + 288], mem[ceil32(('cd', 4).length) + 320], mem[ceil32(('cd', 4).length) + 352], mem[ceil32(('cd', 4).length) + 384], mem[ceil32(('cd', 4).length) + 416], mem[ceil32(('cd', 4).length) + 448], ('cd', 4).length, Mask(8 * 5 * ceil32(('cd', 4).length), -(8 * 5 * ceil32(('cd', 4).length)) + 256, call.data[cd[4] + 36 len ('cd', 4).length], mem[('cd', 4).length + 128 len ceil32(('cd', 4).length) - ('cd', 4).length]) << (8 * 5 * ceil32(('cd', 4).length)) - 256
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_d0619439(?) {
    require calldata.size - 4 >= 32
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(arg1.length) + 128 < 96 or ceil32(arg1.length) + 128 > test266151307():
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    mem[128 len arg1.length] = arg1[all]
    mem[arg1.length + 128] = 0
    mem[ceil32(arg1.length) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
    mem[ceil32(arg1.length) + 132] = 7
    mem[ceil32(arg1.length) + 164] = 64
    mem[ceil32(arg1.length) + 196] = arg1.length
    mem[ceil32(arg1.length) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
    if ceil32(arg1.length) > arg1.length:
        mem[arg1.length + ceil32(arg1.length) + 228] = 0
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x0 with:
         gas gas_remaining wei
        args 7, Array(len=arg1.length, data=arg1[all])
    mem[ceil32(arg1.length) + 128] = delegate.return_data[0]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 0, delegate.return_data[4 len 28] < 0:
        revert with 0, 'Name doesnt exist'
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 11
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 512] = 96
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 544] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 576] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 608] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 640] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 672] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 704] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 736] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 768] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 800] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 832] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 864] = 0
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 900] = 7
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 932] = 64
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 964] = arg1.length
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 996 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
    if ceil32(arg1.length) > arg1.length:
        mem[arg1.length + ceil32(arg1.length) + ceil32(return_data.size) + 996] = 0
    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
         gas gas_remaining wei
        args 7, Array(len=arg1.length, data=arg1[all])
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 896] = delegate.return_data[0]
    if not delegate.return_code:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if bool(stor[delegate.return_data[0]].field_0):
        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
            revert with 0, 34
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1280] = uint255(stor[delegate.return_data[0]].field_1)
        if bool(stor[delegate.return_data[0]].field_0):
            if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                revert with 0, 34
            if not uint255(stor[delegate.return_data[0]].field_1):
                return Array(len=11, data=stor1[delegate.return_data[0]], shares[delegate.return_data[0]], released[delegate.return_data[0]], uint256(payee[delegate.return_data[0]]), totalReleased[delegate.return_data[0]], released[delegate.return_data[0]], stor7[delegate.return_data[0]], stor8[delegate.return_data[0]], stor9[delegate.return_data[0]], stor10[delegate.return_data[0]], stor11[delegate.return_data[0]]), 
            if 31 >= uint255(stor[delegate.return_data[0]].field_1):
                return Array(len=11, data=stor1[delegate.return_data[0]], shares[delegate.return_data[0]], released[delegate.return_data[0]], uint256(payee[delegate.return_data[0]]), totalReleased[delegate.return_data[0]], released[delegate.return_data[0]], stor7[delegate.return_data[0]], stor8[delegate.return_data[0]], stor9[delegate.return_data[0]], stor10[delegate.return_data[0]], stor11[delegate.return_data[0]]), 
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1312] = uint256(stor[sha3(delegate.return_data[0])].field_0)
            idx = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1312
            s = 0
            while ceil32(arg1.length) + (2 * ceil32(return_data.size)) + uint255(stor[delegate.return_data[0]].field_1) + 1280 > idx:
                mem[idx + 32] = uint256(stor[s + sha3(delegate.return_data[0]) + 1].field_0)
                idx = idx + 32
                s = s + 1
                continue 
        else:
            if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                revert with 0, 34
            if not stor[delegate.return_data[0]].field_1 % 128:
                return Array(len=11, data=stor1[delegate.return_data[0]], shares[delegate.return_data[0]], released[delegate.return_data[0]], uint256(payee[delegate.return_data[0]]), totalReleased[delegate.return_data[0]], released[delegate.return_data[0]], stor7[delegate.return_data[0]], stor8[delegate.return_data[0]], stor9[delegate.return_data[0]], stor10[delegate.return_data[0]], stor11[delegate.return_data[0]]), 
            if 31 >= stor[delegate.return_data[0]].field_1 % 128:
                return Array(len=11, data=stor1[delegate.return_data[0]], shares[delegate.return_data[0]], released[delegate.return_data[0]], uint256(payee[delegate.return_data[0]]), totalReleased[delegate.return_data[0]], released[delegate.return_data[0]], stor7[delegate.return_data[0]], stor8[delegate.return_data[0]], stor9[delegate.return_data[0]], stor10[delegate.return_data[0]], stor11[delegate.return_data[0]]), 
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1312] = uint256(stor[sha3(delegate.return_data[0])].field_0)
            idx = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1312
            s = 0
            while ceil32(arg1.length) + (2 * ceil32(return_data.size)) + stor[delegate.return_data[0]].field_1 % 128 + 1280 > idx:
                mem[idx + 32] = uint256(stor[s + sha3(delegate.return_data[0]) + 1].field_0)
                idx = idx + 32
                s = s + 1
                continue 
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 896] = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1280
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 928] = stor1[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 960] = shares[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 992] = released[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1024] = uint256(payee[delegate.return_data[0]])
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1056] = totalReleased[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1088] = released[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1120] = stor7[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1152] = stor8[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1184] = stor9[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1216] = stor10[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1248] = stor11[delegate.return_data[0]]
        if 0 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 160] = stor1[delegate.return_data[0]]
        if 1 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 192] = shares[delegate.return_data[0]]
        if 2 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 224] = released[delegate.return_data[0]]
        if 3 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 256] = uint256(payee[delegate.return_data[0]])
        if 4 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 288] = totalReleased[delegate.return_data[0]]
        if 5 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 320] = released[delegate.return_data[0]]
        if 6 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 352] = stor7[delegate.return_data[0]]
        if 7 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 384] = stor8[delegate.return_data[0]]
        if 8 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 416] = stor9[delegate.return_data[0]]
        if 9 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 448] = stor10[delegate.return_data[0]]
        if 10 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
            revert with 0, 50
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 480] = stor11[delegate.return_data[0]]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1312] = 32
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1344] = mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1376 len 32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]] = mem[ceil32(arg1.length) + ceil32(return_data.size) + 160 len 32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]]
        return 32, mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1344 len (32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]) + 32], 
    if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
        revert with 0, 34
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1280] = stor[delegate.return_data[0]].field_1 % 128
    if bool(stor[delegate.return_data[0]].field_0):
        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
            revert with 0, 34
        if not uint255(stor[delegate.return_data[0]].field_1):
            return Array(len=11, data=stor1[delegate.return_data[0]], shares[delegate.return_data[0]], released[delegate.return_data[0]], uint256(payee[delegate.return_data[0]]), totalReleased[delegate.return_data[0]], released[delegate.return_data[0]], stor7[delegate.return_data[0]], stor8[delegate.return_data[0]], stor9[delegate.return_data[0]], stor10[delegate.return_data[0]], stor11[delegate.return_data[0]]), 
        if 31 >= uint255(stor[delegate.return_data[0]].field_1):
            return Array(len=11, data=stor1[delegate.return_data[0]], shares[delegate.return_data[0]], released[delegate.return_data[0]], uint256(payee[delegate.return_data[0]]), totalReleased[delegate.return_data[0]], released[delegate.return_data[0]], stor7[delegate.return_data[0]], stor8[delegate.return_data[0]], stor9[delegate.return_data[0]], stor10[delegate.return_data[0]], stor11[delegate.return_data[0]]), 
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1312] = uint256(stor[sha3(delegate.return_data[0])].field_0)
        idx = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1312
        s = 0
        while ceil32(arg1.length) + (2 * ceil32(return_data.size)) + uint255(stor[delegate.return_data[0]].field_1) + 1280 > idx:
            mem[idx + 32] = uint256(stor[s + sha3(delegate.return_data[0]) + 1].field_0)
            idx = idx + 32
            s = s + 1
            continue 
    else:
        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
            revert with 0, 34
        if not stor[delegate.return_data[0]].field_1 % 128:
            return Array(len=11, data=stor1[delegate.return_data[0]], shares[delegate.return_data[0]], released[delegate.return_data[0]], uint256(payee[delegate.return_data[0]]), totalReleased[delegate.return_data[0]], released[delegate.return_data[0]], stor7[delegate.return_data[0]], stor8[delegate.return_data[0]], stor9[delegate.return_data[0]], stor10[delegate.return_data[0]], stor11[delegate.return_data[0]]), 
        if 31 >= stor[delegate.return_data[0]].field_1 % 128:
            return Array(len=11, data=stor1[delegate.return_data[0]], shares[delegate.return_data[0]], released[delegate.return_data[0]], uint256(payee[delegate.return_data[0]]), totalReleased[delegate.return_data[0]], released[delegate.return_data[0]], stor7[delegate.return_data[0]], stor8[delegate.return_data[0]], stor9[delegate.return_data[0]], stor10[delegate.return_data[0]], stor11[delegate.return_data[0]]), 
        mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1312] = uint256(stor[sha3(delegate.return_data[0])].field_0)
        idx = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1312
        s = 0
        while ceil32(arg1.length) + (2 * ceil32(return_data.size)) + stor[delegate.return_data[0]].field_1 % 128 + 1280 > idx:
            mem[idx + 32] = uint256(stor[s + sha3(delegate.return_data[0]) + 1].field_0)
            idx = idx + 32
            s = s + 1
            continue 
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 896] = ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1280
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 928] = stor1[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 960] = shares[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 992] = released[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1024] = uint256(payee[delegate.return_data[0]])
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1056] = totalReleased[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1088] = released[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1120] = stor7[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1152] = stor8[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1184] = stor9[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1216] = stor10[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 1248] = stor11[delegate.return_data[0]]
    if 0 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 160] = stor1[delegate.return_data[0]]
    if 1 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 192] = shares[delegate.return_data[0]]
    if 2 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 224] = released[delegate.return_data[0]]
    if 3 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 256] = uint256(payee[delegate.return_data[0]])
    if 4 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 288] = totalReleased[delegate.return_data[0]]
    if 5 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 320] = released[delegate.return_data[0]]
    if 6 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 352] = stor7[delegate.return_data[0]]
    if 7 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 384] = stor8[delegate.return_data[0]]
    if 8 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 416] = stor9[delegate.return_data[0]]
    if 9 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 448] = stor10[delegate.return_data[0]]
    if 10 >= mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]:
        revert with 0, 50
    mem[ceil32(arg1.length) + ceil32(return_data.size) + 480] = stor11[delegate.return_data[0]]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1312] = 32
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1344] = mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]
    mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1376 len 32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]] = mem[ceil32(arg1.length) + ceil32(return_data.size) + 160 len 32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]]
    return 32, mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1344 len (32 * mem[ceil32(arg1.length) + ceil32(return_data.size) + 128]) + 32], 
}

function sub_47aab1f8(?) {
    require calldata.size - 4 >= 64
    if arg2 < arg1:
        revert with 0, 17
    if arg2 - arg1 > test266151307():
        revert with 0, 65
    mem[96] = arg2 - arg1
    mem[64] = (32 * arg2 - arg1) + 128
    if not arg2 - arg1:
        idx = arg1
        while idx < arg2:
            mem[mem[64]] = 0x3846629900000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 7
            mem[mem[64] + 36] = idx
            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x38466299 with:
                 gas gas_remaining wei
                args 7, idx
            if not delegate.return_code:
                revert with ext_call.return_data[0 len return_data.size]
            _4754 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _4760 = mem[_4754]
            require mem[_4754] <= test266151307()
            require return_data.size - mem[_4754] >= 384
            if not bool(_4754 + ceil32(return_data.size) + 384 <= test266151307()):
                revert with 0, 65
            mem[64] = _4754 + ceil32(return_data.size) + 384
            _4769 = mem[_4754 + _4760]
            require mem[_4754 + _4760] <= test266151307()
            require _4754 + _4760 + mem[_4754 + _4760] + 31 < _4754 + return_data.size
            _4771 = mem[_4754 + _4760 + mem[_4754 + _4760]]
            if mem[_4754 + _4760 + mem[_4754 + _4760]] > test266151307():
                revert with 0, 65
            if ceil32(mem[_4754 + _4760 + mem[_4754 + _4760]]) + 416 < 384 or _4754 + ceil32(return_data.size) + ceil32(mem[_4754 + _4760 + mem[_4754 + _4760]]) + 416 > test266151307():
                revert with 0, 65
            mem[64] = _4754 + ceil32(return_data.size) + ceil32(mem[_4754 + _4760 + mem[_4754 + _4760]]) + 416
            mem[_4754 + ceil32(return_data.size) + 384] = _4771
            require _4760 + _4769 + _4771 + 32 <= return_data.size
            s = 0
            while s < _4771:
                mem[s + _4754 + ceil32(return_data.size) + 416] = mem[s + _4754 + _4760 + _4769 + 32]
                s = s + 32
                continue 
            if ceil32(_4771) <= _4771:
                mem[_4754 + ceil32(return_data.size)] = _4754 + ceil32(return_data.size) + 384
                mem[_4754 + ceil32(return_data.size) + 32] = mem[_4754 + _4760 + 32]
                mem[_4754 + ceil32(return_data.size) + 64] = mem[_4754 + _4760 + 64]
                mem[_4754 + ceil32(return_data.size) + 96] = mem[_4754 + _4760 + 96]
                mem[_4754 + ceil32(return_data.size) + 128] = mem[_4754 + _4760 + 128]
                mem[_4754 + ceil32(return_data.size) + 160] = mem[_4754 + _4760 + 160]
                mem[_4754 + ceil32(return_data.size) + 192] = mem[_4754 + _4760 + 192]
                mem[_4754 + ceil32(return_data.size) + 224] = mem[_4754 + _4760 + 224]
                mem[_4754 + ceil32(return_data.size) + 256] = mem[_4754 + _4760 + 256]
                mem[_4754 + ceil32(return_data.size) + 288] = mem[_4754 + _4760 + 288]
                mem[_4754 + ceil32(return_data.size) + 320] = mem[_4754 + _4760 + 320]
                mem[_4754 + ceil32(return_data.size) + 352] = mem[_4754 + _4760 + 352]
                _9531 = mem[64]
                mem[mem[64]] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 7
                mem[mem[64] + 36] = 64
                mem[mem[64] + 68] = _4771
                s = 0
                while s < _4771:
                    mem[s + mem[64] + 100] = mem[s + _4754 + ceil32(return_data.size) + 416]
                    s = s + 32
                    continue 
                if ceil32(_4771) <= _4771:
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.mem[mem[64] len 4] with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len ceil32(_4771) + _9531 + -mem[64] + 96]
                    mem[mem[64]] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14268 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_14268] < 0:
                        revert with 0, 'Name doesnt exist'
                    _14280 = mem[64]
                    mem[mem[64] + 32 len 352] = call.data[calldata.size len 352]
                    mem[mem[64] + 384] = 96
                    mem[mem[64] + 416] = 0
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = 0
                    mem[mem[64] + 512] = 0
                    mem[mem[64] + 544] = 0
                    mem[mem[64] + 576] = 0
                    mem[mem[64] + 608] = 0
                    mem[mem[64] + 640] = 0
                    mem[mem[64] + 672] = 0
                    mem[mem[64] + 704] = 0
                    mem[mem[64] + 736] = 0
                    mem[mem[64] + 768] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 772] = 7
                    mem[mem[64] + 804] = 64
                    _14300 = mem[_4754 + ceil32(return_data.size) + 384]
                    mem[mem[64] + 836] = mem[_4754 + ceil32(return_data.size) + 384]
                    s = 0
                    while s < _14300:
                        mem[s + mem[64] + 868] = mem[s + _4754 + ceil32(return_data.size) + 416]
                        s = s + 32
                        continue 
                    if ceil32(_14300) > _14300:
                        mem[_14300 + mem[64] + 868] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                         gas gas_remaining wei
                        args 7, 64, mem[mem[64] + 836 len ceil32(_14300) + 32]
                    mem[mem[64] + 768] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1184
                        mem[_14280 + ceil32(return_data.size) + 1152] = uint255(stor[delegate.return_data[0]].field_1)
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1184
                        mem[_14280 + ceil32(return_data.size) + 1152] = stor[delegate.return_data[0]].field_1 % 128
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        if uint255(stor[delegate.return_data[0]].field_1):
                            if 31 >= uint255(stor[delegate.return_data[0]].field_1):
                                mem[_14280 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_14280 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _14280 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _14280 + ceil32(return_data.size) + uint255(stor[delegate.return_data[0]].field_1) + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        if stor[delegate.return_data[0]].field_1 % 128:
                            if 31 >= stor[delegate.return_data[0]].field_1 % 128:
                                mem[_14280 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_14280 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _14280 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _14280 + ceil32(return_data.size) + stor[delegate.return_data[0]].field_1 % 128 + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    mem[_14280 + ceil32(return_data.size) + 768] = _14280 + ceil32(return_data.size) + 1152
                    mem[_14280 + ceil32(return_data.size) + 800] = stor1[delegate.return_data[0]]
                    mem[_14280 + ceil32(return_data.size) + 832] = shares[delegate.return_data[0]]
                    mem[_14280 + ceil32(return_data.size) + 864] = released[delegate.return_data[0]]
                    mem[_14280 + ceil32(return_data.size) + 896] = uint256(payee[delegate.return_data[0]])
                    mem[_14280 + ceil32(return_data.size) + 928] = totalReleased[delegate.return_data[0]]
                    mem[_14280 + ceil32(return_data.size) + 960] = released[delegate.return_data[0]]
                    mem[_14280 + ceil32(return_data.size) + 992] = stor7[delegate.return_data[0]]
                    mem[_14280 + ceil32(return_data.size) + 1024] = stor8[delegate.return_data[0]]
                    mem[_14280 + ceil32(return_data.size) + 1056] = stor9[delegate.return_data[0]]
                    mem[_14280 + ceil32(return_data.size) + 1088] = stor10[delegate.return_data[0]]
                    mem[_14280 + ceil32(return_data.size) + 1120] = stor11[delegate.return_data[0]]
                    if 0 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 32] = stor1[delegate.return_data[0]]
                    if 1 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 64] = shares[delegate.return_data[0]]
                    if 2 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 96] = released[delegate.return_data[0]]
                    if 3 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 128] = uint256(payee[delegate.return_data[0]])
                    if 4 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 160] = totalReleased[delegate.return_data[0]]
                    if 5 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 192] = released[delegate.return_data[0]]
                    if 6 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 224] = stor7[delegate.return_data[0]]
                    if 7 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 256] = stor8[delegate.return_data[0]]
                    if 8 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 288] = stor9[delegate.return_data[0]]
                    if 9 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 320] = stor10[delegate.return_data[0]]
                    if 10 >= mem[_14280]:
                        revert with 0, 50
                    mem[_14280 + 352] = stor11[delegate.return_data[0]]
                    if idx < arg1:
                        revert with 0, 17
                    if idx - arg1 >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx - arg1) + 128] = _14280
                else:
                    mem[_4771 + _9531 + 100] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.mem[mem[64] len 4] with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len ceil32(_4771) + _9531 + -mem[64] + 96]
                    mem[mem[64]] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14269 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_14269] < 0:
                        revert with 0, 'Name doesnt exist'
                    _14282 = mem[64]
                    mem[mem[64] + 32 len 352] = call.data[calldata.size len 352]
                    mem[mem[64] + 384] = 96
                    mem[mem[64] + 416] = 0
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = 0
                    mem[mem[64] + 512] = 0
                    mem[mem[64] + 544] = 0
                    mem[mem[64] + 576] = 0
                    mem[mem[64] + 608] = 0
                    mem[mem[64] + 640] = 0
                    mem[mem[64] + 672] = 0
                    mem[mem[64] + 704] = 0
                    mem[mem[64] + 736] = 0
                    mem[mem[64] + 768] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 772] = 7
                    mem[mem[64] + 804] = 64
                    _14301 = mem[_4754 + ceil32(return_data.size) + 384]
                    mem[mem[64] + 836] = mem[_4754 + ceil32(return_data.size) + 384]
                    s = 0
                    while s < _14301:
                        mem[s + mem[64] + 868] = mem[s + _4754 + ceil32(return_data.size) + 416]
                        s = s + 32
                        continue 
                    if ceil32(_14301) > _14301:
                        mem[_14301 + mem[64] + 868] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                         gas gas_remaining wei
                        args 7, 64, mem[mem[64] + 836 len ceil32(_14301) + 32]
                    mem[mem[64] + 768] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1184
                        mem[_14282 + ceil32(return_data.size) + 1152] = uint255(stor[delegate.return_data[0]].field_1)
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1184
                        mem[_14282 + ceil32(return_data.size) + 1152] = stor[delegate.return_data[0]].field_1 % 128
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        if uint255(stor[delegate.return_data[0]].field_1):
                            if 31 >= uint255(stor[delegate.return_data[0]].field_1):
                                mem[_14282 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_14282 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _14282 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _14282 + ceil32(return_data.size) + uint255(stor[delegate.return_data[0]].field_1) + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        if stor[delegate.return_data[0]].field_1 % 128:
                            if 31 >= stor[delegate.return_data[0]].field_1 % 128:
                                mem[_14282 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_14282 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _14282 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _14282 + ceil32(return_data.size) + stor[delegate.return_data[0]].field_1 % 128 + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    mem[_14282 + ceil32(return_data.size) + 768] = _14282 + ceil32(return_data.size) + 1152
                    mem[_14282 + ceil32(return_data.size) + 800] = stor1[delegate.return_data[0]]
                    mem[_14282 + ceil32(return_data.size) + 832] = shares[delegate.return_data[0]]
                    mem[_14282 + ceil32(return_data.size) + 864] = released[delegate.return_data[0]]
                    mem[_14282 + ceil32(return_data.size) + 896] = uint256(payee[delegate.return_data[0]])
                    mem[_14282 + ceil32(return_data.size) + 928] = totalReleased[delegate.return_data[0]]
                    mem[_14282 + ceil32(return_data.size) + 960] = released[delegate.return_data[0]]
                    mem[_14282 + ceil32(return_data.size) + 992] = stor7[delegate.return_data[0]]
                    mem[_14282 + ceil32(return_data.size) + 1024] = stor8[delegate.return_data[0]]
                    mem[_14282 + ceil32(return_data.size) + 1056] = stor9[delegate.return_data[0]]
                    mem[_14282 + ceil32(return_data.size) + 1088] = stor10[delegate.return_data[0]]
                    mem[_14282 + ceil32(return_data.size) + 1120] = stor11[delegate.return_data[0]]
                    if 0 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 32] = stor1[delegate.return_data[0]]
                    if 1 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 64] = shares[delegate.return_data[0]]
                    if 2 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 96] = released[delegate.return_data[0]]
                    if 3 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 128] = uint256(payee[delegate.return_data[0]])
                    if 4 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 160] = totalReleased[delegate.return_data[0]]
                    if 5 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 192] = released[delegate.return_data[0]]
                    if 6 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 224] = stor7[delegate.return_data[0]]
                    if 7 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 256] = stor8[delegate.return_data[0]]
                    if 8 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 288] = stor9[delegate.return_data[0]]
                    if 9 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 320] = stor10[delegate.return_data[0]]
                    if 10 >= mem[_14282]:
                        revert with 0, 50
                    mem[_14282 + 352] = stor11[delegate.return_data[0]]
                    if idx < arg1:
                        revert with 0, 17
                    if idx - arg1 >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx - arg1) + 128] = _14282
            else:
                mem[_4771 + _4754 + ceil32(return_data.size) + 416] = 0
                mem[_4754 + ceil32(return_data.size)] = _4754 + ceil32(return_data.size) + 384
                mem[_4754 + ceil32(return_data.size) + 32] = mem[_4754 + _4760 + 32]
                mem[_4754 + ceil32(return_data.size) + 64] = mem[_4754 + _4760 + 64]
                mem[_4754 + ceil32(return_data.size) + 96] = mem[_4754 + _4760 + 96]
                mem[_4754 + ceil32(return_data.size) + 128] = mem[_4754 + _4760 + 128]
                mem[_4754 + ceil32(return_data.size) + 160] = mem[_4754 + _4760 + 160]
                mem[_4754 + ceil32(return_data.size) + 192] = mem[_4754 + _4760 + 192]
                mem[_4754 + ceil32(return_data.size) + 224] = mem[_4754 + _4760 + 224]
                mem[_4754 + ceil32(return_data.size) + 256] = mem[_4754 + _4760 + 256]
                mem[_4754 + ceil32(return_data.size) + 288] = mem[_4754 + _4760 + 288]
                mem[_4754 + ceil32(return_data.size) + 320] = mem[_4754 + _4760 + 320]
                mem[_4754 + ceil32(return_data.size) + 352] = mem[_4754 + _4760 + 352]
                _9532 = mem[64]
                mem[mem[64]] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 7
                mem[mem[64] + 36] = 64
                mem[mem[64] + 68] = _4771
                s = 0
                while s < _4771:
                    mem[s + mem[64] + 100] = mem[s + _4754 + ceil32(return_data.size) + 416]
                    s = s + 32
                    continue 
                if ceil32(_4771) <= _4771:
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.mem[mem[64] len 4] with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len ceil32(_4771) + _9532 + -mem[64] + 96]
                    mem[mem[64]] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14270 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_14270] < 0:
                        revert with 0, 'Name doesnt exist'
                    _14284 = mem[64]
                    mem[mem[64] + 32 len 352] = call.data[calldata.size len 352]
                    mem[mem[64] + 384] = 96
                    mem[mem[64] + 416] = 0
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = 0
                    mem[mem[64] + 512] = 0
                    mem[mem[64] + 544] = 0
                    mem[mem[64] + 576] = 0
                    mem[mem[64] + 608] = 0
                    mem[mem[64] + 640] = 0
                    mem[mem[64] + 672] = 0
                    mem[mem[64] + 704] = 0
                    mem[mem[64] + 736] = 0
                    mem[mem[64] + 768] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 772] = 7
                    mem[mem[64] + 804] = 64
                    _14302 = mem[_4754 + ceil32(return_data.size) + 384]
                    mem[mem[64] + 836] = mem[_4754 + ceil32(return_data.size) + 384]
                    s = 0
                    while s < _14302:
                        mem[s + mem[64] + 868] = mem[s + _4754 + ceil32(return_data.size) + 416]
                        s = s + 32
                        continue 
                    if ceil32(_14302) > _14302:
                        mem[_14302 + mem[64] + 868] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                         gas gas_remaining wei
                        args 7, 64, mem[mem[64] + 836 len ceil32(_14302) + 32]
                    mem[mem[64] + 768] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1184
                        mem[_14284 + ceil32(return_data.size) + 1152] = uint255(stor[delegate.return_data[0]].field_1)
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1184
                        mem[_14284 + ceil32(return_data.size) + 1152] = stor[delegate.return_data[0]].field_1 % 128
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        if uint255(stor[delegate.return_data[0]].field_1):
                            if 31 >= uint255(stor[delegate.return_data[0]].field_1):
                                mem[_14284 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_14284 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _14284 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _14284 + ceil32(return_data.size) + uint255(stor[delegate.return_data[0]].field_1) + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        if stor[delegate.return_data[0]].field_1 % 128:
                            if 31 >= stor[delegate.return_data[0]].field_1 % 128:
                                mem[_14284 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_14284 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _14284 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _14284 + ceil32(return_data.size) + stor[delegate.return_data[0]].field_1 % 128 + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    mem[_14284 + ceil32(return_data.size) + 768] = _14284 + ceil32(return_data.size) + 1152
                    mem[_14284 + ceil32(return_data.size) + 800] = stor1[delegate.return_data[0]]
                    mem[_14284 + ceil32(return_data.size) + 832] = shares[delegate.return_data[0]]
                    mem[_14284 + ceil32(return_data.size) + 864] = released[delegate.return_data[0]]
                    mem[_14284 + ceil32(return_data.size) + 896] = uint256(payee[delegate.return_data[0]])
                    mem[_14284 + ceil32(return_data.size) + 928] = totalReleased[delegate.return_data[0]]
                    mem[_14284 + ceil32(return_data.size) + 960] = released[delegate.return_data[0]]
                    mem[_14284 + ceil32(return_data.size) + 992] = stor7[delegate.return_data[0]]
                    mem[_14284 + ceil32(return_data.size) + 1024] = stor8[delegate.return_data[0]]
                    mem[_14284 + ceil32(return_data.size) + 1056] = stor9[delegate.return_data[0]]
                    mem[_14284 + ceil32(return_data.size) + 1088] = stor10[delegate.return_data[0]]
                    mem[_14284 + ceil32(return_data.size) + 1120] = stor11[delegate.return_data[0]]
                    if 0 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 32] = stor1[delegate.return_data[0]]
                    if 1 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 64] = shares[delegate.return_data[0]]
                    if 2 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 96] = released[delegate.return_data[0]]
                    if 3 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 128] = uint256(payee[delegate.return_data[0]])
                    if 4 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 160] = totalReleased[delegate.return_data[0]]
                    if 5 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 192] = released[delegate.return_data[0]]
                    if 6 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 224] = stor7[delegate.return_data[0]]
                    if 7 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 256] = stor8[delegate.return_data[0]]
                    if 8 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 288] = stor9[delegate.return_data[0]]
                    if 9 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 320] = stor10[delegate.return_data[0]]
                    if 10 >= mem[_14284]:
                        revert with 0, 50
                    mem[_14284 + 352] = stor11[delegate.return_data[0]]
                    if idx < arg1:
                        revert with 0, 17
                    if idx - arg1 >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx - arg1) + 128] = _14284
                else:
                    mem[_4771 + _9532 + 100] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.mem[mem[64] len 4] with:
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len ceil32(_4771) + _9532 + -mem[64] + 96]
                    mem[mem[64]] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14271 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_14271] < 0:
                        revert with 0, 'Name doesnt exist'
                    _14286 = mem[64]
                    mem[mem[64] + 32 len 352] = call.data[calldata.size len 352]
                    mem[mem[64] + 384] = 96
                    mem[mem[64] + 416] = 0
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = 0
                    mem[mem[64] + 512] = 0
                    mem[mem[64] + 544] = 0
                    mem[mem[64] + 576] = 0
                    mem[mem[64] + 608] = 0
                    mem[mem[64] + 640] = 0
                    mem[mem[64] + 672] = 0
                    mem[mem[64] + 704] = 0
                    mem[mem[64] + 736] = 0
                    mem[mem[64] + 768] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 772] = 7
                    mem[mem[64] + 804] = 64
                    _14303 = mem[_4754 + ceil32(return_data.size) + 384]
                    mem[mem[64] + 836] = mem[_4754 + ceil32(return_data.size) + 384]
                    s = 0
                    while s < _14303:
                        mem[s + mem[64] + 868] = mem[s + _4754 + ceil32(return_data.size) + 416]
                        s = s + 32
                        continue 
                    if ceil32(_14303) > _14303:
                        mem[_14303 + mem[64] + 868] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                         gas gas_remaining wei
                        args 7, 64, mem[mem[64] + 836 len ceil32(_14303) + 32]
                    mem[mem[64] + 768] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1184
                        mem[_14286 + ceil32(return_data.size) + 1152] = uint255(stor[delegate.return_data[0]].field_1)
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1184
                        mem[_14286 + ceil32(return_data.size) + 1152] = stor[delegate.return_data[0]].field_1 % 128
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        if uint255(stor[delegate.return_data[0]].field_1):
                            if 31 >= uint255(stor[delegate.return_data[0]].field_1):
                                mem[_14286 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_14286 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _14286 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _14286 + ceil32(return_data.size) + uint255(stor[delegate.return_data[0]].field_1) + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        if stor[delegate.return_data[0]].field_1 % 128:
                            if 31 >= stor[delegate.return_data[0]].field_1 % 128:
                                mem[_14286 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_14286 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _14286 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _14286 + ceil32(return_data.size) + stor[delegate.return_data[0]].field_1 % 128 + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    mem[_14286 + ceil32(return_data.size) + 768] = _14286 + ceil32(return_data.size) + 1152
                    mem[_14286 + ceil32(return_data.size) + 800] = stor1[delegate.return_data[0]]
                    mem[_14286 + ceil32(return_data.size) + 832] = shares[delegate.return_data[0]]
                    mem[_14286 + ceil32(return_data.size) + 864] = released[delegate.return_data[0]]
                    mem[_14286 + ceil32(return_data.size) + 896] = uint256(payee[delegate.return_data[0]])
                    mem[_14286 + ceil32(return_data.size) + 928] = totalReleased[delegate.return_data[0]]
                    mem[_14286 + ceil32(return_data.size) + 960] = released[delegate.return_data[0]]
                    mem[_14286 + ceil32(return_data.size) + 992] = stor7[delegate.return_data[0]]
                    mem[_14286 + ceil32(return_data.size) + 1024] = stor8[delegate.return_data[0]]
                    mem[_14286 + ceil32(return_data.size) + 1056] = stor9[delegate.return_data[0]]
                    mem[_14286 + ceil32(return_data.size) + 1088] = stor10[delegate.return_data[0]]
                    mem[_14286 + ceil32(return_data.size) + 1120] = stor11[delegate.return_data[0]]
                    if 0 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 32] = stor1[delegate.return_data[0]]
                    if 1 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 64] = shares[delegate.return_data[0]]
                    if 2 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 96] = released[delegate.return_data[0]]
                    if 3 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 128] = uint256(payee[delegate.return_data[0]])
                    if 4 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 160] = totalReleased[delegate.return_data[0]]
                    if 5 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 192] = released[delegate.return_data[0]]
                    if 6 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 224] = stor7[delegate.return_data[0]]
                    if 7 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 256] = stor8[delegate.return_data[0]]
                    if 8 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 288] = stor9[delegate.return_data[0]]
                    if 9 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 320] = stor10[delegate.return_data[0]]
                    if 10 >= mem[_14286]:
                        revert with 0, 50
                    mem[_14286 + 352] = stor11[delegate.return_data[0]]
                    if idx < arg1:
                        revert with 0, 17
                    if idx - arg1 >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx - arg1) + 128] = _14286
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _4749 = mem[64]
        mem[mem[64]] = 32
        _4750 = mem[96]
        mem[mem[64] + 32] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 64
        u = mem[64] + (32 * mem[96]) + 64
        while idx < _4750:
            mem[t] = u + -_4749 - 64
            _9494 = mem[s]
            _9498 = mem[mem[s]]
            mem[u] = mem[mem[s]]
            v = 0
            w = _9494 + 32
            x = u + 32
            while v < _9498:
                mem[x] = mem[w]
                v = v + 1
                w = w + 32
                x = x + 32
                continue 
            v = _9498 + 1
            w = _9494 + (32 * _9498) + 64
            t = t + 32
            u = u + (32 * _9498) + 32
            continue 
    else:
        mem[128] = 96
        s = 128
        idx = arg2 - arg1
        while idx - 1:
            mem[s + 32] = 96
            s = s + 32
            idx = idx - 1
            continue 
        idx = arg1
        while idx < arg2:
            mem[mem[64]] = 0x3846629900000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 7
            mem[mem[64] + 36] = idx
            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x38466299 with:
                 gas gas_remaining wei
                args 7, idx
            if not delegate.return_code:
                revert with ext_call.return_data[0 len return_data.size]
            _9528 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _9533 = mem[_9528]
            require mem[_9528] <= test266151307()
            require return_data.size - mem[_9528] >= 384
            if not bool(_9528 + ceil32(return_data.size) + 384 <= test266151307()):
                revert with 0, 65
            mem[64] = _9528 + ceil32(return_data.size) + 384
            _9540 = mem[_9528 + _9533]
            require mem[_9528 + _9533] <= test266151307()
            require _9528 + _9533 + mem[_9528 + _9533] + 31 < _9528 + return_data.size
            _9541 = mem[_9528 + _9533 + mem[_9528 + _9533]]
            if mem[_9528 + _9533 + mem[_9528 + _9533]] > test266151307():
                revert with 0, 65
            if ceil32(mem[_9528 + _9533 + mem[_9528 + _9533]]) + 416 < 384 or _9528 + ceil32(return_data.size) + ceil32(mem[_9528 + _9533 + mem[_9528 + _9533]]) + 416 > test266151307():
                revert with 0, 65
            mem[64] = _9528 + ceil32(return_data.size) + ceil32(mem[_9528 + _9533 + mem[_9528 + _9533]]) + 416
            mem[_9528 + ceil32(return_data.size) + 384] = _9541
            require _9533 + _9540 + _9541 + 32 <= return_data.size
            s = 0
            while s < _9541:
                mem[s + _9528 + ceil32(return_data.size) + 416] = mem[s + _9528 + _9533 + _9540 + 32]
                s = s + 32
                continue 
            if ceil32(_9541) <= _9541:
                mem[_9528 + ceil32(return_data.size)] = _9528 + ceil32(return_data.size) + 384
                mem[_9528 + ceil32(return_data.size) + 32] = mem[_9528 + _9533 + 32]
                mem[_9528 + ceil32(return_data.size) + 64] = mem[_9528 + _9533 + 64]
                mem[_9528 + ceil32(return_data.size) + 96] = mem[_9528 + _9533 + 96]
                mem[_9528 + ceil32(return_data.size) + 128] = mem[_9528 + _9533 + 128]
                mem[_9528 + ceil32(return_data.size) + 160] = mem[_9528 + _9533 + 160]
                mem[_9528 + ceil32(return_data.size) + 192] = mem[_9528 + _9533 + 192]
                mem[_9528 + ceil32(return_data.size) + 224] = mem[_9528 + _9533 + 224]
                mem[_9528 + ceil32(return_data.size) + 256] = mem[_9528 + _9533 + 256]
                mem[_9528 + ceil32(return_data.size) + 288] = mem[_9528 + _9533 + 288]
                mem[_9528 + ceil32(return_data.size) + 320] = mem[_9528 + _9533 + 320]
                mem[_9528 + ceil32(return_data.size) + 352] = mem[_9528 + _9533 + 352]
                mem[mem[64]] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 7
                mem[mem[64] + 36] = 64
                mem[mem[64] + 68] = _9541
                s = 0
                while s < _9541:
                    mem[s + mem[64] + 100] = mem[s + _9528 + ceil32(return_data.size) + 416]
                    s = s + 32
                    continue 
                if ceil32(_9541) <= _9541:
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=_9541, data=mem[mem[64] + 100 len ceil32(_9541)])
                    mem[mem[64]] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    _18951 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_18951] < 0:
                        revert with 0, 'Name doesnt exist'
                    _18975 = mem[64]
                    mem[mem[64] + 32 len 352] = call.data[calldata.size len 352]
                    mem[mem[64] + 384] = 96
                    mem[mem[64] + 416] = 0
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = 0
                    mem[mem[64] + 512] = 0
                    mem[mem[64] + 544] = 0
                    mem[mem[64] + 576] = 0
                    mem[mem[64] + 608] = 0
                    mem[mem[64] + 640] = 0
                    mem[mem[64] + 672] = 0
                    mem[mem[64] + 704] = 0
                    mem[mem[64] + 736] = 0
                    mem[mem[64] + 768] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 772] = 7
                    mem[mem[64] + 804] = 64
                    _19011 = mem[_9528 + ceil32(return_data.size) + 384]
                    mem[mem[64] + 836] = mem[_9528 + ceil32(return_data.size) + 384]
                    s = 0
                    while s < _19011:
                        mem[s + mem[64] + 868] = mem[s + _9528 + ceil32(return_data.size) + 416]
                        s = s + 32
                        continue 
                    if ceil32(_19011) > _19011:
                        mem[_19011 + mem[64] + 868] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                         gas gas_remaining wei
                        args 7, 64, mem[mem[64] + 836 len ceil32(_19011) + 32]
                    mem[mem[64] + 768] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1184
                        mem[_18975 + ceil32(return_data.size) + 1152] = uint255(stor[delegate.return_data[0]].field_1)
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1184
                        mem[_18975 + ceil32(return_data.size) + 1152] = stor[delegate.return_data[0]].field_1 % 128
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        if uint255(stor[delegate.return_data[0]].field_1):
                            if 31 >= uint255(stor[delegate.return_data[0]].field_1):
                                mem[_18975 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_18975 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _18975 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _18975 + ceil32(return_data.size) + uint255(stor[delegate.return_data[0]].field_1) + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        if stor[delegate.return_data[0]].field_1 % 128:
                            if 31 >= stor[delegate.return_data[0]].field_1 % 128:
                                mem[_18975 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_18975 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _18975 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _18975 + ceil32(return_data.size) + stor[delegate.return_data[0]].field_1 % 128 + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    mem[_18975 + ceil32(return_data.size) + 768] = _18975 + ceil32(return_data.size) + 1152
                    mem[_18975 + ceil32(return_data.size) + 800] = stor1[delegate.return_data[0]]
                    mem[_18975 + ceil32(return_data.size) + 832] = shares[delegate.return_data[0]]
                    mem[_18975 + ceil32(return_data.size) + 864] = released[delegate.return_data[0]]
                    mem[_18975 + ceil32(return_data.size) + 896] = uint256(payee[delegate.return_data[0]])
                    mem[_18975 + ceil32(return_data.size) + 928] = totalReleased[delegate.return_data[0]]
                    mem[_18975 + ceil32(return_data.size) + 960] = released[delegate.return_data[0]]
                    mem[_18975 + ceil32(return_data.size) + 992] = stor7[delegate.return_data[0]]
                    mem[_18975 + ceil32(return_data.size) + 1024] = stor8[delegate.return_data[0]]
                    mem[_18975 + ceil32(return_data.size) + 1056] = stor9[delegate.return_data[0]]
                    mem[_18975 + ceil32(return_data.size) + 1088] = stor10[delegate.return_data[0]]
                    mem[_18975 + ceil32(return_data.size) + 1120] = stor11[delegate.return_data[0]]
                    if 0 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 32] = stor1[delegate.return_data[0]]
                    if 1 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 64] = shares[delegate.return_data[0]]
                    if 2 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 96] = released[delegate.return_data[0]]
                    if 3 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 128] = uint256(payee[delegate.return_data[0]])
                    if 4 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 160] = totalReleased[delegate.return_data[0]]
                    if 5 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 192] = released[delegate.return_data[0]]
                    if 6 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 224] = stor7[delegate.return_data[0]]
                    if 7 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 256] = stor8[delegate.return_data[0]]
                    if 8 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 288] = stor9[delegate.return_data[0]]
                    if 9 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 320] = stor10[delegate.return_data[0]]
                    if 10 >= mem[_18975]:
                        revert with 0, 50
                    mem[_18975 + 352] = stor11[delegate.return_data[0]]
                    if idx < arg1:
                        revert with 0, 17
                    if idx - arg1 >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx - arg1) + 128] = _18975
                else:
                    mem[_9541 + mem[64] + 100] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=_9541, data=mem[mem[64] + 100 len ceil32(_9541)])
                    mem[mem[64]] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    _18952 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_18952] < 0:
                        revert with 0, 'Name doesnt exist'
                    _18977 = mem[64]
                    mem[mem[64] + 32 len 352] = call.data[calldata.size len 352]
                    mem[mem[64] + 384] = 96
                    mem[mem[64] + 416] = 0
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = 0
                    mem[mem[64] + 512] = 0
                    mem[mem[64] + 544] = 0
                    mem[mem[64] + 576] = 0
                    mem[mem[64] + 608] = 0
                    mem[mem[64] + 640] = 0
                    mem[mem[64] + 672] = 0
                    mem[mem[64] + 704] = 0
                    mem[mem[64] + 736] = 0
                    mem[mem[64] + 768] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 772] = 7
                    mem[mem[64] + 804] = 64
                    _19012 = mem[_9528 + ceil32(return_data.size) + 384]
                    mem[mem[64] + 836] = mem[_9528 + ceil32(return_data.size) + 384]
                    s = 0
                    while s < _19012:
                        mem[s + mem[64] + 868] = mem[s + _9528 + ceil32(return_data.size) + 416]
                        s = s + 32
                        continue 
                    if ceil32(_19012) > _19012:
                        mem[_19012 + _18977 + 868] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                         gas gas_remaining wei
                        args 7, 64, mem[_18977 + 836 len ceil32(_19012) + 32]
                    mem[_18977 + 768] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        mem[64] = _18977 + ceil32(return_data.size) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1184
                        mem[_18977 + ceil32(return_data.size) + 1152] = uint255(stor[delegate.return_data[0]].field_1)
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        mem[64] = _18977 + ceil32(return_data.size) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1184
                        mem[_18977 + ceil32(return_data.size) + 1152] = stor[delegate.return_data[0]].field_1 % 128
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        if uint255(stor[delegate.return_data[0]].field_1):
                            if 31 >= uint255(stor[delegate.return_data[0]].field_1):
                                mem[_18977 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_18977 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _18977 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _18977 + ceil32(return_data.size) + uint255(stor[delegate.return_data[0]].field_1) + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        if stor[delegate.return_data[0]].field_1 % 128:
                            if 31 >= stor[delegate.return_data[0]].field_1 % 128:
                                mem[_18977 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_18977 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _18977 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _18977 + ceil32(return_data.size) + stor[delegate.return_data[0]].field_1 % 128 + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    mem[_18977 + ceil32(return_data.size) + 768] = _18977 + ceil32(return_data.size) + 1152
                    mem[_18977 + ceil32(return_data.size) + 800] = stor1[delegate.return_data[0]]
                    mem[_18977 + ceil32(return_data.size) + 832] = shares[delegate.return_data[0]]
                    mem[_18977 + ceil32(return_data.size) + 864] = released[delegate.return_data[0]]
                    mem[_18977 + ceil32(return_data.size) + 896] = uint256(payee[delegate.return_data[0]])
                    mem[_18977 + ceil32(return_data.size) + 928] = totalReleased[delegate.return_data[0]]
                    mem[_18977 + ceil32(return_data.size) + 960] = released[delegate.return_data[0]]
                    mem[_18977 + ceil32(return_data.size) + 992] = stor7[delegate.return_data[0]]
                    mem[_18977 + ceil32(return_data.size) + 1024] = stor8[delegate.return_data[0]]
                    mem[_18977 + ceil32(return_data.size) + 1056] = stor9[delegate.return_data[0]]
                    mem[_18977 + ceil32(return_data.size) + 1088] = stor10[delegate.return_data[0]]
                    mem[_18977 + ceil32(return_data.size) + 1120] = stor11[delegate.return_data[0]]
                    if 0 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 32] = stor1[delegate.return_data[0]]
                    if 1 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 64] = shares[delegate.return_data[0]]
                    if 2 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 96] = released[delegate.return_data[0]]
                    if 3 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 128] = uint256(payee[delegate.return_data[0]])
                    if 4 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 160] = totalReleased[delegate.return_data[0]]
                    if 5 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 192] = released[delegate.return_data[0]]
                    if 6 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 224] = stor7[delegate.return_data[0]]
                    if 7 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 256] = stor8[delegate.return_data[0]]
                    if 8 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 288] = stor9[delegate.return_data[0]]
                    if 9 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 320] = stor10[delegate.return_data[0]]
                    if 10 >= mem[_18977]:
                        revert with 0, 50
                    mem[_18977 + 352] = stor11[delegate.return_data[0]]
                    if idx < arg1:
                        revert with 0, 17
                    if idx - arg1 >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx - arg1) + 128] = _18977
            else:
                mem[_9541 + _9528 + ceil32(return_data.size) + 416] = 0
                mem[_9528 + ceil32(return_data.size)] = _9528 + ceil32(return_data.size) + 384
                mem[_9528 + ceil32(return_data.size) + 32] = mem[_9528 + _9533 + 32]
                mem[_9528 + ceil32(return_data.size) + 64] = mem[_9528 + _9533 + 64]
                mem[_9528 + ceil32(return_data.size) + 96] = mem[_9528 + _9533 + 96]
                mem[_9528 + ceil32(return_data.size) + 128] = mem[_9528 + _9533 + 128]
                mem[_9528 + ceil32(return_data.size) + 160] = mem[_9528 + _9533 + 160]
                mem[_9528 + ceil32(return_data.size) + 192] = mem[_9528 + _9533 + 192]
                mem[_9528 + ceil32(return_data.size) + 224] = mem[_9528 + _9533 + 224]
                mem[_9528 + ceil32(return_data.size) + 256] = mem[_9528 + _9533 + 256]
                mem[_9528 + ceil32(return_data.size) + 288] = mem[_9528 + _9533 + 288]
                mem[_9528 + ceil32(return_data.size) + 320] = mem[_9528 + _9533 + 320]
                mem[_9528 + ceil32(return_data.size) + 352] = mem[_9528 + _9533 + 352]
                mem[mem[64]] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 7
                mem[mem[64] + 36] = 64
                mem[mem[64] + 68] = _9541
                s = 0
                while s < _9541:
                    mem[s + mem[64] + 100] = mem[s + _9528 + ceil32(return_data.size) + 416]
                    s = s + 32
                    continue 
                if ceil32(_9541) <= _9541:
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=_9541, data=mem[mem[64] + 100 len ceil32(_9541)])
                    mem[mem[64]] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    _18953 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_18953] < 0:
                        revert with 0, 'Name doesnt exist'
                    _18979 = mem[64]
                    mem[mem[64] + 32 len 352] = call.data[calldata.size len 352]
                    mem[mem[64] + 384] = 96
                    mem[mem[64] + 416] = 0
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = 0
                    mem[mem[64] + 512] = 0
                    mem[mem[64] + 544] = 0
                    mem[mem[64] + 576] = 0
                    mem[mem[64] + 608] = 0
                    mem[mem[64] + 640] = 0
                    mem[mem[64] + 672] = 0
                    mem[mem[64] + 704] = 0
                    mem[mem[64] + 736] = 0
                    mem[mem[64] + 768] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 772] = 7
                    mem[mem[64] + 804] = 64
                    _19013 = mem[_9528 + ceil32(return_data.size) + 384]
                    mem[mem[64] + 836] = mem[_9528 + ceil32(return_data.size) + 384]
                    s = 0
                    while s < _19013:
                        mem[s + mem[64] + 868] = mem[s + _9528 + ceil32(return_data.size) + 416]
                        s = s + 32
                        continue 
                    if ceil32(_19013) > _19013:
                        mem[_19013 + mem[64] + 868] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                         gas gas_remaining wei
                        args 7, 64, mem[mem[64] + 836 len ceil32(_19013) + 32]
                    mem[mem[64] + 768] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1184
                        mem[_18979 + ceil32(return_data.size) + 1152] = uint255(stor[delegate.return_data[0]].field_1)
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        mem[64] = mem[64] + ceil32(return_data.size) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1184
                        mem[_18979 + ceil32(return_data.size) + 1152] = stor[delegate.return_data[0]].field_1 % 128
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        if uint255(stor[delegate.return_data[0]].field_1):
                            if 31 >= uint255(stor[delegate.return_data[0]].field_1):
                                mem[_18979 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_18979 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _18979 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _18979 + ceil32(return_data.size) + uint255(stor[delegate.return_data[0]].field_1) + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        if stor[delegate.return_data[0]].field_1 % 128:
                            if 31 >= stor[delegate.return_data[0]].field_1 % 128:
                                mem[_18979 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_18979 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _18979 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _18979 + ceil32(return_data.size) + stor[delegate.return_data[0]].field_1 % 128 + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    mem[_18979 + ceil32(return_data.size) + 768] = _18979 + ceil32(return_data.size) + 1152
                    mem[_18979 + ceil32(return_data.size) + 800] = stor1[delegate.return_data[0]]
                    mem[_18979 + ceil32(return_data.size) + 832] = shares[delegate.return_data[0]]
                    mem[_18979 + ceil32(return_data.size) + 864] = released[delegate.return_data[0]]
                    mem[_18979 + ceil32(return_data.size) + 896] = uint256(payee[delegate.return_data[0]])
                    mem[_18979 + ceil32(return_data.size) + 928] = totalReleased[delegate.return_data[0]]
                    mem[_18979 + ceil32(return_data.size) + 960] = released[delegate.return_data[0]]
                    mem[_18979 + ceil32(return_data.size) + 992] = stor7[delegate.return_data[0]]
                    mem[_18979 + ceil32(return_data.size) + 1024] = stor8[delegate.return_data[0]]
                    mem[_18979 + ceil32(return_data.size) + 1056] = stor9[delegate.return_data[0]]
                    mem[_18979 + ceil32(return_data.size) + 1088] = stor10[delegate.return_data[0]]
                    mem[_18979 + ceil32(return_data.size) + 1120] = stor11[delegate.return_data[0]]
                    if 0 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 32] = stor1[delegate.return_data[0]]
                    if 1 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 64] = shares[delegate.return_data[0]]
                    if 2 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 96] = released[delegate.return_data[0]]
                    if 3 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 128] = uint256(payee[delegate.return_data[0]])
                    if 4 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 160] = totalReleased[delegate.return_data[0]]
                    if 5 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 192] = released[delegate.return_data[0]]
                    if 6 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 224] = stor7[delegate.return_data[0]]
                    if 7 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 256] = stor8[delegate.return_data[0]]
                    if 8 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 288] = stor9[delegate.return_data[0]]
                    if 9 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 320] = stor10[delegate.return_data[0]]
                    if 10 >= mem[_18979]:
                        revert with 0, 50
                    mem[_18979 + 352] = stor11[delegate.return_data[0]]
                    if idx < arg1:
                        revert with 0, 17
                    if idx - arg1 >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx - arg1) + 128] = _18979
                else:
                    mem[_9541 + mem[64] + 100] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=_9541, data=mem[mem[64] + 100 len ceil32(_9541)])
                    mem[mem[64]] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    _18954 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    if mem[_18954] < 0:
                        revert with 0, 'Name doesnt exist'
                    _18981 = mem[64]
                    mem[mem[64] + 32 len 352] = call.data[calldata.size len 352]
                    mem[mem[64] + 384] = 96
                    mem[mem[64] + 416] = 0
                    mem[mem[64] + 448] = 0
                    mem[mem[64] + 480] = 0
                    mem[mem[64] + 512] = 0
                    mem[mem[64] + 544] = 0
                    mem[mem[64] + 576] = 0
                    mem[mem[64] + 608] = 0
                    mem[mem[64] + 640] = 0
                    mem[mem[64] + 672] = 0
                    mem[mem[64] + 704] = 0
                    mem[mem[64] + 736] = 0
                    mem[mem[64] + 768] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 772] = 7
                    mem[mem[64] + 804] = 64
                    _19014 = mem[_9528 + ceil32(return_data.size) + 384]
                    mem[mem[64] + 836] = mem[_9528 + ceil32(return_data.size) + 384]
                    s = 0
                    while s < _19014:
                        mem[s + mem[64] + 868] = mem[s + _9528 + ceil32(return_data.size) + 416]
                        s = s + 32
                        continue 
                    if ceil32(_19014) > _19014:
                        mem[_19014 + _18981 + 868] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                         gas gas_remaining wei
                        args 7, 64, mem[_18981 + 836 len ceil32(_19014) + 32]
                    mem[_18981 + 768] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        mem[64] = _18981 + ceil32(return_data.size) + ceil32(uint255(stor[delegate.return_data[0]].field_1)) + 1184
                        mem[_18981 + ceil32(return_data.size) + 1152] = uint255(stor[delegate.return_data[0]].field_1)
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        mem[64] = _18981 + ceil32(return_data.size) + ceil32(stor[delegate.return_data[0]].field_1 % 128) + 1184
                        mem[_18981 + ceil32(return_data.size) + 1152] = stor[delegate.return_data[0]].field_1 % 128
                    if bool(stor[delegate.return_data[0]].field_0):
                        if bool(stor[delegate.return_data[0]].field_0) == uint255(stor[delegate.return_data[0]].field_1) < 32:
                            revert with 0, 34
                        if uint255(stor[delegate.return_data[0]].field_1):
                            if 31 >= uint255(stor[delegate.return_data[0]].field_1):
                                mem[_18981 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_18981 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _18981 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _18981 + ceil32(return_data.size) + uint255(stor[delegate.return_data[0]].field_1) + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    else:
                        if bool(stor[delegate.return_data[0]].field_0) == stor[delegate.return_data[0]].field_1 % 128 < 32:
                            revert with 0, 34
                        if stor[delegate.return_data[0]].field_1 % 128:
                            if 31 >= stor[delegate.return_data[0]].field_1 % 128:
                                mem[_18981 + ceil32(return_data.size) + 1184] = 256 * Mask(248, 0, stor[delegate.return_data[0]].field_8)
                            else:
                                mem[0] = delegate.return_data[0]
                                mem[_18981 + ceil32(return_data.size) + 1184] = uint256(stor[sha3(delegate.return_data[0])].field_0)
                                s = _18981 + ceil32(return_data.size) + 1184
                                t = sha3(delegate.return_data[0])
                                while _18981 + ceil32(return_data.size) + stor[delegate.return_data[0]].field_1 % 128 + 1152 > s:
                                    mem[s + 32] = stor1[t]
                                    s = s + 32
                                    t = t + 1
                                    continue 
                    mem[_18981 + ceil32(return_data.size) + 768] = _18981 + ceil32(return_data.size) + 1152
                    mem[_18981 + ceil32(return_data.size) + 800] = stor1[delegate.return_data[0]]
                    mem[_18981 + ceil32(return_data.size) + 832] = shares[delegate.return_data[0]]
                    mem[_18981 + ceil32(return_data.size) + 864] = released[delegate.return_data[0]]
                    mem[_18981 + ceil32(return_data.size) + 896] = uint256(payee[delegate.return_data[0]])
                    mem[_18981 + ceil32(return_data.size) + 928] = totalReleased[delegate.return_data[0]]
                    mem[_18981 + ceil32(return_data.size) + 960] = released[delegate.return_data[0]]
                    mem[_18981 + ceil32(return_data.size) + 992] = stor7[delegate.return_data[0]]
                    mem[_18981 + ceil32(return_data.size) + 1024] = stor8[delegate.return_data[0]]
                    mem[_18981 + ceil32(return_data.size) + 1056] = stor9[delegate.return_data[0]]
                    mem[_18981 + ceil32(return_data.size) + 1088] = stor10[delegate.return_data[0]]
                    mem[_18981 + ceil32(return_data.size) + 1120] = stor11[delegate.return_data[0]]
                    if 0 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 32] = stor1[delegate.return_data[0]]
                    if 1 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 64] = shares[delegate.return_data[0]]
                    if 2 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 96] = released[delegate.return_data[0]]
                    if 3 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 128] = uint256(payee[delegate.return_data[0]])
                    if 4 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 160] = totalReleased[delegate.return_data[0]]
                    if 5 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 192] = released[delegate.return_data[0]]
                    if 6 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 224] = stor7[delegate.return_data[0]]
                    if 7 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 256] = stor8[delegate.return_data[0]]
                    if 8 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 288] = stor9[delegate.return_data[0]]
                    if 9 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 320] = stor10[delegate.return_data[0]]
                    if 10 >= mem[_18981]:
                        revert with 0, 50
                    mem[_18981 + 352] = stor11[delegate.return_data[0]]
                    if idx < arg1:
                        revert with 0, 17
                    if idx - arg1 >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx - arg1) + 128] = _18981
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        _9499 = mem[64]
        mem[mem[64]] = 32
        _9500 = mem[96]
        mem[mem[64] + 32] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 64
        u = mem[64] + (32 * mem[96]) + 64
        while idx < _9500:
            mem[t] = u + -_9499 - 64
            _14233 = mem[s]
            _14236 = mem[mem[s]]
            mem[u] = mem[mem[s]]
            v = 0
            w = _14233 + 32
            x = u + 32
            while v < _14236:
                mem[x] = mem[w]
                v = v + 1
                w = w + 32
                x = x + 32
                continue 
            v = _14236 + 1
            w = _14233 + (32 * _14236) + 64
            t = t + 32
            u = u + (32 * _14236) + 32
            continue 
    return memory
      from mem[64]
       len u - mem[64]
}

function createNodeWithTokens(string arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(arg1.length) + 128 < 96 or ceil32(arg1.length) + 128 > test266151307():
        revert with 0, 65
    mem[96] = arg1.length
    require arg1 + arg1.length + 36 <= calldata.size
    mem[128 len arg1.length] = arg1[all]
    mem[arg1.length + 128] = 0
    if not uint8(stor30.field_8):
        revert with 0, 'Node creation not authorized yet'
    mem[ceil32(arg1.length) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
    mem[ceil32(arg1.length) + 132] = 7
    mem[ceil32(arg1.length) + 164] = 64
    mem[ceil32(arg1.length) + 196] = arg1.length
    mem[ceil32(arg1.length) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
    if ceil32(arg1.length) <= arg1.length:
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x0 with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        mem[ceil32(arg1.length) + 128] = delegate.return_data[0]
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 0, delegate.return_data[4 len 28] < 0:
            revert with 0, 'nodeTypeName does not exist'
        if msg.sender == futurUsePoolAddress:
            revert with 0, 'futur and rewardsPool cannot create node'
        if distributionPoolAddress == msg.sender:
            revert with 0, 'futur and rewardsPool cannot create node'
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 132] = 7
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 164] = 64
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 196] = arg1.length
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
        if ceil32(arg1.length) > arg1.length:
            mem[arg1.length + ceil32(arg1.length) + ceil32(return_data.size) + 228] = 0
            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                 gas gas_remaining wei
                args 7, Array(len=arg1.length, data=arg1[all])
            mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = delegate.return_data[0]
            if not delegate.return_code:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if stor1[delegate.return_data[0]] and arg2 > -1 / stor1[delegate.return_data[0]]:
                revert with 0, 17
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 132] = msg.sender
            require ext_code.size(sub_9cfccb46Address)
            staticcall sub_9cfccb46Address.0x70a08231 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < stor1[delegate.return_data[0]] * arg2:
                revert with 0, 'Balance too low for creation.'
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 132] = msg.sender
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 164] = this.address
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 196] = stor1[delegate.return_data[0]] * arg2
            require ext_code.size(sub_9cfccb46Address)
            call sub_9cfccb46Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor1[delegate.return_data[0]] * arg2
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            mem[ceil32(arg1.length) + (6 * ceil32(return_data.size)) + 132] = this.address
            require ext_code.size(sub_9cfccb46Address)
            staticcall sub_9cfccb46Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(arg1.length) + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < swapTokensAmount:
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                if ceil32(arg1.length) <= arg1.length:
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=arg1.length, data=arg1[all])
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if delegate.return_data[0] < 0:
                        revert with 0, '_createNodes: nodeTypeName does not exist'
                    if arg2 <= 0:
                        revert with 0, '_createNodes: count cannot be less than 1.'
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19971 = mem[64]
                            _20023 = mem[96]
                            s = 0
                            while s < _20023:
                                mem[s + _19971] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20023 + _19971] = 11
                            if ceil32(_20023) <= _20023:
                                _24110 = mem[64]
                                _24111 = sha3(mem[mem[64] len _20023 + _19971 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24111
                                mem[64] = mem[64] + 96
                                mem[_24110] = 96
                                mem[_24110 + 32] = block.timestamp
                                mem[_24110 + 64] = block.timestamp
                                uint256(stor[_24111][address(msg.sender)].field_0)++
                                if bool(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_0) == uint255(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))) + (uint255(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24111')) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24111')) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))) + (uint255(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24111')) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24111')) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))) + (uint255(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))) + (uint255(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_0) == stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))) + (stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24111)) + (3 * uint256(stor[_24111][address(msg.sender)].field_0))) + (stor[_24111][address(msg.sender)][uint256(stor[_24111][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24111')) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24111')) + (3 * uint256(stor[_24111][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24116 = mem[64]
                                _24117 = sha3(mem[mem[64] len _20023 + _19971 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24117
                                mem[64] = mem[64] + 96
                                mem[_24116] = 96
                                mem[_24116 + 32] = block.timestamp
                                mem[_24116 + 64] = block.timestamp
                                uint256(stor[_24117][address(msg.sender)].field_0)++
                                if bool(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_0) == uint255(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))) + (uint255(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24117')) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24117')) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))) + (uint255(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24117')) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24117')) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))) + (uint255(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))) + (uint255(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_0) == stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))) + (stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24117)) + (3 * uint256(stor[_24117][address(msg.sender)].field_0))) + (stor[_24117][address(msg.sender)][uint256(stor[_24117][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24117')) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24117')) + (3 * uint256(stor[_24117][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19972 = mem[64]
                            _20024 = mem[96]
                            s = 0
                            while s < _20024:
                                mem[s + _19972] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20024 + _19972] = 11
                            if ceil32(_20024) <= _20024:
                                _24122 = mem[64]
                                _24123 = sha3(mem[mem[64] len _20024 + _19972 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24123
                                mem[64] = mem[64] + 96
                                mem[_24122] = 96
                                mem[_24122 + 32] = block.timestamp
                                mem[_24122 + 64] = block.timestamp
                                uint256(stor[_24123][address(msg.sender)].field_0)++
                                if bool(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_0) == uint255(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))) + (uint255(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24123')) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24123')) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))) + (uint255(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24123')) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24123')) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))) + (uint255(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))) + (uint255(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_0) == stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))) + (stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24123)) + (3 * uint256(stor[_24123][address(msg.sender)].field_0))) + (stor[_24123][address(msg.sender)][uint256(stor[_24123][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24123')) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24123')) + (3 * uint256(stor[_24123][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24128 = mem[64]
                                _24129 = sha3(mem[mem[64] len _20024 + _19972 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24129
                                mem[64] = mem[64] + 96
                                mem[_24128] = 96
                                mem[_24128 + 32] = block.timestamp
                                mem[_24128 + 64] = block.timestamp
                                uint256(stor[_24129][address(msg.sender)].field_0)++
                                if bool(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_0) == uint255(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))) + (uint255(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24129')) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24129')) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))) + (uint255(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24129')) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24129')) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))) + (uint255(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))) + (uint255(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_0) == stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))) + (stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24129)) + (3 * uint256(stor[_24129][address(msg.sender)].field_0))) + (stor[_24129][address(msg.sender)][uint256(stor[_24129][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24129')) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24129')) + (3 * uint256(stor[_24129][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                else:
                    mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=arg1.length, data=arg1[all])
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if delegate.return_data[0] < 0:
                        revert with 0, '_createNodes: nodeTypeName does not exist'
                    if arg2 <= 0:
                        revert with 0, '_createNodes: count cannot be less than 1.'
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19973 = mem[64]
                            _20025 = mem[96]
                            s = 0
                            while s < _20025:
                                mem[s + _19973] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20025 + _19973] = 11
                            if ceil32(_20025) <= _20025:
                                _24134 = mem[64]
                                _24135 = sha3(mem[mem[64] len _20025 + _19973 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24135
                                mem[64] = mem[64] + 96
                                mem[_24134] = 96
                                mem[_24134 + 32] = block.timestamp
                                mem[_24134 + 64] = block.timestamp
                                uint256(stor[_24135][address(msg.sender)].field_0)++
                                if bool(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_0) == uint255(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))) + (uint255(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24135')) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24135')) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))) + (uint255(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24135')) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24135')) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))) + (uint255(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))) + (uint255(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_0) == stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))) + (stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24135)) + (3 * uint256(stor[_24135][address(msg.sender)].field_0))) + (stor[_24135][address(msg.sender)][uint256(stor[_24135][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24135')) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24135')) + (3 * uint256(stor[_24135][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24140 = mem[64]
                                _24141 = sha3(mem[mem[64] len _20025 + _19973 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24141
                                mem[64] = mem[64] + 96
                                mem[_24140] = 96
                                mem[_24140 + 32] = block.timestamp
                                mem[_24140 + 64] = block.timestamp
                                uint256(stor[_24141][address(msg.sender)].field_0)++
                                if bool(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_0) == uint255(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))) + (uint255(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24141')) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24141')) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))) + (uint255(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24141')) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24141')) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))) + (uint255(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))) + (uint255(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_0) == stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))) + (stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24141)) + (3 * uint256(stor[_24141][address(msg.sender)].field_0))) + (stor[_24141][address(msg.sender)][uint256(stor[_24141][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24141')) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24141')) + (3 * uint256(stor[_24141][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19974 = mem[64]
                            _20026 = mem[96]
                            s = 0
                            while s < _20026:
                                mem[s + _19974] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20026 + _19974] = 11
                            if ceil32(_20026) <= _20026:
                                _24146 = mem[64]
                                _24147 = sha3(mem[mem[64] len _20026 + _19974 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24147
                                mem[64] = mem[64] + 96
                                mem[_24146] = 96
                                mem[_24146 + 32] = block.timestamp
                                mem[_24146 + 64] = block.timestamp
                                uint256(stor[_24147][address(msg.sender)].field_0)++
                                if bool(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_0) == uint255(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))) + (uint255(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24147')) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24147')) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))) + (uint255(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24147')) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24147')) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))) + (uint255(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))) + (uint255(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_0) == stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))) + (stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24147)) + (3 * uint256(stor[_24147][address(msg.sender)].field_0))) + (stor[_24147][address(msg.sender)][uint256(stor[_24147][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24147')) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24147')) + (3 * uint256(stor[_24147][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24152 = mem[64]
                                _24153 = sha3(mem[mem[64] len _20026 + _19974 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24153
                                mem[64] = mem[64] + 96
                                mem[_24152] = 96
                                mem[_24152 + 32] = block.timestamp
                                mem[_24152 + 64] = block.timestamp
                                uint256(stor[_24153][address(msg.sender)].field_0)++
                                if bool(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_0) == uint255(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))) + (uint255(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24153')) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24153')) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))) + (uint255(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24153')) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24153')) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))) + (uint255(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))) + (uint255(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_0) == stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))) + (stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24153)) + (3 * uint256(stor[_24153][address(msg.sender)].field_0))) + (stor[_24153][address(msg.sender)][uint256(stor[_24153][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24153')) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24153')) + (3 * uint256(stor[_24153][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
            else:
                if not uint8(stor28.field_8):
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if delegate.return_data[0] < 0:
                            revert with 0, '_createNodes: nodeTypeName does not exist'
                        if arg2 <= 0:
                            revert with 0, '_createNodes: count cannot be less than 1.'
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19975 = mem[64]
                                _20027 = mem[96]
                                s = 0
                                while s < _20027:
                                    mem[s + _19975] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20027 + _19975] = 11
                                if ceil32(_20027) <= _20027:
                                    _24158 = mem[64]
                                    _24159 = sha3(mem[mem[64] len _20027 + _19975 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24159
                                    mem[64] = mem[64] + 96
                                    mem[_24158] = 96
                                    mem[_24158 + 32] = block.timestamp
                                    mem[_24158 + 64] = block.timestamp
                                    uint256(stor[_24159][address(msg.sender)].field_0)++
                                    if bool(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_0) == uint255(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))) + (uint255(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24159')) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24159')) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))) + (uint255(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24159')) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24159')) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))) + (uint255(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))) + (uint255(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_0) == stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))) + (stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24159)) + (3 * uint256(stor[_24159][address(msg.sender)].field_0))) + (stor[_24159][address(msg.sender)][uint256(stor[_24159][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24159')) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24159')) + (3 * uint256(stor[_24159][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24164 = mem[64]
                                    _24165 = sha3(mem[mem[64] len _20027 + _19975 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24165
                                    mem[64] = mem[64] + 96
                                    mem[_24164] = 96
                                    mem[_24164 + 32] = block.timestamp
                                    mem[_24164 + 64] = block.timestamp
                                    uint256(stor[_24165][address(msg.sender)].field_0)++
                                    if bool(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_0) == uint255(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))) + (uint255(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24165')) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24165')) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))) + (uint255(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24165')) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24165')) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))) + (uint255(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))) + (uint255(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_0) == stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))) + (stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24165)) + (3 * uint256(stor[_24165][address(msg.sender)].field_0))) + (stor[_24165][address(msg.sender)][uint256(stor[_24165][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24165')) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24165')) + (3 * uint256(stor[_24165][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19976 = mem[64]
                                _20028 = mem[96]
                                s = 0
                                while s < _20028:
                                    mem[s + _19976] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20028 + _19976] = 11
                                if ceil32(_20028) <= _20028:
                                    _24170 = mem[64]
                                    _24171 = sha3(mem[mem[64] len _20028 + _19976 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24171
                                    mem[64] = mem[64] + 96
                                    mem[_24170] = 96
                                    mem[_24170 + 32] = block.timestamp
                                    mem[_24170 + 64] = block.timestamp
                                    uint256(stor[_24171][address(msg.sender)].field_0)++
                                    if bool(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_0) == uint255(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))) + (uint255(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24171')) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24171')) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))) + (uint255(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24171')) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24171')) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))) + (uint255(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))) + (uint255(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_0) == stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))) + (stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24171)) + (3 * uint256(stor[_24171][address(msg.sender)].field_0))) + (stor[_24171][address(msg.sender)][uint256(stor[_24171][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24171')) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24171')) + (3 * uint256(stor[_24171][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24176 = mem[64]
                                    _24177 = sha3(mem[mem[64] len _20028 + _19976 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24177
                                    mem[64] = mem[64] + 96
                                    mem[_24176] = 96
                                    mem[_24176 + 32] = block.timestamp
                                    mem[_24176 + 64] = block.timestamp
                                    uint256(stor[_24177][address(msg.sender)].field_0)++
                                    if bool(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_0) == uint255(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))) + (uint255(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24177')) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24177')) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))) + (uint255(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24177')) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24177')) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))) + (uint255(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))) + (uint255(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_0) == stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))) + (stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24177)) + (3 * uint256(stor[_24177][address(msg.sender)].field_0))) + (stor[_24177][address(msg.sender)][uint256(stor[_24177][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24177')) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24177')) + (3 * uint256(stor[_24177][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if delegate.return_data[0] < 0:
                            revert with 0, '_createNodes: nodeTypeName does not exist'
                        if arg2 <= 0:
                            revert with 0, '_createNodes: count cannot be less than 1.'
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19977 = mem[64]
                                _20029 = mem[96]
                                s = 0
                                while s < _20029:
                                    mem[s + _19977] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20029 + _19977] = 11
                                if ceil32(_20029) <= _20029:
                                    _24182 = mem[64]
                                    _24183 = sha3(mem[mem[64] len _20029 + _19977 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24183
                                    mem[64] = mem[64] + 96
                                    mem[_24182] = 96
                                    mem[_24182 + 32] = block.timestamp
                                    mem[_24182 + 64] = block.timestamp
                                    uint256(stor[_24183][address(msg.sender)].field_0)++
                                    if bool(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_0) == uint255(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))) + (uint255(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24183')) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24183')) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))) + (uint255(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24183')) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24183')) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))) + (uint255(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))) + (uint255(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_0) == stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))) + (stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24183)) + (3 * uint256(stor[_24183][address(msg.sender)].field_0))) + (stor[_24183][address(msg.sender)][uint256(stor[_24183][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24183')) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24183')) + (3 * uint256(stor[_24183][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24188 = mem[64]
                                    _24189 = sha3(mem[mem[64] len _20029 + _19977 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24189
                                    mem[64] = mem[64] + 96
                                    mem[_24188] = 96
                                    mem[_24188 + 32] = block.timestamp
                                    mem[_24188 + 64] = block.timestamp
                                    uint256(stor[_24189][address(msg.sender)].field_0)++
                                    if bool(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_0) == uint255(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))) + (uint255(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24189')) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24189')) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))) + (uint255(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24189')) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24189')) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))) + (uint255(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))) + (uint255(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_0) == stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))) + (stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24189)) + (3 * uint256(stor[_24189][address(msg.sender)].field_0))) + (stor[_24189][address(msg.sender)][uint256(stor[_24189][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24189')) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24189')) + (3 * uint256(stor[_24189][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19978 = mem[64]
                                _20030 = mem[96]
                                s = 0
                                while s < _20030:
                                    mem[s + _19978] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20030 + _19978] = 11
                                if ceil32(_20030) <= _20030:
                                    _24194 = mem[64]
                                    _24195 = sha3(mem[mem[64] len _20030 + _19978 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24195
                                    mem[64] = mem[64] + 96
                                    mem[_24194] = 96
                                    mem[_24194 + 32] = block.timestamp
                                    mem[_24194 + 64] = block.timestamp
                                    uint256(stor[_24195][address(msg.sender)].field_0)++
                                    if bool(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_0) == uint255(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))) + (uint255(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24195')) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24195')) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))) + (uint255(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24195')) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24195')) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))) + (uint255(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))) + (uint255(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_0) == stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))) + (stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24195)) + (3 * uint256(stor[_24195][address(msg.sender)].field_0))) + (stor[_24195][address(msg.sender)][uint256(stor[_24195][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24195')) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24195')) + (3 * uint256(stor[_24195][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24200 = mem[64]
                                    _24201 = sha3(mem[mem[64] len _20030 + _19978 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24201
                                    mem[64] = mem[64] + 96
                                    mem[_24200] = 96
                                    mem[_24200 + 32] = block.timestamp
                                    mem[_24200 + 64] = block.timestamp
                                    uint256(stor[_24201][address(msg.sender)].field_0)++
                                    if bool(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_0) == uint255(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))) + (uint255(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24201')) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24201')) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))) + (uint255(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24201')) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24201')) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))) + (uint255(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))) + (uint255(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_0) == stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))) + (stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24201)) + (3 * uint256(stor[_24201][address(msg.sender)].field_0))) + (stor[_24201][address(msg.sender)][uint256(stor[_24201][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24201')) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24201')) + (3 * uint256(stor[_24201][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                else:
                    if uint8(stor28.field_0):
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            if ceil32(arg1.length) <= arg1.length:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19979 = mem[64]
                                    _20031 = mem[96]
                                    s = 0
                                    while s < _20031:
                                        mem[s + _19979] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20031 + _19979] = 11
                                    if ceil32(_20031) <= _20031:
                                        _24206 = mem[64]
                                        _24207 = sha3(mem[mem[64] len _20031 + _19979 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24207
                                        mem[64] = mem[64] + 96
                                        mem[_24206] = 96
                                        mem[_24206 + 32] = block.timestamp
                                        mem[_24206 + 64] = block.timestamp
                                        uint256(stor[_24207][address(msg.sender)].field_0)++
                                        if bool(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_0) == uint255(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))) + (uint255(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24207')) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24207')) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))) + (uint255(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24207')) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24207')) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))) + (uint255(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))) + (uint255(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_0) == stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))) + (stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24207)) + (3 * uint256(stor[_24207][address(msg.sender)].field_0))) + (stor[_24207][address(msg.sender)][uint256(stor[_24207][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24207')) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24207')) + (3 * uint256(stor[_24207][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24212 = mem[64]
                                        _24213 = sha3(mem[mem[64] len _20031 + _19979 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24213
                                        mem[64] = mem[64] + 96
                                        mem[_24212] = 96
                                        mem[_24212 + 32] = block.timestamp
                                        mem[_24212 + 64] = block.timestamp
                                        uint256(stor[_24213][address(msg.sender)].field_0)++
                                        if bool(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_0) == uint255(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))) + (uint255(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24213')) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24213')) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))) + (uint255(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24213')) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24213')) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))) + (uint255(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))) + (uint255(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_0) == stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))) + (stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24213)) + (3 * uint256(stor[_24213][address(msg.sender)].field_0))) + (stor[_24213][address(msg.sender)][uint256(stor[_24213][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24213')) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24213')) + (3 * uint256(stor[_24213][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19980 = mem[64]
                                    _20032 = mem[96]
                                    s = 0
                                    while s < _20032:
                                        mem[s + _19980] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20032 + _19980] = 11
                                    if ceil32(_20032) <= _20032:
                                        _24218 = mem[64]
                                        _24219 = sha3(mem[mem[64] len _20032 + _19980 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24219
                                        mem[64] = mem[64] + 96
                                        mem[_24218] = 96
                                        mem[_24218 + 32] = block.timestamp
                                        mem[_24218 + 64] = block.timestamp
                                        uint256(stor[_24219][address(msg.sender)].field_0)++
                                        if bool(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_0) == uint255(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))) + (uint255(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24219')) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24219')) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))) + (uint255(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24219')) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24219')) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))) + (uint255(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))) + (uint255(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_0) == stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))) + (stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24219)) + (3 * uint256(stor[_24219][address(msg.sender)].field_0))) + (stor[_24219][address(msg.sender)][uint256(stor[_24219][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24219')) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24219')) + (3 * uint256(stor[_24219][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24224 = mem[64]
                                        _24225 = sha3(mem[mem[64] len _20032 + _19980 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24225
                                        mem[64] = mem[64] + 96
                                        mem[_24224] = 96
                                        mem[_24224 + 32] = block.timestamp
                                        mem[_24224 + 64] = block.timestamp
                                        uint256(stor[_24225][address(msg.sender)].field_0)++
                                        if bool(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_0) == uint255(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))) + (uint255(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24225')) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24225')) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))) + (uint255(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24225')) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24225')) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))) + (uint255(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))) + (uint255(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_0) == stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))) + (stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24225)) + (3 * uint256(stor[_24225][address(msg.sender)].field_0))) + (stor[_24225][address(msg.sender)][uint256(stor[_24225][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24225')) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24225')) + (3 * uint256(stor[_24225][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            if ceil32(arg1.length) <= arg1.length:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19981 = mem[64]
                                    _20033 = mem[96]
                                    s = 0
                                    while s < _20033:
                                        mem[s + _19981] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20033 + _19981] = 11
                                    if ceil32(_20033) <= _20033:
                                        _24230 = mem[64]
                                        _24231 = sha3(mem[mem[64] len _20033 + _19981 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24231
                                        mem[64] = mem[64] + 96
                                        mem[_24230] = 96
                                        mem[_24230 + 32] = block.timestamp
                                        mem[_24230 + 64] = block.timestamp
                                        uint256(stor[_24231][address(msg.sender)].field_0)++
                                        if bool(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_0) == uint255(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))) + (uint255(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24231')) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24231')) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))) + (uint255(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24231')) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24231')) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))) + (uint255(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))) + (uint255(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_0) == stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))) + (stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24231)) + (3 * uint256(stor[_24231][address(msg.sender)].field_0))) + (stor[_24231][address(msg.sender)][uint256(stor[_24231][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24231')) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24231')) + (3 * uint256(stor[_24231][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24236 = mem[64]
                                        _24237 = sha3(mem[mem[64] len _20033 + _19981 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24237
                                        mem[64] = mem[64] + 96
                                        mem[_24236] = 96
                                        mem[_24236 + 32] = block.timestamp
                                        mem[_24236 + 64] = block.timestamp
                                        uint256(stor[_24237][address(msg.sender)].field_0)++
                                        if bool(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_0) == uint255(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))) + (uint255(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24237')) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24237')) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))) + (uint255(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24237')) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24237')) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))) + (uint255(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))) + (uint255(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_0) == stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))) + (stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24237)) + (3 * uint256(stor[_24237][address(msg.sender)].field_0))) + (stor[_24237][address(msg.sender)][uint256(stor[_24237][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24237')) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24237')) + (3 * uint256(stor[_24237][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19982 = mem[64]
                                    _20034 = mem[96]
                                    s = 0
                                    while s < _20034:
                                        mem[s + _19982] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20034 + _19982] = 11
                                    if ceil32(_20034) <= _20034:
                                        _24242 = mem[64]
                                        _24243 = sha3(mem[mem[64] len _20034 + _19982 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24243
                                        mem[64] = mem[64] + 96
                                        mem[_24242] = 96
                                        mem[_24242 + 32] = block.timestamp
                                        mem[_24242 + 64] = block.timestamp
                                        uint256(stor[_24243][address(msg.sender)].field_0)++
                                        if bool(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_0) == uint255(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))) + (uint255(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24243')) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24243')) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))) + (uint255(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24243')) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24243')) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))) + (uint255(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))) + (uint255(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_0) == stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))) + (stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24243)) + (3 * uint256(stor[_24243][address(msg.sender)].field_0))) + (stor[_24243][address(msg.sender)][uint256(stor[_24243][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24243')) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24243')) + (3 * uint256(stor[_24243][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24248 = mem[64]
                                        _24249 = sha3(mem[mem[64] len _20034 + _19982 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24249
                                        mem[64] = mem[64] + 96
                                        mem[_24248] = 96
                                        mem[_24248 + 32] = block.timestamp
                                        mem[_24248 + 64] = block.timestamp
                                        uint256(stor[_24249][address(msg.sender)].field_0)++
                                        if bool(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_0) == uint255(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))) + (uint255(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24249')) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24249')) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))) + (uint255(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24249')) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24249')) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))) + (uint255(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))) + (uint255(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_0) == stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))) + (stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24249)) + (3 * uint256(stor[_24249][address(msg.sender)].field_0))) + (stor[_24249][address(msg.sender)][uint256(stor[_24249][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24249')) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24249')) + (3 * uint256(stor[_24249][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                    else:
                        uint8(stor28.field_0) = 1
                        if ext_call.return_data[0] and futurFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 2
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 160] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 192] = ext_call.return_data[12 len 20]
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = _uniswapV2RouterAddress
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * futurFee / 100
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(return_data.size) + 64]
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 224] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] * futurFee / 100
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 260] = 0
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 292] = 160
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 388] = 2
                        idx = 0
                        s = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 420
                        t = ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 160
                        while idx < mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 324] = this.address
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 356] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len ceil32(arg1.length) + (10 * ceil32(return_data.size)) + -mem[64] + 480]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if eth.balance(this.address) < eth.balance(this.address):
                            revert with 0, 17
                        call futurUsePoolAddress with:
                             gas 2300 wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if ext_call.return_data[0] and rewardsFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        mem[mem[64] + 4] = distributionPoolAddress
                        mem[mem[64] + 36] = ext_call.return_data[0] * rewardsFee / 100
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args distributionPoolAddress, ext_call.return_data[0] * rewardsFee / 100
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11235 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_11235] == bool(mem[_11235])
                        if ext_call.return_data[0] and liquidityPoolFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        if ext_call.return_data[0] * liquidityPoolFee / 100 < ext_call.return_data[0] * liquidityPoolFee / 100 / 2:
                            revert with 0, 17
                        _11628 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        mem[_11628 + 32 len 64] = call.data[calldata.size len 64]
                        if not mem[_11628]:
                            revert with 0, 50
                        mem[_11628 + 32] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[_11628 + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _11628 + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_11628]:
                            revert with 0, 50
                        mem[_11628 + 64] = ext_call.return_data[12 len 20]
                        mem[_11628 + ceil32(return_data.size) + 100] = _uniswapV2RouterAddress
                        mem[_11628 + ceil32(return_data.size) + 132] = ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        mem[_11628 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _11628 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_11628 + (2 * ceil32(return_data.size)) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[_11628 + (2 * ceil32(return_data.size)) + 100] = ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        mem[_11628 + (2 * ceil32(return_data.size)) + 132] = 0
                        mem[_11628 + (2 * ceil32(return_data.size)) + 164] = 160
                        mem[_11628 + (2 * ceil32(return_data.size)) + 260] = mem[_11628]
                        idx = 0
                        s = _11628 + (2 * ceil32(return_data.size)) + 292
                        t = _11628 + 32
                        while idx < mem[_11628]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_11628 + (2 * ceil32(return_data.size)) + 196] = this.address
                        mem[_11628 + (2 * ceil32(return_data.size)) + 228] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11628 + (2 * ceil32(return_data.size)) + (32 * mem[_11628]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if eth.balance(this.address) < eth.balance(this.address):
                            revert with 0, 17
                        mem[mem[64] + 4] = _uniswapV2RouterAddress
                        mem[mem[64] + 36] = (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15799 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_15799] == bool(mem[_15799])
                        mem[mem[64] + 68] = 0
                        mem[mem[64] + 100] = 0
                        mem[mem[64] + 132] = sub_2a607841Address
                        mem[mem[64] + 164] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                             gas gas_remaining wei
                            args sub_9cfccb46Address, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2), 0, 0, sub_2a607841Address, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        mem[mem[64] + 32] = 0
                        mem[mem[64] + 64] = (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        emit SwapAndLiquify(Mask(255, 1, ext_call.return_data[0] * liquidityPoolFee / 100), 0, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2));
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_9cfccb46Address)
                        staticcall sub_9cfccb46Address.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _17095 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _17339 = mem[_17095]
                        _18208 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        mem[_18208 + 32 len 64] = call.data[calldata.size len 64]
                        if not mem[_18208]:
                            revert with 0, 50
                        mem[_18208 + 32] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[_18208 + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _18208 + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_18208]:
                            revert with 0, 50
                        mem[_18208 + 64] = ext_call.return_data[12 len 20]
                        mem[_18208 + ceil32(return_data.size) + 100] = _uniswapV2RouterAddress
                        mem[_18208 + ceil32(return_data.size) + 132] = _17339
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, _17339
                        mem[_18208 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _18208 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_18208 + (2 * ceil32(return_data.size)) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[_18208 + (2 * ceil32(return_data.size)) + 100] = _17339
                        mem[_18208 + (2 * ceil32(return_data.size)) + 132] = 0
                        mem[_18208 + (2 * ceil32(return_data.size)) + 164] = 160
                        mem[_18208 + (2 * ceil32(return_data.size)) + 260] = mem[_18208]
                        idx = 0
                        s = _18208 + (2 * ceil32(return_data.size)) + 292
                        t = _18208 + 32
                        while idx < mem[_18208]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_18208 + (2 * ceil32(return_data.size)) + 196] = this.address
                        mem[_18208 + (2 * ceil32(return_data.size)) + 228] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                             gas gas_remaining wei
                            args _17339, 0, 160, address(this.address), block.timestamp, mem[_18208 + (2 * ceil32(return_data.size)) + 260 len (32 * mem[_18208]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        uint8(stor28.field_0) = 0
                        mem[_18208 + (2 * ceil32(return_data.size)) + 96] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                        mem[_18208 + (2 * ceil32(return_data.size)) + 100] = 7
                        mem[_18208 + (2 * ceil32(return_data.size)) + 132] = 64
                        mem[_18208 + (2 * ceil32(return_data.size)) + 164] = mem[96]
                        mem[_18208 + (2 * ceil32(return_data.size)) + 196 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                        if ceil32(mem[96]) <= mem[96]:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=mem[96], data=mem[_18208 + (2 * ceil32(return_data.size)) + 196 len ceil32(mem[96])])
                            mem[_18208 + (2 * ceil32(return_data.size)) + 96] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[_18208 + (4 * ceil32(return_data.size)) + 96] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[_18208 + (4 * ceil32(return_data.size)) + 100] = 7
                            mem[_18208 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_18208 + (4 * ceil32(return_data.size)) + 164] = mem[96]
                            mem[_18208 + (4 * ceil32(return_data.size)) + 196 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                            if ceil32(mem[96]) <= mem[96]:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[_18208 + (4 * ceil32(return_data.size)) + 196 len ceil32(mem[96])])
                                mem[_18208 + (4 * ceil32(return_data.size)) + 96] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _18208 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30522 = mem[64]
                                    _30538 = mem[96]
                                    s = 0
                                    while s < _30538:
                                        mem[s + _30522] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30538 + _30522] = 11
                                    if ceil32(_30538) <= _30538:
                                        _31910 = mem[64]
                                        _31911 = sha3(mem[mem[64] len _30538 + _30522 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31911
                                        mem[64] = mem[64] + 96
                                        mem[_31910] = 96
                                        mem[_31910 + 32] = block.timestamp
                                        mem[_31910 + 64] = block.timestamp
                                        uint256(stor[_31911][address(msg.sender)].field_0)++
                                        if bool(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_0) == uint255(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))) + (uint255(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31911')) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31911')) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))) + (uint255(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31911')) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31911')) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))) + (uint255(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))) + (uint255(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_0) == stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))) + (stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31911)) + (3 * uint256(stor[_31911][address(msg.sender)].field_0))) + (stor[_31911][address(msg.sender)][uint256(stor[_31911][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31911')) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31911')) + (3 * uint256(stor[_31911][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31916 = mem[64]
                                        _31917 = sha3(mem[mem[64] len _30538 + _30522 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31917
                                        mem[64] = mem[64] + 96
                                        mem[_31916] = 96
                                        mem[_31916 + 32] = block.timestamp
                                        mem[_31916 + 64] = block.timestamp
                                        uint256(stor[_31917][address(msg.sender)].field_0)++
                                        if bool(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_0) == uint255(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))) + (uint255(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31917')) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31917')) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))) + (uint255(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31917')) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31917')) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))) + (uint255(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))) + (uint255(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_0) == stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))) + (stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31917)) + (3 * uint256(stor[_31917][address(msg.sender)].field_0))) + (stor[_31917][address(msg.sender)][uint256(stor[_31917][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31917')) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31917')) + (3 * uint256(stor[_31917][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[mem[96] + _18208 + (4 * ceil32(return_data.size)) + 196] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[_18208 + (4 * ceil32(return_data.size)) + 196 len ceil32(mem[96])])
                                mem[_18208 + (4 * ceil32(return_data.size)) + 96] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _18208 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30523 = mem[64]
                                    _30539 = mem[96]
                                    s = 0
                                    while s < _30539:
                                        mem[s + _30523] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30539 + _30523] = 11
                                    if ceil32(_30539) <= _30539:
                                        _31922 = mem[64]
                                        _31923 = sha3(mem[mem[64] len _30539 + _30523 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31923
                                        mem[64] = mem[64] + 96
                                        mem[_31922] = 96
                                        mem[_31922 + 32] = block.timestamp
                                        mem[_31922 + 64] = block.timestamp
                                        uint256(stor[_31923][address(msg.sender)].field_0)++
                                        if bool(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_0) == uint255(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))) + (uint255(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31923')) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31923')) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))) + (uint255(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31923')) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31923')) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))) + (uint255(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))) + (uint255(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_0) == stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))) + (stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31923)) + (3 * uint256(stor[_31923][address(msg.sender)].field_0))) + (stor[_31923][address(msg.sender)][uint256(stor[_31923][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31923')) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31923')) + (3 * uint256(stor[_31923][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31928 = mem[64]
                                        _31929 = sha3(mem[mem[64] len _30539 + _30523 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31929
                                        mem[64] = mem[64] + 96
                                        mem[_31928] = 96
                                        mem[_31928 + 32] = block.timestamp
                                        mem[_31928 + 64] = block.timestamp
                                        uint256(stor[_31929][address(msg.sender)].field_0)++
                                        if bool(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_0) == uint255(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))) + (uint255(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31929')) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31929')) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))) + (uint255(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31929')) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31929')) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))) + (uint255(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))) + (uint255(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_0) == stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))) + (stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31929)) + (3 * uint256(stor[_31929][address(msg.sender)].field_0))) + (stor[_31929][address(msg.sender)][uint256(stor[_31929][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31929')) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31929')) + (3 * uint256(stor[_31929][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                        else:
                            mem[mem[96] + _18208 + (2 * ceil32(return_data.size)) + 196] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=mem[96], data=mem[_18208 + (2 * ceil32(return_data.size)) + 196 len ceil32(mem[96])])
                            mem[_18208 + (2 * ceil32(return_data.size)) + 96] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[_18208 + (4 * ceil32(return_data.size)) + 96] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[_18208 + (4 * ceil32(return_data.size)) + 100] = 7
                            mem[_18208 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_18208 + (4 * ceil32(return_data.size)) + 164] = mem[96]
                            mem[_18208 + (4 * ceil32(return_data.size)) + 196 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                            if ceil32(mem[96]) <= mem[96]:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[_18208 + (4 * ceil32(return_data.size)) + 196 len ceil32(mem[96])])
                                mem[_18208 + (4 * ceil32(return_data.size)) + 96] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _18208 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30524 = mem[64]
                                    _30540 = mem[96]
                                    s = 0
                                    while s < _30540:
                                        mem[s + _30524] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30540 + _30524] = 11
                                    if ceil32(_30540) <= _30540:
                                        _31934 = mem[64]
                                        _31935 = sha3(mem[mem[64] len _30540 + _30524 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31935
                                        mem[64] = mem[64] + 96
                                        mem[_31934] = 96
                                        mem[_31934 + 32] = block.timestamp
                                        mem[_31934 + 64] = block.timestamp
                                        uint256(stor[_31935][address(msg.sender)].field_0)++
                                        if bool(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_0) == uint255(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))) + (uint255(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31935')) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31935')) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))) + (uint255(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31935')) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31935')) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))) + (uint255(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))) + (uint255(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_0) == stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))) + (stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31935)) + (3 * uint256(stor[_31935][address(msg.sender)].field_0))) + (stor[_31935][address(msg.sender)][uint256(stor[_31935][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31935')) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31935')) + (3 * uint256(stor[_31935][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31940 = mem[64]
                                        _31941 = sha3(mem[mem[64] len _30540 + _30524 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31941
                                        mem[64] = mem[64] + 96
                                        mem[_31940] = 96
                                        mem[_31940 + 32] = block.timestamp
                                        mem[_31940 + 64] = block.timestamp
                                        uint256(stor[_31941][address(msg.sender)].field_0)++
                                        if bool(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_0) == uint255(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))) + (uint255(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31941')) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31941')) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))) + (uint255(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31941')) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31941')) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))) + (uint255(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))) + (uint255(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_0) == stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))) + (stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31941)) + (3 * uint256(stor[_31941][address(msg.sender)].field_0))) + (stor[_31941][address(msg.sender)][uint256(stor[_31941][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31941')) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31941')) + (3 * uint256(stor[_31941][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[mem[96] + _18208 + (4 * ceil32(return_data.size)) + 196] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[_18208 + (4 * ceil32(return_data.size)) + 196 len ceil32(mem[96])])
                                mem[_18208 + (4 * ceil32(return_data.size)) + 96] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _18208 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30525 = mem[64]
                                    _30541 = mem[96]
                                    s = 0
                                    while s < _30541:
                                        mem[s + _30525] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30541 + _30525] = 11
                                    if ceil32(_30541) <= _30541:
                                        _31946 = mem[64]
                                        _31947 = sha3(mem[mem[64] len _30541 + _30525 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31947
                                        mem[64] = mem[64] + 96
                                        mem[_31946] = 96
                                        mem[_31946 + 32] = block.timestamp
                                        mem[_31946 + 64] = block.timestamp
                                        uint256(stor[_31947][address(msg.sender)].field_0)++
                                        if bool(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_0) == uint255(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))) + (uint255(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31947')) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31947')) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))) + (uint255(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31947')) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31947')) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))) + (uint255(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))) + (uint255(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_0) == stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))) + (stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31947)) + (3 * uint256(stor[_31947][address(msg.sender)].field_0))) + (stor[_31947][address(msg.sender)][uint256(stor[_31947][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31947')) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31947')) + (3 * uint256(stor[_31947][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31952 = mem[64]
                                        _31953 = sha3(mem[mem[64] len _30541 + _30525 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31953
                                        mem[64] = mem[64] + 96
                                        mem[_31952] = 96
                                        mem[_31952 + 32] = block.timestamp
                                        mem[_31952 + 64] = block.timestamp
                                        uint256(stor[_31953][address(msg.sender)].field_0)++
                                        if bool(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_0) == uint255(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))) + (uint255(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31953')) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31953')) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))) + (uint255(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31953')) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31953')) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))) + (uint255(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))) + (uint255(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_0) == stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))) + (stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31953)) + (3 * uint256(stor[_31953][address(msg.sender)].field_0))) + (stor[_31953][address(msg.sender)][uint256(stor[_31953][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31953')) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31953')) + (3 * uint256(stor[_31953][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
        else:
            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                 gas gas_remaining wei
                args 7, Array(len=arg1.length, data=arg1[all])
            mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = delegate.return_data[0]
            if not delegate.return_code:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if stor1[delegate.return_data[0]] and arg2 > -1 / stor1[delegate.return_data[0]]:
                revert with 0, 17
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 132] = msg.sender
            require ext_code.size(sub_9cfccb46Address)
            staticcall sub_9cfccb46Address.0x70a08231 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < stor1[delegate.return_data[0]] * arg2:
                revert with 0, 'Balance too low for creation.'
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 132] = msg.sender
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 164] = this.address
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 196] = stor1[delegate.return_data[0]] * arg2
            require ext_code.size(sub_9cfccb46Address)
            call sub_9cfccb46Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor1[delegate.return_data[0]] * arg2
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            mem[ceil32(arg1.length) + (6 * ceil32(return_data.size)) + 132] = this.address
            require ext_code.size(sub_9cfccb46Address)
            staticcall sub_9cfccb46Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(arg1.length) + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < swapTokensAmount:
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                if ceil32(arg1.length) <= arg1.length:
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=arg1.length, data=arg1[all])
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if delegate.return_data[0] < 0:
                        revert with 0, '_createNodes: nodeTypeName does not exist'
                    if arg2 <= 0:
                        revert with 0, '_createNodes: count cannot be less than 1.'
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19958 = mem[64]
                            _20010 = mem[96]
                            s = 0
                            while s < _20010:
                                mem[s + _19958] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20010 + _19958] = 11
                            if ceil32(_20010) <= _20010:
                                _23966 = mem[64]
                                _23967 = sha3(mem[mem[64] len _20010 + _19958 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _23967
                                mem[64] = mem[64] + 96
                                mem[_23966] = 96
                                mem[_23966 + 32] = block.timestamp
                                mem[_23966 + 64] = block.timestamp
                                uint256(stor[_23967][address(msg.sender)].field_0)++
                                if bool(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_0) == uint255(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))) + (uint255(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23967')) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23967')) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))) + (uint255(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23967')) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23967')) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))) + (uint255(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))) + (uint255(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_0) == stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))) + (stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23967)) + (3 * uint256(stor[_23967][address(msg.sender)].field_0))) + (stor[_23967][address(msg.sender)][uint256(stor[_23967][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23967')) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23967')) + (3 * uint256(stor[_23967][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _23972 = mem[64]
                                _23973 = sha3(mem[mem[64] len _20010 + _19958 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _23973
                                mem[64] = mem[64] + 96
                                mem[_23972] = 96
                                mem[_23972 + 32] = block.timestamp
                                mem[_23972 + 64] = block.timestamp
                                uint256(stor[_23973][address(msg.sender)].field_0)++
                                if bool(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_0) == uint255(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))) + (uint255(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23973')) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23973')) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))) + (uint255(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23973')) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23973')) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))) + (uint255(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))) + (uint255(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_0) == stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))) + (stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23973)) + (3 * uint256(stor[_23973][address(msg.sender)].field_0))) + (stor[_23973][address(msg.sender)][uint256(stor[_23973][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23973')) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23973')) + (3 * uint256(stor[_23973][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19959 = mem[64]
                            _20011 = mem[96]
                            s = 0
                            while s < _20011:
                                mem[s + _19959] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20011 + _19959] = 11
                            if ceil32(_20011) <= _20011:
                                _23978 = mem[64]
                                _23979 = sha3(mem[mem[64] len _20011 + _19959 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _23979
                                mem[64] = mem[64] + 96
                                mem[_23978] = 96
                                mem[_23978 + 32] = block.timestamp
                                mem[_23978 + 64] = block.timestamp
                                uint256(stor[_23979][address(msg.sender)].field_0)++
                                if bool(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_0) == uint255(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))) + (uint255(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23979')) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23979')) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))) + (uint255(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23979')) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23979')) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))) + (uint255(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))) + (uint255(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_0) == stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))) + (stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23979)) + (3 * uint256(stor[_23979][address(msg.sender)].field_0))) + (stor[_23979][address(msg.sender)][uint256(stor[_23979][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23979')) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23979')) + (3 * uint256(stor[_23979][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _23984 = mem[64]
                                _23985 = sha3(mem[mem[64] len _20011 + _19959 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _23985
                                mem[64] = mem[64] + 96
                                mem[_23984] = 96
                                mem[_23984 + 32] = block.timestamp
                                mem[_23984 + 64] = block.timestamp
                                uint256(stor[_23985][address(msg.sender)].field_0)++
                                if bool(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_0) == uint255(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))) + (uint255(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23985')) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23985')) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))) + (uint255(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23985')) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23985')) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))) + (uint255(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))) + (uint255(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_0) == stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))) + (stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23985)) + (3 * uint256(stor[_23985][address(msg.sender)].field_0))) + (stor[_23985][address(msg.sender)][uint256(stor[_23985][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23985')) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23985')) + (3 * uint256(stor[_23985][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                else:
                    mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=arg1.length, data=arg1[all])
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if delegate.return_data[0] < 0:
                        revert with 0, '_createNodes: nodeTypeName does not exist'
                    if arg2 <= 0:
                        revert with 0, '_createNodes: count cannot be less than 1.'
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19960 = mem[64]
                            _20012 = mem[96]
                            s = 0
                            while s < _20012:
                                mem[s + _19960] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20012 + _19960] = 11
                            if ceil32(_20012) <= _20012:
                                _23990 = mem[64]
                                _23991 = sha3(mem[mem[64] len _20012 + _19960 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _23991
                                mem[64] = mem[64] + 96
                                mem[_23990] = 96
                                mem[_23990 + 32] = block.timestamp
                                mem[_23990 + 64] = block.timestamp
                                uint256(stor[_23991][address(msg.sender)].field_0)++
                                if bool(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_0) == uint255(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))) + (uint255(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23991')) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23991')) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))) + (uint255(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23991')) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23991')) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))) + (uint255(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))) + (uint255(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_0) == stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))) + (stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23991)) + (3 * uint256(stor[_23991][address(msg.sender)].field_0))) + (stor[_23991][address(msg.sender)][uint256(stor[_23991][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23991')) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23991')) + (3 * uint256(stor[_23991][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _23996 = mem[64]
                                _23997 = sha3(mem[mem[64] len _20012 + _19960 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _23997
                                mem[64] = mem[64] + 96
                                mem[_23996] = 96
                                mem[_23996 + 32] = block.timestamp
                                mem[_23996 + 64] = block.timestamp
                                uint256(stor[_23997][address(msg.sender)].field_0)++
                                if bool(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_0) == uint255(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))) + (uint255(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23997')) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23997')) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))) + (uint255(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23997')) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23997')) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))) + (uint255(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))) + (uint255(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_0) == stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))) + (stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _23997)) + (3 * uint256(stor[_23997][address(msg.sender)].field_0))) + (stor[_23997][address(msg.sender)][uint256(stor[_23997][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23997')) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_23997')) + (3 * uint256(stor[_23997][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19961 = mem[64]
                            _20013 = mem[96]
                            s = 0
                            while s < _20013:
                                mem[s + _19961] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20013 + _19961] = 11
                            if ceil32(_20013) <= _20013:
                                _24002 = mem[64]
                                _24003 = sha3(mem[mem[64] len _20013 + _19961 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24003
                                mem[64] = mem[64] + 96
                                mem[_24002] = 96
                                mem[_24002 + 32] = block.timestamp
                                mem[_24002 + 64] = block.timestamp
                                uint256(stor[_24003][address(msg.sender)].field_0)++
                                if bool(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_0) == uint255(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))) + (uint255(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24003')) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24003')) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))) + (uint255(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24003')) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24003')) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))) + (uint255(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))) + (uint255(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_0) == stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))) + (stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24003)) + (3 * uint256(stor[_24003][address(msg.sender)].field_0))) + (stor[_24003][address(msg.sender)][uint256(stor[_24003][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24003')) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24003')) + (3 * uint256(stor[_24003][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24008 = mem[64]
                                _24009 = sha3(mem[mem[64] len _20013 + _19961 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24009
                                mem[64] = mem[64] + 96
                                mem[_24008] = 96
                                mem[_24008 + 32] = block.timestamp
                                mem[_24008 + 64] = block.timestamp
                                uint256(stor[_24009][address(msg.sender)].field_0)++
                                if bool(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_0) == uint255(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))) + (uint255(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24009')) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24009')) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))) + (uint255(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24009')) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24009')) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))) + (uint255(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))) + (uint255(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_0) == stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))) + (stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24009)) + (3 * uint256(stor[_24009][address(msg.sender)].field_0))) + (stor[_24009][address(msg.sender)][uint256(stor[_24009][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24009')) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24009')) + (3 * uint256(stor[_24009][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
            else:
                if not uint8(stor28.field_8):
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if delegate.return_data[0] < 0:
                            revert with 0, '_createNodes: nodeTypeName does not exist'
                        if arg2 <= 0:
                            revert with 0, '_createNodes: count cannot be less than 1.'
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19962 = mem[64]
                                _20014 = mem[96]
                                s = 0
                                while s < _20014:
                                    mem[s + _19962] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20014 + _19962] = 11
                                if ceil32(_20014) <= _20014:
                                    _24014 = mem[64]
                                    _24015 = sha3(mem[mem[64] len _20014 + _19962 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24015
                                    mem[64] = mem[64] + 96
                                    mem[_24014] = 96
                                    mem[_24014 + 32] = block.timestamp
                                    mem[_24014 + 64] = block.timestamp
                                    uint256(stor[_24015][address(msg.sender)].field_0)++
                                    if bool(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_0) == uint255(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))) + (uint255(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24015')) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24015')) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))) + (uint255(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24015')) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24015')) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))) + (uint255(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))) + (uint255(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_0) == stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))) + (stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24015)) + (3 * uint256(stor[_24015][address(msg.sender)].field_0))) + (stor[_24015][address(msg.sender)][uint256(stor[_24015][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24015')) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24015')) + (3 * uint256(stor[_24015][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24020 = mem[64]
                                    _24021 = sha3(mem[mem[64] len _20014 + _19962 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24021
                                    mem[64] = mem[64] + 96
                                    mem[_24020] = 96
                                    mem[_24020 + 32] = block.timestamp
                                    mem[_24020 + 64] = block.timestamp
                                    uint256(stor[_24021][address(msg.sender)].field_0)++
                                    if bool(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_0) == uint255(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))) + (uint255(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24021')) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24021')) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))) + (uint255(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24021')) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24021')) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))) + (uint255(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))) + (uint255(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_0) == stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))) + (stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24021)) + (3 * uint256(stor[_24021][address(msg.sender)].field_0))) + (stor[_24021][address(msg.sender)][uint256(stor[_24021][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24021')) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24021')) + (3 * uint256(stor[_24021][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19963 = mem[64]
                                _20015 = mem[96]
                                s = 0
                                while s < _20015:
                                    mem[s + _19963] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20015 + _19963] = 11
                                if ceil32(_20015) <= _20015:
                                    _24026 = mem[64]
                                    _24027 = sha3(mem[mem[64] len _20015 + _19963 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24027
                                    mem[64] = mem[64] + 96
                                    mem[_24026] = 96
                                    mem[_24026 + 32] = block.timestamp
                                    mem[_24026 + 64] = block.timestamp
                                    uint256(stor[_24027][address(msg.sender)].field_0)++
                                    if bool(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_0) == uint255(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))) + (uint255(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24027')) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24027')) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))) + (uint255(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24027')) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24027')) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))) + (uint255(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))) + (uint255(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_0) == stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))) + (stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24027)) + (3 * uint256(stor[_24027][address(msg.sender)].field_0))) + (stor[_24027][address(msg.sender)][uint256(stor[_24027][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24027')) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24027')) + (3 * uint256(stor[_24027][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24032 = mem[64]
                                    _24033 = sha3(mem[mem[64] len _20015 + _19963 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24033
                                    mem[64] = mem[64] + 96
                                    mem[_24032] = 96
                                    mem[_24032 + 32] = block.timestamp
                                    mem[_24032 + 64] = block.timestamp
                                    uint256(stor[_24033][address(msg.sender)].field_0)++
                                    if bool(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_0) == uint255(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))) + (uint255(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24033')) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24033')) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))) + (uint255(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24033')) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24033')) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))) + (uint255(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))) + (uint255(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_0) == stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))) + (stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24033)) + (3 * uint256(stor[_24033][address(msg.sender)].field_0))) + (stor[_24033][address(msg.sender)][uint256(stor[_24033][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24033')) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24033')) + (3 * uint256(stor[_24033][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if delegate.return_data[0] < 0:
                            revert with 0, '_createNodes: nodeTypeName does not exist'
                        if arg2 <= 0:
                            revert with 0, '_createNodes: count cannot be less than 1.'
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19964 = mem[64]
                                _20016 = mem[96]
                                s = 0
                                while s < _20016:
                                    mem[s + _19964] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20016 + _19964] = 11
                                if ceil32(_20016) <= _20016:
                                    _24038 = mem[64]
                                    _24039 = sha3(mem[mem[64] len _20016 + _19964 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24039
                                    mem[64] = mem[64] + 96
                                    mem[_24038] = 96
                                    mem[_24038 + 32] = block.timestamp
                                    mem[_24038 + 64] = block.timestamp
                                    uint256(stor[_24039][address(msg.sender)].field_0)++
                                    if bool(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_0) == uint255(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))) + (uint255(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24039')) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24039')) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))) + (uint255(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24039')) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24039')) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))) + (uint255(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))) + (uint255(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_0) == stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))) + (stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24039)) + (3 * uint256(stor[_24039][address(msg.sender)].field_0))) + (stor[_24039][address(msg.sender)][uint256(stor[_24039][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24039')) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24039')) + (3 * uint256(stor[_24039][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24044 = mem[64]
                                    _24045 = sha3(mem[mem[64] len _20016 + _19964 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24045
                                    mem[64] = mem[64] + 96
                                    mem[_24044] = 96
                                    mem[_24044 + 32] = block.timestamp
                                    mem[_24044 + 64] = block.timestamp
                                    uint256(stor[_24045][address(msg.sender)].field_0)++
                                    if bool(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_0) == uint255(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))) + (uint255(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24045')) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24045')) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))) + (uint255(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24045')) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24045')) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))) + (uint255(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))) + (uint255(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_0) == stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))) + (stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24045)) + (3 * uint256(stor[_24045][address(msg.sender)].field_0))) + (stor[_24045][address(msg.sender)][uint256(stor[_24045][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24045')) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24045')) + (3 * uint256(stor[_24045][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19965 = mem[64]
                                _20017 = mem[96]
                                s = 0
                                while s < _20017:
                                    mem[s + _19965] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20017 + _19965] = 11
                                if ceil32(_20017) <= _20017:
                                    _24050 = mem[64]
                                    _24051 = sha3(mem[mem[64] len _20017 + _19965 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24051
                                    mem[64] = mem[64] + 96
                                    mem[_24050] = 96
                                    mem[_24050 + 32] = block.timestamp
                                    mem[_24050 + 64] = block.timestamp
                                    uint256(stor[_24051][address(msg.sender)].field_0)++
                                    if bool(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_0) == uint255(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))) + (uint255(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24051')) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24051')) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))) + (uint255(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24051')) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24051')) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))) + (uint255(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))) + (uint255(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_0) == stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))) + (stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24051)) + (3 * uint256(stor[_24051][address(msg.sender)].field_0))) + (stor[_24051][address(msg.sender)][uint256(stor[_24051][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24051')) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24051')) + (3 * uint256(stor[_24051][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24056 = mem[64]
                                    _24057 = sha3(mem[mem[64] len _20017 + _19965 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24057
                                    mem[64] = mem[64] + 96
                                    mem[_24056] = 96
                                    mem[_24056 + 32] = block.timestamp
                                    mem[_24056 + 64] = block.timestamp
                                    uint256(stor[_24057][address(msg.sender)].field_0)++
                                    if bool(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_0) == uint255(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))) + (uint255(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24057')) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24057')) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))) + (uint255(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24057')) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24057')) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))) + (uint255(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))) + (uint255(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_0) == stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))) + (stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24057)) + (3 * uint256(stor[_24057][address(msg.sender)].field_0))) + (stor[_24057][address(msg.sender)][uint256(stor[_24057][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24057')) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24057')) + (3 * uint256(stor[_24057][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                else:
                    if uint8(stor28.field_0):
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            if ceil32(arg1.length) <= arg1.length:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19966 = mem[64]
                                    _20018 = mem[96]
                                    s = 0
                                    while s < _20018:
                                        mem[s + _19966] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20018 + _19966] = 11
                                    if ceil32(_20018) <= _20018:
                                        _24062 = mem[64]
                                        _24063 = sha3(mem[mem[64] len _20018 + _19966 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24063
                                        mem[64] = mem[64] + 96
                                        mem[_24062] = 96
                                        mem[_24062 + 32] = block.timestamp
                                        mem[_24062 + 64] = block.timestamp
                                        uint256(stor[_24063][address(msg.sender)].field_0)++
                                        if bool(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_0) == uint255(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))) + (uint255(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24063')) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24063')) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))) + (uint255(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24063')) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24063')) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))) + (uint255(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))) + (uint255(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_0) == stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))) + (stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24063)) + (3 * uint256(stor[_24063][address(msg.sender)].field_0))) + (stor[_24063][address(msg.sender)][uint256(stor[_24063][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24063')) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24063')) + (3 * uint256(stor[_24063][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24068 = mem[64]
                                        _24069 = sha3(mem[mem[64] len _20018 + _19966 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24069
                                        mem[64] = mem[64] + 96
                                        mem[_24068] = 96
                                        mem[_24068 + 32] = block.timestamp
                                        mem[_24068 + 64] = block.timestamp
                                        uint256(stor[_24069][address(msg.sender)].field_0)++
                                        if bool(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_0) == uint255(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))) + (uint255(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24069')) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24069')) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))) + (uint255(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24069')) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24069')) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))) + (uint255(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))) + (uint255(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_0) == stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))) + (stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24069)) + (3 * uint256(stor[_24069][address(msg.sender)].field_0))) + (stor[_24069][address(msg.sender)][uint256(stor[_24069][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24069')) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24069')) + (3 * uint256(stor[_24069][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19967 = mem[64]
                                    _20019 = mem[96]
                                    s = 0
                                    while s < _20019:
                                        mem[s + _19967] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20019 + _19967] = 11
                                    if ceil32(_20019) <= _20019:
                                        _24074 = mem[64]
                                        _24075 = sha3(mem[mem[64] len _20019 + _19967 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24075
                                        mem[64] = mem[64] + 96
                                        mem[_24074] = 96
                                        mem[_24074 + 32] = block.timestamp
                                        mem[_24074 + 64] = block.timestamp
                                        uint256(stor[_24075][address(msg.sender)].field_0)++
                                        if bool(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_0) == uint255(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))) + (uint255(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24075')) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24075')) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))) + (uint255(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24075')) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24075')) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))) + (uint255(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))) + (uint255(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_0) == stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))) + (stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24075)) + (3 * uint256(stor[_24075][address(msg.sender)].field_0))) + (stor[_24075][address(msg.sender)][uint256(stor[_24075][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24075')) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24075')) + (3 * uint256(stor[_24075][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24080 = mem[64]
                                        _24081 = sha3(mem[mem[64] len _20019 + _19967 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24081
                                        mem[64] = mem[64] + 96
                                        mem[_24080] = 96
                                        mem[_24080 + 32] = block.timestamp
                                        mem[_24080 + 64] = block.timestamp
                                        uint256(stor[_24081][address(msg.sender)].field_0)++
                                        if bool(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_0) == uint255(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))) + (uint255(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24081')) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24081')) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))) + (uint255(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24081')) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24081')) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))) + (uint255(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))) + (uint255(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_0) == stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))) + (stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24081)) + (3 * uint256(stor[_24081][address(msg.sender)].field_0))) + (stor[_24081][address(msg.sender)][uint256(stor[_24081][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24081')) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24081')) + (3 * uint256(stor[_24081][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            if ceil32(arg1.length) <= arg1.length:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19968 = mem[64]
                                    _20020 = mem[96]
                                    s = 0
                                    while s < _20020:
                                        mem[s + _19968] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20020 + _19968] = 11
                                    if ceil32(_20020) <= _20020:
                                        _24086 = mem[64]
                                        _24087 = sha3(mem[mem[64] len _20020 + _19968 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24087
                                        mem[64] = mem[64] + 96
                                        mem[_24086] = 96
                                        mem[_24086 + 32] = block.timestamp
                                        mem[_24086 + 64] = block.timestamp
                                        uint256(stor[_24087][address(msg.sender)].field_0)++
                                        if bool(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_0) == uint255(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))) + (uint255(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24087')) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24087')) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))) + (uint255(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24087')) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24087')) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))) + (uint255(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))) + (uint255(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_0) == stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))) + (stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24087)) + (3 * uint256(stor[_24087][address(msg.sender)].field_0))) + (stor[_24087][address(msg.sender)][uint256(stor[_24087][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24087')) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24087')) + (3 * uint256(stor[_24087][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24092 = mem[64]
                                        _24093 = sha3(mem[mem[64] len _20020 + _19968 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24093
                                        mem[64] = mem[64] + 96
                                        mem[_24092] = 96
                                        mem[_24092 + 32] = block.timestamp
                                        mem[_24092 + 64] = block.timestamp
                                        uint256(stor[_24093][address(msg.sender)].field_0)++
                                        if bool(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_0) == uint255(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))) + (uint255(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24093')) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24093')) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))) + (uint255(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24093')) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24093')) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))) + (uint255(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))) + (uint255(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_0) == stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))) + (stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24093)) + (3 * uint256(stor[_24093][address(msg.sender)].field_0))) + (stor[_24093][address(msg.sender)][uint256(stor[_24093][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24093')) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24093')) + (3 * uint256(stor[_24093][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19969 = mem[64]
                                    _20021 = mem[96]
                                    s = 0
                                    while s < _20021:
                                        mem[s + _19969] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20021 + _19969] = 11
                                    if ceil32(_20021) <= _20021:
                                        _24098 = mem[64]
                                        _24099 = sha3(mem[mem[64] len _20021 + _19969 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24099
                                        mem[64] = mem[64] + 96
                                        mem[_24098] = 96
                                        mem[_24098 + 32] = block.timestamp
                                        mem[_24098 + 64] = block.timestamp
                                        uint256(stor[_24099][address(msg.sender)].field_0)++
                                        if bool(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_0) == uint255(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))) + (uint255(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24099')) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24099')) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))) + (uint255(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24099')) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24099')) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))) + (uint255(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))) + (uint255(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_0) == stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))) + (stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24099)) + (3 * uint256(stor[_24099][address(msg.sender)].field_0))) + (stor[_24099][address(msg.sender)][uint256(stor[_24099][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24099')) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24099')) + (3 * uint256(stor[_24099][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24104 = mem[64]
                                        _24105 = sha3(mem[mem[64] len _20021 + _19969 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24105
                                        mem[64] = mem[64] + 96
                                        mem[_24104] = 96
                                        mem[_24104 + 32] = block.timestamp
                                        mem[_24104 + 64] = block.timestamp
                                        uint256(stor[_24105][address(msg.sender)].field_0)++
                                        if bool(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_0) == uint255(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))) + (uint255(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24105')) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24105')) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))) + (uint255(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24105')) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24105')) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))) + (uint255(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))) + (uint255(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_0) == stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))) + (stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24105)) + (3 * uint256(stor[_24105][address(msg.sender)].field_0))) + (stor[_24105][address(msg.sender)][uint256(stor[_24105][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24105')) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24105')) + (3 * uint256(stor[_24105][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                    else:
                        uint8(stor28.field_0) = 1
                        if ext_call.return_data[0] and futurFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 2
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 160] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 192] = ext_call.return_data[12 len 20]
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = _uniswapV2RouterAddress
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * futurFee / 100
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(return_data.size) + 64]
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 224] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] * futurFee / 100
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 260] = 0
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 292] = 160
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 388] = 2
                        idx = 0
                        s = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 420
                        t = ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 160
                        while idx < mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 324] = this.address
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 356] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len ceil32(arg1.length) + (10 * ceil32(return_data.size)) + -mem[64] + 480]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if eth.balance(this.address) < eth.balance(this.address):
                            revert with 0, 17
                        call futurUsePoolAddress with:
                             gas 2300 wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if ext_call.return_data[0] and rewardsFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        mem[mem[64] + 4] = distributionPoolAddress
                        mem[mem[64] + 36] = ext_call.return_data[0] * rewardsFee / 100
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args distributionPoolAddress, ext_call.return_data[0] * rewardsFee / 100
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11234 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_11234] == bool(mem[_11234])
                        if ext_call.return_data[0] and liquidityPoolFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        if ext_call.return_data[0] * liquidityPoolFee / 100 < ext_call.return_data[0] * liquidityPoolFee / 100 / 2:
                            revert with 0, 17
                        _11626 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        mem[_11626 + 32 len 64] = call.data[calldata.size len 64]
                        if not mem[_11626]:
                            revert with 0, 50
                        mem[_11626 + 32] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[_11626 + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _11626 + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_11626]:
                            revert with 0, 50
                        mem[_11626 + 64] = ext_call.return_data[12 len 20]
                        mem[_11626 + ceil32(return_data.size) + 100] = _uniswapV2RouterAddress
                        mem[_11626 + ceil32(return_data.size) + 132] = ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        mem[_11626 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _11626 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_11626 + (2 * ceil32(return_data.size)) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[_11626 + (2 * ceil32(return_data.size)) + 100] = ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        mem[_11626 + (2 * ceil32(return_data.size)) + 132] = 0
                        mem[_11626 + (2 * ceil32(return_data.size)) + 164] = 160
                        mem[_11626 + (2 * ceil32(return_data.size)) + 260] = mem[_11626]
                        idx = 0
                        s = _11626 + (2 * ceil32(return_data.size)) + 292
                        t = _11626 + 32
                        while idx < mem[_11626]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_11626 + (2 * ceil32(return_data.size)) + 196] = this.address
                        mem[_11626 + (2 * ceil32(return_data.size)) + 228] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11626 + (2 * ceil32(return_data.size)) + (32 * mem[_11626]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if eth.balance(this.address) < eth.balance(this.address):
                            revert with 0, 17
                        mem[mem[64] + 4] = _uniswapV2RouterAddress
                        mem[mem[64] + 36] = (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15798 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_15798] == bool(mem[_15798])
                        mem[mem[64] + 68] = 0
                        mem[mem[64] + 100] = 0
                        mem[mem[64] + 132] = sub_2a607841Address
                        mem[mem[64] + 164] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                             gas gas_remaining wei
                            args sub_9cfccb46Address, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2), 0, 0, sub_2a607841Address, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        mem[mem[64] + 32] = 0
                        mem[mem[64] + 64] = (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        emit SwapAndLiquify(Mask(255, 1, ext_call.return_data[0] * liquidityPoolFee / 100), 0, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2));
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_9cfccb46Address)
                        staticcall sub_9cfccb46Address.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _17070 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _17290 = mem[_17070]
                        _18110 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        mem[_18110 + 32 len 64] = call.data[calldata.size len 64]
                        if not mem[_18110]:
                            revert with 0, 50
                        mem[_18110 + 32] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[_18110 + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _18110 + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_18110]:
                            revert with 0, 50
                        mem[_18110 + 64] = ext_call.return_data[12 len 20]
                        mem[_18110 + ceil32(return_data.size) + 100] = _uniswapV2RouterAddress
                        mem[_18110 + ceil32(return_data.size) + 132] = _17290
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, _17290
                        mem[_18110 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _18110 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_18110 + (2 * ceil32(return_data.size)) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[_18110 + (2 * ceil32(return_data.size)) + 100] = _17290
                        mem[_18110 + (2 * ceil32(return_data.size)) + 132] = 0
                        mem[_18110 + (2 * ceil32(return_data.size)) + 164] = 160
                        mem[_18110 + (2 * ceil32(return_data.size)) + 260] = mem[_18110]
                        idx = 0
                        s = _18110 + (2 * ceil32(return_data.size)) + 292
                        t = _18110 + 32
                        while idx < mem[_18110]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_18110 + (2 * ceil32(return_data.size)) + 196] = this.address
                        mem[_18110 + (2 * ceil32(return_data.size)) + 228] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _18110 + (2 * ceil32(return_data.size)) + (32 * mem[_18110]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        uint8(stor28.field_0) = 0
                        mem[mem[64]] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 7
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = mem[96]
                        mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                        if ceil32(mem[96]) <= mem[96]:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                            mem[mem[64]] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            _24550 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_24550] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[mem[64]] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 7
                            mem[mem[64] + 36] = 64
                            mem[mem[64] + 68] = mem[96]
                            mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                            if ceil32(mem[96]) <= mem[96]:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29510 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29510]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29510]] += arg2
                                if totalReleased[mem[_29510]] > released[mem[_29510]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30518 = mem[64]
                                    _30534 = mem[96]
                                    s = 0
                                    while s < _30534:
                                        mem[s + _30518] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30534 + _30518] = 11
                                    if ceil32(_30534) <= _30534:
                                        _31862 = mem[64]
                                        _31863 = sha3(mem[mem[64] len _30534 + _30518 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31863
                                        mem[64] = mem[64] + 96
                                        mem[_31862] = 96
                                        mem[_31862 + 32] = block.timestamp
                                        mem[_31862 + 64] = block.timestamp
                                        uint256(stor[_31863][address(msg.sender)].field_0)++
                                        if bool(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_0) == uint255(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))) + (uint255(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31863')) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31863')) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))) + (uint255(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31863')) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31863')) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))) + (uint255(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))) + (uint255(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_0) == stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))) + (stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31863)) + (3 * uint256(stor[_31863][address(msg.sender)].field_0))) + (stor[_31863][address(msg.sender)][uint256(stor[_31863][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31863')) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31863')) + (3 * uint256(stor[_31863][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31868 = mem[64]
                                        _31869 = sha3(mem[mem[64] len _30534 + _30518 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31869
                                        mem[64] = mem[64] + 96
                                        mem[_31868] = 96
                                        mem[_31868 + 32] = block.timestamp
                                        mem[_31868 + 64] = block.timestamp
                                        uint256(stor[_31869][address(msg.sender)].field_0)++
                                        if bool(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_0) == uint255(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))) + (uint255(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31869')) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31869')) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))) + (uint255(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31869')) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31869')) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))) + (uint255(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))) + (uint255(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_0) == stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))) + (stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31869)) + (3 * uint256(stor[_31869][address(msg.sender)].field_0))) + (stor[_31869][address(msg.sender)][uint256(stor[_31869][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31869')) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31869')) + (3 * uint256(stor[_31869][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[mem[96] + mem[64] + 100] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29511 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29511]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29511]] += arg2
                                if totalReleased[mem[_29511]] > released[mem[_29511]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30519 = mem[64]
                                    _30535 = mem[96]
                                    s = 0
                                    while s < _30535:
                                        mem[s + _30519] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30535 + _30519] = 11
                                    if ceil32(_30535) <= _30535:
                                        _31874 = mem[64]
                                        _31875 = sha3(mem[mem[64] len _30535 + _30519 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31875
                                        mem[64] = mem[64] + 96
                                        mem[_31874] = 96
                                        mem[_31874 + 32] = block.timestamp
                                        mem[_31874 + 64] = block.timestamp
                                        uint256(stor[_31875][address(msg.sender)].field_0)++
                                        if bool(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_0) == uint255(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))) + (uint255(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31875')) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31875')) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))) + (uint255(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31875')) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31875')) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))) + (uint255(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))) + (uint255(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_0) == stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))) + (stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31875)) + (3 * uint256(stor[_31875][address(msg.sender)].field_0))) + (stor[_31875][address(msg.sender)][uint256(stor[_31875][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31875')) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31875')) + (3 * uint256(stor[_31875][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31880 = mem[64]
                                        _31881 = sha3(mem[mem[64] len _30535 + _30519 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31881
                                        mem[64] = mem[64] + 96
                                        mem[_31880] = 96
                                        mem[_31880 + 32] = block.timestamp
                                        mem[_31880 + 64] = block.timestamp
                                        uint256(stor[_31881][address(msg.sender)].field_0)++
                                        if bool(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_0) == uint255(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))) + (uint255(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31881')) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31881')) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))) + (uint255(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31881')) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31881')) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))) + (uint255(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))) + (uint255(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_0) == stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))) + (stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31881)) + (3 * uint256(stor[_31881][address(msg.sender)].field_0))) + (stor[_31881][address(msg.sender)][uint256(stor[_31881][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31881')) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31881')) + (3 * uint256(stor[_31881][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                        else:
                            mem[mem[96] + mem[64] + 100] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                            mem[mem[64]] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            _24551 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_24551] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[mem[64]] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 7
                            mem[mem[64] + 36] = 64
                            mem[mem[64] + 68] = mem[96]
                            mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                            if ceil32(mem[96]) <= mem[96]:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29512 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29512]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29512]] += arg2
                                if totalReleased[mem[_29512]] > released[mem[_29512]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30520 = mem[64]
                                    _30536 = mem[96]
                                    s = 0
                                    while s < _30536:
                                        mem[s + _30520] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30536 + _30520] = 11
                                    if ceil32(_30536) <= _30536:
                                        _31886 = mem[64]
                                        _31887 = sha3(mem[mem[64] len _30536 + _30520 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31887
                                        mem[64] = mem[64] + 96
                                        mem[_31886] = 96
                                        mem[_31886 + 32] = block.timestamp
                                        mem[_31886 + 64] = block.timestamp
                                        uint256(stor[_31887][address(msg.sender)].field_0)++
                                        if bool(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_0) == uint255(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))) + (uint255(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31887')) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31887')) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))) + (uint255(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31887')) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31887')) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))) + (uint255(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))) + (uint255(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_0) == stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))) + (stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31887)) + (3 * uint256(stor[_31887][address(msg.sender)].field_0))) + (stor[_31887][address(msg.sender)][uint256(stor[_31887][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31887')) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31887')) + (3 * uint256(stor[_31887][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31892 = mem[64]
                                        _31893 = sha3(mem[mem[64] len _30536 + _30520 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31893
                                        mem[64] = mem[64] + 96
                                        mem[_31892] = 96
                                        mem[_31892 + 32] = block.timestamp
                                        mem[_31892 + 64] = block.timestamp
                                        uint256(stor[_31893][address(msg.sender)].field_0)++
                                        if bool(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_0) == uint255(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))) + (uint255(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31893')) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31893')) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))) + (uint255(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31893')) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31893')) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))) + (uint255(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))) + (uint255(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_0) == stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))) + (stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31893)) + (3 * uint256(stor[_31893][address(msg.sender)].field_0))) + (stor[_31893][address(msg.sender)][uint256(stor[_31893][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31893')) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31893')) + (3 * uint256(stor[_31893][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[mem[96] + mem[64] + 100] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29513 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29513]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29513]] += arg2
                                if totalReleased[mem[_29513]] > released[mem[_29513]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30521 = mem[64]
                                    _30537 = mem[96]
                                    s = 0
                                    while s < _30537:
                                        mem[s + _30521] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30537 + _30521] = 11
                                    if ceil32(_30537) <= _30537:
                                        _31898 = mem[64]
                                        _31899 = sha3(mem[mem[64] len _30537 + _30521 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31899
                                        mem[64] = mem[64] + 96
                                        mem[_31898] = 96
                                        mem[_31898 + 32] = block.timestamp
                                        mem[_31898 + 64] = block.timestamp
                                        uint256(stor[_31899][address(msg.sender)].field_0)++
                                        if bool(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_0) == uint255(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))) + (uint255(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31899')) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31899')) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))) + (uint255(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31899')) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31899')) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))) + (uint255(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))) + (uint255(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_0) == stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))) + (stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31899)) + (3 * uint256(stor[_31899][address(msg.sender)].field_0))) + (stor[_31899][address(msg.sender)][uint256(stor[_31899][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31899')) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31899')) + (3 * uint256(stor[_31899][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31904 = mem[64]
                                        _31905 = sha3(mem[mem[64] len _30537 + _30521 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31905
                                        mem[64] = mem[64] + 96
                                        mem[_31904] = 96
                                        mem[_31904 + 32] = block.timestamp
                                        mem[_31904 + 64] = block.timestamp
                                        uint256(stor[_31905][address(msg.sender)].field_0)++
                                        if bool(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_0) == uint255(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))) + (uint255(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31905')) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31905')) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))) + (uint255(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31905')) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31905')) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))) + (uint255(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))) + (uint255(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_0) == stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))) + (stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31905)) + (3 * uint256(stor[_31905][address(msg.sender)].field_0))) + (stor[_31905][address(msg.sender)][uint256(stor[_31905][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31905')) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31905')) + (3 * uint256(stor[_31905][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
    else:
        mem[arg1.length + ceil32(arg1.length) + 228] = 0
        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x0 with:
             gas gas_remaining wei
            args 7, Array(len=arg1.length, data=arg1[all])
        mem[ceil32(arg1.length) + 128] = delegate.return_data[0]
        if not delegate.return_code:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 0, delegate.return_data[4 len 28] < 0:
            revert with 0, 'nodeTypeName does not exist'
        if msg.sender == futurUsePoolAddress:
            revert with 0, 'futur and rewardsPool cannot create node'
        if distributionPoolAddress == msg.sender:
            revert with 0, 'futur and rewardsPool cannot create node'
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 132] = 7
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 164] = 64
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 196] = arg1.length
        mem[ceil32(arg1.length) + ceil32(return_data.size) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
        if ceil32(arg1.length) <= arg1.length:
            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                 gas gas_remaining wei
                args 7, Array(len=arg1.length, data=arg1[all])
            mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = delegate.return_data[0]
            if not delegate.return_code:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if stor1[delegate.return_data[0]] and arg2 > -1 / stor1[delegate.return_data[0]]:
                revert with 0, 17
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 132] = msg.sender
            require ext_code.size(sub_9cfccb46Address)
            staticcall sub_9cfccb46Address.0x70a08231 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < stor1[delegate.return_data[0]] * arg2:
                revert with 0, 'Balance too low for creation.'
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 132] = msg.sender
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 164] = this.address
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 196] = stor1[delegate.return_data[0]] * arg2
            require ext_code.size(sub_9cfccb46Address)
            call sub_9cfccb46Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor1[delegate.return_data[0]] * arg2
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            mem[ceil32(arg1.length) + (6 * ceil32(return_data.size)) + 132] = this.address
            require ext_code.size(sub_9cfccb46Address)
            staticcall sub_9cfccb46Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(arg1.length) + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < swapTokensAmount:
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                if ceil32(arg1.length) <= arg1.length:
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=arg1.length, data=arg1[all])
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if delegate.return_data[0] < 0:
                        revert with 0, '_createNodes: nodeTypeName does not exist'
                    if arg2 <= 0:
                        revert with 0, '_createNodes: count cannot be less than 1.'
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19984 = mem[64]
                            _20036 = mem[96]
                            s = 0
                            while s < _20036:
                                mem[s + _19984] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20036 + _19984] = 11
                            if ceil32(_20036) <= _20036:
                                _24254 = mem[64]
                                _24255 = sha3(mem[mem[64] len _20036 + _19984 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24255
                                mem[64] = mem[64] + 96
                                mem[_24254] = 96
                                mem[_24254 + 32] = block.timestamp
                                mem[_24254 + 64] = block.timestamp
                                uint256(stor[_24255][address(msg.sender)].field_0)++
                                if bool(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_0) == uint255(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))) + (uint255(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24255')) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24255')) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))) + (uint255(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24255')) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24255')) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))) + (uint255(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))) + (uint255(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_0) == stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))) + (stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24255)) + (3 * uint256(stor[_24255][address(msg.sender)].field_0))) + (stor[_24255][address(msg.sender)][uint256(stor[_24255][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24255')) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24255')) + (3 * uint256(stor[_24255][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24260 = mem[64]
                                _24261 = sha3(mem[mem[64] len _20036 + _19984 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24261
                                mem[64] = mem[64] + 96
                                mem[_24260] = 96
                                mem[_24260 + 32] = block.timestamp
                                mem[_24260 + 64] = block.timestamp
                                uint256(stor[_24261][address(msg.sender)].field_0)++
                                if bool(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_0) == uint255(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))) + (uint255(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24261')) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24261')) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))) + (uint255(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24261')) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24261')) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))) + (uint255(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))) + (uint255(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_0) == stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))) + (stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24261)) + (3 * uint256(stor[_24261][address(msg.sender)].field_0))) + (stor[_24261][address(msg.sender)][uint256(stor[_24261][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24261')) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24261')) + (3 * uint256(stor[_24261][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19985 = mem[64]
                            _20037 = mem[96]
                            s = 0
                            while s < _20037:
                                mem[s + _19985] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20037 + _19985] = 11
                            if ceil32(_20037) <= _20037:
                                _24266 = mem[64]
                                _24267 = sha3(mem[mem[64] len _20037 + _19985 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24267
                                mem[64] = mem[64] + 96
                                mem[_24266] = 96
                                mem[_24266 + 32] = block.timestamp
                                mem[_24266 + 64] = block.timestamp
                                uint256(stor[_24267][address(msg.sender)].field_0)++
                                if bool(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_0) == uint255(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))) + (uint255(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24267')) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24267')) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))) + (uint255(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24267')) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24267')) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))) + (uint255(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))) + (uint255(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_0) == stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))) + (stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24267)) + (3 * uint256(stor[_24267][address(msg.sender)].field_0))) + (stor[_24267][address(msg.sender)][uint256(stor[_24267][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24267')) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24267')) + (3 * uint256(stor[_24267][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24272 = mem[64]
                                _24273 = sha3(mem[mem[64] len _20037 + _19985 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24273
                                mem[64] = mem[64] + 96
                                mem[_24272] = 96
                                mem[_24272 + 32] = block.timestamp
                                mem[_24272 + 64] = block.timestamp
                                uint256(stor[_24273][address(msg.sender)].field_0)++
                                if bool(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_0) == uint255(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))) + (uint255(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24273')) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24273')) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))) + (uint255(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24273')) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24273')) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))) + (uint255(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))) + (uint255(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_0) == stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))) + (stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24273)) + (3 * uint256(stor[_24273][address(msg.sender)].field_0))) + (stor[_24273][address(msg.sender)][uint256(stor[_24273][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24273')) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24273')) + (3 * uint256(stor[_24273][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                else:
                    mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=arg1.length, data=arg1[all])
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if delegate.return_data[0] < 0:
                        revert with 0, '_createNodes: nodeTypeName does not exist'
                    if arg2 <= 0:
                        revert with 0, '_createNodes: count cannot be less than 1.'
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19986 = mem[64]
                            _20038 = mem[96]
                            s = 0
                            while s < _20038:
                                mem[s + _19986] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20038 + _19986] = 11
                            if ceil32(_20038) <= _20038:
                                _24278 = mem[64]
                                _24279 = sha3(mem[mem[64] len _20038 + _19986 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24279
                                mem[64] = mem[64] + 96
                                mem[_24278] = 96
                                mem[_24278 + 32] = block.timestamp
                                mem[_24278 + 64] = block.timestamp
                                uint256(stor[_24279][address(msg.sender)].field_0)++
                                if bool(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_0) == uint255(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))) + (uint255(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24279')) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24279')) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))) + (uint255(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24279')) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24279')) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))) + (uint255(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))) + (uint255(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_0) == stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))) + (stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24279)) + (3 * uint256(stor[_24279][address(msg.sender)].field_0))) + (stor[_24279][address(msg.sender)][uint256(stor[_24279][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24279')) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24279')) + (3 * uint256(stor[_24279][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24284 = mem[64]
                                _24285 = sha3(mem[mem[64] len _20038 + _19986 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24285
                                mem[64] = mem[64] + 96
                                mem[_24284] = 96
                                mem[_24284 + 32] = block.timestamp
                                mem[_24284 + 64] = block.timestamp
                                uint256(stor[_24285][address(msg.sender)].field_0)++
                                if bool(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_0) == uint255(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))) + (uint255(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24285')) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24285')) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))) + (uint255(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24285')) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24285')) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))) + (uint255(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))) + (uint255(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_0) == stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))) + (stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24285)) + (3 * uint256(stor[_24285][address(msg.sender)].field_0))) + (stor[_24285][address(msg.sender)][uint256(stor[_24285][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24285')) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24285')) + (3 * uint256(stor[_24285][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19987 = mem[64]
                            _20039 = mem[96]
                            s = 0
                            while s < _20039:
                                mem[s + _19987] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20039 + _19987] = 11
                            if ceil32(_20039) <= _20039:
                                _24290 = mem[64]
                                _24291 = sha3(mem[mem[64] len _20039 + _19987 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24291
                                mem[64] = mem[64] + 96
                                mem[_24290] = 96
                                mem[_24290 + 32] = block.timestamp
                                mem[_24290 + 64] = block.timestamp
                                uint256(stor[_24291][address(msg.sender)].field_0)++
                                if bool(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_0) == uint255(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))) + (uint255(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24291')) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24291')) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))) + (uint255(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24291')) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24291')) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))) + (uint255(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))) + (uint255(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_0) == stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))) + (stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24291)) + (3 * uint256(stor[_24291][address(msg.sender)].field_0))) + (stor[_24291][address(msg.sender)][uint256(stor[_24291][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24291')) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24291')) + (3 * uint256(stor[_24291][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24296 = mem[64]
                                _24297 = sha3(mem[mem[64] len _20039 + _19987 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24297
                                mem[64] = mem[64] + 96
                                mem[_24296] = 96
                                mem[_24296 + 32] = block.timestamp
                                mem[_24296 + 64] = block.timestamp
                                uint256(stor[_24297][address(msg.sender)].field_0)++
                                if bool(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_0) == uint255(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))) + (uint255(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24297')) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24297')) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))) + (uint255(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24297')) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24297')) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))) + (uint255(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))) + (uint255(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_0) == stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))) + (stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24297)) + (3 * uint256(stor[_24297][address(msg.sender)].field_0))) + (stor[_24297][address(msg.sender)][uint256(stor[_24297][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24297')) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24297')) + (3 * uint256(stor[_24297][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
            else:
                if not uint8(stor28.field_8):
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if delegate.return_data[0] < 0:
                            revert with 0, '_createNodes: nodeTypeName does not exist'
                        if arg2 <= 0:
                            revert with 0, '_createNodes: count cannot be less than 1.'
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19988 = mem[64]
                                _20040 = mem[96]
                                s = 0
                                while s < _20040:
                                    mem[s + _19988] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20040 + _19988] = 11
                                if ceil32(_20040) <= _20040:
                                    _24302 = mem[64]
                                    _24303 = sha3(mem[mem[64] len _20040 + _19988 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24303
                                    mem[64] = mem[64] + 96
                                    mem[_24302] = 96
                                    mem[_24302 + 32] = block.timestamp
                                    mem[_24302 + 64] = block.timestamp
                                    uint256(stor[_24303][address(msg.sender)].field_0)++
                                    if bool(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_0) == uint255(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))) + (uint255(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24303')) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24303')) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))) + (uint255(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24303')) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24303')) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))) + (uint255(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))) + (uint255(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_0) == stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))) + (stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24303)) + (3 * uint256(stor[_24303][address(msg.sender)].field_0))) + (stor[_24303][address(msg.sender)][uint256(stor[_24303][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24303')) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24303')) + (3 * uint256(stor[_24303][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24308 = mem[64]
                                    _24309 = sha3(mem[mem[64] len _20040 + _19988 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24309
                                    mem[64] = mem[64] + 96
                                    mem[_24308] = 96
                                    mem[_24308 + 32] = block.timestamp
                                    mem[_24308 + 64] = block.timestamp
                                    uint256(stor[_24309][address(msg.sender)].field_0)++
                                    if bool(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_0) == uint255(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))) + (uint255(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24309')) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24309')) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))) + (uint255(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24309')) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24309')) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))) + (uint255(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))) + (uint255(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_0) == stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))) + (stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24309)) + (3 * uint256(stor[_24309][address(msg.sender)].field_0))) + (stor[_24309][address(msg.sender)][uint256(stor[_24309][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24309')) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24309')) + (3 * uint256(stor[_24309][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19989 = mem[64]
                                _20041 = mem[96]
                                s = 0
                                while s < _20041:
                                    mem[s + _19989] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20041 + _19989] = 11
                                if ceil32(_20041) <= _20041:
                                    _24314 = mem[64]
                                    _24315 = sha3(mem[mem[64] len _20041 + _19989 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24315
                                    mem[64] = mem[64] + 96
                                    mem[_24314] = 96
                                    mem[_24314 + 32] = block.timestamp
                                    mem[_24314 + 64] = block.timestamp
                                    uint256(stor[_24315][address(msg.sender)].field_0)++
                                    if bool(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_0) == uint255(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))) + (uint255(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24315')) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24315')) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))) + (uint255(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24315')) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24315')) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))) + (uint255(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))) + (uint255(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_0) == stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))) + (stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24315)) + (3 * uint256(stor[_24315][address(msg.sender)].field_0))) + (stor[_24315][address(msg.sender)][uint256(stor[_24315][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24315')) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24315')) + (3 * uint256(stor[_24315][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24320 = mem[64]
                                    _24321 = sha3(mem[mem[64] len _20041 + _19989 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24321
                                    mem[64] = mem[64] + 96
                                    mem[_24320] = 96
                                    mem[_24320 + 32] = block.timestamp
                                    mem[_24320 + 64] = block.timestamp
                                    uint256(stor[_24321][address(msg.sender)].field_0)++
                                    if bool(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_0) == uint255(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))) + (uint255(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24321')) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24321')) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))) + (uint255(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24321')) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24321')) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))) + (uint255(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))) + (uint255(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_0) == stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))) + (stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24321)) + (3 * uint256(stor[_24321][address(msg.sender)].field_0))) + (stor[_24321][address(msg.sender)][uint256(stor[_24321][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24321')) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24321')) + (3 * uint256(stor[_24321][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if delegate.return_data[0] < 0:
                            revert with 0, '_createNodes: nodeTypeName does not exist'
                        if arg2 <= 0:
                            revert with 0, '_createNodes: count cannot be less than 1.'
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19990 = mem[64]
                                _20042 = mem[96]
                                s = 0
                                while s < _20042:
                                    mem[s + _19990] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20042 + _19990] = 11
                                if ceil32(_20042) <= _20042:
                                    _24326 = mem[64]
                                    _24327 = sha3(mem[mem[64] len _20042 + _19990 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24327
                                    mem[64] = mem[64] + 96
                                    mem[_24326] = 96
                                    mem[_24326 + 32] = block.timestamp
                                    mem[_24326 + 64] = block.timestamp
                                    uint256(stor[_24327][address(msg.sender)].field_0)++
                                    if bool(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_0) == uint255(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))) + (uint255(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24327')) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24327')) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))) + (uint255(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24327')) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24327')) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))) + (uint255(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))) + (uint255(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_0) == stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))) + (stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24327)) + (3 * uint256(stor[_24327][address(msg.sender)].field_0))) + (stor[_24327][address(msg.sender)][uint256(stor[_24327][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24327')) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24327')) + (3 * uint256(stor[_24327][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24332 = mem[64]
                                    _24333 = sha3(mem[mem[64] len _20042 + _19990 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24333
                                    mem[64] = mem[64] + 96
                                    mem[_24332] = 96
                                    mem[_24332 + 32] = block.timestamp
                                    mem[_24332 + 64] = block.timestamp
                                    uint256(stor[_24333][address(msg.sender)].field_0)++
                                    if bool(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_0) == uint255(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))) + (uint255(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24333')) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24333')) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))) + (uint255(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24333')) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24333')) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))) + (uint255(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))) + (uint255(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_0) == stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))) + (stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24333)) + (3 * uint256(stor[_24333][address(msg.sender)].field_0))) + (stor[_24333][address(msg.sender)][uint256(stor[_24333][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24333')) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24333')) + (3 * uint256(stor[_24333][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _19991 = mem[64]
                                _20043 = mem[96]
                                s = 0
                                while s < _20043:
                                    mem[s + _19991] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20043 + _19991] = 11
                                if ceil32(_20043) <= _20043:
                                    _24338 = mem[64]
                                    _24339 = sha3(mem[mem[64] len _20043 + _19991 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24339
                                    mem[64] = mem[64] + 96
                                    mem[_24338] = 96
                                    mem[_24338 + 32] = block.timestamp
                                    mem[_24338 + 64] = block.timestamp
                                    uint256(stor[_24339][address(msg.sender)].field_0)++
                                    if bool(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_0) == uint255(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))) + (uint255(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24339')) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24339')) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))) + (uint255(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24339')) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24339')) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))) + (uint255(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))) + (uint255(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_0) == stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))) + (stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24339)) + (3 * uint256(stor[_24339][address(msg.sender)].field_0))) + (stor[_24339][address(msg.sender)][uint256(stor[_24339][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24339')) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24339')) + (3 * uint256(stor[_24339][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24344 = mem[64]
                                    _24345 = sha3(mem[mem[64] len _20043 + _19991 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24345
                                    mem[64] = mem[64] + 96
                                    mem[_24344] = 96
                                    mem[_24344 + 32] = block.timestamp
                                    mem[_24344 + 64] = block.timestamp
                                    uint256(stor[_24345][address(msg.sender)].field_0)++
                                    if bool(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_0) == uint255(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))) + (uint255(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24345')) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24345')) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))) + (uint255(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24345')) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24345')) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))) + (uint255(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))) + (uint255(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_0) == stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))) + (stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24345)) + (3 * uint256(stor[_24345][address(msg.sender)].field_0))) + (stor[_24345][address(msg.sender)][uint256(stor[_24345][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24345')) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24345')) + (3 * uint256(stor[_24345][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                else:
                    if uint8(stor28.field_0):
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            if ceil32(arg1.length) <= arg1.length:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19992 = mem[64]
                                    _20044 = mem[96]
                                    s = 0
                                    while s < _20044:
                                        mem[s + _19992] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20044 + _19992] = 11
                                    if ceil32(_20044) <= _20044:
                                        _24350 = mem[64]
                                        _24351 = sha3(mem[mem[64] len _20044 + _19992 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24351
                                        mem[64] = mem[64] + 96
                                        mem[_24350] = 96
                                        mem[_24350 + 32] = block.timestamp
                                        mem[_24350 + 64] = block.timestamp
                                        uint256(stor[_24351][address(msg.sender)].field_0)++
                                        if bool(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_0) == uint255(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))) + (uint255(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24351')) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24351')) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))) + (uint255(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24351')) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24351')) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))) + (uint255(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))) + (uint255(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_0) == stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))) + (stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24351)) + (3 * uint256(stor[_24351][address(msg.sender)].field_0))) + (stor[_24351][address(msg.sender)][uint256(stor[_24351][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24351')) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24351')) + (3 * uint256(stor[_24351][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24356 = mem[64]
                                        _24357 = sha3(mem[mem[64] len _20044 + _19992 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24357
                                        mem[64] = mem[64] + 96
                                        mem[_24356] = 96
                                        mem[_24356 + 32] = block.timestamp
                                        mem[_24356 + 64] = block.timestamp
                                        uint256(stor[_24357][address(msg.sender)].field_0)++
                                        if bool(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_0) == uint255(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))) + (uint255(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24357')) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24357')) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))) + (uint255(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24357')) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24357')) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))) + (uint255(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))) + (uint255(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_0) == stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))) + (stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24357)) + (3 * uint256(stor[_24357][address(msg.sender)].field_0))) + (stor[_24357][address(msg.sender)][uint256(stor[_24357][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24357')) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24357')) + (3 * uint256(stor[_24357][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19993 = mem[64]
                                    _20045 = mem[96]
                                    s = 0
                                    while s < _20045:
                                        mem[s + _19993] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20045 + _19993] = 11
                                    if ceil32(_20045) <= _20045:
                                        _24362 = mem[64]
                                        _24363 = sha3(mem[mem[64] len _20045 + _19993 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24363
                                        mem[64] = mem[64] + 96
                                        mem[_24362] = 96
                                        mem[_24362 + 32] = block.timestamp
                                        mem[_24362 + 64] = block.timestamp
                                        uint256(stor[_24363][address(msg.sender)].field_0)++
                                        if bool(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_0) == uint255(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))) + (uint255(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24363')) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24363')) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))) + (uint255(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24363')) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24363')) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))) + (uint255(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))) + (uint255(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_0) == stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))) + (stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24363)) + (3 * uint256(stor[_24363][address(msg.sender)].field_0))) + (stor[_24363][address(msg.sender)][uint256(stor[_24363][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24363')) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24363')) + (3 * uint256(stor[_24363][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24368 = mem[64]
                                        _24369 = sha3(mem[mem[64] len _20045 + _19993 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24369
                                        mem[64] = mem[64] + 96
                                        mem[_24368] = 96
                                        mem[_24368 + 32] = block.timestamp
                                        mem[_24368 + 64] = block.timestamp
                                        uint256(stor[_24369][address(msg.sender)].field_0)++
                                        if bool(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_0) == uint255(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))) + (uint255(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24369')) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24369')) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))) + (uint255(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24369')) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24369')) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))) + (uint255(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))) + (uint255(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_0) == stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))) + (stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24369)) + (3 * uint256(stor[_24369][address(msg.sender)].field_0))) + (stor[_24369][address(msg.sender)][uint256(stor[_24369][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24369')) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24369')) + (3 * uint256(stor[_24369][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            if ceil32(arg1.length) <= arg1.length:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19994 = mem[64]
                                    _20046 = mem[96]
                                    s = 0
                                    while s < _20046:
                                        mem[s + _19994] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20046 + _19994] = 11
                                    if ceil32(_20046) <= _20046:
                                        _24374 = mem[64]
                                        _24375 = sha3(mem[mem[64] len _20046 + _19994 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24375
                                        mem[64] = mem[64] + 96
                                        mem[_24374] = 96
                                        mem[_24374 + 32] = block.timestamp
                                        mem[_24374 + 64] = block.timestamp
                                        uint256(stor[_24375][address(msg.sender)].field_0)++
                                        if bool(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_0) == uint255(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))) + (uint255(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24375')) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24375')) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))) + (uint255(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24375')) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24375')) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))) + (uint255(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))) + (uint255(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_0) == stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))) + (stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24375)) + (3 * uint256(stor[_24375][address(msg.sender)].field_0))) + (stor[_24375][address(msg.sender)][uint256(stor[_24375][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24375')) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24375')) + (3 * uint256(stor[_24375][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24380 = mem[64]
                                        _24381 = sha3(mem[mem[64] len _20046 + _19994 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24381
                                        mem[64] = mem[64] + 96
                                        mem[_24380] = 96
                                        mem[_24380 + 32] = block.timestamp
                                        mem[_24380 + 64] = block.timestamp
                                        uint256(stor[_24381][address(msg.sender)].field_0)++
                                        if bool(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_0) == uint255(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))) + (uint255(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24381')) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24381')) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))) + (uint255(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24381')) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24381')) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))) + (uint255(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))) + (uint255(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_0) == stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))) + (stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24381)) + (3 * uint256(stor[_24381][address(msg.sender)].field_0))) + (stor[_24381][address(msg.sender)][uint256(stor[_24381][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24381')) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24381')) + (3 * uint256(stor[_24381][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _19995 = mem[64]
                                    _20047 = mem[96]
                                    s = 0
                                    while s < _20047:
                                        mem[s + _19995] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20047 + _19995] = 11
                                    if ceil32(_20047) <= _20047:
                                        _24386 = mem[64]
                                        _24387 = sha3(mem[mem[64] len _20047 + _19995 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24387
                                        mem[64] = mem[64] + 96
                                        mem[_24386] = 96
                                        mem[_24386 + 32] = block.timestamp
                                        mem[_24386 + 64] = block.timestamp
                                        uint256(stor[_24387][address(msg.sender)].field_0)++
                                        if bool(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_0) == uint255(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))) + (uint255(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24387')) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24387')) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))) + (uint255(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24387')) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24387')) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))) + (uint255(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))) + (uint255(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_0) == stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))) + (stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24387)) + (3 * uint256(stor[_24387][address(msg.sender)].field_0))) + (stor[_24387][address(msg.sender)][uint256(stor[_24387][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24387')) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24387')) + (3 * uint256(stor[_24387][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24392 = mem[64]
                                        _24393 = sha3(mem[mem[64] len _20047 + _19995 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24393
                                        mem[64] = mem[64] + 96
                                        mem[_24392] = 96
                                        mem[_24392 + 32] = block.timestamp
                                        mem[_24392 + 64] = block.timestamp
                                        uint256(stor[_24393][address(msg.sender)].field_0)++
                                        if bool(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_0) == uint255(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))) + (uint255(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24393')) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24393')) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))) + (uint255(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24393')) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24393')) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))) + (uint255(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))) + (uint255(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_0) == stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))) + (stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24393)) + (3 * uint256(stor[_24393][address(msg.sender)].field_0))) + (stor[_24393][address(msg.sender)][uint256(stor[_24393][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24393')) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24393')) + (3 * uint256(stor[_24393][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                    else:
                        uint8(stor28.field_0) = 1
                        if ext_call.return_data[0] and futurFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 2
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 160] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 192] = ext_call.return_data[12 len 20]
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = _uniswapV2RouterAddress
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * futurFee / 100
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(return_data.size) + 64]
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 224] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] * futurFee / 100
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 260] = 0
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 292] = 160
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 388] = 2
                        idx = 0
                        s = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 420
                        t = ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 160
                        while idx < mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 324] = this.address
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 356] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len ceil32(arg1.length) + (10 * ceil32(return_data.size)) + -mem[64] + 480]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if eth.balance(this.address) < eth.balance(this.address):
                            revert with 0, 17
                        call futurUsePoolAddress with:
                             gas 2300 wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if ext_call.return_data[0] and rewardsFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        mem[mem[64] + 4] = distributionPoolAddress
                        mem[mem[64] + 36] = ext_call.return_data[0] * rewardsFee / 100
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args distributionPoolAddress, ext_call.return_data[0] * rewardsFee / 100
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11236 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_11236] == bool(mem[_11236])
                        if ext_call.return_data[0] and liquidityPoolFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        if ext_call.return_data[0] * liquidityPoolFee / 100 < ext_call.return_data[0] * liquidityPoolFee / 100 / 2:
                            revert with 0, 17
                        _11630 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        mem[_11630 + 32 len 64] = call.data[calldata.size len 64]
                        if not mem[_11630]:
                            revert with 0, 50
                        mem[_11630 + 32] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[_11630 + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _11630 + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_11630]:
                            revert with 0, 50
                        mem[_11630 + 64] = ext_call.return_data[12 len 20]
                        mem[_11630 + ceil32(return_data.size) + 100] = _uniswapV2RouterAddress
                        mem[_11630 + ceil32(return_data.size) + 132] = ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        mem[_11630 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _11630 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_11630 + (2 * ceil32(return_data.size)) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[_11630 + (2 * ceil32(return_data.size)) + 100] = ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        mem[_11630 + (2 * ceil32(return_data.size)) + 132] = 0
                        mem[_11630 + (2 * ceil32(return_data.size)) + 164] = 160
                        mem[_11630 + (2 * ceil32(return_data.size)) + 260] = mem[_11630]
                        idx = 0
                        s = _11630 + (2 * ceil32(return_data.size)) + 292
                        t = _11630 + 32
                        while idx < mem[_11630]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_11630 + (2 * ceil32(return_data.size)) + 196] = this.address
                        mem[_11630 + (2 * ceil32(return_data.size)) + 228] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                             gas gas_remaining wei
                            args Mask(255, 1, ext_call.return_data[0] * liquidityPoolFee / 100), 0, 160, address(this.address), block.timestamp, mem[_11630 + (2 * ceil32(return_data.size)) + 260 len (32 * mem[_11630]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if eth.balance(this.address) < eth.balance(this.address):
                            revert with 0, 17
                        mem[_11630 + (2 * ceil32(return_data.size)) + 100] = _uniswapV2RouterAddress
                        mem[_11630 + (2 * ceil32(return_data.size)) + 132] = (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        mem[_11630 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_11630 + (4 * ceil32(return_data.size)) + 164] = 0
                        mem[_11630 + (4 * ceil32(return_data.size)) + 196] = 0
                        mem[_11630 + (4 * ceil32(return_data.size)) + 228] = sub_2a607841Address
                        mem[_11630 + (4 * ceil32(return_data.size)) + 260] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                             gas gas_remaining wei
                            args sub_9cfccb46Address, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2), 0, 0, sub_2a607841Address, block.timestamp
                        mem[_11630 + (4 * ceil32(return_data.size)) + 96 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        mem[_11630 + (6 * ceil32(return_data.size)) + 128] = 0
                        mem[_11630 + (6 * ceil32(return_data.size)) + 160] = (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        emit SwapAndLiquify(Mask(255, 1, ext_call.return_data[0] * liquidityPoolFee / 100), 0, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2));
                        mem[_11630 + (6 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(sub_9cfccb46Address)
                        staticcall sub_9cfccb46Address.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_11630 + (6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_11630 + (7 * ceil32(return_data.size)) + 96] = 2
                        mem[_11630 + (7 * ceil32(return_data.size)) + 128] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[_11630 + (7 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_11630 + (7 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[_11630 + (8 * ceil32(return_data.size)) + 196] = _uniswapV2RouterAddress
                        mem[_11630 + (8 * ceil32(return_data.size)) + 228] = ext_call.return_data[0]
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, ext_call.return_data[0]
                        mem[_11630 + (8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _11630 + (10 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_11630 + (10 * ceil32(return_data.size)) + 192] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[_11630 + (10 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                        mem[_11630 + (10 * ceil32(return_data.size)) + 228] = 0
                        mem[_11630 + (10 * ceil32(return_data.size)) + 260] = 160
                        mem[_11630 + (10 * ceil32(return_data.size)) + 356] = 2
                        idx = 0
                        s = _11630 + (10 * ceil32(return_data.size)) + 388
                        t = _11630 + (7 * ceil32(return_data.size)) + 128
                        while idx < mem[_11630 + (7 * ceil32(return_data.size)) + 96]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_11630 + (10 * ceil32(return_data.size)) + 292] = this.address
                        mem[_11630 + (10 * ceil32(return_data.size)) + 324] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11630 + (10 * ceil32(return_data.size)) + (32 * mem[_11630 + (7 * ceil32(return_data.size)) + 96]) + -mem[64] + 384]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        uint8(stor28.field_0) = 0
                        mem[mem[64]] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 7
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = mem[96]
                        mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                        if ceil32(mem[96]) <= mem[96]:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                            mem[mem[64]] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            _24554 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_24554] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[mem[64]] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 7
                            mem[mem[64] + 36] = 64
                            mem[mem[64] + 68] = mem[96]
                            mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                            if ceil32(mem[96]) <= mem[96]:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29518 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29518]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29518]] += arg2
                                if totalReleased[mem[_29518]] > released[mem[_29518]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30526 = mem[64]
                                    _30542 = mem[96]
                                    s = 0
                                    while s < _30542:
                                        mem[s + _30526] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30542 + _30526] = 11
                                    if ceil32(_30542) <= _30542:
                                        _31958 = mem[64]
                                        _31959 = sha3(mem[mem[64] len _30542 + _30526 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31959
                                        mem[64] = mem[64] + 96
                                        mem[_31958] = 96
                                        mem[_31958 + 32] = block.timestamp
                                        mem[_31958 + 64] = block.timestamp
                                        uint256(stor[_31959][address(msg.sender)].field_0)++
                                        if bool(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_0) == uint255(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))) + (uint255(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31959')) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31959')) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))) + (uint255(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31959')) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31959')) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))) + (uint255(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))) + (uint255(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_0) == stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))) + (stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31959)) + (3 * uint256(stor[_31959][address(msg.sender)].field_0))) + (stor[_31959][address(msg.sender)][uint256(stor[_31959][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31959')) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31959')) + (3 * uint256(stor[_31959][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31964 = mem[64]
                                        _31965 = sha3(mem[mem[64] len _30542 + _30526 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31965
                                        mem[64] = mem[64] + 96
                                        mem[_31964] = 96
                                        mem[_31964 + 32] = block.timestamp
                                        mem[_31964 + 64] = block.timestamp
                                        uint256(stor[_31965][address(msg.sender)].field_0)++
                                        if bool(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_0) == uint255(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))) + (uint255(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31965')) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31965')) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))) + (uint255(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31965')) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31965')) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))) + (uint255(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))) + (uint255(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_0) == stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))) + (stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31965)) + (3 * uint256(stor[_31965][address(msg.sender)].field_0))) + (stor[_31965][address(msg.sender)][uint256(stor[_31965][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31965')) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31965')) + (3 * uint256(stor[_31965][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[mem[96] + mem[64] + 100] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29519 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29519]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29519]] += arg2
                                if totalReleased[mem[_29519]] > released[mem[_29519]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30527 = mem[64]
                                    _30543 = mem[96]
                                    s = 0
                                    while s < _30543:
                                        mem[s + _30527] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30543 + _30527] = 11
                                    if ceil32(_30543) <= _30543:
                                        _31970 = mem[64]
                                        _31971 = sha3(mem[mem[64] len _30543 + _30527 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31971
                                        mem[64] = mem[64] + 96
                                        mem[_31970] = 96
                                        mem[_31970 + 32] = block.timestamp
                                        mem[_31970 + 64] = block.timestamp
                                        uint256(stor[_31971][address(msg.sender)].field_0)++
                                        if bool(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_0) == uint255(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))) + (uint255(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31971')) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31971')) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))) + (uint255(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31971')) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31971')) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))) + (uint255(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))) + (uint255(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_0) == stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))) + (stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31971)) + (3 * uint256(stor[_31971][address(msg.sender)].field_0))) + (stor[_31971][address(msg.sender)][uint256(stor[_31971][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31971')) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31971')) + (3 * uint256(stor[_31971][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31976 = mem[64]
                                        _31977 = sha3(mem[mem[64] len _30543 + _30527 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31977
                                        mem[64] = mem[64] + 96
                                        mem[_31976] = 96
                                        mem[_31976 + 32] = block.timestamp
                                        mem[_31976 + 64] = block.timestamp
                                        uint256(stor[_31977][address(msg.sender)].field_0)++
                                        if bool(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_0) == uint255(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))) + (uint255(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31977')) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31977')) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))) + (uint255(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31977')) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31977')) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))) + (uint255(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))) + (uint255(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_0) == stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))) + (stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31977)) + (3 * uint256(stor[_31977][address(msg.sender)].field_0))) + (stor[_31977][address(msg.sender)][uint256(stor[_31977][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31977')) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31977')) + (3 * uint256(stor[_31977][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                        else:
                            mem[mem[96] + mem[64] + 100] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                            mem[mem[64]] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            _24555 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_24555] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[mem[64]] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 7
                            mem[mem[64] + 36] = 64
                            mem[mem[64] + 68] = mem[96]
                            mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                            if ceil32(mem[96]) <= mem[96]:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29520 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29520]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29520]] += arg2
                                if totalReleased[mem[_29520]] > released[mem[_29520]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30528 = mem[64]
                                    _30544 = mem[96]
                                    s = 0
                                    while s < _30544:
                                        mem[s + _30528] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30544 + _30528] = 11
                                    if ceil32(_30544) <= _30544:
                                        _31982 = mem[64]
                                        _31983 = sha3(mem[mem[64] len _30544 + _30528 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31983
                                        mem[64] = mem[64] + 96
                                        mem[_31982] = 96
                                        mem[_31982 + 32] = block.timestamp
                                        mem[_31982 + 64] = block.timestamp
                                        uint256(stor[_31983][address(msg.sender)].field_0)++
                                        if bool(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_0) == uint255(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))) + (uint255(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31983')) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31983')) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))) + (uint255(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31983')) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31983')) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))) + (uint255(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))) + (uint255(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_0) == stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))) + (stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31983)) + (3 * uint256(stor[_31983][address(msg.sender)].field_0))) + (stor[_31983][address(msg.sender)][uint256(stor[_31983][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31983')) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31983')) + (3 * uint256(stor[_31983][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _31988 = mem[64]
                                        _31989 = sha3(mem[mem[64] len _30544 + _30528 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31989
                                        mem[64] = mem[64] + 96
                                        mem[_31988] = 96
                                        mem[_31988 + 32] = block.timestamp
                                        mem[_31988 + 64] = block.timestamp
                                        uint256(stor[_31989][address(msg.sender)].field_0)++
                                        if bool(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_0) == uint255(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))) + (uint255(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31989')) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31989')) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))) + (uint255(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31989')) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31989')) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))) + (uint255(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))) + (uint255(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_0) == stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))) + (stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31989)) + (3 * uint256(stor[_31989][address(msg.sender)].field_0))) + (stor[_31989][address(msg.sender)][uint256(stor[_31989][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31989')) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31989')) + (3 * uint256(stor[_31989][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[mem[96] + mem[64] + 100] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29521 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29521]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29521]] += arg2
                                if totalReleased[mem[_29521]] > released[mem[_29521]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30529 = mem[64]
                                    _30545 = mem[96]
                                    s = 0
                                    while s < _30545:
                                        mem[s + _30529] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30545 + _30529] = 11
                                    if ceil32(_30545) <= _30545:
                                        _31994 = mem[64]
                                        _31995 = sha3(mem[mem[64] len _30545 + _30529 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _31995
                                        mem[64] = mem[64] + 96
                                        mem[_31994] = 96
                                        mem[_31994 + 32] = block.timestamp
                                        mem[_31994 + 64] = block.timestamp
                                        uint256(stor[_31995][address(msg.sender)].field_0)++
                                        if bool(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_0) == uint255(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))) + (uint255(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31995')) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31995')) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))) + (uint255(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31995')) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31995')) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))) + (uint255(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))) + (uint255(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_0) == stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))) + (stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _31995)) + (3 * uint256(stor[_31995][address(msg.sender)].field_0))) + (stor[_31995][address(msg.sender)][uint256(stor[_31995][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31995')) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_31995')) + (3 * uint256(stor[_31995][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _32000 = mem[64]
                                        _32001 = sha3(mem[mem[64] len _30545 + _30529 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _32001
                                        mem[64] = mem[64] + 96
                                        mem[_32000] = 96
                                        mem[_32000 + 32] = block.timestamp
                                        mem[_32000 + 64] = block.timestamp
                                        uint256(stor[_32001][address(msg.sender)].field_0)++
                                        if bool(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_0) == uint255(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))) + (uint255(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32001')) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32001')) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))) + (uint255(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32001')) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32001')) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))) + (uint255(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))) + (uint255(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_0) == stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))) + (stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32001)) + (3 * uint256(stor[_32001][address(msg.sender)].field_0))) + (stor[_32001][address(msg.sender)][uint256(stor[_32001][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32001')) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32001')) + (3 * uint256(stor[_32001][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
        else:
            mem[arg1.length + ceil32(arg1.length) + ceil32(return_data.size) + 228] = 0
            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                 gas gas_remaining wei
                args 7, Array(len=arg1.length, data=arg1[all])
            mem[ceil32(arg1.length) + ceil32(return_data.size) + 128] = delegate.return_data[0]
            if not delegate.return_code:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if stor1[delegate.return_data[0]] and arg2 > -1 / stor1[delegate.return_data[0]]:
                revert with 0, 17
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 132] = msg.sender
            require ext_code.size(sub_9cfccb46Address)
            staticcall sub_9cfccb46Address.0x70a08231 with:
                    gas gas_remaining wei
                   args msg.sender
            mem[ceil32(arg1.length) + (2 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < stor1[delegate.return_data[0]] * arg2:
                revert with 0, 'Balance too low for creation.'
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 132] = msg.sender
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 164] = this.address
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 196] = stor1[delegate.return_data[0]] * arg2
            require ext_code.size(sub_9cfccb46Address)
            call sub_9cfccb46Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor1[delegate.return_data[0]] * arg2
            mem[ceil32(arg1.length) + (4 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            mem[ceil32(arg1.length) + (6 * ceil32(return_data.size)) + 132] = this.address
            require ext_code.size(sub_9cfccb46Address)
            staticcall sub_9cfccb46Address.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[ceil32(arg1.length) + (6 * ceil32(return_data.size)) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] < swapTokensAmount:
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                if ceil32(arg1.length) <= arg1.length:
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=arg1.length, data=arg1[all])
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if delegate.return_data[0] < 0:
                        revert with 0, '_createNodes: nodeTypeName does not exist'
                    if arg2 <= 0:
                        revert with 0, '_createNodes: count cannot be less than 1.'
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19997 = mem[64]
                            _20049 = mem[96]
                            s = 0
                            while s < _20049:
                                mem[s + _19997] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20049 + _19997] = 11
                            if ceil32(_20049) <= _20049:
                                _24398 = mem[64]
                                _24399 = sha3(mem[mem[64] len _20049 + _19997 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24399
                                mem[64] = mem[64] + 96
                                mem[_24398] = 96
                                mem[_24398 + 32] = block.timestamp
                                mem[_24398 + 64] = block.timestamp
                                uint256(stor[_24399][address(msg.sender)].field_0)++
                                if bool(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_0) == uint255(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))) + (uint255(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24399')) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24399')) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))) + (uint255(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24399')) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24399')) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))) + (uint255(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))) + (uint255(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_0) == stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))) + (stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24399)) + (3 * uint256(stor[_24399][address(msg.sender)].field_0))) + (stor[_24399][address(msg.sender)][uint256(stor[_24399][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24399')) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24399')) + (3 * uint256(stor[_24399][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24404 = mem[64]
                                _24405 = sha3(mem[mem[64] len _20049 + _19997 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24405
                                mem[64] = mem[64] + 96
                                mem[_24404] = 96
                                mem[_24404 + 32] = block.timestamp
                                mem[_24404 + 64] = block.timestamp
                                uint256(stor[_24405][address(msg.sender)].field_0)++
                                if bool(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_0) == uint255(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))) + (uint255(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24405')) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24405')) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))) + (uint255(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24405')) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24405')) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))) + (uint255(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))) + (uint255(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_0) == stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))) + (stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24405)) + (3 * uint256(stor[_24405][address(msg.sender)].field_0))) + (stor[_24405][address(msg.sender)][uint256(stor[_24405][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24405')) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24405')) + (3 * uint256(stor[_24405][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19998 = mem[64]
                            _20050 = mem[96]
                            s = 0
                            while s < _20050:
                                mem[s + _19998] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20050 + _19998] = 11
                            if ceil32(_20050) <= _20050:
                                _24410 = mem[64]
                                _24411 = sha3(mem[mem[64] len _20050 + _19998 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24411
                                mem[64] = mem[64] + 96
                                mem[_24410] = 96
                                mem[_24410 + 32] = block.timestamp
                                mem[_24410 + 64] = block.timestamp
                                uint256(stor[_24411][address(msg.sender)].field_0)++
                                if bool(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_0) == uint255(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))) + (uint255(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24411')) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24411')) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))) + (uint255(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24411')) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24411')) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))) + (uint255(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))) + (uint255(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_0) == stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))) + (stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24411)) + (3 * uint256(stor[_24411][address(msg.sender)].field_0))) + (stor[_24411][address(msg.sender)][uint256(stor[_24411][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24411')) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24411')) + (3 * uint256(stor[_24411][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24416 = mem[64]
                                _24417 = sha3(mem[mem[64] len _20050 + _19998 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24417
                                mem[64] = mem[64] + 96
                                mem[_24416] = 96
                                mem[_24416 + 32] = block.timestamp
                                mem[_24416 + 64] = block.timestamp
                                uint256(stor[_24417][address(msg.sender)].field_0)++
                                if bool(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_0) == uint255(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))) + (uint255(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24417')) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24417')) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))) + (uint255(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24417')) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24417')) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))) + (uint255(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))) + (uint255(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_0) == stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))) + (stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24417)) + (3 * uint256(stor[_24417][address(msg.sender)].field_0))) + (stor[_24417][address(msg.sender)][uint256(stor[_24417][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24417')) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24417')) + (3 * uint256(stor[_24417][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                else:
                    mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                    require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                    delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                         gas gas_remaining wei
                        args 7, Array(len=arg1.length, data=arg1[all])
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                    if not delegate.return_code:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if delegate.return_data[0] < 0:
                        revert with 0, '_createNodes: nodeTypeName does not exist'
                    if arg2 <= 0:
                        revert with 0, '_createNodes: count cannot be less than 1.'
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _19999 = mem[64]
                            _20051 = mem[96]
                            s = 0
                            while s < _20051:
                                mem[s + _19999] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20051 + _19999] = 11
                            if ceil32(_20051) <= _20051:
                                _24422 = mem[64]
                                _24423 = sha3(mem[mem[64] len _20051 + _19999 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24423
                                mem[64] = mem[64] + 96
                                mem[_24422] = 96
                                mem[_24422 + 32] = block.timestamp
                                mem[_24422 + 64] = block.timestamp
                                uint256(stor[_24423][address(msg.sender)].field_0)++
                                if bool(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_0) == uint255(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))) + (uint255(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24423')) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24423')) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))) + (uint255(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24423')) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24423')) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))) + (uint255(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))) + (uint255(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_0) == stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))) + (stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24423)) + (3 * uint256(stor[_24423][address(msg.sender)].field_0))) + (stor[_24423][address(msg.sender)][uint256(stor[_24423][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24423')) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24423')) + (3 * uint256(stor[_24423][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24428 = mem[64]
                                _24429 = sha3(mem[mem[64] len _20051 + _19999 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24429
                                mem[64] = mem[64] + 96
                                mem[_24428] = 96
                                mem[_24428 + 32] = block.timestamp
                                mem[_24428 + 64] = block.timestamp
                                uint256(stor[_24429][address(msg.sender)].field_0)++
                                if bool(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_0) == uint255(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))) + (uint255(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24429')) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24429')) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))) + (uint255(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24429')) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24429')) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))) + (uint255(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))) + (uint255(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_0) == stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))) + (stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24429)) + (3 * uint256(stor[_24429][address(msg.sender)].field_0))) + (stor[_24429][address(msg.sender)][uint256(stor[_24429][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24429')) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24429')) + (3 * uint256(stor[_24429][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                        require return_data.size >= 32
                        if totalReleased[delegate.return_data[0]] > !arg2:
                            revert with 0, 17
                        totalReleased[delegate.return_data[0]] += arg2
                        if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                            revert with 0, 'Max already reached'
                        idx = 0
                        while idx < arg2:
                            _20000 = mem[64]
                            _20052 = mem[96]
                            s = 0
                            while s < _20052:
                                mem[s + _20000] = mem[s + 128]
                                s = s + 32
                                continue 
                            mem[_20052 + _20000] = 11
                            if ceil32(_20052) <= _20052:
                                _24434 = mem[64]
                                _24435 = sha3(mem[mem[64] len _20052 + _20000 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24435
                                mem[64] = mem[64] + 96
                                mem[_24434] = 96
                                mem[_24434 + 32] = block.timestamp
                                mem[_24434 + 64] = block.timestamp
                                uint256(stor[_24435][address(msg.sender)].field_0)++
                                if bool(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_0) == uint255(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))) + (uint255(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24435')) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24435')) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))) + (uint255(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24435')) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24435')) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))) + (uint255(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))) + (uint255(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_0) == stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))) + (stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24435)) + (3 * uint256(stor[_24435][address(msg.sender)].field_0))) + (stor[_24435][address(msg.sender)][uint256(stor[_24435][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24435')) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24435')) + (3 * uint256(stor[_24435][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            else:
                                _24440 = mem[64]
                                _24441 = sha3(mem[mem[64] len _20052 + _20000 + -mem[64] + 32])
                                mem[0] = msg.sender
                                mem[32] = _24441
                                mem[64] = mem[64] + 96
                                mem[_24440] = 96
                                mem[_24440 + 32] = block.timestamp
                                mem[_24440 + 64] = block.timestamp
                                uint256(stor[_24441][address(msg.sender)].field_0)++
                                if bool(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_0):
                                    if bool(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_0) == uint255(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_1) < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))) + (uint255(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24441')) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24441')) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    uint256(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))) + (uint255(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24441')) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24441')) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))) + (uint255(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                        revert with 0, 17
                                    s = sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))) + (uint255(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                    continue 
                                if bool(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_0) == stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                    revert with 0, 34
                                mem[0] = sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))
                                if not mem[96]:
                                    uint256(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_0) = 0
                                    s = sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)))
                                    while sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))) + (stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                else:
                                    uint256(stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                    t = sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)))
                                    s = 128
                                    while mem[96] + 128 > s:
                                        uint256(stor[t].field_0) = mem[s]
                                        t = t + 1
                                        s = s + 32
                                        continue 
                                    s = sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                    while sha3(sha3(sha3(address(msg.sender), _24441)) + (3 * uint256(stor[_24441][address(msg.sender)].field_0))) + (stor[_24441][address(msg.sender)][uint256(stor[_24441][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                        uint256(stor[s].field_0) = 0
                                        s = s + 1
                                        continue 
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24441')) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24441')) + (3 * uint256(stor[_24441][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
            else:
                if not uint8(stor28.field_8):
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                    mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                    if ceil32(arg1.length) <= arg1.length:
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if delegate.return_data[0] < 0:
                            revert with 0, '_createNodes: nodeTypeName does not exist'
                        if arg2 <= 0:
                            revert with 0, '_createNodes: count cannot be less than 1.'
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _20001 = mem[64]
                                _20053 = mem[96]
                                s = 0
                                while s < _20053:
                                    mem[s + _20001] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20053 + _20001] = 11
                                if ceil32(_20053) <= _20053:
                                    _24446 = mem[64]
                                    _24447 = sha3(mem[mem[64] len _20053 + _20001 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24447
                                    mem[64] = mem[64] + 96
                                    mem[_24446] = 96
                                    mem[_24446 + 32] = block.timestamp
                                    mem[_24446 + 64] = block.timestamp
                                    uint256(stor[_24447][address(msg.sender)].field_0)++
                                    if bool(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_0) == uint255(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))) + (uint255(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24447')) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24447')) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))) + (uint255(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24447')) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24447')) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))) + (uint255(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))) + (uint255(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_0) == stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))) + (stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24447)) + (3 * uint256(stor[_24447][address(msg.sender)].field_0))) + (stor[_24447][address(msg.sender)][uint256(stor[_24447][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24447')) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24447')) + (3 * uint256(stor[_24447][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24452 = mem[64]
                                    _24453 = sha3(mem[mem[64] len _20053 + _20001 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24453
                                    mem[64] = mem[64] + 96
                                    mem[_24452] = 96
                                    mem[_24452 + 32] = block.timestamp
                                    mem[_24452 + 64] = block.timestamp
                                    uint256(stor[_24453][address(msg.sender)].field_0)++
                                    if bool(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_0) == uint255(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))) + (uint255(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24453')) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24453')) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))) + (uint255(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24453')) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24453')) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))) + (uint255(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))) + (uint255(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_0) == stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))) + (stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24453)) + (3 * uint256(stor[_24453][address(msg.sender)].field_0))) + (stor[_24453][address(msg.sender)][uint256(stor[_24453][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24453')) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24453')) + (3 * uint256(stor[_24453][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _20002 = mem[64]
                                _20054 = mem[96]
                                s = 0
                                while s < _20054:
                                    mem[s + _20002] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20054 + _20002] = 11
                                if ceil32(_20054) <= _20054:
                                    _24458 = mem[64]
                                    _24459 = sha3(mem[mem[64] len _20054 + _20002 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24459
                                    mem[64] = mem[64] + 96
                                    mem[_24458] = 96
                                    mem[_24458 + 32] = block.timestamp
                                    mem[_24458 + 64] = block.timestamp
                                    uint256(stor[_24459][address(msg.sender)].field_0)++
                                    if bool(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_0) == uint255(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))) + (uint255(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24459')) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24459')) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))) + (uint255(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24459')) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24459')) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))) + (uint255(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))) + (uint255(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_0) == stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))) + (stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24459)) + (3 * uint256(stor[_24459][address(msg.sender)].field_0))) + (stor[_24459][address(msg.sender)][uint256(stor[_24459][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24459')) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24459')) + (3 * uint256(stor[_24459][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24464 = mem[64]
                                    _24465 = sha3(mem[mem[64] len _20054 + _20002 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24465
                                    mem[64] = mem[64] + 96
                                    mem[_24464] = 96
                                    mem[_24464 + 32] = block.timestamp
                                    mem[_24464 + 64] = block.timestamp
                                    uint256(stor[_24465][address(msg.sender)].field_0)++
                                    if bool(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_0) == uint255(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))) + (uint255(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24465')) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24465')) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))) + (uint255(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24465')) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24465')) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))) + (uint255(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))) + (uint255(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_0) == stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))) + (stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24465)) + (3 * uint256(stor[_24465][address(msg.sender)].field_0))) + (stor[_24465][address(msg.sender)][uint256(stor[_24465][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24465')) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24465')) + (3 * uint256(stor[_24465][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                    else:
                        mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                        require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                        delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                             gas gas_remaining wei
                            args 7, Array(len=arg1.length, data=arg1[all])
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                        if not delegate.return_code:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if delegate.return_data[0] < 0:
                            revert with 0, '_createNodes: nodeTypeName does not exist'
                        if arg2 <= 0:
                            revert with 0, '_createNodes: count cannot be less than 1.'
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _20003 = mem[64]
                                _20055 = mem[96]
                                s = 0
                                while s < _20055:
                                    mem[s + _20003] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20055 + _20003] = 11
                                if ceil32(_20055) <= _20055:
                                    _24470 = mem[64]
                                    _24471 = sha3(mem[mem[64] len _20055 + _20003 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24471
                                    mem[64] = mem[64] + 96
                                    mem[_24470] = 96
                                    mem[_24470 + 32] = block.timestamp
                                    mem[_24470 + 64] = block.timestamp
                                    uint256(stor[_24471][address(msg.sender)].field_0)++
                                    if bool(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_0) == uint255(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))) + (uint255(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24471')) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24471')) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))) + (uint255(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24471')) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24471')) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))) + (uint255(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))) + (uint255(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_0) == stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))) + (stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24471)) + (3 * uint256(stor[_24471][address(msg.sender)].field_0))) + (stor[_24471][address(msg.sender)][uint256(stor[_24471][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24471')) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24471')) + (3 * uint256(stor[_24471][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24476 = mem[64]
                                    _24477 = sha3(mem[mem[64] len _20055 + _20003 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24477
                                    mem[64] = mem[64] + 96
                                    mem[_24476] = 96
                                    mem[_24476 + 32] = block.timestamp
                                    mem[_24476 + 64] = block.timestamp
                                    uint256(stor[_24477][address(msg.sender)].field_0)++
                                    if bool(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_0) == uint255(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))) + (uint255(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24477')) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24477')) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))) + (uint255(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24477')) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24477')) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))) + (uint255(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))) + (uint255(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_0) == stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))) + (stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24477)) + (3 * uint256(stor[_24477][address(msg.sender)].field_0))) + (stor[_24477][address(msg.sender)][uint256(stor[_24477][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24477')) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24477')) + (3 * uint256(stor[_24477][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                            require return_data.size >= 32
                            if totalReleased[delegate.return_data[0]] > !arg2:
                                revert with 0, 17
                            totalReleased[delegate.return_data[0]] += arg2
                            if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                revert with 0, 'Max already reached'
                            idx = 0
                            while idx < arg2:
                                _20004 = mem[64]
                                _20056 = mem[96]
                                s = 0
                                while s < _20056:
                                    mem[s + _20004] = mem[s + 128]
                                    s = s + 32
                                    continue 
                                mem[_20056 + _20004] = 11
                                if ceil32(_20056) <= _20056:
                                    _24482 = mem[64]
                                    _24483 = sha3(mem[mem[64] len _20056 + _20004 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24483
                                    mem[64] = mem[64] + 96
                                    mem[_24482] = 96
                                    mem[_24482 + 32] = block.timestamp
                                    mem[_24482 + 64] = block.timestamp
                                    uint256(stor[_24483][address(msg.sender)].field_0)++
                                    if bool(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_0) == uint255(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))) + (uint255(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24483')) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24483')) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))) + (uint255(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24483')) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24483')) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))) + (uint255(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))) + (uint255(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_0) == stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))) + (stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24483)) + (3 * uint256(stor[_24483][address(msg.sender)].field_0))) + (stor[_24483][address(msg.sender)][uint256(stor[_24483][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24483')) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24483')) + (3 * uint256(stor[_24483][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                else:
                                    _24488 = mem[64]
                                    _24489 = sha3(mem[mem[64] len _20056 + _20004 + -mem[64] + 32])
                                    mem[0] = msg.sender
                                    mem[32] = _24489
                                    mem[64] = mem[64] + 96
                                    mem[_24488] = 96
                                    mem[_24488 + 32] = block.timestamp
                                    mem[_24488 + 64] = block.timestamp
                                    uint256(stor[_24489][address(msg.sender)].field_0)++
                                    if bool(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_0):
                                        if bool(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_0) == uint255(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_1) < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))) + (uint255(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24489')) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24489')) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if idx == -1:
                                                revert with 0, 17
                                            idx = idx + 1
                                            continue 
                                        uint256(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))) + (uint255(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24489')) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24489')) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                        if sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))) + (uint255(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                            revert with 0, 17
                                        s = sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))) + (uint255(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                        continue 
                                    if bool(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_0) == stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                        revert with 0, 34
                                    mem[0] = sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))
                                    if not mem[96]:
                                        uint256(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_0) = 0
                                        s = sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)))
                                        while sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))) + (stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    else:
                                        uint256(stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                        t = sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)))
                                        s = 128
                                        while mem[96] + 128 > s:
                                            uint256(stor[t].field_0) = mem[s]
                                            t = t + 1
                                            s = s + 32
                                            continue 
                                        s = sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                        while sha3(sha3(sha3(address(msg.sender), _24489)) + (3 * uint256(stor[_24489][address(msg.sender)].field_0))) + (stor[_24489][address(msg.sender)][uint256(stor[_24489][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                            uint256(stor[s].field_0) = 0
                                            s = s + 1
                                            continue 
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24489')) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                    uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24489')) + (3 * uint256(stor[_24489][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                else:
                    if uint8(stor28.field_0):
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 132] = 7
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 164] = 64
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 196] = arg1.length
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                        if ceil32(arg1.length) <= arg1.length:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            if ceil32(arg1.length) <= arg1.length:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _20005 = mem[64]
                                    _20057 = mem[96]
                                    s = 0
                                    while s < _20057:
                                        mem[s + _20005] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20057 + _20005] = 11
                                    if ceil32(_20057) <= _20057:
                                        _24494 = mem[64]
                                        _24495 = sha3(mem[mem[64] len _20057 + _20005 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24495
                                        mem[64] = mem[64] + 96
                                        mem[_24494] = 96
                                        mem[_24494 + 32] = block.timestamp
                                        mem[_24494 + 64] = block.timestamp
                                        uint256(stor[_24495][address(msg.sender)].field_0)++
                                        if bool(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_0) == uint255(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))) + (uint255(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24495')) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24495')) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))) + (uint255(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24495')) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24495')) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))) + (uint255(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))) + (uint255(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_0) == stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))) + (stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24495)) + (3 * uint256(stor[_24495][address(msg.sender)].field_0))) + (stor[_24495][address(msg.sender)][uint256(stor[_24495][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24495')) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24495')) + (3 * uint256(stor[_24495][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24500 = mem[64]
                                        _24501 = sha3(mem[mem[64] len _20057 + _20005 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24501
                                        mem[64] = mem[64] + 96
                                        mem[_24500] = 96
                                        mem[_24500 + 32] = block.timestamp
                                        mem[_24500 + 64] = block.timestamp
                                        uint256(stor[_24501][address(msg.sender)].field_0)++
                                        if bool(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_0) == uint255(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))) + (uint255(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24501')) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24501')) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))) + (uint255(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24501')) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24501')) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))) + (uint255(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))) + (uint255(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_0) == stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))) + (stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24501)) + (3 * uint256(stor[_24501][address(msg.sender)].field_0))) + (stor[_24501][address(msg.sender)][uint256(stor[_24501][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24501')) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24501')) + (3 * uint256(stor[_24501][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _20006 = mem[64]
                                    _20058 = mem[96]
                                    s = 0
                                    while s < _20058:
                                        mem[s + _20006] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20058 + _20006] = 11
                                    if ceil32(_20058) <= _20058:
                                        _24506 = mem[64]
                                        _24507 = sha3(mem[mem[64] len _20058 + _20006 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24507
                                        mem[64] = mem[64] + 96
                                        mem[_24506] = 96
                                        mem[_24506 + 32] = block.timestamp
                                        mem[_24506 + 64] = block.timestamp
                                        uint256(stor[_24507][address(msg.sender)].field_0)++
                                        if bool(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_0) == uint255(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))) + (uint255(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24507')) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24507')) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))) + (uint255(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24507')) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24507')) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))) + (uint255(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))) + (uint255(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_0) == stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))) + (stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24507)) + (3 * uint256(stor[_24507][address(msg.sender)].field_0))) + (stor[_24507][address(msg.sender)][uint256(stor[_24507][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24507')) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24507')) + (3 * uint256(stor[_24507][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24512 = mem[64]
                                        _24513 = sha3(mem[mem[64] len _20058 + _20006 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24513
                                        mem[64] = mem[64] + 96
                                        mem[_24512] = 96
                                        mem[_24512 + 32] = block.timestamp
                                        mem[_24512 + 64] = block.timestamp
                                        uint256(stor[_24513][address(msg.sender)].field_0)++
                                        if bool(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_0) == uint255(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))) + (uint255(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24513')) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24513')) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))) + (uint255(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24513')) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24513')) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))) + (uint255(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))) + (uint255(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_0) == stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))) + (stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24513)) + (3 * uint256(stor[_24513][address(msg.sender)].field_0))) + (stor[_24513][address(msg.sender)][uint256(stor[_24513][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24513')) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24513')) + (3 * uint256(stor[_24513][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                        else:
                            mem[arg1.length + ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 228] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=arg1.length, data=arg1[all])
                            mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if delegate.return_data[0] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 132] = 7
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 164] = 64
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 196] = arg1.length
                            mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
                            if ceil32(arg1.length) <= arg1.length:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _20007 = mem[64]
                                    _20059 = mem[96]
                                    s = 0
                                    while s < _20059:
                                        mem[s + _20007] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20059 + _20007] = 11
                                    if ceil32(_20059) <= _20059:
                                        _24518 = mem[64]
                                        _24519 = sha3(mem[mem[64] len _20059 + _20007 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24519
                                        mem[64] = mem[64] + 96
                                        mem[_24518] = 96
                                        mem[_24518 + 32] = block.timestamp
                                        mem[_24518 + 64] = block.timestamp
                                        uint256(stor[_24519][address(msg.sender)].field_0)++
                                        if bool(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_0) == uint255(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))) + (uint255(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24519')) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24519')) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))) + (uint255(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24519')) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24519')) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))) + (uint255(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))) + (uint255(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_0) == stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))) + (stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24519)) + (3 * uint256(stor[_24519][address(msg.sender)].field_0))) + (stor[_24519][address(msg.sender)][uint256(stor[_24519][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24519')) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24519')) + (3 * uint256(stor[_24519][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24524 = mem[64]
                                        _24525 = sha3(mem[mem[64] len _20059 + _20007 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24525
                                        mem[64] = mem[64] + 96
                                        mem[_24524] = 96
                                        mem[_24524 + 32] = block.timestamp
                                        mem[_24524 + 64] = block.timestamp
                                        uint256(stor[_24525][address(msg.sender)].field_0)++
                                        if bool(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_0) == uint255(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))) + (uint255(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24525')) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24525')) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))) + (uint255(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24525')) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24525')) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))) + (uint255(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))) + (uint255(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_0) == stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))) + (stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24525)) + (3 * uint256(stor[_24525][address(msg.sender)].field_0))) + (stor[_24525][address(msg.sender)][uint256(stor[_24525][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24525')) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24525')) + (3 * uint256(stor[_24525][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[arg1.length + ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=arg1.length, data=arg1[all])
                                mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 128] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 128
                                require return_data.size >= 32
                                if totalReleased[delegate.return_data[0]] > !arg2:
                                    revert with 0, 17
                                totalReleased[delegate.return_data[0]] += arg2
                                if totalReleased[delegate.return_data[0]] > released[delegate.return_data[0]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _20008 = mem[64]
                                    _20060 = mem[96]
                                    s = 0
                                    while s < _20060:
                                        mem[s + _20008] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_20060 + _20008] = 11
                                    if ceil32(_20060) <= _20060:
                                        _24530 = mem[64]
                                        _24531 = sha3(mem[mem[64] len _20060 + _20008 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24531
                                        mem[64] = mem[64] + 96
                                        mem[_24530] = 96
                                        mem[_24530 + 32] = block.timestamp
                                        mem[_24530 + 64] = block.timestamp
                                        uint256(stor[_24531][address(msg.sender)].field_0)++
                                        if bool(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_0) == uint255(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))) + (uint255(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24531')) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24531')) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))) + (uint255(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24531')) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24531')) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))) + (uint255(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))) + (uint255(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_0) == stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))) + (stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24531)) + (3 * uint256(stor[_24531][address(msg.sender)].field_0))) + (stor[_24531][address(msg.sender)][uint256(stor[_24531][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24531')) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24531')) + (3 * uint256(stor[_24531][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _24536 = mem[64]
                                        _24537 = sha3(mem[mem[64] len _20060 + _20008 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _24537
                                        mem[64] = mem[64] + 96
                                        mem[_24536] = 96
                                        mem[_24536 + 32] = block.timestamp
                                        mem[_24536 + 64] = block.timestamp
                                        uint256(stor[_24537][address(msg.sender)].field_0)++
                                        if bool(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_0) == uint255(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))) + (uint255(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24537')) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24537')) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))) + (uint255(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24537')) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24537')) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))) + (uint255(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))) + (uint255(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_0) == stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))) + (stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _24537)) + (3 * uint256(stor[_24537][address(msg.sender)].field_0))) + (stor[_24537][address(msg.sender)][uint256(stor[_24537][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24537')) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_24537')) + (3 * uint256(stor[_24537][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                    else:
                        uint8(stor28.field_0) = 1
                        if ext_call.return_data[0] and futurFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128] = 2
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 160] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 192] = ext_call.return_data[12 len 20]
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228] = _uniswapV2RouterAddress
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] * futurFee / 100
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 228 len ceil32(return_data.size) + 64]
                        mem[ceil32(arg1.length) + (8 * ceil32(return_data.size)) + 224] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 224] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] * futurFee / 100
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 260] = 0
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 292] = 160
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 388] = 2
                        idx = 0
                        s = ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 420
                        t = ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 160
                        while idx < mem[ceil32(arg1.length) + (7 * ceil32(return_data.size)) + 128]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 324] = this.address
                        mem[ceil32(arg1.length) + (10 * ceil32(return_data.size)) + 356] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len ceil32(arg1.length) + (10 * ceil32(return_data.size)) + -mem[64] + 480]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if eth.balance(this.address) < eth.balance(this.address):
                            revert with 0, 17
                        call futurUsePoolAddress with:
                             gas 2300 wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if ext_call.return_data[0] and rewardsFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        mem[mem[64] + 4] = distributionPoolAddress
                        mem[mem[64] + 36] = ext_call.return_data[0] * rewardsFee / 100
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args distributionPoolAddress, ext_call.return_data[0] * rewardsFee / 100
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11237 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_11237] == bool(mem[_11237])
                        if ext_call.return_data[0] and liquidityPoolFee > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        if ext_call.return_data[0] * liquidityPoolFee / 100 < ext_call.return_data[0] * liquidityPoolFee / 100 / 2:
                            revert with 0, 17
                        _11632 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        mem[_11632 + 32 len 64] = call.data[calldata.size len 64]
                        if not mem[_11632]:
                            revert with 0, 50
                        mem[_11632 + 32] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[_11632 + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _11632 + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_11632]:
                            revert with 0, 50
                        mem[_11632 + 64] = ext_call.return_data[12 len 20]
                        mem[_11632 + ceil32(return_data.size) + 100] = _uniswapV2RouterAddress
                        mem[_11632 + ceil32(return_data.size) + 132] = ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        mem[_11632 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _11632 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_11632 + (2 * ceil32(return_data.size)) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[_11632 + (2 * ceil32(return_data.size)) + 100] = ext_call.return_data[0] * liquidityPoolFee / 100 / 2
                        mem[_11632 + (2 * ceil32(return_data.size)) + 132] = 0
                        mem[_11632 + (2 * ceil32(return_data.size)) + 164] = 160
                        mem[_11632 + (2 * ceil32(return_data.size)) + 260] = mem[_11632]
                        idx = 0
                        s = _11632 + (2 * ceil32(return_data.size)) + 292
                        t = _11632 + 32
                        while idx < mem[_11632]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_11632 + (2 * ceil32(return_data.size)) + 196] = this.address
                        mem[_11632 + (2 * ceil32(return_data.size)) + 228] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11632 + (2 * ceil32(return_data.size)) + (32 * mem[_11632]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if eth.balance(this.address) < eth.balance(this.address):
                            revert with 0, 17
                        mem[mem[64] + 4] = _uniswapV2RouterAddress
                        mem[mem[64] + 36] = (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15801 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_15801] == bool(mem[_15801])
                        mem[mem[64] + 68] = 0
                        mem[mem[64] + 100] = 0
                        mem[mem[64] + 132] = sub_2a607841Address
                        mem[mem[64] + 164] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.addLiquidityAVAX(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                             gas gas_remaining wei
                            args sub_9cfccb46Address, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2), 0, 0, sub_2a607841Address, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        mem[mem[64] + 32] = 0
                        mem[mem[64] + 64] = (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2)
                        emit SwapAndLiquify(Mask(255, 1, ext_call.return_data[0] * liquidityPoolFee / 100), 0, (ext_call.return_data[0] * liquidityPoolFee / 100) - (ext_call.return_data[0] * liquidityPoolFee / 100 / 2));
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(sub_9cfccb46Address)
                        staticcall sub_9cfccb46Address.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _17145 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _17437 = mem[_17145]
                        _18404 = mem[64]
                        mem[mem[64]] = 2
                        mem[64] = mem[64] + 96
                        mem[_18404 + 32 len 64] = call.data[calldata.size len 64]
                        if not mem[_18404]:
                            revert with 0, 50
                        mem[_18404 + 32] = sub_9cfccb46Address
                        require ext_code.size(_uniswapV2RouterAddress)
                        staticcall _uniswapV2RouterAddress.WAVAX() with:
                                gas gas_remaining wei
                        mem[_18404 + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _18404 + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_18404]:
                            revert with 0, 50
                        mem[_18404 + 64] = ext_call.return_data[12 len 20]
                        mem[_18404 + ceil32(return_data.size) + 100] = _uniswapV2RouterAddress
                        mem[_18404 + ceil32(return_data.size) + 132] = _17437
                        require ext_code.size(sub_9cfccb46Address)
                        call sub_9cfccb46Address.approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args _uniswapV2RouterAddress, _17437
                        mem[_18404 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _18404 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_18404 + (2 * ceil32(return_data.size)) + 96] = 0x762b156200000000000000000000000000000000000000000000000000000000
                        mem[_18404 + (2 * ceil32(return_data.size)) + 100] = _17437
                        mem[_18404 + (2 * ceil32(return_data.size)) + 132] = 0
                        mem[_18404 + (2 * ceil32(return_data.size)) + 164] = 160
                        mem[_18404 + (2 * ceil32(return_data.size)) + 260] = mem[_18404]
                        idx = 0
                        s = _18404 + (2 * ceil32(return_data.size)) + 292
                        t = _18404 + 32
                        while idx < mem[_18404]:
                            mem[s] = mem[t + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        mem[_18404 + (2 * ceil32(return_data.size)) + 196] = this.address
                        mem[_18404 + (2 * ceil32(return_data.size)) + 228] = block.timestamp
                        require ext_code.size(_uniswapV2RouterAddress)
                        call _uniswapV2RouterAddress.mem[mem[64] len 4] with:
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _18404 + (2 * ceil32(return_data.size)) + (32 * mem[_18404]) + -mem[64] + 288]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        uint8(stor28.field_0) = 0
                        mem[mem[64]] = 0xdf61672000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 7
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = mem[96]
                        mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                        if ceil32(mem[96]) <= mem[96]:
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                            mem[mem[64]] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            _24556 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_24556] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[mem[64]] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 7
                            mem[mem[64] + 36] = 64
                            mem[mem[64] + 68] = mem[96]
                            mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                            if ceil32(mem[96]) <= mem[96]:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29522 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29522]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29522]] += arg2
                                if totalReleased[mem[_29522]] > released[mem[_29522]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30530 = mem[64]
                                    _30546 = mem[96]
                                    s = 0
                                    while s < _30546:
                                        mem[s + _30530] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30546 + _30530] = 11
                                    if ceil32(_30546) <= _30546:
                                        _32006 = mem[64]
                                        _32007 = sha3(mem[mem[64] len _30546 + _30530 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _32007
                                        mem[64] = mem[64] + 96
                                        mem[_32006] = 96
                                        mem[_32006 + 32] = block.timestamp
                                        mem[_32006 + 64] = block.timestamp
                                        uint256(stor[_32007][address(msg.sender)].field_0)++
                                        if bool(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_0) == uint255(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))) + (uint255(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32007')) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32007')) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))) + (uint255(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32007')) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32007')) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))) + (uint255(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))) + (uint255(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_0) == stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))) + (stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32007)) + (3 * uint256(stor[_32007][address(msg.sender)].field_0))) + (stor[_32007][address(msg.sender)][uint256(stor[_32007][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32007')) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32007')) + (3 * uint256(stor[_32007][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _32012 = mem[64]
                                        _32013 = sha3(mem[mem[64] len _30546 + _30530 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _32013
                                        mem[64] = mem[64] + 96
                                        mem[_32012] = 96
                                        mem[_32012 + 32] = block.timestamp
                                        mem[_32012 + 64] = block.timestamp
                                        uint256(stor[_32013][address(msg.sender)].field_0)++
                                        if bool(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_0) == uint255(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))) + (uint255(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32013')) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32013')) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))) + (uint255(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32013')) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32013')) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))) + (uint255(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))) + (uint255(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_0) == stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))) + (stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32013)) + (3 * uint256(stor[_32013][address(msg.sender)].field_0))) + (stor[_32013][address(msg.sender)][uint256(stor[_32013][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32013')) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32013')) + (3 * uint256(stor[_32013][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[mem[96] + mem[64] + 100] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29523 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29523]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29523]] += arg2
                                if totalReleased[mem[_29523]] > released[mem[_29523]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30531 = mem[64]
                                    _30547 = mem[96]
                                    s = 0
                                    while s < _30547:
                                        mem[s + _30531] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30547 + _30531] = 11
                                    if ceil32(_30547) <= _30547:
                                        _32018 = mem[64]
                                        _32019 = sha3(mem[mem[64] len _30547 + _30531 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _32019
                                        mem[64] = mem[64] + 96
                                        mem[_32018] = 96
                                        mem[_32018 + 32] = block.timestamp
                                        mem[_32018 + 64] = block.timestamp
                                        uint256(stor[_32019][address(msg.sender)].field_0)++
                                        if bool(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_0) == uint255(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))) + (uint255(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32019')) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32019')) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))) + (uint255(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32019')) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32019')) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))) + (uint255(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))) + (uint255(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_0) == stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))) + (stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32019)) + (3 * uint256(stor[_32019][address(msg.sender)].field_0))) + (stor[_32019][address(msg.sender)][uint256(stor[_32019][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32019')) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32019')) + (3 * uint256(stor[_32019][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _32024 = mem[64]
                                        _32025 = sha3(mem[mem[64] len _30547 + _30531 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _32025
                                        mem[64] = mem[64] + 96
                                        mem[_32024] = 96
                                        mem[_32024 + 32] = block.timestamp
                                        mem[_32024 + 64] = block.timestamp
                                        uint256(stor[_32025][address(msg.sender)].field_0)++
                                        if bool(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_0) == uint255(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))) + (uint255(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32025')) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32025')) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))) + (uint255(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32025')) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32025')) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))) + (uint255(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))) + (uint255(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_0) == stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))) + (stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32025)) + (3 * uint256(stor[_32025][address(msg.sender)].field_0))) + (stor[_32025][address(msg.sender)][uint256(stor[_32025][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32025')) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32025')) + (3 * uint256(stor[_32025][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                        else:
                            mem[mem[96] + mem[64] + 100] = 0
                            require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                            delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0xdf616720 with:
                                 gas gas_remaining wei
                                args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                            mem[mem[64]] = delegate.return_data[0]
                            if not delegate.return_code:
                                revert with ext_call.return_data[0 len return_data.size]
                            _24557 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            if mem[_24557] < 0:
                                revert with 0, '_createNodes: nodeTypeName does not exist'
                            if arg2 <= 0:
                                revert with 0, '_createNodes: count cannot be less than 1.'
                            mem[mem[64]] = 0x5bce6b3b00000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 7
                            mem[mem[64] + 36] = 64
                            mem[mem[64] + 68] = mem[96]
                            mem[mem[64] + 100 len ceil32(mem[96])] = mem[128 len ceil32(mem[96])]
                            if ceil32(mem[96]) <= mem[96]:
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29524 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29524]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29524]] += arg2
                                if totalReleased[mem[_29524]] > released[mem[_29524]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30532 = mem[64]
                                    _30548 = mem[96]
                                    s = 0
                                    while s < _30548:
                                        mem[s + _30532] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30548 + _30532] = 11
                                    if ceil32(_30548) <= _30548:
                                        _32030 = mem[64]
                                        _32031 = sha3(mem[mem[64] len _30548 + _30532 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _32031
                                        mem[64] = mem[64] + 96
                                        mem[_32030] = 96
                                        mem[_32030 + 32] = block.timestamp
                                        mem[_32030 + 64] = block.timestamp
                                        uint256(stor[_32031][address(msg.sender)].field_0)++
                                        if bool(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_0) == uint255(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))) + (uint255(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32031')) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32031')) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))) + (uint255(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32031')) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32031')) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))) + (uint255(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))) + (uint255(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_0) == stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))) + (stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32031)) + (3 * uint256(stor[_32031][address(msg.sender)].field_0))) + (stor[_32031][address(msg.sender)][uint256(stor[_32031][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32031')) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32031')) + (3 * uint256(stor[_32031][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _32036 = mem[64]
                                        _32037 = sha3(mem[mem[64] len _30548 + _30532 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _32037
                                        mem[64] = mem[64] + 96
                                        mem[_32036] = 96
                                        mem[_32036 + 32] = block.timestamp
                                        mem[_32036 + 64] = block.timestamp
                                        uint256(stor[_32037][address(msg.sender)].field_0)++
                                        if bool(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_0) == uint255(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))) + (uint255(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32037')) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32037')) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))) + (uint255(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32037')) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32037')) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))) + (uint255(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))) + (uint255(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_0) == stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))) + (stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32037)) + (3 * uint256(stor[_32037][address(msg.sender)].field_0))) + (stor[_32037][address(msg.sender)][uint256(stor[_32037][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32037')) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32037')) + (3 * uint256(stor[_32037][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                            else:
                                mem[mem[96] + mem[64] + 100] = 0
                                require ext_code.size(0x98beb09453f3574291e1e1001d5ee386646a58ff)
                                delegate 0x98beb09453f3574291e1e1001d5ee386646a58ff.0x5bce6b3b with:
                                     gas gas_remaining wei
                                    args 7, Array(len=mem[96], data=mem[mem[64] + 100 len ceil32(mem[96])])
                                mem[mem[64]] = delegate.return_data[0]
                                if not delegate.return_code:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _29525 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                if totalReleased[mem[_29525]] > !arg2:
                                    revert with 0, 17
                                totalReleased[mem[_29525]] += arg2
                                if totalReleased[mem[_29525]] > released[mem[_29525]]:
                                    revert with 0, 'Max already reached'
                                idx = 0
                                while idx < arg2:
                                    _30533 = mem[64]
                                    _30549 = mem[96]
                                    s = 0
                                    while s < _30549:
                                        mem[s + _30533] = mem[s + 128]
                                        s = s + 32
                                        continue 
                                    mem[_30549 + _30533] = 11
                                    if ceil32(_30549) <= _30549:
                                        _32042 = mem[64]
                                        _32043 = sha3(mem[mem[64] len _30549 + _30533 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _32043
                                        mem[64] = mem[64] + 96
                                        mem[_32042] = 96
                                        mem[_32042 + 32] = block.timestamp
                                        mem[_32042 + 64] = block.timestamp
                                        uint256(stor[_32043][address(msg.sender)].field_0)++
                                        if bool(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_0) == uint255(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))) + (uint255(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32043')) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32043')) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))) + (uint255(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32043')) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32043')) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))) + (uint255(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))) + (uint255(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_0) == stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))) + (stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32043)) + (3 * uint256(stor[_32043][address(msg.sender)].field_0))) + (stor[_32043][address(msg.sender)][uint256(stor[_32043][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32043')) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32043')) + (3 * uint256(stor[_32043][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    else:
                                        _32048 = mem[64]
                                        _32049 = sha3(mem[mem[64] len _30549 + _30533 + -mem[64] + 32])
                                        mem[0] = msg.sender
                                        mem[32] = _32049
                                        mem[64] = mem[64] + 96
                                        mem[_32048] = 96
                                        mem[_32048 + 32] = block.timestamp
                                        mem[_32048 + 64] = block.timestamp
                                        uint256(stor[_32049][address(msg.sender)].field_0)++
                                        if bool(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_0):
                                            if bool(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_0) == uint255(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_1) < 32:
                                                revert with 0, 34
                                            mem[0] = sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))
                                            if not mem[96]:
                                                uint256(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_0) = 0
                                                s = sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)))
                                                while sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))) + (uint255(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                    uint256(stor[s].field_0) = 0
                                                    s = s + 1
                                                    continue 
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32049')) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                                uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32049')) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                                if idx == -1:
                                                    revert with 0, 17
                                                idx = idx + 1
                                                continue 
                                            uint256(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))) + (uint255(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_1) + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32049')) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                            uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32049')) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                            if sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))) + (uint255(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_1) + 31 / 32) == -1:
                                                revert with 0, 17
                                            s = sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))) + (uint255(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_1) + 31 / 32) + 1
                                            continue 
                                        if bool(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_0) == stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_1 % 128 < 32:
                                            revert with 0, 34
                                        mem[0] = sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))
                                        if not mem[96]:
                                            uint256(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_0) = 0
                                            s = sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)))
                                            while sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))) + (stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        else:
                                            uint256(stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_0) = (2 * mem[96]) + 1
                                            t = sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)))
                                            s = 128
                                            while mem[96] + 128 > s:
                                                uint256(stor[t].field_0) = mem[s]
                                                t = t + 1
                                                s = s + 32
                                                continue 
                                            s = sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))) + (Mask(251, 0, mem[96] + 31) >> 5)
                                            while sha3(sha3(sha3(address(msg.sender), _32049)) + (3 * uint256(stor[_32049][address(msg.sender)].field_0))) + (stor[_32049][address(msg.sender)][uint256(stor[_32049][address(msg.sender)].field_0)].field_1 % 128 + 31 / 32) > s:
                                                uint256(stor[s].field_0) = 0
                                                s = s + 1
                                                continue 
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32049')) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)) + 1].field_0) = block.timestamp
                                        uint256(stor[('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('var', '_32049')) + (3 * uint256(stor[_32049][address(msg.sender)].field_0)) + 2].field_0) = block.timestamp
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
}



}
